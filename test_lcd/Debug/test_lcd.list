
test_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08002704  08002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002854  08002854  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002854  08002854  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002854  08002854  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002854  08002854  00012854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800285c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000010  0800286c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  0800286c  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007552  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001576  00000000  00000000  0002758b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  00028b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  00029260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b9e  00000000  00000000  00029918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bc1  00000000  00000000  000404b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000819b0  00000000  00000000  0004a077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cba27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cd8  00000000  00000000  000cba78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080026ec 	.word	0x080026ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080026ec 	.word	0x080026ec

0800014c <CLCD_Delay>:
//************************** Low Level Function ****************************************************************//
uint8_t currentline;
uint8_t Xcursor,Ycursor,countWriteChar,CurrentWriteChar;
CLCD_I2C_Name LCD1;
static void CLCD_Delay(uint16_t Time)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	4618      	mov	r0, r3
 800015a:	f000 ff1d 	bl	8000f98 <HAL_Delay>
}
 800015e:	bf00      	nop
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}

08000166 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b086      	sub	sp, #24
 800016a:	af02      	add	r7, sp, #8
 800016c:	6078      	str	r0, [r7, #4]
 800016e:	460b      	mov	r3, r1
 8000170:	70fb      	strb	r3, [r7, #3]
 8000172:	4613      	mov	r3, r2
 8000174:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000176:	78fb      	ldrb	r3, [r7, #3]
 8000178:	f023 030f 	bic.w	r3, r3, #15
 800017c:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 800017e:	78fb      	ldrb	r3, [r7, #3]
 8000180:	011b      	lsls	r3, r3, #4
 8000182:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	7adb      	ldrb	r3, [r3, #11]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d007      	beq.n	800019c <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	f043 0308 	orr.w	r3, r3, #8
 8000192:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8000194:	7bbb      	ldrb	r3, [r7, #14]
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 800019c:	78bb      	ldrb	r3, [r7, #2]
 800019e:	2b01      	cmp	r3, #1
 80001a0:	d108      	bne.n	80001b4 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001a2:	7bfb      	ldrb	r3, [r7, #15]
 80001a4:	f043 0301 	orr.w	r3, r3, #1
 80001a8:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001aa:	7bbb      	ldrb	r3, [r7, #14]
 80001ac:	f043 0301 	orr.w	r3, r3, #1
 80001b0:	73bb      	strb	r3, [r7, #14]
 80001b2:	e00a      	b.n	80001ca <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001b4:	78bb      	ldrb	r3, [r7, #2]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d107      	bne.n	80001ca <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	f023 0301 	bic.w	r3, r3, #1
 80001c0:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001c2:	7bbb      	ldrb	r3, [r7, #14]
 80001c4:	f023 0301 	bic.w	r3, r3, #1
 80001c8:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f043 0304 	orr.w	r3, r3, #4
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f7ff ffb9 	bl	800014c <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001da:	7bfb      	ldrb	r3, [r7, #15]
 80001dc:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001de:	7bbb      	ldrb	r3, [r7, #14]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffaf 	bl	800014c <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	6818      	ldr	r0, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	791b      	ldrb	r3, [r3, #4]
 80001fa:	b299      	uxth	r1, r3
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2304      	movs	r3, #4
 8000208:	f001 faf0 	bl	80017ec <HAL_I2C_Master_Transmit>

}
 800020c:	bf00      	nop
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <CLCD_I2C_Init>:
//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	4611      	mov	r1, r2
 8000220:	461a      	mov	r2, r3
 8000222:	460b      	mov	r3, r1
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	4613      	mov	r3, r2
 8000228:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	68ba      	ldr	r2, [r7, #8]
 800022e:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	79fa      	ldrb	r2, [r7, #7]
 8000234:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	79ba      	ldrb	r2, [r7, #6]
 800023a:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	7e3a      	ldrb	r2, [r7, #24]
 8000240:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2228      	movs	r2, #40	; 0x28
 8000246:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2206      	movs	r2, #6
 800024c:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	220c      	movs	r2, #12
 8000252:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	2214      	movs	r2, #20
 8000258:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	2208      	movs	r2, #8
 800025e:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000260:	2032      	movs	r0, #50	; 0x32
 8000262:	f7ff ff73 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000266:	2200      	movs	r2, #0
 8000268:	2133      	movs	r1, #51	; 0x33
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f7ff ff7b 	bl	8000166 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000270:	2200      	movs	r2, #0
 8000272:	2133      	movs	r1, #51	; 0x33
 8000274:	68f8      	ldr	r0, [r7, #12]
 8000276:	f7ff ff76 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800027a:	2005      	movs	r0, #5
 800027c:	f7ff ff66 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000280:	2200      	movs	r2, #0
 8000282:	2132      	movs	r1, #50	; 0x32
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	f7ff ff6e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028a:	2005      	movs	r0, #5
 800028c:	f7ff ff5e 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8000290:	2200      	movs	r2, #0
 8000292:	2120      	movs	r1, #32
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f7ff ff66 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029a:	2005      	movs	r0, #5
 800029c:	f7ff ff56 	bl	800014c <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	79db      	ldrb	r3, [r3, #7]
 80002a4:	2200      	movs	r2, #0
 80002a6:	4619      	mov	r1, r3
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff5c 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	7a1b      	ldrb	r3, [r3, #8]
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f7ff ff55 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	7a5b      	ldrb	r3, [r3, #9]
 80002c0:	2200      	movs	r2, #0
 80002c2:	4619      	mov	r1, r3
 80002c4:	68f8      	ldr	r0, [r7, #12]
 80002c6:	f7ff ff4e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	7a9b      	ldrb	r3, [r3, #10]
 80002ce:	2200      	movs	r2, #0
 80002d0:	4619      	mov	r1, r3
 80002d2:	68f8      	ldr	r0, [r7, #12]
 80002d4:	f7ff ff47 	bl	8000166 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002d8:	2200      	movs	r2, #0
 80002da:	2101      	movs	r1, #1
 80002dc:	68f8      	ldr	r0, [r7, #12]
 80002de:	f7ff ff42 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2102      	movs	r1, #2
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff3d 	bl	8000166 <CLCD_WriteI2C>
}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
 8000300:	4613      	mov	r3, r2
 8000302:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000304:	2300      	movs	r3, #0
 8000306:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	78fa      	ldrb	r2, [r7, #3]
 800030e:	429a      	cmp	r2, r3
 8000310:	d303      	bcc.n	800031a <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	795b      	ldrb	r3, [r3, #5]
 8000316:	3b01      	subs	r3, #1
 8000318:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	799b      	ldrb	r3, [r3, #6]
 800031e:	78ba      	ldrb	r2, [r7, #2]
 8000320:	429a      	cmp	r2, r3
 8000322:	d303      	bcc.n	800032c <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	799b      	ldrb	r3, [r3, #6]
 8000328:	3b01      	subs	r3, #1
 800032a:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 800032c:	78bb      	ldrb	r3, [r7, #2]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d102      	bne.n	8000338 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	e013      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000338:	78bb      	ldrb	r3, [r7, #2]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d103      	bne.n	8000346 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800033e:	78fb      	ldrb	r3, [r7, #3]
 8000340:	3340      	adds	r3, #64	; 0x40
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	e00c      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8000346:	78bb      	ldrb	r3, [r7, #2]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d103      	bne.n	8000354 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x10 + Xpos;
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	3310      	adds	r3, #16
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	e005      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000354:	78bb      	ldrb	r3, [r7, #2]
 8000356:	2b03      	cmp	r3, #3
 8000358:	d102      	bne.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x50 + Xpos;
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	3350      	adds	r3, #80	; 0x50
 800035e:	73fb      	strb	r3, [r7, #15]
	}
	Xcursor = Xpos;
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <CLCD_I2C_SetCursor+0xa4>)
 8000362:	78fb      	ldrb	r3, [r7, #3]
 8000364:	7013      	strb	r3, [r2, #0]

	Ycursor = Ypos;
 8000366:	4a0d      	ldr	r2, [pc, #52]	; (800039c <CLCD_I2C_SetCursor+0xa8>)
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	7013      	strb	r3, [r2, #0]
	currentline = Ycursor;
 800036c:	4b0b      	ldr	r3, [pc, #44]	; (800039c <CLCD_I2C_SetCursor+0xa8>)
 800036e:	781a      	ldrb	r2, [r3, #0]
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <CLCD_I2C_SetCursor+0xac>)
 8000372:	701a      	strb	r2, [r3, #0]
	countWriteChar = Xcursor;
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <CLCD_I2C_SetCursor+0xa4>)
 8000376:	781a      	ldrb	r2, [r3, #0]
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <CLCD_I2C_SetCursor+0xb0>)
 800037a:	701a      	strb	r2, [r3, #0]
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2200      	movs	r2, #0
 8000386:	4619      	mov	r1, r3
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff feec 	bl	8000166 <CLCD_WriteI2C>
}
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000002d 	.word	0x2000002d
 800039c:	2000002e 	.word	0x2000002e
 80003a0:	2000002c 	.word	0x2000002c
 80003a4:	2000002f 	.word	0x2000002f

080003a8 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2201      	movs	r2, #1
 80003b8:	4619      	mov	r1, r3
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f7ff fed3 	bl	8000166 <CLCD_WriteI2C>
	countWriteChar++;
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003ca:	701a      	strb	r2, [r3, #0]
	if (CurrentWriteChar)
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <CLCD_I2C_WriteChar+0x98>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d02b      	beq.n	800042c <CLCD_I2C_WriteChar+0x84>
	{
	if (countWriteChar ==20)
 80003d4:	4b19      	ldr	r3, [pc, #100]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b14      	cmp	r3, #20
 80003da:	d127      	bne.n	800042c <CLCD_I2C_WriteChar+0x84>
	{
	switch(currentline)
 80003dc:	4b19      	ldr	r3, [pc, #100]	; (8000444 <CLCD_I2C_WriteChar+0x9c>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d825      	bhi.n	8000430 <CLCD_I2C_WriteChar+0x88>
 80003e4:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <CLCD_I2C_WriteChar+0x44>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	080003fd 	.word	0x080003fd
 80003f0:	08000409 	.word	0x08000409
 80003f4:	08000415 	.word	0x08000415
 80003f8:	08000421 	.word	0x08000421
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2100      	movs	r1, #0
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 8000402:	f7ff ff77 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 8000406:	e014      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8000408:	2202      	movs	r2, #2
 800040a:	2100      	movs	r1, #0
 800040c:	480e      	ldr	r0, [pc, #56]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 800040e:	f7ff ff71 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 8000412:	e00e      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 8000414:	2203      	movs	r2, #3
 8000416:	2100      	movs	r1, #0
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 800041a:	f7ff ff6b 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 800041e:	e008      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	2100      	movs	r1, #0
 8000424:	4808      	ldr	r0, [pc, #32]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 8000426:	f7ff ff65 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 800042a:	e002      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				default:
								break;
			}
		}
 800042c:	bf00      	nop
 800042e:	e000      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
								break;
 8000430:	bf00      	nop
	}
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	2000002f 	.word	0x2000002f
 8000440:	20000030 	.word	0x20000030
 8000444:	2000002c 	.word	0x2000002c
 8000448:	20000034 	.word	0x20000034

0800044c <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
	while (*String)
 8000456:	e04a      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
	{
	CurrentWriteChar=0;
 8000458:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <CLCD_I2C_WriteString+0xbc>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	e00e      	b.n	8000482 <CLCD_I2C_WriteString+0x36>
		{
			if (*String)
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d012      	beq.n	8000492 <CLCD_I2C_WriteString+0x46>
			{
				CLCD_I2C_WriteChar(LCD, *String++);
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	1c5a      	adds	r2, r3, #1
 8000470:	603a      	str	r2, [r7, #0]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4619      	mov	r1, r3
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f7ff ff96 	bl	80003a8 <CLCD_I2C_WriteChar>
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	3301      	adds	r3, #1
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	7bfa      	ldrb	r2, [r7, #15]
 8000484:	4b21      	ldr	r3, [pc, #132]	; (800050c <CLCD_I2C_WriteString+0xc0>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f1c3 0314 	rsb	r3, r3, #20
 800048c:	429a      	cmp	r2, r3
 800048e:	dbe9      	blt.n	8000464 <CLCD_I2C_WriteString+0x18>
 8000490:	e000      	b.n	8000494 <CLCD_I2C_WriteString+0x48>
			}
			else break;
 8000492:	bf00      	nop
		}
		if (*String)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d02d      	beq.n	80004f8 <CLCD_I2C_WriteString+0xac>
		{
			switch(currentline)
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <CLCD_I2C_WriteString+0xc4>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d823      	bhi.n	80004ec <CLCD_I2C_WriteString+0xa0>
 80004a4:	a201      	add	r2, pc, #4	; (adr r2, 80004ac <CLCD_I2C_WriteString+0x60>)
 80004a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004aa:	bf00      	nop
 80004ac:	080004bd 	.word	0x080004bd
 80004b0:	080004c9 	.word	0x080004c9
 80004b4:	080004d5 	.word	0x080004d5
 80004b8:	080004e1 	.word	0x080004e1
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2100      	movs	r1, #0
 80004c0:	4814      	ldr	r0, [pc, #80]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004c2:	f7ff ff17 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004c6:	e012      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 80004c8:	2202      	movs	r2, #2
 80004ca:	2100      	movs	r1, #0
 80004cc:	4811      	ldr	r0, [pc, #68]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004ce:	f7ff ff11 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004d2:	e00c      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 80004d4:	2203      	movs	r2, #3
 80004d6:	2100      	movs	r1, #0
 80004d8:	480e      	ldr	r0, [pc, #56]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004da:	f7ff ff0b 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004de:	e006      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2100      	movs	r1, #0
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004e6:	f7ff ff05 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004ea:	e000      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				default:
								break;
 80004ec:	bf00      	nop
	while (*String)
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d1b0      	bne.n	8000458 <CLCD_I2C_WriteString+0xc>
 80004f6:	e000      	b.n	80004fa <CLCD_I2C_WriteString+0xae>
			}
		}
		else break;
 80004f8:	bf00      	nop

		}
	CurrentWriteChar=1;
 80004fa:	4b03      	ldr	r3, [pc, #12]	; (8000508 <CLCD_I2C_WriteString+0xbc>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000030 	.word	0x20000030
 800050c:	2000002d 	.word	0x2000002d
 8000510:	2000002c 	.word	0x2000002c
 8000514:	20000034 	.word	0x20000034

08000518 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000520:	2200      	movs	r2, #0
 8000522:	2101      	movs	r1, #1
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff fe1e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800052a:	2005      	movs	r0, #5
 800052c:	f7ff fe0e 	bl	800014c <CLCD_Delay>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <lcd_user_display>:
static INDEX_MODE_TYPEDEF Index_mode = 0;
static uint8_t Status_Display = 0;
static LANGUAGE_TYPEDEF language = VIETNAMESE;

static void lcd_user_display(CLCD_I2C_Name* LCD_user, STATUS_DISPLAY_TYPEDEF status_display)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	70fb      	strb	r3, [r7, #3]
	if(status_display == STATUS_1)
 8000544:	78fb      	ldrb	r3, [r7, #3]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d124      	bne.n	8000594 <lcd_user_display+0x5c>
	{
		// dislay hello ! Status_Display=0
		CLCD_I2C_SetCursor(LCD_user, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f7ff fed0 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 8000554:	4977      	ldr	r1, [pc, #476]	; (8000734 <lcd_user_display+0x1fc>)
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f7ff ff78 	bl	800044c <CLCD_I2C_WriteString>

		CLCD_I2C_SetCursor(LCD_user, 3, 1);
 800055c:	2201      	movs	r2, #1
 800055e:	2103      	movs	r1, #3
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f7ff fec7 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"KHOA CO KHI");
 8000566:	4974      	ldr	r1, [pc, #464]	; (8000738 <lcd_user_display+0x200>)
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f7ff ff6f 	bl	800044c <CLCD_I2C_WriteString>

		CLCD_I2C_SetCursor(LCD_user, 4, 2);
 800056e:	2202      	movs	r2, #2
 8000570:	2104      	movs	r1, #4
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff febe 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 8000578:	4970      	ldr	r1, [pc, #448]	; (800073c <lcd_user_display+0x204>)
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f7ff ff66 	bl	800044c <CLCD_I2C_WriteString>

		CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000580:	2203      	movs	r2, #3
 8000582:	2100      	movs	r1, #0
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff feb5 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"Please Set Mode!");
 800058a:	496d      	ldr	r1, [pc, #436]	; (8000740 <lcd_user_display+0x208>)
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff ff5d 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_WriteString(LCD_user,"\"Enter\" to enter");

	  CLCD_I2C_SetCursor(LCD_user, 4, 2);
	  CLCD_I2C_WriteString(LCD_user,"new password :<");
	}
}
 8000592:	e0ca      	b.n	800072a <lcd_user_display+0x1f2>
	else if(status_display == STATUS_2)
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	2b02      	cmp	r3, #2
 8000598:	d124      	bne.n	80005e4 <lcd_user_display+0xac>
		CLCD_I2C_SetCursor(LCD_user, 3, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2103      	movs	r1, #3
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f7ff fea8 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"SELECT MODE");
 80005a4:	4967      	ldr	r1, [pc, #412]	; (8000744 <lcd_user_display+0x20c>)
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f7ff ff50 	bl	800044c <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2100      	movs	r1, #0
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff fe9f 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"-Language");
 80005b6:	4964      	ldr	r1, [pc, #400]	; (8000748 <lcd_user_display+0x210>)
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ff47 	bl	800044c <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(LCD_user, 0, 2);
 80005be:	2202      	movs	r2, #2
 80005c0:	2100      	movs	r1, #0
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff fe96 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"-Enter password");
 80005c8:	4960      	ldr	r1, [pc, #384]	; (800074c <lcd_user_display+0x214>)
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f7ff ff3e 	bl	800044c <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(LCD_user, 0, 3);
 80005d0:	2203      	movs	r2, #3
 80005d2:	2100      	movs	r1, #0
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f7ff fe8d 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"-Exit");
 80005da:	495d      	ldr	r1, [pc, #372]	; (8000750 <lcd_user_display+0x218>)
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff ff35 	bl	800044c <CLCD_I2C_WriteString>
}
 80005e2:	e0a2      	b.n	800072a <lcd_user_display+0x1f2>
	else if(status_display == STATUS_3)
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	d11b      	bne.n	8000622 <lcd_user_display+0xea>
		CLCD_I2C_SetCursor(LCD_user, 0, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f7ff fe80 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"Enter ur number:");
 80005f4:	4957      	ldr	r1, [pc, #348]	; (8000754 <lcd_user_display+0x21c>)
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff ff28 	bl	800044c <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(LCD_user, 0, 2);
 80005fc:	2202      	movs	r2, #2
 80005fe:	2100      	movs	r1, #0
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f7ff fe77 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"Password: ");
 8000606:	4954      	ldr	r1, [pc, #336]	; (8000758 <lcd_user_display+0x220>)
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ff1f 	bl	800044c <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(LCD_user, 0, 3);
 800060e:	2203      	movs	r2, #3
 8000610:	2100      	movs	r1, #0
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f7ff fe6e 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"Exit");
 8000618:	4950      	ldr	r1, [pc, #320]	; (800075c <lcd_user_display+0x224>)
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ff16 	bl	800044c <CLCD_I2C_WriteString>
}
 8000620:	e083      	b.n	800072a <lcd_user_display+0x1f2>
	else if(status_display == STATUS_4)
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	2b04      	cmp	r3, #4
 8000626:	d11b      	bne.n	8000660 <lcd_user_display+0x128>
		CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff fe61 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"Password OKE!");
 8000632:	494b      	ldr	r1, [pc, #300]	; (8000760 <lcd_user_display+0x228>)
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ff09 	bl	800044c <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(LCD_user, 0, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	2100      	movs	r1, #0
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff fe58 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"Wait few ");
 8000644:	4947      	ldr	r1, [pc, #284]	; (8000764 <lcd_user_display+0x22c>)
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff ff00 	bl	800044c <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(LCD_user, 3, 2);
 800064c:	2202      	movs	r2, #2
 800064e:	2103      	movs	r1, #3
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff fe4f 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"minutes...");
 8000656:	4944      	ldr	r1, [pc, #272]	; (8000768 <lcd_user_display+0x230>)
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff fef7 	bl	800044c <CLCD_I2C_WriteString>
}
 800065e:	e064      	b.n	800072a <lcd_user_display+0x1f2>
	else if(status_display == STATUS_5)
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	2b05      	cmp	r3, #5
 8000664:	d11b      	bne.n	800069e <lcd_user_display+0x166>
	  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f7ff fe42 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"Password FAIL!");
 8000670:	493e      	ldr	r1, [pc, #248]	; (800076c <lcd_user_display+0x234>)
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff feea 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000678:	2201      	movs	r2, #1
 800067a:	2100      	movs	r1, #0
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff fe39 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"\"Enter\" to enter");
 8000682:	493b      	ldr	r1, [pc, #236]	; (8000770 <lcd_user_display+0x238>)
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff fee1 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 800068a:	2202      	movs	r2, #2
 800068c:	2104      	movs	r1, #4
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f7ff fe30 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"new password :<");
 8000694:	4937      	ldr	r1, [pc, #220]	; (8000774 <lcd_user_display+0x23c>)
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff fed8 	bl	800044c <CLCD_I2C_WriteString>
}
 800069c:	e045      	b.n	800072a <lcd_user_display+0x1f2>
	else if(status_display == STATUS_6)
 800069e:	78fb      	ldrb	r3, [r7, #3]
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d124      	bne.n	80006ee <lcd_user_display+0x1b6>
		CLCD_I2C_SetCursor(LCD_user, 3, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2103      	movs	r1, #3
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff fe23 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"Language");
 80006ae:	4932      	ldr	r1, [pc, #200]	; (8000778 <lcd_user_display+0x240>)
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff fecb 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2100      	movs	r1, #0
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff fe1a 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 80006c0:	492e      	ldr	r1, [pc, #184]	; (800077c <lcd_user_display+0x244>)
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff fec2 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(LCD_user, 0, 2);
 80006c8:	2202      	movs	r2, #2
 80006ca:	2100      	movs	r1, #0
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff fe11 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"-English");
 80006d2:	492b      	ldr	r1, [pc, #172]	; (8000780 <lcd_user_display+0x248>)
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff feb9 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(LCD_user, 0, 3);
 80006da:	2203      	movs	r2, #3
 80006dc:	2100      	movs	r1, #0
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f7ff fe08 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"-EXIT");
 80006e4:	4927      	ldr	r1, [pc, #156]	; (8000784 <lcd_user_display+0x24c>)
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff feb0 	bl	800044c <CLCD_I2C_WriteString>
}
 80006ec:	e01d      	b.n	800072a <lcd_user_display+0x1f2>
	else if(status_display == STATUS_7)
 80006ee:	78fb      	ldrb	r3, [r7, #3]
 80006f0:	2b07      	cmp	r3, #7
 80006f2:	d11a      	bne.n	800072a <lcd_user_display+0x1f2>
	  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff fdfb 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"Password FAIL!");
 80006fe:	491b      	ldr	r1, [pc, #108]	; (800076c <lcd_user_display+0x234>)
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff fea3 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	2100      	movs	r1, #0
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff fdf2 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"\"Enter\" to enter");
 8000710:	4917      	ldr	r1, [pc, #92]	; (8000770 <lcd_user_display+0x238>)
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff fe9a 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000718:	2202      	movs	r2, #2
 800071a:	2104      	movs	r1, #4
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff fde9 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"new password :<");
 8000722:	4914      	ldr	r1, [pc, #80]	; (8000774 <lcd_user_display+0x23c>)
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff fe91 	bl	800044c <CLCD_I2C_WriteString>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08002704 	.word	0x08002704
 8000738:	08002718 	.word	0x08002718
 800073c:	08002724 	.word	0x08002724
 8000740:	08002730 	.word	0x08002730
 8000744:	08002744 	.word	0x08002744
 8000748:	08002750 	.word	0x08002750
 800074c:	0800275c 	.word	0x0800275c
 8000750:	0800276c 	.word	0x0800276c
 8000754:	08002774 	.word	0x08002774
 8000758:	08002788 	.word	0x08002788
 800075c:	08002794 	.word	0x08002794
 8000760:	0800279c 	.word	0x0800279c
 8000764:	080027ac 	.word	0x080027ac
 8000768:	080027b8 	.word	0x080027b8
 800076c:	080027c4 	.word	0x080027c4
 8000770:	080027d4 	.word	0x080027d4
 8000774:	080027e8 	.word	0x080027e8
 8000778:	080027f8 	.word	0x080027f8
 800077c:	08002804 	.word	0x08002804
 8000780:	08002810 	.word	0x08002810
 8000784:	0800281c 	.word	0x0800281c

08000788 <lcd_system_handler>:

void lcd_system_handler(CLCD_I2C_Name* LCD_user)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	if(delete)
 8000790:	4b9e      	ldr	r3, [pc, #632]	; (8000a0c <lcd_system_handler+0x284>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d005      	beq.n	80007a4 <lcd_system_handler+0x1c>
	{
		CLCD_I2C_Clear(LCD_user);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff febd 	bl	8000518 <CLCD_I2C_Clear>
		delete = 0;
 800079e:	4b9b      	ldr	r3, [pc, #620]	; (8000a0c <lcd_system_handler+0x284>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
	}
	if(Mode == 0)
 80007a4:	4b9a      	ldr	r3, [pc, #616]	; (8000a10 <lcd_system_handler+0x288>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d112      	bne.n	80007d4 <lcd_system_handler+0x4c>
	{
		Config = CONFIG_NONE;
 80007ae:	4b99      	ldr	r3, [pc, #612]	; (8000a14 <lcd_system_handler+0x28c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
		Enter = 0;
 80007b4:	4b98      	ldr	r3, [pc, #608]	; (8000a18 <lcd_system_handler+0x290>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
		Status_Display = STATUS_1;
 80007ba:	4b98      	ldr	r3, [pc, #608]	; (8000a1c <lcd_system_handler+0x294>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
		lcd_user_display(LCD_user, Status_Display);
 80007c0:	4b96      	ldr	r3, [pc, #600]	; (8000a1c <lcd_system_handler+0x294>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff feb6 	bl	8000538 <lcd_user_display>
		Index_mode = INDEX_MODE_NONE;
 80007cc:	4b94      	ldr	r3, [pc, #592]	; (8000a20 <lcd_system_handler+0x298>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
				Enter = 0;
			}
			lcd_user_display(LCD_user, Status_Display);
		} /*END if(Index_mode == INDEX_MODE2)*/
	}/*END if(Mode == 1)*/
}
 80007d2:	e139      	b.n	8000a48 <lcd_system_handler+0x2c0>
	else if(Mode == 1)
 80007d4:	4b8e      	ldr	r3, [pc, #568]	; (8000a10 <lcd_system_handler+0x288>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b01      	cmp	r3, #1
 80007dc:	f040 8134 	bne.w	8000a48 <lcd_system_handler+0x2c0>
		if(Index_mode == INDEX_MODE_NONE)
 80007e0:	4b8f      	ldr	r3, [pc, #572]	; (8000a20 <lcd_system_handler+0x298>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d164      	bne.n	80008b2 <lcd_system_handler+0x12a>
			if (flag_button)
 80007e8:	4b8e      	ldr	r3, [pc, #568]	; (8000a24 <lcd_system_handler+0x29c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d005      	beq.n	80007fe <lcd_system_handler+0x76>
				CLCD_I2C_Clear(LCD_user);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fe90 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 80007f8:	4b8a      	ldr	r3, [pc, #552]	; (8000a24 <lcd_system_handler+0x29c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
			Status_Display = STATUS_2;
 80007fe:	4b87      	ldr	r3, [pc, #540]	; (8000a1c <lcd_system_handler+0x294>)
 8000800:	2202      	movs	r2, #2
 8000802:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000804:	4b83      	ldr	r3, [pc, #524]	; (8000a14 <lcd_system_handler+0x28c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b00      	cmp	r3, #0
 800080c:	d044      	beq.n	8000898 <lcd_system_handler+0x110>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 800080e:	4b81      	ldr	r3, [pc, #516]	; (8000a14 <lcd_system_handler+0x28c>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	461a      	mov	r2, r3
 8000816:	210f      	movs	r1, #15
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff fd6b 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 800081e:	4982      	ldr	r1, [pc, #520]	; (8000a28 <lcd_system_handler+0x2a0>)
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff fe13 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000826:	4b7c      	ldr	r3, [pc, #496]	; (8000a18 <lcd_system_handler+0x290>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d039      	beq.n	80008a4 <lcd_system_handler+0x11c>
					Enter = 0;
 8000830:	4b79      	ldr	r3, [pc, #484]	; (8000a18 <lcd_system_handler+0x290>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8000836:	4b77      	ldr	r3, [pc, #476]	; (8000a14 <lcd_system_handler+0x28c>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b01      	cmp	r3, #1
 800083e:	d108      	bne.n	8000852 <lcd_system_handler+0xca>
                        Index_mode = INDEX_MODE1;
 8000840:	4b77      	ldr	r3, [pc, #476]	; (8000a20 <lcd_system_handler+0x298>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8000846:	4b73      	ldr	r3, [pc, #460]	; (8000a14 <lcd_system_handler+0x28c>)
 8000848:	2201      	movs	r2, #1
 800084a:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 800084c:	4b6f      	ldr	r3, [pc, #444]	; (8000a0c <lcd_system_handler+0x284>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 8000852:	4b70      	ldr	r3, [pc, #448]	; (8000a14 <lcd_system_handler+0x28c>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b02      	cmp	r3, #2
 800085a:	d108      	bne.n	800086e <lcd_system_handler+0xe6>
                        Index_mode = INDEX_MODE2;
 800085c:	4b70      	ldr	r3, [pc, #448]	; (8000a20 <lcd_system_handler+0x298>)
 800085e:	2202      	movs	r2, #2
 8000860:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8000862:	4b6c      	ldr	r3, [pc, #432]	; (8000a14 <lcd_system_handler+0x28c>)
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000868:	4b68      	ldr	r3, [pc, #416]	; (8000a0c <lcd_system_handler+0x284>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 800086e:	4b69      	ldr	r3, [pc, #420]	; (8000a14 <lcd_system_handler+0x28c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b03      	cmp	r3, #3
 8000876:	d115      	bne.n	80008a4 <lcd_system_handler+0x11c>
                        Index_mode = INDEX_MODE1;
 8000878:	4b69      	ldr	r3, [pc, #420]	; (8000a20 <lcd_system_handler+0x298>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
                        Mode = 0;
 800087e:	4b64      	ldr	r3, [pc, #400]	; (8000a10 <lcd_system_handler+0x288>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000884:	4b63      	ldr	r3, [pc, #396]	; (8000a14 <lcd_system_handler+0x28c>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_1;
 800088a:	4b64      	ldr	r3, [pc, #400]	; (8000a1c <lcd_system_handler+0x294>)
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000890:	4b5e      	ldr	r3, [pc, #376]	; (8000a0c <lcd_system_handler+0x284>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e005      	b.n	80008a4 <lcd_system_handler+0x11c>
				Config = CONFIG_ROW1;
 8000898:	4b5e      	ldr	r3, [pc, #376]	; (8000a14 <lcd_system_handler+0x28c>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 800089e:	4b5e      	ldr	r3, [pc, #376]	; (8000a18 <lcd_system_handler+0x290>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 80008a4:	4b5d      	ldr	r3, [pc, #372]	; (8000a1c <lcd_system_handler+0x294>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff fe44 	bl	8000538 <lcd_user_display>
}
 80008b0:	e0ca      	b.n	8000a48 <lcd_system_handler+0x2c0>
		else if(INDEX_MODE1 == Index_mode)	// Languge
 80008b2:	4b5b      	ldr	r3, [pc, #364]	; (8000a20 <lcd_system_handler+0x298>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d161      	bne.n	800097e <lcd_system_handler+0x1f6>
			Status_Display = STATUS_6;
 80008ba:	4b58      	ldr	r3, [pc, #352]	; (8000a1c <lcd_system_handler+0x294>)
 80008bc:	2206      	movs	r2, #6
 80008be:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 80008c0:	4b56      	ldr	r3, [pc, #344]	; (8000a1c <lcd_system_handler+0x294>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff fe36 	bl	8000538 <lcd_user_display>
			if (flag_button)
 80008cc:	4b55      	ldr	r3, [pc, #340]	; (8000a24 <lcd_system_handler+0x29c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d005      	beq.n	80008e2 <lcd_system_handler+0x15a>
				CLCD_I2C_Clear(LCD_user);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff fe1e 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 80008dc:	4b51      	ldr	r3, [pc, #324]	; (8000a24 <lcd_system_handler+0x29c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 80008e2:	4b4c      	ldr	r3, [pc, #304]	; (8000a14 <lcd_system_handler+0x28c>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d03b      	beq.n	8000964 <lcd_system_handler+0x1dc>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 80008ec:	4b49      	ldr	r3, [pc, #292]	; (8000a14 <lcd_system_handler+0x28c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	461a      	mov	r2, r3
 80008f4:	210f      	movs	r1, #15
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fcfc 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 80008fc:	494a      	ldr	r1, [pc, #296]	; (8000a28 <lcd_system_handler+0x2a0>)
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff fda4 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000904:	4b44      	ldr	r3, [pc, #272]	; (8000a18 <lcd_system_handler+0x290>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b00      	cmp	r3, #0
 800090c:	d030      	beq.n	8000970 <lcd_system_handler+0x1e8>
					Enter = 0;
 800090e:	4b42      	ldr	r3, [pc, #264]	; (8000a18 <lcd_system_handler+0x290>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8000914:	4b3f      	ldr	r3, [pc, #252]	; (8000a14 <lcd_system_handler+0x28c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b01      	cmp	r3, #1
 800091c:	d105      	bne.n	800092a <lcd_system_handler+0x1a2>
						language = VIETNAMESE;
 800091e:	4b43      	ldr	r3, [pc, #268]	; (8000a2c <lcd_system_handler+0x2a4>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 8000924:	4b3b      	ldr	r3, [pc, #236]	; (8000a14 <lcd_system_handler+0x28c>)
 8000926:	2203      	movs	r2, #3
 8000928:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 800092a:	4b3a      	ldr	r3, [pc, #232]	; (8000a14 <lcd_system_handler+0x28c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b02      	cmp	r3, #2
 8000932:	d105      	bne.n	8000940 <lcd_system_handler+0x1b8>
						language = ENGLISH;
 8000934:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <lcd_system_handler+0x2a4>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 800093a:	4b36      	ldr	r3, [pc, #216]	; (8000a14 <lcd_system_handler+0x28c>)
 800093c:	2203      	movs	r2, #3
 800093e:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000940:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <lcd_system_handler+0x28c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b03      	cmp	r3, #3
 8000948:	d112      	bne.n	8000970 <lcd_system_handler+0x1e8>
                        Index_mode = INDEX_MODE_NONE;
 800094a:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <lcd_system_handler+0x298>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000950:	4b30      	ldr	r3, [pc, #192]	; (8000a14 <lcd_system_handler+0x28c>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_2;
 8000956:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <lcd_system_handler+0x294>)
 8000958:	2202      	movs	r2, #2
 800095a:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 800095c:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <lcd_system_handler+0x284>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e005      	b.n	8000970 <lcd_system_handler+0x1e8>
				Config = CONFIG_ROW1;
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <lcd_system_handler+0x28c>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 800096a:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <lcd_system_handler+0x290>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000970:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <lcd_system_handler+0x294>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff fdde 	bl	8000538 <lcd_user_display>
}
 800097c:	e064      	b.n	8000a48 <lcd_system_handler+0x2c0>
		else if(INDEX_MODE2 == Index_mode)	// Enter Password
 800097e:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <lcd_system_handler+0x298>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d160      	bne.n	8000a48 <lcd_system_handler+0x2c0>
			Status_Display = STATUS_3;
 8000986:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <lcd_system_handler+0x294>)
 8000988:	2203      	movs	r2, #3
 800098a:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 800098c:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <lcd_system_handler+0x294>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4619      	mov	r1, r3
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff fdd0 	bl	8000538 <lcd_user_display>
			if (flag_button)
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <lcd_system_handler+0x29c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d005      	beq.n	80009ae <lcd_system_handler+0x226>
				CLCD_I2C_Clear(LCD_user);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fdb8 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <lcd_system_handler+0x29c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <lcd_system_handler+0x28c>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d03b      	beq.n	8000a30 <lcd_system_handler+0x2a8>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <lcd_system_handler+0x28c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	461a      	mov	r2, r3
 80009c0:	210f      	movs	r1, #15
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff fc96 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 80009c8:	4917      	ldr	r1, [pc, #92]	; (8000a28 <lcd_system_handler+0x2a0>)
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff fd3e 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <lcd_system_handler+0x290>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d030      	beq.n	8000a3c <lcd_system_handler+0x2b4>
					Enter = 0;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <lcd_system_handler+0x290>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <lcd_system_handler+0x28c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
					if(Config == CONFIG_ROW2)
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <lcd_system_handler+0x28c>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
					if(Config == CONFIG_ROW3)
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <lcd_system_handler+0x28c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d124      	bne.n	8000a3c <lcd_system_handler+0x2b4>
                        Index_mode = INDEX_MODE_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <lcd_system_handler+0x298>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <lcd_system_handler+0x28c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_2;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <lcd_system_handler+0x294>)
 8000a00:	2202      	movs	r2, #2
 8000a02:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000a04:	4b01      	ldr	r3, [pc, #4]	; (8000a0c <lcd_system_handler+0x284>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	e017      	b.n	8000a3c <lcd_system_handler+0x2b4>
 8000a0c:	20000040 	.word	0x20000040
 8000a10:	20000041 	.word	0x20000041
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000042 	.word	0x20000042
 8000a1c:	20000045 	.word	0x20000045
 8000a20:	20000044 	.word	0x20000044
 8000a24:	20000043 	.word	0x20000043
 8000a28:	08002824 	.word	0x08002824
 8000a2c:	20000046 	.word	0x20000046
				Config = CONFIG_ROW1;
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <lcd_system_handler+0x2c8>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <lcd_system_handler+0x2cc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <lcd_system_handler+0x2d0>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fd78 	bl	8000538 <lcd_user_display>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000042 	.word	0x20000042
 8000a58:	20000045 	.word	0x20000045

08000a5c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	80fb      	strh	r3, [r7, #6]
	static uint32_t TimeBegin = 0;
	static uint32_t TimeNow = 0;
	/*CODE ISR*/
	flag_button = 1;
 8000a66:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	701a      	strb	r2, [r3, #0]
	if(UP_EXTI11_Pin == GPIO_Pin)
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a72:	d10e      	bne.n	8000a92 <HAL_GPIO_EXTI_Callback+0x36>
	{
//		flag_button = 1;
		Config++;
 8000a74:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b35      	ldr	r3, [pc, #212]	; (8000b54 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000a80:	701a      	strb	r2, [r3, #0]
		if(Config > CONFIG_ROW3) Config = CONFIG_ROW1;
 8000a82:	4b34      	ldr	r3, [pc, #208]	; (8000b54 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d902      	bls.n	8000a92 <HAL_GPIO_EXTI_Callback+0x36>
 8000a8c:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
	}
	if(DOWN_EXTI12_Pin == GPIO_Pin)
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a98:	d10e      	bne.n	8000ab8 <HAL_GPIO_EXTI_Callback+0x5c>
	{
//		flag_button = 1;
		Config--;
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000aa6:	701a      	strb	r2, [r3, #0]
		if(Config < CONFIG_ROW1) Config = CONFIG_ROW3;
 8000aa8:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d102      	bne.n	8000ab8 <HAL_GPIO_EXTI_Callback+0x5c>
 8000ab2:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	701a      	strb	r2, [r3, #0]
	}
	if(SELECT_EXTI15_Pin == GPIO_Pin)
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
 8000aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000abe:	d10b      	bne.n	8000ad8 <HAL_GPIO_EXTI_Callback+0x7c>
	{
		if(1 == Mode)
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d103      	bne.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x76>
		{
			Enter = 1;
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_GPIO_EXTI_Callback+0x100>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	e002      	b.n	8000ad8 <HAL_GPIO_EXTI_Callback+0x7c>
		}
		else
		{
			Mode = 1;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
		}

	}
	/*END CODE ISR*/
	HAL_Delay(70);
 8000ad8:	2046      	movs	r0, #70	; 0x46
 8000ada:	f000 fa5d 	bl	8000f98 <HAL_Delay>
	TimeBegin = HAL_GetTick();
 8000ade:	f000 fa51 	bl	8000f84 <HAL_GetTick>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4a1e      	ldr	r2, [pc, #120]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x104>)
 8000ae6:	6013      	str	r3, [r2, #0]
	while(		HAL_GPIO_ReadPin(GPIOA, UP_EXTI11_Pin) == GPIO_PIN_RESET		\
 8000ae8:	e00d      	b.n	8000b06 <HAL_GPIO_EXTI_Callback+0xaa>
			|| 	HAL_GPIO_ReadPin(GPIOA, DOWN_EXTI12_Pin) == GPIO_PIN_RESET 		\
			|| 	HAL_GPIO_ReadPin(GPIOA, SELECT_EXTI15_Pin) == GPIO_PIN_RESET)	\
	{
		TimeNow = HAL_GetTick();
 8000aea:	f000 fa4b 	bl	8000f84 <HAL_GetTick>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x108>)
 8000af2:	6013      	str	r3, [r2, #0]
		if(TimeNow - TimeBegin == 5000)
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x108>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x104>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d018      	beq.n	8000b38 <HAL_GPIO_EXTI_Callback+0xdc>
	while(		HAL_GPIO_ReadPin(GPIOA, UP_EXTI11_Pin) == GPIO_PIN_RESET		\
 8000b06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0a:	4817      	ldr	r0, [pc, #92]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000b0c:	f000 fcfa 	bl	8001504 <HAL_GPIO_ReadPin>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0e9      	beq.n	8000aea <HAL_GPIO_EXTI_Callback+0x8e>
			|| 	HAL_GPIO_ReadPin(GPIOA, DOWN_EXTI12_Pin) == GPIO_PIN_RESET 		\
 8000b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1a:	4813      	ldr	r0, [pc, #76]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000b1c:	f000 fcf2 	bl	8001504 <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0e1      	beq.n	8000aea <HAL_GPIO_EXTI_Callback+0x8e>
			|| 	HAL_GPIO_ReadPin(GPIOA, SELECT_EXTI15_Pin) == GPIO_PIN_RESET)	\
 8000b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2a:	480f      	ldr	r0, [pc, #60]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000b2c:	f000 fcea 	bl	8001504 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0d9      	beq.n	8000aea <HAL_GPIO_EXTI_Callback+0x8e>
 8000b36:	e000      	b.n	8000b3a <HAL_GPIO_EXTI_Callback+0xde>
		{
//			ButtonError = 1;
			break;
 8000b38:	bf00      	nop
		}
	}
	HAL_Delay(70);
 8000b3a:	2046      	movs	r0, #70	; 0x46
 8000b3c:	f000 fa2c 	bl	8000f98 <HAL_Delay>
	EXTI->PR = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_GPIO_EXTI_Callback+0x110>)
 8000b42:	f44f 4218 	mov.w	r2, #38912	; 0x9800
 8000b46:	615a      	str	r2, [r3, #20]
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000043 	.word	0x20000043
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000041 	.word	0x20000041
 8000b5c:	20000042 	.word	0x20000042
 8000b60:	2000009c 	.word	0x2000009c
 8000b64:	200000a0 	.word	0x200000a0
 8000b68:	40010800 	.word	0x40010800
 8000b6c:	40010400 	.word	0x40010400

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f000 f9ad 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f813 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 f87b 	bl	8000c78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b82:	f000 f84b 	bl	8000c1c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  CLCD_I2C_Init(&LCD1, &hi2c1, (0x27 << 1), 16, 4);
 8000b86:	1d38      	adds	r0, r7, #4
 8000b88:	2304      	movs	r3, #4
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	224e      	movs	r2, #78	; 0x4e
 8000b90:	4903      	ldr	r1, [pc, #12]	; (8000ba0 <main+0x30>)
 8000b92:	f7ff fb3f 	bl	8000214 <CLCD_I2C_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_system_handler(&LCD1);
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fdf5 	bl	8000788 <lcd_system_handler>
 8000b9e:	e7fa      	b.n	8000b96 <main+0x26>
 8000ba0:	20000048 	.word	0x20000048

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b090      	sub	sp, #64	; 0x40
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	2228      	movs	r2, #40	; 0x28
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 fd92 	bl	80026dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 f95e 	bl	8001e9c <HAL_RCC_OscConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000be6:	f000 f897 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	230f      	movs	r3, #15
 8000bec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 fbcc 	bl	80023a0 <HAL_RCC_ClockConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c0e:	f000 f883 	bl	8000d18 <Error_Handler>
  }
}
 8000c12:	bf00      	nop
 8000c14:	3740      	adds	r7, #64	; 0x40
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c22:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <MX_I2C1_Init+0x54>)
 8000c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c28:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <MX_I2C1_Init+0x58>)
 8000c2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_I2C1_Init+0x50>)
 8000c5a:	f000 fc83 	bl	8001564 <HAL_I2C_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c64:	f000 f858 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000048 	.word	0x20000048
 8000c70:	40005400 	.word	0x40005400
 8000c74:	000186a0 	.word	0x000186a0

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a1d      	ldr	r2, [pc, #116]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000caa:	f043 0308 	orr.w	r3, r3, #8
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_GPIO_Init+0x90>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0308 	and.w	r3, r3, #8
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_GPIO_Init+0x94>)
 8000cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480f      	ldr	r0, [pc, #60]	; (8000d10 <MX_GPIO_Init+0x98>)
 8000cd2:	f000 fa93 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_EXTI11_Pin DOWN_EXTI12_Pin SELECT_EXTI15_Pin */
  GPIO_InitStruct.Pin = UP_EXTI11_Pin|DOWN_EXTI12_Pin|SELECT_EXTI15_Pin;
 8000cd6:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8000cda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <MX_GPIO_Init+0x9c>)
 8000cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4809      	ldr	r0, [pc, #36]	; (8000d10 <MX_GPIO_Init+0x98>)
 8000cec:	f000 fa86 	bl	80011fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2105      	movs	r1, #5
 8000cf4:	2028      	movs	r0, #40	; 0x28
 8000cf6:	f000 fa4a 	bl	800118e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cfa:	2028      	movs	r0, #40	; 0x28
 8000cfc:	f000 fa63 	bl	80011c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	10110000 	.word	0x10110000
 8000d10:	40010800 	.word	0x40010800
 8000d14:	10210000 	.word	0x10210000

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_MspInit+0x5c>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <HAL_MspInit+0x5c>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6193      	str	r3, [r2, #24]
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_MspInit+0x5c>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_MspInit+0x5c>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_MspInit+0x5c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_MspInit+0x5c>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_MspInit+0x60>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_MspInit+0x60>)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010000 	.word	0x40010000

08000d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <HAL_I2C_MspInit+0x70>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d123      	bne.n	8000df0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_I2C_MspInit+0x74>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a13      	ldr	r2, [pc, #76]	; (8000dfc <HAL_I2C_MspInit+0x74>)
 8000dae:	f043 0308 	orr.w	r3, r3, #8
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_I2C_MspInit+0x74>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0308 	and.w	r3, r3, #8
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dc0:	23c0      	movs	r3, #192	; 0xc0
 8000dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc4:	2312      	movs	r3, #18
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480b      	ldr	r0, [pc, #44]	; (8000e00 <HAL_I2C_MspInit+0x78>)
 8000dd4:	f000 fa12 	bl	80011fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_I2C_MspInit+0x74>)
 8000dda:	69db      	ldr	r3, [r3, #28]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_I2C_MspInit+0x74>)
 8000dde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de2:	61d3      	str	r3, [r2, #28]
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_I2C_MspInit+0x74>)
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40005400 	.word	0x40005400
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40010c00 	.word	0x40010c00

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4a:	f000 f889 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000e56:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e5a:	f000 fb6b 	bl	8001534 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UP_EXTI11_Pin);
 8000e5e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e62:	f000 fb67 	bl	8001534 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_EXTI12_Pin);
 8000e66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e6a:	f000 fb63 	bl	8001534 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SELECT_EXTI15_Pin);
 8000e6e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e72:	f000 fb5f 	bl	8001534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
	...

08000e88 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8000e88:	f7ff fff7 	bl	8000e7a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e8c:	480b      	ldr	r0, [pc, #44]	; (8000ebc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e8e:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e90:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ea4:	4c09      	ldr	r4, [pc, #36]	; (8000ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f001 fbef 	bl	8002694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eb6:	f7ff fe5b 	bl	8000b70 <main>
  bx lr
 8000eba:	4770      	bx	lr
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ec4:	0800285c 	.word	0x0800285c
  ldr r2, =_sbss
 8000ec8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ecc:	200000a8 	.word	0x200000a8

08000ed0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC1_2_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_Init+0x28>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_Init+0x28>)
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f947 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	2004      	movs	r0, #4
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff ff18 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40022000 	.word	0x40022000

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f95f 	bl	80011e2 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 f927 	bl	800118e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000004 	.word	0x20000004
 8000f58:	2000000c 	.word	0x2000000c
 8000f5c:	20000008 	.word	0x20000008

08000f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_IncTick+0x1c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_IncTick+0x20>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a03      	ldr	r2, [pc, #12]	; (8000f80 <HAL_IncTick+0x20>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	2000000c 	.word	0x2000000c
 8000f80:	200000a4 	.word	0x200000a4

08000f84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b02      	ldr	r3, [pc, #8]	; (8000f94 <HAL_GetTick+0x10>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	200000a4 	.word	0x200000a4

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff fff0 	bl	8000f84 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	d005      	beq.n	8000fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_Delay+0x44>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fbe:	bf00      	nop
 8000fc0:	f7ff ffe0 	bl	8000f84 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f7      	bhi.n	8000fc0 <HAL_Delay+0x28>
  {
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000000c 	.word	0x2000000c

08000fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db0b      	blt.n	800106e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f003 021f 	and.w	r2, r3, #31
 800105c:	4906      	ldr	r1, [pc, #24]	; (8001078 <__NVIC_EnableIRQ+0x34>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	2001      	movs	r0, #1
 8001066:	fa00 f202 	lsl.w	r2, r0, r2
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff90 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff2d 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a0:	f7ff ff42 	bl	8001028 <__NVIC_GetPriorityGrouping>
 80011a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff ff90 	bl	80010d0 <NVIC_EncodePriority>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5f 	bl	800107c <__NVIC_SetPriority>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff35 	bl	8001044 <__NVIC_EnableIRQ>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffa2 	bl	8001134 <SysTick_Config>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b08b      	sub	sp, #44	; 0x2c
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120e:	e169      	b.n	80014e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001210:	2201      	movs	r2, #1
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	429a      	cmp	r2, r3
 800122a:	f040 8158 	bne.w	80014de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4a9a      	ldr	r2, [pc, #616]	; (800149c <HAL_GPIO_Init+0x2a0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d05e      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 8001238:	4a98      	ldr	r2, [pc, #608]	; (800149c <HAL_GPIO_Init+0x2a0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d875      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 800123e:	4a98      	ldr	r2, [pc, #608]	; (80014a0 <HAL_GPIO_Init+0x2a4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d058      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 8001244:	4a96      	ldr	r2, [pc, #600]	; (80014a0 <HAL_GPIO_Init+0x2a4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d86f      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 800124a:	4a96      	ldr	r2, [pc, #600]	; (80014a4 <HAL_GPIO_Init+0x2a8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d052      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 8001250:	4a94      	ldr	r2, [pc, #592]	; (80014a4 <HAL_GPIO_Init+0x2a8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d869      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 8001256:	4a94      	ldr	r2, [pc, #592]	; (80014a8 <HAL_GPIO_Init+0x2ac>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d04c      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 800125c:	4a92      	ldr	r2, [pc, #584]	; (80014a8 <HAL_GPIO_Init+0x2ac>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d863      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 8001262:	4a92      	ldr	r2, [pc, #584]	; (80014ac <HAL_GPIO_Init+0x2b0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d046      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 8001268:	4a90      	ldr	r2, [pc, #576]	; (80014ac <HAL_GPIO_Init+0x2b0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d85d      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 800126e:	2b12      	cmp	r3, #18
 8001270:	d82a      	bhi.n	80012c8 <HAL_GPIO_Init+0xcc>
 8001272:	2b12      	cmp	r3, #18
 8001274:	d859      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 8001276:	a201      	add	r2, pc, #4	; (adr r2, 800127c <HAL_GPIO_Init+0x80>)
 8001278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127c:	080012f7 	.word	0x080012f7
 8001280:	080012d1 	.word	0x080012d1
 8001284:	080012e3 	.word	0x080012e3
 8001288:	08001325 	.word	0x08001325
 800128c:	0800132b 	.word	0x0800132b
 8001290:	0800132b 	.word	0x0800132b
 8001294:	0800132b 	.word	0x0800132b
 8001298:	0800132b 	.word	0x0800132b
 800129c:	0800132b 	.word	0x0800132b
 80012a0:	0800132b 	.word	0x0800132b
 80012a4:	0800132b 	.word	0x0800132b
 80012a8:	0800132b 	.word	0x0800132b
 80012ac:	0800132b 	.word	0x0800132b
 80012b0:	0800132b 	.word	0x0800132b
 80012b4:	0800132b 	.word	0x0800132b
 80012b8:	0800132b 	.word	0x0800132b
 80012bc:	0800132b 	.word	0x0800132b
 80012c0:	080012d9 	.word	0x080012d9
 80012c4:	080012ed 	.word	0x080012ed
 80012c8:	4a79      	ldr	r2, [pc, #484]	; (80014b0 <HAL_GPIO_Init+0x2b4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ce:	e02c      	b.n	800132a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	623b      	str	r3, [r7, #32]
          break;
 80012d6:	e029      	b.n	800132c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	3304      	adds	r3, #4
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	e024      	b.n	800132c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	3308      	adds	r3, #8
 80012e8:	623b      	str	r3, [r7, #32]
          break;
 80012ea:	e01f      	b.n	800132c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	330c      	adds	r3, #12
 80012f2:	623b      	str	r3, [r7, #32]
          break;
 80012f4:	e01a      	b.n	800132c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012fe:	2304      	movs	r3, #4
 8001300:	623b      	str	r3, [r7, #32]
          break;
 8001302:	e013      	b.n	800132c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d105      	bne.n	8001318 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800130c:	2308      	movs	r3, #8
 800130e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69fa      	ldr	r2, [r7, #28]
 8001314:	611a      	str	r2, [r3, #16]
          break;
 8001316:	e009      	b.n	800132c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001318:	2308      	movs	r3, #8
 800131a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	615a      	str	r2, [r3, #20]
          break;
 8001322:	e003      	b.n	800132c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
          break;
 8001328:	e000      	b.n	800132c <HAL_GPIO_Init+0x130>
          break;
 800132a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2bff      	cmp	r3, #255	; 0xff
 8001330:	d801      	bhi.n	8001336 <HAL_GPIO_Init+0x13a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	e001      	b.n	800133a <HAL_GPIO_Init+0x13e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3304      	adds	r3, #4
 800133a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2bff      	cmp	r3, #255	; 0xff
 8001340:	d802      	bhi.n	8001348 <HAL_GPIO_Init+0x14c>
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	e002      	b.n	800134e <HAL_GPIO_Init+0x152>
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	3b08      	subs	r3, #8
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	210f      	movs	r1, #15
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	401a      	ands	r2, r3
 8001360:	6a39      	ldr	r1, [r7, #32]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	431a      	orrs	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 80b1 	beq.w	80014de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800137c:	4b4d      	ldr	r3, [pc, #308]	; (80014b4 <HAL_GPIO_Init+0x2b8>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a4c      	ldr	r2, [pc, #304]	; (80014b4 <HAL_GPIO_Init+0x2b8>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <HAL_GPIO_Init+0x2b8>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001394:	4a48      	ldr	r2, [pc, #288]	; (80014b8 <HAL_GPIO_Init+0x2bc>)
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a40      	ldr	r2, [pc, #256]	; (80014bc <HAL_GPIO_Init+0x2c0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d013      	beq.n	80013e8 <HAL_GPIO_Init+0x1ec>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a3f      	ldr	r2, [pc, #252]	; (80014c0 <HAL_GPIO_Init+0x2c4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d00d      	beq.n	80013e4 <HAL_GPIO_Init+0x1e8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a3e      	ldr	r2, [pc, #248]	; (80014c4 <HAL_GPIO_Init+0x2c8>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d007      	beq.n	80013e0 <HAL_GPIO_Init+0x1e4>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a3d      	ldr	r2, [pc, #244]	; (80014c8 <HAL_GPIO_Init+0x2cc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d101      	bne.n	80013dc <HAL_GPIO_Init+0x1e0>
 80013d8:	2303      	movs	r3, #3
 80013da:	e006      	b.n	80013ea <HAL_GPIO_Init+0x1ee>
 80013dc:	2304      	movs	r3, #4
 80013de:	e004      	b.n	80013ea <HAL_GPIO_Init+0x1ee>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e002      	b.n	80013ea <HAL_GPIO_Init+0x1ee>
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <HAL_GPIO_Init+0x1ee>
 80013e8:	2300      	movs	r3, #0
 80013ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ec:	f002 0203 	and.w	r2, r2, #3
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	4093      	lsls	r3, r2
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013fa:	492f      	ldr	r1, [pc, #188]	; (80014b8 <HAL_GPIO_Init+0x2bc>)
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001414:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	492c      	ldr	r1, [pc, #176]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	608b      	str	r3, [r1, #8]
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001422:	4b2a      	ldr	r3, [pc, #168]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	43db      	mvns	r3, r3
 800142a:	4928      	ldr	r1, [pc, #160]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 800142c:	4013      	ands	r3, r2
 800142e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	4922      	ldr	r1, [pc, #136]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	60cb      	str	r3, [r1, #12]
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	43db      	mvns	r3, r3
 8001452:	491e      	ldr	r1, [pc, #120]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 8001454:	4013      	ands	r3, r2
 8001456:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4918      	ldr	r1, [pc, #96]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	43db      	mvns	r3, r3
 800147a:	4914      	ldr	r1, [pc, #80]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 800147c:	4013      	ands	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d021      	beq.n	80014d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	490e      	ldr	r1, [pc, #56]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	600b      	str	r3, [r1, #0]
 8001498:	e021      	b.n	80014de <HAL_GPIO_Init+0x2e2>
 800149a:	bf00      	nop
 800149c:	10320000 	.word	0x10320000
 80014a0:	10310000 	.word	0x10310000
 80014a4:	10220000 	.word	0x10220000
 80014a8:	10210000 	.word	0x10210000
 80014ac:	10120000 	.word	0x10120000
 80014b0:	10110000 	.word	0x10110000
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010000 	.word	0x40010000
 80014bc:	40010800 	.word	0x40010800
 80014c0:	40010c00 	.word	0x40010c00
 80014c4:	40011000 	.word	0x40011000
 80014c8:	40011400 	.word	0x40011400
 80014cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_GPIO_Init+0x304>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	4909      	ldr	r1, [pc, #36]	; (8001500 <HAL_GPIO_Init+0x304>)
 80014da:	4013      	ands	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	3301      	adds	r3, #1
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	fa22 f303 	lsr.w	r3, r2, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f47f ae8e 	bne.w	8001210 <HAL_GPIO_Init+0x14>
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	372c      	adds	r7, #44	; 0x2c
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	e001      	b.n	8001526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
	...

08001534 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d006      	beq.n	8001558 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fa82 	bl	8000a5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40010400 	.word	0x40010400

08001564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e12b      	b.n	80017ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d106      	bne.n	8001590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fbfc 	bl	8000d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2224      	movs	r2, #36	; 0x24
 8001594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0201 	bic.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015c8:	f001 f832 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 80015cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4a81      	ldr	r2, [pc, #516]	; (80017d8 <HAL_I2C_Init+0x274>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d807      	bhi.n	80015e8 <HAL_I2C_Init+0x84>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4a80      	ldr	r2, [pc, #512]	; (80017dc <HAL_I2C_Init+0x278>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	bf94      	ite	ls
 80015e0:	2301      	movls	r3, #1
 80015e2:	2300      	movhi	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	e006      	b.n	80015f6 <HAL_I2C_Init+0x92>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4a7d      	ldr	r2, [pc, #500]	; (80017e0 <HAL_I2C_Init+0x27c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	bf94      	ite	ls
 80015f0:	2301      	movls	r3, #1
 80015f2:	2300      	movhi	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0e7      	b.n	80017ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4a78      	ldr	r2, [pc, #480]	; (80017e4 <HAL_I2C_Init+0x280>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	0c9b      	lsrs	r3, r3, #18
 8001608:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	430a      	orrs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a6a      	ldr	r2, [pc, #424]	; (80017d8 <HAL_I2C_Init+0x274>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d802      	bhi.n	8001638 <HAL_I2C_Init+0xd4>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	3301      	adds	r3, #1
 8001636:	e009      	b.n	800164c <HAL_I2C_Init+0xe8>
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800163e:	fb02 f303 	mul.w	r3, r2, r3
 8001642:	4a69      	ldr	r2, [pc, #420]	; (80017e8 <HAL_I2C_Init+0x284>)
 8001644:	fba2 2303 	umull	r2, r3, r2, r3
 8001648:	099b      	lsrs	r3, r3, #6
 800164a:	3301      	adds	r3, #1
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	430b      	orrs	r3, r1
 8001652:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800165e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	495c      	ldr	r1, [pc, #368]	; (80017d8 <HAL_I2C_Init+0x274>)
 8001668:	428b      	cmp	r3, r1
 800166a:	d819      	bhi.n	80016a0 <HAL_I2C_Init+0x13c>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1e59      	subs	r1, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fbb1 f3f3 	udiv	r3, r1, r3
 800167a:	1c59      	adds	r1, r3, #1
 800167c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001680:	400b      	ands	r3, r1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00a      	beq.n	800169c <HAL_I2C_Init+0x138>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1e59      	subs	r1, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fbb1 f3f3 	udiv	r3, r1, r3
 8001694:	3301      	adds	r3, #1
 8001696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800169a:	e051      	b.n	8001740 <HAL_I2C_Init+0x1dc>
 800169c:	2304      	movs	r3, #4
 800169e:	e04f      	b.n	8001740 <HAL_I2C_Init+0x1dc>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d111      	bne.n	80016cc <HAL_I2C_Init+0x168>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	1e58      	subs	r0, r3, #1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6859      	ldr	r1, [r3, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	440b      	add	r3, r1
 80016b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ba:	3301      	adds	r3, #1
 80016bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf0c      	ite	eq
 80016c4:	2301      	moveq	r3, #1
 80016c6:	2300      	movne	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	e012      	b.n	80016f2 <HAL_I2C_Init+0x18e>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1e58      	subs	r0, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	0099      	lsls	r1, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e2:	3301      	adds	r3, #1
 80016e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bf0c      	ite	eq
 80016ec:	2301      	moveq	r3, #1
 80016ee:	2300      	movne	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_I2C_Init+0x196>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e022      	b.n	8001740 <HAL_I2C_Init+0x1dc>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10e      	bne.n	8001720 <HAL_I2C_Init+0x1bc>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1e58      	subs	r0, r3, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6859      	ldr	r1, [r3, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	440b      	add	r3, r1
 8001710:	fbb0 f3f3 	udiv	r3, r0, r3
 8001714:	3301      	adds	r3, #1
 8001716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171e:	e00f      	b.n	8001740 <HAL_I2C_Init+0x1dc>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1e58      	subs	r0, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6859      	ldr	r1, [r3, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	0099      	lsls	r1, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	fbb0 f3f3 	udiv	r3, r0, r3
 8001736:	3301      	adds	r3, #1
 8001738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	6809      	ldr	r1, [r1, #0]
 8001744:	4313      	orrs	r3, r2
 8001746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69da      	ldr	r2, [r3, #28]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800176e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6911      	ldr	r1, [r2, #16]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68d2      	ldr	r2, [r2, #12]
 800177a:	4311      	orrs	r1, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	430b      	orrs	r3, r1
 8001782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2220      	movs	r2, #32
 80017ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	000186a0 	.word	0x000186a0
 80017dc:	001e847f 	.word	0x001e847f
 80017e0:	003d08ff 	.word	0x003d08ff
 80017e4:	431bde83 	.word	0x431bde83
 80017e8:	10624dd3 	.word	0x10624dd3

080017ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	461a      	mov	r2, r3
 80017f8:	460b      	mov	r3, r1
 80017fa:	817b      	strh	r3, [r7, #10]
 80017fc:	4613      	mov	r3, r2
 80017fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff fbc0 	bl	8000f84 <HAL_GetTick>
 8001804:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b20      	cmp	r3, #32
 8001810:	f040 80e0 	bne.w	80019d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2319      	movs	r3, #25
 800181a:	2201      	movs	r2, #1
 800181c:	4970      	ldr	r1, [pc, #448]	; (80019e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 f964 	bl	8001aec <I2C_WaitOnFlagUntilTimeout>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800182a:	2302      	movs	r3, #2
 800182c:	e0d3      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_I2C_Master_Transmit+0x50>
 8001838:	2302      	movs	r3, #2
 800183a:	e0cc      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x1ea>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d007      	beq.n	8001862 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2221      	movs	r2, #33	; 0x21
 8001876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2210      	movs	r2, #16
 800187e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	893a      	ldrh	r2, [r7, #8]
 8001892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4a50      	ldr	r2, [pc, #320]	; (80019e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018a4:	8979      	ldrh	r1, [r7, #10]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	6a3a      	ldr	r2, [r7, #32]
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 f89c 	bl	80019e8 <I2C_MasterRequestWrite>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e08d      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018d0:	e066      	b.n	80019a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	6a39      	ldr	r1, [r7, #32]
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 fa22 	bl	8001d20 <I2C_WaitOnTXEFlagUntilTimeout>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00d      	beq.n	80018fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d107      	bne.n	80018fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e06b      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	781a      	ldrb	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001926:	3b01      	subs	r3, #1
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b04      	cmp	r3, #4
 800193a:	d11b      	bne.n	8001974 <HAL_I2C_Master_Transmit+0x188>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001940:	2b00      	cmp	r3, #0
 8001942:	d017      	beq.n	8001974 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195e:	b29b      	uxth	r3, r3
 8001960:	3b01      	subs	r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196c:	3b01      	subs	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	6a39      	ldr	r1, [r7, #32]
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f000 fa19 	bl	8001db0 <I2C_WaitOnBTFFlagUntilTimeout>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00d      	beq.n	80019a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	2b04      	cmp	r3, #4
 800198a:	d107      	bne.n	800199c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800199a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e01a      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d194      	bne.n	80018d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2220      	movs	r2, #32
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e000      	b.n	80019d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019d4:	2302      	movs	r3, #2
  }
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	00100002 	.word	0x00100002
 80019e4:	ffff0000 	.word	0xffff0000

080019e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	460b      	mov	r3, r1
 80019f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d006      	beq.n	8001a12 <I2C_MasterRequestWrite+0x2a>
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d003      	beq.n	8001a12 <I2C_MasterRequestWrite+0x2a>
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a10:	d108      	bne.n	8001a24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	e00b      	b.n	8001a3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	2b12      	cmp	r3, #18
 8001a2a:	d107      	bne.n	8001a3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 f84f 	bl	8001aec <I2C_WaitOnFlagUntilTimeout>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00d      	beq.n	8001a70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a62:	d103      	bne.n	8001a6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e035      	b.n	8001adc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a78:	d108      	bne.n	8001a8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a7a:	897b      	ldrh	r3, [r7, #10]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a88:	611a      	str	r2, [r3, #16]
 8001a8a:	e01b      	b.n	8001ac4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a8c:	897b      	ldrh	r3, [r7, #10]
 8001a8e:	11db      	asrs	r3, r3, #7
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f003 0306 	and.w	r3, r3, #6
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f063 030f 	orn	r3, r3, #15
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <I2C_MasterRequestWrite+0xfc>)
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 f898 	bl	8001be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e010      	b.n	8001adc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001aba:	897b      	ldrh	r3, [r7, #10]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <I2C_MasterRequestWrite+0x100>)
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 f888 	bl	8001be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	00010008 	.word	0x00010008
 8001ae8:	00010002 	.word	0x00010002

08001aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	4613      	mov	r3, r2
 8001afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001afc:	e048      	b.n	8001b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d044      	beq.n	8001b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b06:	f7ff fa3d 	bl	8000f84 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d302      	bcc.n	8001b1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d139      	bne.n	8001b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	0c1b      	lsrs	r3, r3, #16
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10d      	bne.n	8001b42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	43da      	mvns	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	4013      	ands	r3, r2
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bf0c      	ite	eq
 8001b38:	2301      	moveq	r3, #1
 8001b3a:	2300      	movne	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	e00c      	b.n	8001b5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	43da      	mvns	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf0c      	ite	eq
 8001b54:	2301      	moveq	r3, #1
 8001b56:	2300      	movne	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d116      	bne.n	8001b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f043 0220 	orr.w	r2, r3, #32
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e023      	b.n	8001bd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	0c1b      	lsrs	r3, r3, #16
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d10d      	bne.n	8001bb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	43da      	mvns	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bf0c      	ite	eq
 8001bac:	2301      	moveq	r3, #1
 8001bae:	2300      	movne	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	e00c      	b.n	8001bd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	43da      	mvns	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d093      	beq.n	8001afe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bee:	e071      	b.n	8001cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfe:	d123      	bne.n	8001c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e067      	b.n	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4e:	d041      	beq.n	8001cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c50:	f7ff f998 	bl	8000f84 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d302      	bcc.n	8001c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d136      	bne.n	8001cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d10c      	bne.n	8001c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	43da      	mvns	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf14      	ite	ne
 8001c82:	2301      	movne	r3, #1
 8001c84:	2300      	moveq	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	e00b      	b.n	8001ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	43da      	mvns	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4013      	ands	r3, r2
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf14      	ite	ne
 8001c9c:	2301      	movne	r3, #1
 8001c9e:	2300      	moveq	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d016      	beq.n	8001cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e021      	b.n	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	0c1b      	lsrs	r3, r3, #16
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d10c      	bne.n	8001cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	43da      	mvns	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf14      	ite	ne
 8001cf0:	2301      	movne	r3, #1
 8001cf2:	2300      	moveq	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	e00b      	b.n	8001d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4013      	ands	r3, r2
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf14      	ite	ne
 8001d0a:	2301      	movne	r3, #1
 8001d0c:	2300      	moveq	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f47f af6d 	bne.w	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d2c:	e034      	b.n	8001d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f886 	bl	8001e40 <I2C_IsAcknowledgeFailed>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e034      	b.n	8001da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d44:	d028      	beq.n	8001d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d46:	f7ff f91d 	bl	8000f84 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d302      	bcc.n	8001d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d11d      	bne.n	8001d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d66:	2b80      	cmp	r3, #128	; 0x80
 8001d68:	d016      	beq.n	8001d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f043 0220 	orr.w	r2, r3, #32
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e007      	b.n	8001da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	2b80      	cmp	r3, #128	; 0x80
 8001da4:	d1c3      	bne.n	8001d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dbc:	e034      	b.n	8001e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f83e 	bl	8001e40 <I2C_IsAcknowledgeFailed>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e034      	b.n	8001e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d028      	beq.n	8001e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd6:	f7ff f8d5 	bl	8000f84 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d302      	bcc.n	8001dec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d11d      	bne.n	8001e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d016      	beq.n	8001e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f043 0220 	orr.w	r2, r3, #32
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e007      	b.n	8001e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d1c3      	bne.n	8001dbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e56:	d11b      	bne.n	8001e90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f043 0204 	orr.w	r2, r3, #4
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e272      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8087 	beq.w	8001fca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ebc:	4b92      	ldr	r3, [pc, #584]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d00c      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec8:	4b8f      	ldr	r3, [pc, #572]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d112      	bne.n	8001efa <HAL_RCC_OscConfig+0x5e>
 8001ed4:	4b8c      	ldr	r3, [pc, #560]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee0:	d10b      	bne.n	8001efa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee2:	4b89      	ldr	r3, [pc, #548]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d06c      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x12c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d168      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e24c      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x76>
 8001f04:	4b80      	ldr	r3, [pc, #512]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a7f      	ldr	r2, [pc, #508]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e02e      	b.n	8001f70 <HAL_RCC_OscConfig+0xd4>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x98>
 8001f1a:	4b7b      	ldr	r3, [pc, #492]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a7a      	ldr	r2, [pc, #488]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b78      	ldr	r3, [pc, #480]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a77      	ldr	r2, [pc, #476]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e01d      	b.n	8001f70 <HAL_RCC_OscConfig+0xd4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0xbc>
 8001f3e:	4b72      	ldr	r3, [pc, #456]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a71      	ldr	r2, [pc, #452]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b6f      	ldr	r3, [pc, #444]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a6e      	ldr	r2, [pc, #440]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e00b      	b.n	8001f70 <HAL_RCC_OscConfig+0xd4>
 8001f58:	4b6b      	ldr	r3, [pc, #428]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a6a      	ldr	r2, [pc, #424]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b68      	ldr	r3, [pc, #416]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a67      	ldr	r2, [pc, #412]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d013      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff f804 	bl	8000f84 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff f800 	bl	8000f84 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e200      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b5d      	ldr	r3, [pc, #372]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0xe4>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fff0 	bl	8000f84 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7fe ffec 	bl	8000f84 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e1ec      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	4b53      	ldr	r3, [pc, #332]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x10c>
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d063      	beq.n	800209e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd6:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fe2:	4b49      	ldr	r3, [pc, #292]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d11c      	bne.n	8002028 <HAL_RCC_OscConfig+0x18c>
 8001fee:	4b46      	ldr	r3, [pc, #280]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	4b43      	ldr	r3, [pc, #268]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x176>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e1c0      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4939      	ldr	r1, [pc, #228]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	e03a      	b.n	800209e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002030:	4b36      	ldr	r3, [pc, #216]	; (800210c <HAL_RCC_OscConfig+0x270>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7fe ffa5 	bl	8000f84 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203e:	f7fe ffa1 	bl	8000f84 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e1a1      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4927      	ldr	r1, [pc, #156]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b26      	ldr	r3, [pc, #152]	; (800210c <HAL_RCC_OscConfig+0x270>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7fe ff84 	bl	8000f84 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002080:	f7fe ff80 	bl	8000f84 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e180      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d03a      	beq.n	8002120 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d019      	beq.n	80020e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b2:	4b17      	ldr	r3, [pc, #92]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b8:	f7fe ff64 	bl	8000f84 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c0:	f7fe ff60 	bl	8000f84 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e160      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020de:	2001      	movs	r0, #1
 80020e0:	f000 faba 	bl	8002658 <RCC_Delay>
 80020e4:	e01c      	b.n	8002120 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_RCC_OscConfig+0x274>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ec:	f7fe ff4a 	bl	8000f84 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f2:	e00f      	b.n	8002114 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f4:	f7fe ff46 	bl	8000f84 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d908      	bls.n	8002114 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e146      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	42420000 	.word	0x42420000
 8002110:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002114:	4b92      	ldr	r3, [pc, #584]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e9      	bne.n	80020f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80a6 	beq.w	800227a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002132:	4b8b      	ldr	r3, [pc, #556]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10d      	bne.n	800215a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b88      	ldr	r3, [pc, #544]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4a87      	ldr	r2, [pc, #540]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	61d3      	str	r3, [r2, #28]
 800214a:	4b85      	ldr	r3, [pc, #532]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002156:	2301      	movs	r3, #1
 8002158:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b82      	ldr	r3, [pc, #520]	; (8002364 <HAL_RCC_OscConfig+0x4c8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d118      	bne.n	8002198 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002166:	4b7f      	ldr	r3, [pc, #508]	; (8002364 <HAL_RCC_OscConfig+0x4c8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a7e      	ldr	r2, [pc, #504]	; (8002364 <HAL_RCC_OscConfig+0x4c8>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002172:	f7fe ff07 	bl	8000f84 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217a:	f7fe ff03 	bl	8000f84 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b64      	cmp	r3, #100	; 0x64
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e103      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218c:	4b75      	ldr	r3, [pc, #468]	; (8002364 <HAL_RCC_OscConfig+0x4c8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d106      	bne.n	80021ae <HAL_RCC_OscConfig+0x312>
 80021a0:	4b6f      	ldr	r3, [pc, #444]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a6e      	ldr	r2, [pc, #440]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	e02d      	b.n	800220a <HAL_RCC_OscConfig+0x36e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x334>
 80021b6:	4b6a      	ldr	r3, [pc, #424]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4a69      	ldr	r2, [pc, #420]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	6213      	str	r3, [r2, #32]
 80021c2:	4b67      	ldr	r3, [pc, #412]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4a66      	ldr	r2, [pc, #408]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	6213      	str	r3, [r2, #32]
 80021ce:	e01c      	b.n	800220a <HAL_RCC_OscConfig+0x36e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d10c      	bne.n	80021f2 <HAL_RCC_OscConfig+0x356>
 80021d8:	4b61      	ldr	r3, [pc, #388]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4a60      	ldr	r2, [pc, #384]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	6213      	str	r3, [r2, #32]
 80021e4:	4b5e      	ldr	r3, [pc, #376]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4a5d      	ldr	r2, [pc, #372]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	e00b      	b.n	800220a <HAL_RCC_OscConfig+0x36e>
 80021f2:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4a5a      	ldr	r2, [pc, #360]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6213      	str	r3, [r2, #32]
 80021fe:	4b58      	ldr	r3, [pc, #352]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4a57      	ldr	r2, [pc, #348]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d015      	beq.n	800223e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002212:	f7fe feb7 	bl	8000f84 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7fe feb3 	bl	8000f84 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0b1      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ee      	beq.n	800221a <HAL_RCC_OscConfig+0x37e>
 800223c:	e014      	b.n	8002268 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7fe fea1 	bl	8000f84 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe fe9d 	bl	8000f84 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e09b      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225c:	4b40      	ldr	r3, [pc, #256]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ee      	bne.n	8002246 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d105      	bne.n	800227a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226e:	4b3c      	ldr	r3, [pc, #240]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4a3b      	ldr	r2, [pc, #236]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002278:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8087 	beq.w	8002392 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002284:	4b36      	ldr	r3, [pc, #216]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d061      	beq.n	8002354 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d146      	bne.n	8002326 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002298:	4b33      	ldr	r3, [pc, #204]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7fe fe71 	bl	8000f84 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a6:	f7fe fe6d 	bl	8000f84 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e06d      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b8:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f0      	bne.n	80022a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d108      	bne.n	80022e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ce:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	4921      	ldr	r1, [pc, #132]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e0:	4b1f      	ldr	r3, [pc, #124]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a19      	ldr	r1, [r3, #32]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	430b      	orrs	r3, r1
 80022f2:	491b      	ldr	r1, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f8:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7fe fe41 	bl	8000f84 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002306:	f7fe fe3d 	bl	8000f84 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e03d      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x46a>
 8002324:	e035      	b.n	8002392 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <HAL_RCC_OscConfig+0x4cc>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe fe2a 	bl	8000f84 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002334:	f7fe fe26 	bl	8000f84 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e026      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x498>
 8002352:	e01e      	b.n	8002392 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d107      	bne.n	800236c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e019      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
 8002360:	40021000 	.word	0x40021000
 8002364:	40007000 	.word	0x40007000
 8002368:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_OscConfig+0x500>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	429a      	cmp	r2, r3
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000

080023a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0d0      	b.n	8002556 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b4:	4b6a      	ldr	r3, [pc, #424]	; (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d910      	bls.n	80023e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b67      	ldr	r3, [pc, #412]	; (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 0207 	bic.w	r2, r3, #7
 80023ca:	4965      	ldr	r1, [pc, #404]	; (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d2:	4b63      	ldr	r3, [pc, #396]	; (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0b8      	b.n	8002556 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d020      	beq.n	8002432 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023fc:	4b59      	ldr	r3, [pc, #356]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a58      	ldr	r2, [pc, #352]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002406:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002414:	4b53      	ldr	r3, [pc, #332]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4a52      	ldr	r2, [pc, #328]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800241e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4b50      	ldr	r3, [pc, #320]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	494d      	ldr	r1, [pc, #308]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d040      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b47      	ldr	r3, [pc, #284]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d115      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e07f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245e:	4b41      	ldr	r3, [pc, #260]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e073      	b.n	8002556 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	4b3d      	ldr	r3, [pc, #244]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e06b      	b.n	8002556 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247e:	4b39      	ldr	r3, [pc, #228]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f023 0203 	bic.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4936      	ldr	r1, [pc, #216]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002490:	f7fe fd78 	bl	8000f84 <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	e00a      	b.n	80024ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7fe fd74 	bl	8000f84 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e053      	b.n	8002556 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 020c 	and.w	r2, r3, #12
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1eb      	bne.n	8002498 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c0:	4b27      	ldr	r3, [pc, #156]	; (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d210      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 0207 	bic.w	r2, r3, #7
 80024d6:	4922      	ldr	r1, [pc, #136]	; (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e032      	b.n	8002556 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4916      	ldr	r1, [pc, #88]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	490e      	ldr	r1, [pc, #56]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800252e:	f000 f821 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002532:	4602      	mov	r2, r0
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	490a      	ldr	r1, [pc, #40]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002540:	5ccb      	ldrb	r3, [r1, r3]
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	4a09      	ldr	r2, [pc, #36]	; (800256c <HAL_RCC_ClockConfig+0x1cc>)
 8002548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1d0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fcd6 	bl	8000f00 <HAL_InitTick>

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40022000 	.word	0x40022000
 8002564:	40021000 	.word	0x40021000
 8002568:	08002828 	.word	0x08002828
 800256c:	20000004 	.word	0x20000004
 8002570:	20000008 	.word	0x20000008

08002574 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_RCC_GetSysClockFreq+0x94>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b04      	cmp	r3, #4
 800259c:	d002      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x30>
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d003      	beq.n	80025aa <HAL_RCC_GetSysClockFreq+0x36>
 80025a2:	e027      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_RCC_GetSysClockFreq+0x98>)
 80025a6:	613b      	str	r3, [r7, #16]
      break;
 80025a8:	e027      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	0c9b      	lsrs	r3, r3, #18
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	4a17      	ldr	r2, [pc, #92]	; (8002610 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025b4:	5cd3      	ldrb	r3, [r2, r3]
 80025b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d010      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_RCC_GetSysClockFreq+0x94>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	0c5b      	lsrs	r3, r3, #17
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	4a11      	ldr	r2, [pc, #68]	; (8002614 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025ce:	5cd3      	ldrb	r3, [r2, r3]
 80025d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a0d      	ldr	r2, [pc, #52]	; (800260c <HAL_RCC_GetSysClockFreq+0x98>)
 80025d6:	fb03 f202 	mul.w	r2, r3, r2
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	e004      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a0c      	ldr	r2, [pc, #48]	; (8002618 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025e8:	fb02 f303 	mul.w	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	613b      	str	r3, [r7, #16]
      break;
 80025f2:	e002      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_RCC_GetSysClockFreq+0x98>)
 80025f6:	613b      	str	r3, [r7, #16]
      break;
 80025f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025fa:	693b      	ldr	r3, [r7, #16]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	371c      	adds	r7, #28
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	007a1200 	.word	0x007a1200
 8002610:	08002840 	.word	0x08002840
 8002614:	08002850 	.word	0x08002850
 8002618:	003d0900 	.word	0x003d0900

0800261c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002620:	4b02      	ldr	r3, [pc, #8]	; (800262c <HAL_RCC_GetHCLKFreq+0x10>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	20000004 	.word	0x20000004

08002630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002634:	f7ff fff2 	bl	800261c <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4903      	ldr	r1, [pc, #12]	; (8002654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	08002838 	.word	0x08002838

08002658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <RCC_Delay+0x34>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <RCC_Delay+0x38>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0a5b      	lsrs	r3, r3, #9
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002674:	bf00      	nop
  }
  while (Delay --);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1e5a      	subs	r2, r3, #1
 800267a:	60fa      	str	r2, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f9      	bne.n	8002674 <RCC_Delay+0x1c>
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	20000004 	.word	0x20000004
 8002690:	10624dd3 	.word	0x10624dd3

08002694 <__libc_init_array>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	2600      	movs	r6, #0
 8002698:	4d0c      	ldr	r5, [pc, #48]	; (80026cc <__libc_init_array+0x38>)
 800269a:	4c0d      	ldr	r4, [pc, #52]	; (80026d0 <__libc_init_array+0x3c>)
 800269c:	1b64      	subs	r4, r4, r5
 800269e:	10a4      	asrs	r4, r4, #2
 80026a0:	42a6      	cmp	r6, r4
 80026a2:	d109      	bne.n	80026b8 <__libc_init_array+0x24>
 80026a4:	f000 f822 	bl	80026ec <_init>
 80026a8:	2600      	movs	r6, #0
 80026aa:	4d0a      	ldr	r5, [pc, #40]	; (80026d4 <__libc_init_array+0x40>)
 80026ac:	4c0a      	ldr	r4, [pc, #40]	; (80026d8 <__libc_init_array+0x44>)
 80026ae:	1b64      	subs	r4, r4, r5
 80026b0:	10a4      	asrs	r4, r4, #2
 80026b2:	42a6      	cmp	r6, r4
 80026b4:	d105      	bne.n	80026c2 <__libc_init_array+0x2e>
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026bc:	4798      	blx	r3
 80026be:	3601      	adds	r6, #1
 80026c0:	e7ee      	b.n	80026a0 <__libc_init_array+0xc>
 80026c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c6:	4798      	blx	r3
 80026c8:	3601      	adds	r6, #1
 80026ca:	e7f2      	b.n	80026b2 <__libc_init_array+0x1e>
 80026cc:	08002854 	.word	0x08002854
 80026d0:	08002854 	.word	0x08002854
 80026d4:	08002854 	.word	0x08002854
 80026d8:	08002858 	.word	0x08002858

080026dc <memset>:
 80026dc:	4603      	mov	r3, r0
 80026de:	4402      	add	r2, r0
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d100      	bne.n	80026e6 <memset+0xa>
 80026e4:	4770      	bx	lr
 80026e6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ea:	e7f9      	b.n	80026e0 <memset+0x4>

080026ec <_init>:
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ee:	bf00      	nop
 80026f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f2:	bc08      	pop	{r3}
 80026f4:	469e      	mov	lr, r3
 80026f6:	4770      	bx	lr

080026f8 <_fini>:
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fa:	bf00      	nop
 80026fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fe:	bc08      	pop	{r3}
 8002700:	469e      	mov	lr, r3
 8002702:	4770      	bx	lr
