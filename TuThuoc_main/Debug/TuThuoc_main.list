
TuThuoc_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032bc  080032bc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080032bc  080032bc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032bc  080032bc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032bc  080032bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032c0  080032c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080032c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000018  080032dc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080032dc  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f8c  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001764  00000000  00000000  00027fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  00029738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  00029ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e1b  00000000  00000000  0002a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a61d  00000000  00000000  000413d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f55  00000000  00000000  0004b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd945  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d90  00000000  00000000  000cd998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08003084 	.word	0x08003084

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08003084 	.word	0x08003084

0800014c <CLCD_Delay>:
//************************** Low Level Function ****************************************************************//
uint8_t currentline;
uint8_t Xcursor,Ycursor,countWriteChar,CurrentWriteChar;
CLCD_I2C_Name LCD1;
static void CLCD_Delay(uint16_t Time)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	4618      	mov	r0, r3
 800015a:	f001 fbb9 	bl	80018d0 <HAL_Delay>
}
 800015e:	bf00      	nop
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}

08000166 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b086      	sub	sp, #24
 800016a:	af02      	add	r7, sp, #8
 800016c:	6078      	str	r0, [r7, #4]
 800016e:	460b      	mov	r3, r1
 8000170:	70fb      	strb	r3, [r7, #3]
 8000172:	4613      	mov	r3, r2
 8000174:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000176:	78fb      	ldrb	r3, [r7, #3]
 8000178:	f023 030f 	bic.w	r3, r3, #15
 800017c:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 800017e:	78fb      	ldrb	r3, [r7, #3]
 8000180:	011b      	lsls	r3, r3, #4
 8000182:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	7adb      	ldrb	r3, [r3, #11]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d007      	beq.n	800019c <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	f043 0308 	orr.w	r3, r3, #8
 8000192:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8000194:	7bbb      	ldrb	r3, [r7, #14]
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 800019c:	78bb      	ldrb	r3, [r7, #2]
 800019e:	2b01      	cmp	r3, #1
 80001a0:	d108      	bne.n	80001b4 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001a2:	7bfb      	ldrb	r3, [r7, #15]
 80001a4:	f043 0301 	orr.w	r3, r3, #1
 80001a8:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001aa:	7bbb      	ldrb	r3, [r7, #14]
 80001ac:	f043 0301 	orr.w	r3, r3, #1
 80001b0:	73bb      	strb	r3, [r7, #14]
 80001b2:	e00a      	b.n	80001ca <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001b4:	78bb      	ldrb	r3, [r7, #2]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d107      	bne.n	80001ca <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	f023 0301 	bic.w	r3, r3, #1
 80001c0:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001c2:	7bbb      	ldrb	r3, [r7, #14]
 80001c4:	f023 0301 	bic.w	r3, r3, #1
 80001c8:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f043 0304 	orr.w	r3, r3, #4
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f7ff ffb9 	bl	800014c <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001da:	7bfb      	ldrb	r3, [r7, #15]
 80001dc:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001de:	7bbb      	ldrb	r3, [r7, #14]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffaf 	bl	800014c <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	6818      	ldr	r0, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	791b      	ldrb	r3, [r3, #4]
 80001fa:	b299      	uxth	r1, r3
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2304      	movs	r3, #4
 8000208:	f001 ffbc 	bl	8002184 <HAL_I2C_Master_Transmit>

}
 800020c:	bf00      	nop
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <CLCD_I2C_Init>:
//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	4611      	mov	r1, r2
 8000220:	461a      	mov	r2, r3
 8000222:	460b      	mov	r3, r1
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	4613      	mov	r3, r2
 8000228:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	68ba      	ldr	r2, [r7, #8]
 800022e:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	79fa      	ldrb	r2, [r7, #7]
 8000234:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	79ba      	ldrb	r2, [r7, #6]
 800023a:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	7e3a      	ldrb	r2, [r7, #24]
 8000240:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2228      	movs	r2, #40	; 0x28
 8000246:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2206      	movs	r2, #6
 800024c:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	220c      	movs	r2, #12
 8000252:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	2214      	movs	r2, #20
 8000258:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	2208      	movs	r2, #8
 800025e:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000260:	2032      	movs	r0, #50	; 0x32
 8000262:	f7ff ff73 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000266:	2200      	movs	r2, #0
 8000268:	2133      	movs	r1, #51	; 0x33
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f7ff ff7b 	bl	8000166 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000270:	2200      	movs	r2, #0
 8000272:	2133      	movs	r1, #51	; 0x33
 8000274:	68f8      	ldr	r0, [r7, #12]
 8000276:	f7ff ff76 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800027a:	2005      	movs	r0, #5
 800027c:	f7ff ff66 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000280:	2200      	movs	r2, #0
 8000282:	2132      	movs	r1, #50	; 0x32
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	f7ff ff6e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028a:	2005      	movs	r0, #5
 800028c:	f7ff ff5e 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8000290:	2200      	movs	r2, #0
 8000292:	2120      	movs	r1, #32
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f7ff ff66 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029a:	2005      	movs	r0, #5
 800029c:	f7ff ff56 	bl	800014c <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	79db      	ldrb	r3, [r3, #7]
 80002a4:	2200      	movs	r2, #0
 80002a6:	4619      	mov	r1, r3
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff5c 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	7a1b      	ldrb	r3, [r3, #8]
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f7ff ff55 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	7a5b      	ldrb	r3, [r3, #9]
 80002c0:	2200      	movs	r2, #0
 80002c2:	4619      	mov	r1, r3
 80002c4:	68f8      	ldr	r0, [r7, #12]
 80002c6:	f7ff ff4e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	7a9b      	ldrb	r3, [r3, #10]
 80002ce:	2200      	movs	r2, #0
 80002d0:	4619      	mov	r1, r3
 80002d2:	68f8      	ldr	r0, [r7, #12]
 80002d4:	f7ff ff47 	bl	8000166 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002d8:	2200      	movs	r2, #0
 80002da:	2101      	movs	r1, #1
 80002dc:	68f8      	ldr	r0, [r7, #12]
 80002de:	f7ff ff42 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2102      	movs	r1, #2
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff3d 	bl	8000166 <CLCD_WriteI2C>
}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
 8000300:	4613      	mov	r3, r2
 8000302:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000304:	2300      	movs	r3, #0
 8000306:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	78fa      	ldrb	r2, [r7, #3]
 800030e:	429a      	cmp	r2, r3
 8000310:	d303      	bcc.n	800031a <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	795b      	ldrb	r3, [r3, #5]
 8000316:	3b01      	subs	r3, #1
 8000318:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	799b      	ldrb	r3, [r3, #6]
 800031e:	78ba      	ldrb	r2, [r7, #2]
 8000320:	429a      	cmp	r2, r3
 8000322:	d303      	bcc.n	800032c <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	799b      	ldrb	r3, [r3, #6]
 8000328:	3b01      	subs	r3, #1
 800032a:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 800032c:	78bb      	ldrb	r3, [r7, #2]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d102      	bne.n	8000338 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	e013      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000338:	78bb      	ldrb	r3, [r7, #2]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d103      	bne.n	8000346 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800033e:	78fb      	ldrb	r3, [r7, #3]
 8000340:	3340      	adds	r3, #64	; 0x40
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	e00c      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8000346:	78bb      	ldrb	r3, [r7, #2]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d103      	bne.n	8000354 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x10 + Xpos;
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	3310      	adds	r3, #16
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	e005      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000354:	78bb      	ldrb	r3, [r7, #2]
 8000356:	2b03      	cmp	r3, #3
 8000358:	d102      	bne.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x50 + Xpos;
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	3350      	adds	r3, #80	; 0x50
 800035e:	73fb      	strb	r3, [r7, #15]
	}
	Xcursor = Xpos;
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <CLCD_I2C_SetCursor+0xa4>)
 8000362:	78fb      	ldrb	r3, [r7, #3]
 8000364:	7013      	strb	r3, [r2, #0]

	Ycursor = Ypos;
 8000366:	4a0d      	ldr	r2, [pc, #52]	; (800039c <CLCD_I2C_SetCursor+0xa8>)
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	7013      	strb	r3, [r2, #0]
	currentline = Ycursor;
 800036c:	4b0b      	ldr	r3, [pc, #44]	; (800039c <CLCD_I2C_SetCursor+0xa8>)
 800036e:	781a      	ldrb	r2, [r3, #0]
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <CLCD_I2C_SetCursor+0xac>)
 8000372:	701a      	strb	r2, [r3, #0]
	countWriteChar = Xcursor;
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <CLCD_I2C_SetCursor+0xa4>)
 8000376:	781a      	ldrb	r2, [r3, #0]
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <CLCD_I2C_SetCursor+0xb0>)
 800037a:	701a      	strb	r2, [r3, #0]
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2200      	movs	r2, #0
 8000386:	4619      	mov	r1, r3
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff feec 	bl	8000166 <CLCD_WriteI2C>
}
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000035 	.word	0x20000035
 800039c:	20000036 	.word	0x20000036
 80003a0:	20000034 	.word	0x20000034
 80003a4:	20000037 	.word	0x20000037

080003a8 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2201      	movs	r2, #1
 80003b8:	4619      	mov	r1, r3
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f7ff fed3 	bl	8000166 <CLCD_WriteI2C>
	countWriteChar++;
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003ca:	701a      	strb	r2, [r3, #0]
	if (CurrentWriteChar)
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <CLCD_I2C_WriteChar+0x98>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d02b      	beq.n	800042c <CLCD_I2C_WriteChar+0x84>
	{
	if (countWriteChar ==20)
 80003d4:	4b19      	ldr	r3, [pc, #100]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b14      	cmp	r3, #20
 80003da:	d127      	bne.n	800042c <CLCD_I2C_WriteChar+0x84>
	{
	switch(currentline)
 80003dc:	4b19      	ldr	r3, [pc, #100]	; (8000444 <CLCD_I2C_WriteChar+0x9c>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d825      	bhi.n	8000430 <CLCD_I2C_WriteChar+0x88>
 80003e4:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <CLCD_I2C_WriteChar+0x44>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	080003fd 	.word	0x080003fd
 80003f0:	08000409 	.word	0x08000409
 80003f4:	08000415 	.word	0x08000415
 80003f8:	08000421 	.word	0x08000421
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2100      	movs	r1, #0
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 8000402:	f7ff ff77 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 8000406:	e014      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8000408:	2202      	movs	r2, #2
 800040a:	2100      	movs	r1, #0
 800040c:	480e      	ldr	r0, [pc, #56]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 800040e:	f7ff ff71 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 8000412:	e00e      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 8000414:	2203      	movs	r2, #3
 8000416:	2100      	movs	r1, #0
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 800041a:	f7ff ff6b 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 800041e:	e008      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	2100      	movs	r1, #0
 8000424:	4808      	ldr	r0, [pc, #32]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 8000426:	f7ff ff65 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 800042a:	e002      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				default:
								break;
			}
		}
 800042c:	bf00      	nop
 800042e:	e000      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
								break;
 8000430:	bf00      	nop
	}
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000037 	.word	0x20000037
 8000440:	20000038 	.word	0x20000038
 8000444:	20000034 	.word	0x20000034
 8000448:	2000003c 	.word	0x2000003c

0800044c <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
	while (*String)
 8000456:	e04a      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
	{
	CurrentWriteChar=0;
 8000458:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <CLCD_I2C_WriteString+0xbc>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	e00e      	b.n	8000482 <CLCD_I2C_WriteString+0x36>
		{
			if (*String)
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d012      	beq.n	8000492 <CLCD_I2C_WriteString+0x46>
			{
				CLCD_I2C_WriteChar(LCD, *String++);
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	1c5a      	adds	r2, r3, #1
 8000470:	603a      	str	r2, [r7, #0]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4619      	mov	r1, r3
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f7ff ff96 	bl	80003a8 <CLCD_I2C_WriteChar>
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	3301      	adds	r3, #1
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	7bfa      	ldrb	r2, [r7, #15]
 8000484:	4b21      	ldr	r3, [pc, #132]	; (800050c <CLCD_I2C_WriteString+0xc0>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f1c3 0314 	rsb	r3, r3, #20
 800048c:	429a      	cmp	r2, r3
 800048e:	dbe9      	blt.n	8000464 <CLCD_I2C_WriteString+0x18>
 8000490:	e000      	b.n	8000494 <CLCD_I2C_WriteString+0x48>
			}
			else break;
 8000492:	bf00      	nop
		}
		if (*String)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d02d      	beq.n	80004f8 <CLCD_I2C_WriteString+0xac>
		{
			switch(currentline)
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <CLCD_I2C_WriteString+0xc4>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d823      	bhi.n	80004ec <CLCD_I2C_WriteString+0xa0>
 80004a4:	a201      	add	r2, pc, #4	; (adr r2, 80004ac <CLCD_I2C_WriteString+0x60>)
 80004a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004aa:	bf00      	nop
 80004ac:	080004bd 	.word	0x080004bd
 80004b0:	080004c9 	.word	0x080004c9
 80004b4:	080004d5 	.word	0x080004d5
 80004b8:	080004e1 	.word	0x080004e1
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2100      	movs	r1, #0
 80004c0:	4814      	ldr	r0, [pc, #80]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004c2:	f7ff ff17 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004c6:	e012      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 80004c8:	2202      	movs	r2, #2
 80004ca:	2100      	movs	r1, #0
 80004cc:	4811      	ldr	r0, [pc, #68]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004ce:	f7ff ff11 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004d2:	e00c      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 80004d4:	2203      	movs	r2, #3
 80004d6:	2100      	movs	r1, #0
 80004d8:	480e      	ldr	r0, [pc, #56]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004da:	f7ff ff0b 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004de:	e006      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2100      	movs	r1, #0
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004e6:	f7ff ff05 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004ea:	e000      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				default:
								break;
 80004ec:	bf00      	nop
	while (*String)
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d1b0      	bne.n	8000458 <CLCD_I2C_WriteString+0xc>
 80004f6:	e000      	b.n	80004fa <CLCD_I2C_WriteString+0xae>
			}
		}
		else break;
 80004f8:	bf00      	nop

		}
	CurrentWriteChar=1;
 80004fa:	4b03      	ldr	r3, [pc, #12]	; (8000508 <CLCD_I2C_WriteString+0xbc>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000038 	.word	0x20000038
 800050c:	20000035 	.word	0x20000035
 8000510:	20000034 	.word	0x20000034
 8000514:	2000003c 	.word	0x2000003c

08000518 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000520:	2200      	movs	r2, #0
 8000522:	2101      	movs	r1, #1
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff fe1e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800052a:	2005      	movs	r0, #5
 800052c:	f7ff fe0e 	bl	800014c <CLCD_Delay>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <KeyPad_Init>:
void KeyPad_Init(	GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD,
					GPIO_TypeDef* C_port0, GPIO_TypeDef* C_port1, GPIO_TypeDef* C_port2, GPIO_TypeDef* C_port3,\
					uint16_t C_pin0, uint16_t C_pin1, uint16_t C_pin2, uint16_t C_pin3,\
					GPIO_TypeDef* R_port0, GPIO_TypeDef* R_port1, GPIO_TypeDef* R_port2, GPIO_TypeDef* R_port3,\
					uint16_t R_pin0, uint16_t R_pin1, uint16_t R_pin2, uint16_t R_pin3)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	603b      	str	r3, [r7, #0]
	//OUTPUT
  COL_KEY_PAD->PORT.GPIO0 = C_port0;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
  COL_KEY_PAD->PORT.GPIO1 = C_port1;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	683a      	ldr	r2, [r7, #0]
 8000550:	605a      	str	r2, [r3, #4]
  COL_KEY_PAD->PORT.GPIO2 = C_port2;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	69ba      	ldr	r2, [r7, #24]
 8000556:	609a      	str	r2, [r3, #8]
  COL_KEY_PAD->PORT.GPIO3 = C_port3;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	69fa      	ldr	r2, [r7, #28]
 800055c:	60da      	str	r2, [r3, #12]

  COL_KEY_PAD->PIN.GPIO_PIN_A = C_pin0;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	8c3a      	ldrh	r2, [r7, #32]
 8000562:	821a      	strh	r2, [r3, #16]
  COL_KEY_PAD->PIN.GPIO_PIN_B = C_pin1;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000568:	825a      	strh	r2, [r3, #18]
  COL_KEY_PAD->PIN.GPIO_PIN_C = C_pin2;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800056e:	829a      	strh	r2, [r3, #20]
  COL_KEY_PAD->PIN.GPIO_PIN_D = C_pin3;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000574:	82da      	strh	r2, [r3, #22]
  //INPUT
  ROW_KEY_PAD->PORT.GPIO0 = R_port0;
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800057a:	601a      	str	r2, [r3, #0]
  ROW_KEY_PAD->PORT.GPIO1 = R_port1;
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000580:	605a      	str	r2, [r3, #4]
  ROW_KEY_PAD->PORT.GPIO2 = R_port2;
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000586:	609a      	str	r2, [r3, #8]
  ROW_KEY_PAD->PORT.GPIO3 = R_port3;
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800058c:	60da      	str	r2, [r3, #12]

  ROW_KEY_PAD->PIN.GPIO_PIN_A = R_pin0;
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000594:	821a      	strh	r2, [r3, #16]
  ROW_KEY_PAD->PIN.GPIO_PIN_B = R_pin1;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800059c:	825a      	strh	r2, [r3, #18]
  ROW_KEY_PAD->PIN.GPIO_PIN_C = R_pin2;
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80005a4:	829a      	strh	r2, [r3, #20]
  ROW_KEY_PAD->PIN.GPIO_PIN_D = R_pin3;
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80005ac:	82da      	strh	r2, [r3, #22]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <Check_Keypad_Column>:
  +) RETURN:
    -Keypad_Button_Values[Row-x][x+1]   : Keypad_Button_Values
    -KEYPAD_NOT_PRESSED                 : "\0" (Không ấn nút)
*/
static char Check_Keypad_Column(GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main, uint8_t Row)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	70fb      	strb	r3, [r7, #3]
	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO0, ROW_KEY_PAD_main->PIN.GPIO_PIN_A)) //If ROW_1 is LOW
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	8a1b      	ldrh	r3, [r3, #16]
 80005cc:	4619      	mov	r1, r3
 80005ce:	4610      	mov	r0, r2
 80005d0:	f001 fc34 	bl	8001e3c <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d105      	bne.n	80005e6 <Check_Keypad_Column+0x2e>
	{
		return Keypad_Button_Values[Row-1][0];
 80005da:	78fb      	ldrb	r3, [r7, #3]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a1f      	ldr	r2, [pc, #124]	; (800065c <Check_Keypad_Column+0xa4>)
 80005e0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80005e4:	e036      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO1, ROW_KEY_PAD_main->PIN.GPIO_PIN_B)) //If ROW_2 is LOW
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	8a5b      	ldrh	r3, [r3, #18]
 80005ee:	4619      	mov	r1, r3
 80005f0:	4610      	mov	r0, r2
 80005f2:	f001 fc23 	bl	8001e3c <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d106      	bne.n	800060a <Check_Keypad_Column+0x52>
	{
		return Keypad_Button_Values[Row-1][1];
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	3b01      	subs	r3, #1
 8000600:	4a16      	ldr	r2, [pc, #88]	; (800065c <Check_Keypad_Column+0xa4>)
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	785b      	ldrb	r3, [r3, #1]
 8000608:	e024      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}

    if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO2, ROW_KEY_PAD_main->PIN.GPIO_PIN_C)) //If ROW_3 is LOW
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689a      	ldr	r2, [r3, #8]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	8a9b      	ldrh	r3, [r3, #20]
 8000612:	4619      	mov	r1, r3
 8000614:	4610      	mov	r0, r2
 8000616:	f001 fc11 	bl	8001e3c <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d106      	bne.n	800062e <Check_Keypad_Column+0x76>
	{
		return Keypad_Button_Values[Row-1][2];
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	3b01      	subs	r3, #1
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <Check_Keypad_Column+0xa4>)
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	4413      	add	r3, r2
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	e012      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO3, ROW_KEY_PAD_main->PIN.GPIO_PIN_D)) //If ROW_4 is LOW
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	68da      	ldr	r2, [r3, #12]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	8adb      	ldrh	r3, [r3, #22]
 8000636:	4619      	mov	r1, r3
 8000638:	4610      	mov	r0, r2
 800063a:	f001 fbff 	bl	8001e3c <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d106      	bne.n	8000652 <Check_Keypad_Column+0x9a>
	{
		return Keypad_Button_Values[Row-1][3];
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <Check_Keypad_Column+0xa4>)
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	78db      	ldrb	r3, [r3, #3]
 8000650:	e000      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}
	return KEYPAD_NOT_PRESSED;                   //If NO Key is pressed
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	08003280 	.word	0x08003280

08000660 <KEYPAD_Read>:
  +) RETURN:
    -char check                                  	: const char Keypad_Button_Values[x][y]
    -KEYPAD_NOT_PRESSED                     		: '\0' {reason of failed)
*/
static char KEYPAD_Read(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main, uint8_t* row)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
    char check = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	75fb      	strb	r3, [r7, #23]
    /*Set COL_1 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_RESET);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	8a1b      	ldrh	r3, [r3, #16]
 8000678:	2200      	movs	r2, #0
 800067a:	4619      	mov	r1, r3
 800067c:	f001 fbf5 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6858      	ldr	r0, [r3, #4]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	8a5b      	ldrh	r3, [r3, #18]
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	f001 fbed 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	6898      	ldr	r0, [r3, #8]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	8a9b      	ldrh	r3, [r3, #20]
 8000698:	2201      	movs	r2, #1
 800069a:	4619      	mov	r1, r3
 800069c:	f001 fbe5 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	68d8      	ldr	r0, [r3, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	8adb      	ldrh	r3, [r3, #22]
 80006a8:	2201      	movs	r2, #1
 80006aa:	4619      	mov	r1, r3
 80006ac:	f001 fbdd 	bl	8001e6a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 1);
 80006b0:	2101      	movs	r1, #1
 80006b2:	68b8      	ldr	r0, [r7, #8]
 80006b4:	f7ff ff80 	bl	80005b8 <Check_Keypad_Column>
 80006b8:	4603      	mov	r3, r0
 80006ba:	75fb      	strb	r3, [r7, #23]
    if(check)
 80006bc:	7dfb      	ldrb	r3, [r7, #23]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d007      	beq.n	80006d2 <KEYPAD_Read+0x72>
    {
    	*row = *row + 1;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	701a      	strb	r2, [r3, #0]
    	return check;
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	e093      	b.n	80007fa <KEYPAD_Read+0x19a>
    }
    /*Set COL_2 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	8a1b      	ldrh	r3, [r3, #16]
 80006da:	2201      	movs	r2, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	f001 fbc4 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_RESET);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	6858      	ldr	r0, [r3, #4]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	8a5b      	ldrh	r3, [r3, #18]
 80006ea:	2200      	movs	r2, #0
 80006ec:	4619      	mov	r1, r3
 80006ee:	f001 fbbc 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6898      	ldr	r0, [r3, #8]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	8a9b      	ldrh	r3, [r3, #20]
 80006fa:	2201      	movs	r2, #1
 80006fc:	4619      	mov	r1, r3
 80006fe:	f001 fbb4 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	68d8      	ldr	r0, [r3, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	8adb      	ldrh	r3, [r3, #22]
 800070a:	2201      	movs	r2, #1
 800070c:	4619      	mov	r1, r3
 800070e:	f001 fbac 	bl	8001e6a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 2);
 8000712:	2102      	movs	r1, #2
 8000714:	68b8      	ldr	r0, [r7, #8]
 8000716:	f7ff ff4f 	bl	80005b8 <Check_Keypad_Column>
 800071a:	4603      	mov	r3, r0
 800071c:	75fb      	strb	r3, [r7, #23]
    if(check)
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d007      	beq.n	8000734 <KEYPAD_Read+0xd4>
    {
    	*row = *row + 1;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	b2da      	uxtb	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	701a      	strb	r2, [r3, #0]
    	return check;
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	e062      	b.n	80007fa <KEYPAD_Read+0x19a>
    }
    /*Set COL_3 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	8a1b      	ldrh	r3, [r3, #16]
 800073c:	2201      	movs	r2, #1
 800073e:	4619      	mov	r1, r3
 8000740:	f001 fb93 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	6858      	ldr	r0, [r3, #4]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	8a5b      	ldrh	r3, [r3, #18]
 800074c:	2201      	movs	r2, #1
 800074e:	4619      	mov	r1, r3
 8000750:	f001 fb8b 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_RESET);
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	6898      	ldr	r0, [r3, #8]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	8a9b      	ldrh	r3, [r3, #20]
 800075c:	2200      	movs	r2, #0
 800075e:	4619      	mov	r1, r3
 8000760:	f001 fb83 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	68d8      	ldr	r0, [r3, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	8adb      	ldrh	r3, [r3, #22]
 800076c:	2201      	movs	r2, #1
 800076e:	4619      	mov	r1, r3
 8000770:	f001 fb7b 	bl	8001e6a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 3);
 8000774:	2103      	movs	r1, #3
 8000776:	68b8      	ldr	r0, [r7, #8]
 8000778:	f7ff ff1e 	bl	80005b8 <Check_Keypad_Column>
 800077c:	4603      	mov	r3, r0
 800077e:	75fb      	strb	r3, [r7, #23]
    if(check)
 8000780:	7dfb      	ldrb	r3, [r7, #23]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d007      	beq.n	8000796 <KEYPAD_Read+0x136>
    {
    	*row = *row + 1;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	b2da      	uxtb	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	701a      	strb	r2, [r3, #0]
    	return check;
 8000792:	7dfb      	ldrb	r3, [r7, #23]
 8000794:	e031      	b.n	80007fa <KEYPAD_Read+0x19a>
    }
    /*Set COL_4 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	8a1b      	ldrh	r3, [r3, #16]
 800079e:	2201      	movs	r2, #1
 80007a0:	4619      	mov	r1, r3
 80007a2:	f001 fb62 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6858      	ldr	r0, [r3, #4]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	8a5b      	ldrh	r3, [r3, #18]
 80007ae:	2201      	movs	r2, #1
 80007b0:	4619      	mov	r1, r3
 80007b2:	f001 fb5a 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6898      	ldr	r0, [r3, #8]
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	8a9b      	ldrh	r3, [r3, #20]
 80007be:	2201      	movs	r2, #1
 80007c0:	4619      	mov	r1, r3
 80007c2:	f001 fb52 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_RESET);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	68d8      	ldr	r0, [r3, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	8adb      	ldrh	r3, [r3, #22]
 80007ce:	2200      	movs	r2, #0
 80007d0:	4619      	mov	r1, r3
 80007d2:	f001 fb4a 	bl	8001e6a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 4);
 80007d6:	2104      	movs	r1, #4
 80007d8:	68b8      	ldr	r0, [r7, #8]
 80007da:	f7ff feed 	bl	80005b8 <Check_Keypad_Column>
 80007de:	4603      	mov	r3, r0
 80007e0:	75fb      	strb	r3, [r7, #23]
    if(check)
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d007      	beq.n	80007f8 <KEYPAD_Read+0x198>
    {
    	*row = *row + 1;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	701a      	strb	r2, [r3, #0]
    	return check;
 80007f4:	7dfb      	ldrb	r3, [r7, #23]
 80007f6:	e000      	b.n	80007fa <KEYPAD_Read+0x19a>
    }
    /*Key not pressed */
    return KEYPAD_NOT_PRESSED;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <KEYPAD_Handler>:
  +) RETURN:
    -char check                                  	: const char Keypad_Button_Values[x][y]
    -KEYPAD_NOT_PRESSED                     		: '\0' {reason of failed)
*/
char KEYPAD_Handler(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main, uint8_t* row)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	60f8      	str	r0, [r7, #12]
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
	char key = KEYPAD_Read(COL_KEY_PAD, ROW_KEY_PAD_main, row);;
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f7ff ff24 	bl	8000660 <KEYPAD_Read>
 8000818:	4603      	mov	r3, r0
 800081a:	75fb      	strb	r3, [r7, #23]

    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_RESET);
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	8a1b      	ldrh	r3, [r3, #16]
 8000824:	2200      	movs	r2, #0
 8000826:	4619      	mov	r1, r3
 8000828:	f001 fb1f 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_RESET);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	6858      	ldr	r0, [r3, #4]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	8a5b      	ldrh	r3, [r3, #18]
 8000834:	2200      	movs	r2, #0
 8000836:	4619      	mov	r1, r3
 8000838:	f001 fb17 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_RESET);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	6898      	ldr	r0, [r3, #8]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	8a9b      	ldrh	r3, [r3, #20]
 8000844:	2200      	movs	r2, #0
 8000846:	4619      	mov	r1, r3
 8000848:	f001 fb0f 	bl	8001e6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_RESET);
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	68d8      	ldr	r0, [r3, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	8adb      	ldrh	r3, [r3, #22]
 8000854:	2200      	movs	r2, #0
 8000856:	4619      	mov	r1, r3
 8000858:	f001 fb07 	bl	8001e6a <HAL_GPIO_WritePin>
    return key;
 800085c:	7dfb      	ldrb	r3, [r7, #23]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <lcd_user_display>:
    -STATUS_DISPLAY_TYPEDEF status_display         : STATUS_1 -> STATUS_7
  +) RETURN:
    -void
*/
void lcd_user_display(CLCD_I2C_Name* LCD_user, STATUS_DISPLAY_TYPEDEF status_display)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
	if(language == ENGLISH)
 8000874:	4bb1      	ldr	r3, [pc, #708]	; (8000b3c <lcd_user_display+0x2d4>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	f040 80ee 	bne.w	8000a5a <lcd_user_display+0x1f2>
	{
		if(status_display == STATUS_1)
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d124      	bne.n	80008ce <lcd_user_display+0x66>
			{
				// dislay hello ! Status_Display=0
				CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff fd33 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 800088e:	49ac      	ldr	r1, [pc, #688]	; (8000b40 <lcd_user_display+0x2d8>)
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff fddb 	bl	800044c <CLCD_I2C_WriteString>

				CLCD_I2C_SetCursor(LCD_user, 3, 1);
 8000896:	2201      	movs	r2, #1
 8000898:	2103      	movs	r1, #3
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff fd2a 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"KHOA CO KHI");
 80008a0:	49a8      	ldr	r1, [pc, #672]	; (8000b44 <lcd_user_display+0x2dc>)
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff fdd2 	bl	800044c <CLCD_I2C_WriteString>

				CLCD_I2C_SetCursor(LCD_user, 4, 2);
 80008a8:	2202      	movs	r2, #2
 80008aa:	2104      	movs	r1, #4
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff fd21 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 80008b2:	49a5      	ldr	r1, [pc, #660]	; (8000b48 <lcd_user_display+0x2e0>)
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff fdc9 	bl	800044c <CLCD_I2C_WriteString>

				CLCD_I2C_SetCursor(LCD_user, 0, 3);
 80008ba:	2203      	movs	r2, #3
 80008bc:	2100      	movs	r1, #0
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff fd18 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Please Set Mode!");
 80008c4:	49a1      	ldr	r1, [pc, #644]	; (8000b4c <lcd_user_display+0x2e4>)
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff fdc0 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
			CLCD_I2C_WriteString(LCD_user,"-EXIT");
		}
	}/*END if(language == ENGLISH)*/

}
 80008cc:	e1f3      	b.n	8000cb6 <lcd_user_display+0x44e>
			else if(status_display == STATUS_2)
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d124      	bne.n	800091e <lcd_user_display+0xb6>
				CLCD_I2C_SetCursor(LCD_user, 3, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2103      	movs	r1, #3
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff fd0b 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"SELECT MODE");
 80008de:	499c      	ldr	r1, [pc, #624]	; (8000b50 <lcd_user_display+0x2e8>)
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff fdb3 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2100      	movs	r1, #0
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff fd02 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"-Language");
 80008f0:	4998      	ldr	r1, [pc, #608]	; (8000b54 <lcd_user_display+0x2ec>)
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff fdaa 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 2);
 80008f8:	2202      	movs	r2, #2
 80008fa:	2100      	movs	r1, #0
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff fcf9 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"-Enter password");
 8000902:	4995      	ldr	r1, [pc, #596]	; (8000b58 <lcd_user_display+0x2f0>)
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff fda1 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 3);
 800090a:	2203      	movs	r2, #3
 800090c:	2100      	movs	r1, #0
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff fcf0 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"-Exit");
 8000914:	4991      	ldr	r1, [pc, #580]	; (8000b5c <lcd_user_display+0x2f4>)
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fd98 	bl	800044c <CLCD_I2C_WriteString>
}
 800091c:	e1cb      	b.n	8000cb6 <lcd_user_display+0x44e>
			else if(status_display == STATUS_3)
 800091e:	78fb      	ldrb	r3, [r7, #3]
 8000920:	2b03      	cmp	r3, #3
 8000922:	d133      	bne.n	800098c <lcd_user_display+0x124>
				CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fce3 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Enter ur number:");
 800092e:	498c      	ldr	r1, [pc, #560]	; (8000b60 <lcd_user_display+0x2f8>)
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fd8b 	bl	800044c <CLCD_I2C_WriteString>
				if(state_star_pass == STAR)
 8000936:	4b8b      	ldr	r3, [pc, #556]	; (8000b64 <lcd_user_display+0x2fc>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d109      	bne.n	8000954 <lcd_user_display+0xec>
					CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000940:	2201      	movs	r2, #1
 8000942:	2100      	movs	r1, #0
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff fcd5 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(LCD_user,">*****");
 800094a:	4987      	ldr	r1, [pc, #540]	; (8000b68 <lcd_user_display+0x300>)
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fd7d 	bl	800044c <CLCD_I2C_WriteString>
 8000952:	e008      	b.n	8000966 <lcd_user_display+0xfe>
					CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000954:	2201      	movs	r2, #1
 8000956:	2100      	movs	r1, #0
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fccb 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(LCD_user,">");
 800095e:	4983      	ldr	r1, [pc, #524]	; (8000b6c <lcd_user_display+0x304>)
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fd73 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000966:	2202      	movs	r2, #2
 8000968:	2100      	movs	r1, #0
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff fcc2 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Password: ");
 8000970:	497f      	ldr	r1, [pc, #508]	; (8000b70 <lcd_user_display+0x308>)
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff fd6a 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000978:	2203      	movs	r2, #3
 800097a:	2100      	movs	r1, #0
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fcb9 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Exit");
 8000982:	497c      	ldr	r1, [pc, #496]	; (8000b74 <lcd_user_display+0x30c>)
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff fd61 	bl	800044c <CLCD_I2C_WriteString>
}
 800098a:	e194      	b.n	8000cb6 <lcd_user_display+0x44e>
			else if(status_display == STATUS_4)
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	2b04      	cmp	r3, #4
 8000990:	d11b      	bne.n	80009ca <lcd_user_display+0x162>
				CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fcac 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Password OKE!");
 800099c:	4976      	ldr	r1, [pc, #472]	; (8000b78 <lcd_user_display+0x310>)
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff fd54 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2100      	movs	r1, #0
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fca3 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Wait few ");
 80009ae:	4973      	ldr	r1, [pc, #460]	; (8000b7c <lcd_user_display+0x314>)
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff fd4b 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 3, 2);
 80009b6:	2202      	movs	r2, #2
 80009b8:	2103      	movs	r1, #3
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff fc9a 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"minutes...");
 80009c0:	496f      	ldr	r1, [pc, #444]	; (8000b80 <lcd_user_display+0x318>)
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff fd42 	bl	800044c <CLCD_I2C_WriteString>
}
 80009c8:	e175      	b.n	8000cb6 <lcd_user_display+0x44e>
			else if(status_display == STATUS_5)
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	2b05      	cmp	r3, #5
 80009ce:	d11b      	bne.n	8000a08 <lcd_user_display+0x1a0>
			  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2100      	movs	r1, #0
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff fc8d 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"Password FAIL!");
 80009da:	496a      	ldr	r1, [pc, #424]	; (8000b84 <lcd_user_display+0x31c>)
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff fd35 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80009e2:	2201      	movs	r2, #1
 80009e4:	2100      	movs	r1, #0
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fc84 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"\"Enter\" to enter");
 80009ec:	4966      	ldr	r1, [pc, #408]	; (8000b88 <lcd_user_display+0x320>)
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff fd2c 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 80009f4:	2202      	movs	r2, #2
 80009f6:	2104      	movs	r1, #4
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fc7b 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"new password :<");
 80009fe:	4963      	ldr	r1, [pc, #396]	; (8000b8c <lcd_user_display+0x324>)
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff fd23 	bl	800044c <CLCD_I2C_WriteString>
}
 8000a06:	e156      	b.n	8000cb6 <lcd_user_display+0x44e>
			else if(status_display == STATUS_6)
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	f040 8153 	bne.w	8000cb6 <lcd_user_display+0x44e>
				CLCD_I2C_SetCursor(LCD_user, 3, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2103      	movs	r1, #3
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff fc6d 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Language");
 8000a1a:	495d      	ldr	r1, [pc, #372]	; (8000b90 <lcd_user_display+0x328>)
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff fd15 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2100      	movs	r1, #0
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff fc64 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 8000a2c:	4959      	ldr	r1, [pc, #356]	; (8000b94 <lcd_user_display+0x32c>)
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fd0c 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000a34:	2202      	movs	r2, #2
 8000a36:	2100      	movs	r1, #0
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff fc5b 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"-English");
 8000a3e:	4956      	ldr	r1, [pc, #344]	; (8000b98 <lcd_user_display+0x330>)
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff fd03 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000a46:	2203      	movs	r2, #3
 8000a48:	2100      	movs	r1, #0
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fc52 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"-EXIT");
 8000a50:	4952      	ldr	r1, [pc, #328]	; (8000b9c <lcd_user_display+0x334>)
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff fcfa 	bl	800044c <CLCD_I2C_WriteString>
}
 8000a58:	e12d      	b.n	8000cb6 <lcd_user_display+0x44e>
	else if(language == VIETNAMESE)
 8000a5a:	4b38      	ldr	r3, [pc, #224]	; (8000b3c <lcd_user_display+0x2d4>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f040 8129 	bne.w	8000cb6 <lcd_user_display+0x44e>
		if(status_display == STATUS_1)
 8000a64:	78fb      	ldrb	r3, [r7, #3]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d124      	bne.n	8000ab4 <lcd_user_display+0x24c>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff fc40 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 8000a74:	4932      	ldr	r1, [pc, #200]	; (8000b40 <lcd_user_display+0x2d8>)
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff fce8 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 3, 1);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2103      	movs	r1, #3
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff fc37 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"KHOA CO KHI");
 8000a86:	492f      	ldr	r1, [pc, #188]	; (8000b44 <lcd_user_display+0x2dc>)
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff fcdf 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000a8e:	2202      	movs	r2, #2
 8000a90:	2104      	movs	r1, #4
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fc2e 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 8000a98:	492b      	ldr	r1, [pc, #172]	; (8000b48 <lcd_user_display+0x2e0>)
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff fcd6 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff fc25 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Please Set Mode!");
 8000aaa:	4928      	ldr	r1, [pc, #160]	; (8000b4c <lcd_user_display+0x2e4>)
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff fccd 	bl	800044c <CLCD_I2C_WriteString>
}
 8000ab2:	e100      	b.n	8000cb6 <lcd_user_display+0x44e>
		else if(status_display == STATUS_2)
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d124      	bne.n	8000b04 <lcd_user_display+0x29c>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff fc18 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Lua chon che do:");
 8000ac4:	4936      	ldr	r1, [pc, #216]	; (8000ba0 <lcd_user_display+0x338>)
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff fcc0 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2100      	movs	r1, #0
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fc0f 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Ngon ngu");
 8000ad6:	4933      	ldr	r1, [pc, #204]	; (8000ba4 <lcd_user_display+0x33c>)
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff fcb7 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000ade:	2202      	movs	r2, #2
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fc06 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Nhap ma pin");
 8000ae8:	492f      	ldr	r1, [pc, #188]	; (8000ba8 <lcd_user_display+0x340>)
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff fcae 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000af0:	2203      	movs	r2, #3
 8000af2:	2100      	movs	r1, #0
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff fbfd 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Thoat");
 8000afa:	492c      	ldr	r1, [pc, #176]	; (8000bac <lcd_user_display+0x344>)
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fca5 	bl	800044c <CLCD_I2C_WriteString>
}
 8000b02:	e0d8      	b.n	8000cb6 <lcd_user_display+0x44e>
		else if(status_display == STATUS_3)
 8000b04:	78fb      	ldrb	r3, [r7, #3]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d170      	bne.n	8000bec <lcd_user_display+0x384>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff fbf0 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Nhap stt cua ban");
 8000b14:	4926      	ldr	r1, [pc, #152]	; (8000bb0 <lcd_user_display+0x348>)
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fc98 	bl	800044c <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <lcd_user_display+0x2fc>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d146      	bne.n	8000bb4 <lcd_user_display+0x34c>
				CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2100      	movs	r1, #0
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fbe2 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*****");
 8000b30:	490d      	ldr	r1, [pc, #52]	; (8000b68 <lcd_user_display+0x300>)
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff fc8a 	bl	800044c <CLCD_I2C_WriteString>
 8000b38:	e045      	b.n	8000bc6 <lcd_user_display+0x35e>
 8000b3a:	bf00      	nop
 8000b3c:	2000004f 	.word	0x2000004f
 8000b40:	0800309c 	.word	0x0800309c
 8000b44:	080030b0 	.word	0x080030b0
 8000b48:	080030bc 	.word	0x080030bc
 8000b4c:	080030c8 	.word	0x080030c8
 8000b50:	080030dc 	.word	0x080030dc
 8000b54:	080030e8 	.word	0x080030e8
 8000b58:	080030f4 	.word	0x080030f4
 8000b5c:	08003104 	.word	0x08003104
 8000b60:	0800310c 	.word	0x0800310c
 8000b64:	2000004c 	.word	0x2000004c
 8000b68:	08003120 	.word	0x08003120
 8000b6c:	08003128 	.word	0x08003128
 8000b70:	0800312c 	.word	0x0800312c
 8000b74:	08003138 	.word	0x08003138
 8000b78:	08003140 	.word	0x08003140
 8000b7c:	08003150 	.word	0x08003150
 8000b80:	0800315c 	.word	0x0800315c
 8000b84:	08003168 	.word	0x08003168
 8000b88:	08003178 	.word	0x08003178
 8000b8c:	0800318c 	.word	0x0800318c
 8000b90:	0800319c 	.word	0x0800319c
 8000b94:	080031a8 	.word	0x080031a8
 8000b98:	080031b4 	.word	0x080031b4
 8000b9c:	080031c0 	.word	0x080031c0
 8000ba0:	080031c8 	.word	0x080031c8
 8000ba4:	080031dc 	.word	0x080031dc
 8000ba8:	080031e8 	.word	0x080031e8
 8000bac:	080031f8 	.word	0x080031f8
 8000bb0:	08003200 	.word	0x08003200
				CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff fb9b 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8000bbe:	4940      	ldr	r1, [pc, #256]	; (8000cc0 <lcd_user_display+0x458>)
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fc43 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	2100      	movs	r1, #0
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff fb92 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"PIN: ");
 8000bd0:	493c      	ldr	r1, [pc, #240]	; (8000cc4 <lcd_user_display+0x45c>)
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff fc3a 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000bd8:	2203      	movs	r2, #3
 8000bda:	2100      	movs	r1, #0
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff fb89 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Thoat");
 8000be2:	4939      	ldr	r1, [pc, #228]	; (8000cc8 <lcd_user_display+0x460>)
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fc31 	bl	800044c <CLCD_I2C_WriteString>
}
 8000bea:	e064      	b.n	8000cb6 <lcd_user_display+0x44e>
		else if(status_display == STATUS_4)
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	d11b      	bne.n	8000c2a <lcd_user_display+0x3c2>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff fb7c 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"PIN OKE!");
 8000bfc:	4933      	ldr	r1, [pc, #204]	; (8000ccc <lcd_user_display+0x464>)
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff fc24 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000c04:	2201      	movs	r2, #1
 8000c06:	2100      	movs	r1, #0
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fb73 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Cho");
 8000c0e:	4930      	ldr	r1, [pc, #192]	; (8000cd0 <lcd_user_display+0x468>)
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff fc1b 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 3, 2);
 8000c16:	2202      	movs	r2, #2
 8000c18:	2103      	movs	r1, #3
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fb6a 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"1 phut...");
 8000c20:	492c      	ldr	r1, [pc, #176]	; (8000cd4 <lcd_user_display+0x46c>)
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff fc12 	bl	800044c <CLCD_I2C_WriteString>
}
 8000c28:	e045      	b.n	8000cb6 <lcd_user_display+0x44e>
		else if(status_display == STATUS_5)
 8000c2a:	78fb      	ldrb	r3, [r7, #3]
 8000c2c:	2b05      	cmp	r3, #5
 8000c2e:	d11b      	bne.n	8000c68 <lcd_user_display+0x400>
		  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff fb5d 	bl	80002f4 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"PIN sai!");
 8000c3a:	4927      	ldr	r1, [pc, #156]	; (8000cd8 <lcd_user_display+0x470>)
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff fc05 	bl	800044c <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2100      	movs	r1, #0
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff fb54 	bl	80002f4 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"\"Nhap\" de nhap");
 8000c4c:	4923      	ldr	r1, [pc, #140]	; (8000cdc <lcd_user_display+0x474>)
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff fbfc 	bl	800044c <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000c54:	2202      	movs	r2, #2
 8000c56:	2104      	movs	r1, #4
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff fb4b 	bl	80002f4 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"PIN moi :<");
 8000c5e:	4920      	ldr	r1, [pc, #128]	; (8000ce0 <lcd_user_display+0x478>)
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff fbf3 	bl	800044c <CLCD_I2C_WriteString>
}
 8000c66:	e026      	b.n	8000cb6 <lcd_user_display+0x44e>
		else if(status_display == STATUS_6)
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d123      	bne.n	8000cb6 <lcd_user_display+0x44e>
			CLCD_I2C_SetCursor(LCD_user, 3, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2103      	movs	r1, #3
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff fb3e 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Ngon ngu");
 8000c78:	491a      	ldr	r1, [pc, #104]	; (8000ce4 <lcd_user_display+0x47c>)
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fbe6 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2100      	movs	r1, #0
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff fb35 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 8000c8a:	4917      	ldr	r1, [pc, #92]	; (8000ce8 <lcd_user_display+0x480>)
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fbdd 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000c92:	2202      	movs	r2, #2
 8000c94:	2100      	movs	r1, #0
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fb2c 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-English");
 8000c9c:	4913      	ldr	r1, [pc, #76]	; (8000cec <lcd_user_display+0x484>)
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff fbd4 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff fb23 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-EXIT");
 8000cae:	4910      	ldr	r1, [pc, #64]	; (8000cf0 <lcd_user_display+0x488>)
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff fbcb 	bl	800044c <CLCD_I2C_WriteString>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	08003128 	.word	0x08003128
 8000cc4:	08003214 	.word	0x08003214
 8000cc8:	0800321c 	.word	0x0800321c
 8000ccc:	08003224 	.word	0x08003224
 8000cd0:	08003230 	.word	0x08003230
 8000cd4:	08003234 	.word	0x08003234
 8000cd8:	08003240 	.word	0x08003240
 8000cdc:	0800324c 	.word	0x0800324c
 8000ce0:	0800325c 	.word	0x0800325c
 8000ce4:	08003268 	.word	0x08003268
 8000ce8:	080031a8 	.word	0x080031a8
 8000cec:	080031b4 	.word	0x080031b4
 8000cf0:	080031c0 	.word	0x080031c0

08000cf4 <lcd_system_handler>:
    -CLCD_I2C_Name* LCD_user            : pointer lcd
  +) RETURN:
    -void
*/
void lcd_system_handler(CLCD_I2C_Name* LCD_user)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	if(delete)
 8000cfc:	4ba4      	ldr	r3, [pc, #656]	; (8000f90 <lcd_system_handler+0x29c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <lcd_system_handler+0x1c>
	{
		CLCD_I2C_Clear(LCD_user);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fc07 	bl	8000518 <CLCD_I2C_Clear>
		delete = 0;
 8000d0a:	4ba1      	ldr	r3, [pc, #644]	; (8000f90 <lcd_system_handler+0x29c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
	}
	if(Mode == 0)
 8000d10:	4ba0      	ldr	r3, [pc, #640]	; (8000f94 <lcd_system_handler+0x2a0>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d112      	bne.n	8000d40 <lcd_system_handler+0x4c>
	{
		Config = CONFIG_NONE;
 8000d1a:	4b9f      	ldr	r3, [pc, #636]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
		Enter = 0;
 8000d20:	4b9e      	ldr	r3, [pc, #632]	; (8000f9c <lcd_system_handler+0x2a8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
		Status_Display = STATUS_1;
 8000d26:	4b9e      	ldr	r3, [pc, #632]	; (8000fa0 <lcd_system_handler+0x2ac>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]
		lcd_user_display(LCD_user, Status_Display);
 8000d2c:	4b9c      	ldr	r3, [pc, #624]	; (8000fa0 <lcd_system_handler+0x2ac>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff fd98 	bl	8000868 <lcd_user_display>
		Index_mode = INDEX_MODE_NONE;
 8000d38:	4b9a      	ldr	r3, [pc, #616]	; (8000fa4 <lcd_system_handler+0x2b0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
				Enter = 0;
			}
			lcd_user_display(LCD_user, Status_Display);
		} /*END if(Index_mode == INDEX_MODE2)*/
	}/*END if(Mode == 1)*/
}
 8000d3e:	e147      	b.n	8000fd0 <lcd_system_handler+0x2dc>
	else if(Mode == 1)
 8000d40:	4b94      	ldr	r3, [pc, #592]	; (8000f94 <lcd_system_handler+0x2a0>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	f040 8142 	bne.w	8000fd0 <lcd_system_handler+0x2dc>
		if(Index_mode == INDEX_MODE_NONE)
 8000d4c:	4b95      	ldr	r3, [pc, #596]	; (8000fa4 <lcd_system_handler+0x2b0>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d164      	bne.n	8000e1e <lcd_system_handler+0x12a>
			if (flag_button)
 8000d54:	4b94      	ldr	r3, [pc, #592]	; (8000fa8 <lcd_system_handler+0x2b4>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d005      	beq.n	8000d6a <lcd_system_handler+0x76>
				CLCD_I2C_Clear(LCD_user);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fbda 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8000d64:	4b90      	ldr	r3, [pc, #576]	; (8000fa8 <lcd_system_handler+0x2b4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
			Status_Display = STATUS_2;
 8000d6a:	4b8d      	ldr	r3, [pc, #564]	; (8000fa0 <lcd_system_handler+0x2ac>)
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000d70:	4b89      	ldr	r3, [pc, #548]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d044      	beq.n	8000e04 <lcd_system_handler+0x110>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8000d7a:	4b87      	ldr	r3, [pc, #540]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	210f      	movs	r1, #15
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fab5 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8000d8a:	4988      	ldr	r1, [pc, #544]	; (8000fac <lcd_system_handler+0x2b8>)
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fb5d 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000d92:	4b82      	ldr	r3, [pc, #520]	; (8000f9c <lcd_system_handler+0x2a8>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d039      	beq.n	8000e10 <lcd_system_handler+0x11c>
					Enter = 0;
 8000d9c:	4b7f      	ldr	r3, [pc, #508]	; (8000f9c <lcd_system_handler+0x2a8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8000da2:	4b7d      	ldr	r3, [pc, #500]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d108      	bne.n	8000dbe <lcd_system_handler+0xca>
                        Index_mode = INDEX_MODE1;
 8000dac:	4b7d      	ldr	r3, [pc, #500]	; (8000fa4 <lcd_system_handler+0x2b0>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8000db2:	4b79      	ldr	r3, [pc, #484]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000db8:	4b75      	ldr	r3, [pc, #468]	; (8000f90 <lcd_system_handler+0x29c>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 8000dbe:	4b76      	ldr	r3, [pc, #472]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d108      	bne.n	8000dda <lcd_system_handler+0xe6>
                        Index_mode = INDEX_MODE2;
 8000dc8:	4b76      	ldr	r3, [pc, #472]	; (8000fa4 <lcd_system_handler+0x2b0>)
 8000dca:	2202      	movs	r2, #2
 8000dcc:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8000dce:	4b72      	ldr	r3, [pc, #456]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000dd4:	4b6e      	ldr	r3, [pc, #440]	; (8000f90 <lcd_system_handler+0x29c>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000dda:	4b6f      	ldr	r3, [pc, #444]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d115      	bne.n	8000e10 <lcd_system_handler+0x11c>
                        Index_mode = INDEX_MODE1;
 8000de4:	4b6f      	ldr	r3, [pc, #444]	; (8000fa4 <lcd_system_handler+0x2b0>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
                        Mode = 0;
 8000dea:	4b6a      	ldr	r3, [pc, #424]	; (8000f94 <lcd_system_handler+0x2a0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000df0:	4b69      	ldr	r3, [pc, #420]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_1;
 8000df6:	4b6a      	ldr	r3, [pc, #424]	; (8000fa0 <lcd_system_handler+0x2ac>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000dfc:	4b64      	ldr	r3, [pc, #400]	; (8000f90 <lcd_system_handler+0x29c>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e005      	b.n	8000e10 <lcd_system_handler+0x11c>
				Config = CONFIG_ROW1;
 8000e04:	4b64      	ldr	r3, [pc, #400]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8000e0a:	4b64      	ldr	r3, [pc, #400]	; (8000f9c <lcd_system_handler+0x2a8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000e10:	4b63      	ldr	r3, [pc, #396]	; (8000fa0 <lcd_system_handler+0x2ac>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fd26 	bl	8000868 <lcd_user_display>
}
 8000e1c:	e0d8      	b.n	8000fd0 <lcd_system_handler+0x2dc>
		else if(INDEX_MODE1 == Index_mode)	// Languge
 8000e1e:	4b61      	ldr	r3, [pc, #388]	; (8000fa4 <lcd_system_handler+0x2b0>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d161      	bne.n	8000eea <lcd_system_handler+0x1f6>
			Status_Display = STATUS_6;
 8000e26:	4b5e      	ldr	r3, [pc, #376]	; (8000fa0 <lcd_system_handler+0x2ac>)
 8000e28:	2206      	movs	r2, #6
 8000e2a:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000e2c:	4b5c      	ldr	r3, [pc, #368]	; (8000fa0 <lcd_system_handler+0x2ac>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fd18 	bl	8000868 <lcd_user_display>
			if (flag_button)
 8000e38:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <lcd_system_handler+0x2b4>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d005      	beq.n	8000e4e <lcd_system_handler+0x15a>
				CLCD_I2C_Clear(LCD_user);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fb68 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8000e48:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <lcd_system_handler+0x2b4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000e4e:	4b52      	ldr	r3, [pc, #328]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d03b      	beq.n	8000ed0 <lcd_system_handler+0x1dc>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8000e58:	4b4f      	ldr	r3, [pc, #316]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	210f      	movs	r1, #15
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fa46 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8000e68:	4950      	ldr	r1, [pc, #320]	; (8000fac <lcd_system_handler+0x2b8>)
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff faee 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000e70:	4b4a      	ldr	r3, [pc, #296]	; (8000f9c <lcd_system_handler+0x2a8>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d030      	beq.n	8000edc <lcd_system_handler+0x1e8>
					Enter = 0;
 8000e7a:	4b48      	ldr	r3, [pc, #288]	; (8000f9c <lcd_system_handler+0x2a8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8000e80:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d105      	bne.n	8000e96 <lcd_system_handler+0x1a2>
						language = VIETNAMESE;
 8000e8a:	4b49      	ldr	r3, [pc, #292]	; (8000fb0 <lcd_system_handler+0x2bc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 8000e90:	4b41      	ldr	r3, [pc, #260]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000e92:	2203      	movs	r2, #3
 8000e94:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 8000e96:	4b40      	ldr	r3, [pc, #256]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d105      	bne.n	8000eac <lcd_system_handler+0x1b8>
						language = ENGLISH;
 8000ea0:	4b43      	ldr	r3, [pc, #268]	; (8000fb0 <lcd_system_handler+0x2bc>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 8000ea6:	4b3c      	ldr	r3, [pc, #240]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000eac:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d112      	bne.n	8000edc <lcd_system_handler+0x1e8>
                        Index_mode = INDEX_MODE_NONE;
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <lcd_system_handler+0x2b0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000ebc:	4b36      	ldr	r3, [pc, #216]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_2;
 8000ec2:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <lcd_system_handler+0x2ac>)
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <lcd_system_handler+0x29c>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e005      	b.n	8000edc <lcd_system_handler+0x1e8>
				Config = CONFIG_ROW1;
 8000ed0:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8000ed6:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <lcd_system_handler+0x2a8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000edc:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <lcd_system_handler+0x2ac>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff fcc0 	bl	8000868 <lcd_user_display>
}
 8000ee8:	e072      	b.n	8000fd0 <lcd_system_handler+0x2dc>
		else if(INDEX_MODE2 == Index_mode)	// Enter Password
 8000eea:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <lcd_system_handler+0x2b0>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d16e      	bne.n	8000fd0 <lcd_system_handler+0x2dc>
			Status_Display = STATUS_3;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <lcd_system_handler+0x2ac>)
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <lcd_system_handler+0x2ac>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fcb2 	bl	8000868 <lcd_user_display>
			if (flag_button)
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <lcd_system_handler+0x2b4>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <lcd_system_handler+0x226>
				CLCD_I2C_Clear(LCD_user);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fb02 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <lcd_system_handler+0x2b4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d049      	beq.n	8000fb8 <lcd_system_handler+0x2c4>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff f9e0 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8000f34:	491d      	ldr	r1, [pc, #116]	; (8000fac <lcd_system_handler+0x2b8>)
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fa88 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <lcd_system_handler+0x2a8>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d03e      	beq.n	8000fc4 <lcd_system_handler+0x2d0>
					Enter = 0;
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <lcd_system_handler+0x2a8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)	// Nhap so thu tu
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d102      	bne.n	8000f5c <lcd_system_handler+0x268>
						enter_num_pass.signal_enter_num = PROCESSING;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <lcd_system_handler+0x2c0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	705a      	strb	r2, [r3, #1]
					if(Config == CONFIG_ROW2)	// Nhap pass
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d102      	bne.n	8000f6c <lcd_system_handler+0x278>
						enter_num_pass.signal_enter_pass = PROCESSING;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <lcd_system_handler+0x2c0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d126      	bne.n	8000fc4 <lcd_system_handler+0x2d0>
                        Index_mode = INDEX_MODE_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <lcd_system_handler+0x2b0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <lcd_system_handler+0x2a4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_2;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <lcd_system_handler+0x2ac>)
 8000f84:	2202      	movs	r2, #2
 8000f86:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000f88:	4b01      	ldr	r3, [pc, #4]	; (8000f90 <lcd_system_handler+0x29c>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	e019      	b.n	8000fc4 <lcd_system_handler+0x2d0>
 8000f90:	20000048 	.word	0x20000048
 8000f94:	20000049 	.word	0x20000049
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	2000004a 	.word	0x2000004a
 8000fa0:	2000004e 	.word	0x2000004e
 8000fa4:	2000004d 	.word	0x2000004d
 8000fa8:	2000004b 	.word	0x2000004b
 8000fac:	08003274 	.word	0x08003274
 8000fb0:	2000004f 	.word	0x2000004f
 8000fb4:	20000004 	.word	0x20000004
				Config = CONFIG_ROW1;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <lcd_system_handler+0x2e4>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <lcd_system_handler+0x2e8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <lcd_system_handler+0x2ec>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fc4c 	bl	8000868 <lcd_user_display>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	2000004a 	.word	0x2000004a
 8000fe0:	2000004e 	.word	0x2000004e

08000fe4 <HAL_GPIO_EXTI_Callback>:
uint8_t size_row_pass = 5;
uint8_t password[5] = {0};
volatile uint8_t flag_keypad = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	static uint32_t TimeBegin = 0;
	static uint32_t TimeNow = 0;
	/*CODE ISR*/
	/*flag keypad*/
	if(((R1_IN_Pin == GPIO_Pin) | (R2_IN_Pin == GPIO_Pin) | (R3_IN_Pin == GPIO_Pin) | (R4_IN_Pin == GPIO_Pin)) && (state_button == KEYPAD))
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2301      	moveq	r3, #1
 8000ff8:	2300      	movne	r3, #0
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001002:	bf0c      	ite	eq
 8001004:	2301      	moveq	r3, #1
 8001006:	2300      	movne	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b2db      	uxtb	r3, r3
 800100e:	461a      	mov	r2, r3
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	88fa      	ldrh	r2, [r7, #6]
 8001022:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001026:	bf0c      	ite	eq
 8001028:	2201      	moveq	r2, #1
 800102a:	2200      	movne	r2, #0
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	4313      	orrs	r3, r2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00f      	beq.n	8001054 <HAL_GPIO_EXTI_Callback+0x70>
 8001034:	4b52      	ldr	r3, [pc, #328]	; (8001180 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10b      	bne.n	8001054 <HAL_GPIO_EXTI_Callback+0x70>
	{
		flag_keypad = 1;
 800103c:	4b51      	ldr	r3, [pc, #324]	; (8001184 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
		key = KEYPAD_Handler(&COL_KEY_PAD_main, &ROW_KEY_PAD_main, &row);
 8001042:	4a51      	ldr	r2, [pc, #324]	; (8001188 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001044:	4951      	ldr	r1, [pc, #324]	; (800118c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001046:	4852      	ldr	r0, [pc, #328]	; (8001190 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001048:	f7ff fbdb 	bl	8000802 <KEYPAD_Handler>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b50      	ldr	r3, [pc, #320]	; (8001194 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001052:	701a      	strb	r2, [r3, #0]
	}
	/*flag lcd*/
	if(state_button == BUTTON)
 8001054:	4b4a      	ldr	r3, [pc, #296]	; (8001180 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d137      	bne.n	80010cc <HAL_GPIO_EXTI_Callback+0xe8>
	{
		flag_button = 1;
 800105c:	4b4e      	ldr	r3, [pc, #312]	; (8001198 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
		if(UP_EXTI_3_Pin == GPIO_Pin)
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	2b08      	cmp	r3, #8
 8001066:	d10f      	bne.n	8001088 <HAL_GPIO_EXTI_Callback+0xa4>
		{
			Config++;
 8001068:	4b4c      	ldr	r3, [pc, #304]	; (800119c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	3301      	adds	r3, #1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b4a      	ldr	r3, [pc, #296]	; (800119c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001074:	701a      	strb	r2, [r3, #0]
			if(Config > CONFIG_ROW3) Config = CONFIG_ROW1;
 8001076:	4b49      	ldr	r3, [pc, #292]	; (800119c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b03      	cmp	r3, #3
 800107e:	d925      	bls.n	80010cc <HAL_GPIO_EXTI_Callback+0xe8>
 8001080:	4b46      	ldr	r3, [pc, #280]	; (800119c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	e021      	b.n	80010cc <HAL_GPIO_EXTI_Callback+0xe8>
		}
		else if(DOWN_EXTI_4_Pin == GPIO_Pin)
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	2b10      	cmp	r3, #16
 800108c:	d10f      	bne.n	80010ae <HAL_GPIO_EXTI_Callback+0xca>
		{
			Config--;
 800108e:	4b43      	ldr	r3, [pc, #268]	; (800119c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	3b01      	subs	r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b40      	ldr	r3, [pc, #256]	; (800119c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800109a:	701a      	strb	r2, [r3, #0]
			if(Config < CONFIG_ROW1) Config = CONFIG_ROW3;
 800109c:	4b3f      	ldr	r3, [pc, #252]	; (800119c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d112      	bne.n	80010cc <HAL_GPIO_EXTI_Callback+0xe8>
 80010a6:	4b3d      	ldr	r3, [pc, #244]	; (800119c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010a8:	2203      	movs	r2, #3
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	e00e      	b.n	80010cc <HAL_GPIO_EXTI_Callback+0xe8>
		}
		else if(ENTER_EXTI_5_Pin == GPIO_Pin)
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	2b20      	cmp	r3, #32
 80010b2:	d10b      	bne.n	80010cc <HAL_GPIO_EXTI_Callback+0xe8>
		{
			if(1 == Mode)
 80010b4:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d103      	bne.n	80010c6 <HAL_GPIO_EXTI_Callback+0xe2>
			{
				Enter = 1;
 80010be:	4b39      	ldr	r3, [pc, #228]	; (80011a4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_EXTI_Callback+0xe8>
			}
			else
			{
				Mode = 1;
 80010c6:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	/*END CODE ISR*/
	HAL_Delay(20);
 80010cc:	2014      	movs	r0, #20
 80010ce:	f000 fbff 	bl	80018d0 <HAL_Delay>
	TimeBegin = HAL_GetTick();
 80010d2:	f000 fbf3 	bl	80018bc <HAL_GetTick>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a33      	ldr	r2, [pc, #204]	; (80011a8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80010da:	6013      	str	r3, [r2, #0]
	while(		HAL_GPIO_ReadPin(GPIOB, UP_EXTI_3_Pin) == GPIO_PIN_RESET		\
 80010dc:	e00d      	b.n	80010fa <HAL_GPIO_EXTI_Callback+0x116>
			|| 	HAL_GPIO_ReadPin(R1_IN_GPIO_Port, R1_IN_Pin) == GPIO_PIN_RESET		\
			|| 	HAL_GPIO_ReadPin(R2_IN_GPIO_Port, R2_IN_Pin) == GPIO_PIN_RESET 		\
			|| 	HAL_GPIO_ReadPin(R3_IN_GPIO_Port, R3_IN_Pin) == GPIO_PIN_RESET		\
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
	{
		TimeNow = HAL_GetTick();
 80010de:	f000 fbed 	bl	80018bc <HAL_GetTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a31      	ldr	r2, [pc, #196]	; (80011ac <HAL_GPIO_EXTI_Callback+0x1c8>)
 80010e6:	6013      	str	r3, [r2, #0]
		if(TimeNow - TimeBegin == 5000)
 80010e8:	4b30      	ldr	r3, [pc, #192]	; (80011ac <HAL_GPIO_EXTI_Callback+0x1c8>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d035      	beq.n	8001166 <HAL_GPIO_EXTI_Callback+0x182>
	while(		HAL_GPIO_ReadPin(GPIOB, UP_EXTI_3_Pin) == GPIO_PIN_RESET		\
 80010fa:	2108      	movs	r1, #8
 80010fc:	482c      	ldr	r0, [pc, #176]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 80010fe:	f000 fe9d 	bl	8001e3c <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0ea      	beq.n	80010de <HAL_GPIO_EXTI_Callback+0xfa>
			|| 	HAL_GPIO_ReadPin(GPIOB, DOWN_EXTI_4_Pin) == GPIO_PIN_RESET 		\
 8001108:	2110      	movs	r1, #16
 800110a:	4829      	ldr	r0, [pc, #164]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 800110c:	f000 fe96 	bl	8001e3c <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0e3      	beq.n	80010de <HAL_GPIO_EXTI_Callback+0xfa>
			|| 	HAL_GPIO_ReadPin(GPIOB, ENTER_EXTI_5_Pin) == GPIO_PIN_RESET		\
 8001116:	2120      	movs	r1, #32
 8001118:	4825      	ldr	r0, [pc, #148]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 800111a:	f000 fe8f 	bl	8001e3c <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0dc      	beq.n	80010de <HAL_GPIO_EXTI_Callback+0xfa>
			|| 	HAL_GPIO_ReadPin(R1_IN_GPIO_Port, R1_IN_Pin) == GPIO_PIN_RESET		\
 8001124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001128:	4821      	ldr	r0, [pc, #132]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 800112a:	f000 fe87 	bl	8001e3c <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0d4      	beq.n	80010de <HAL_GPIO_EXTI_Callback+0xfa>
			|| 	HAL_GPIO_ReadPin(R2_IN_GPIO_Port, R2_IN_Pin) == GPIO_PIN_RESET 		\
 8001134:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001138:	481d      	ldr	r0, [pc, #116]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 800113a:	f000 fe7f 	bl	8001e3c <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0cc      	beq.n	80010de <HAL_GPIO_EXTI_Callback+0xfa>
			|| 	HAL_GPIO_ReadPin(R3_IN_GPIO_Port, R3_IN_Pin) == GPIO_PIN_RESET		\
 8001144:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001148:	4819      	ldr	r0, [pc, #100]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 800114a:	f000 fe77 	bl	8001e3c <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0c4      	beq.n	80010de <HAL_GPIO_EXTI_Callback+0xfa>
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
 8001154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001158:	4815      	ldr	r0, [pc, #84]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 800115a:	f000 fe6f 	bl	8001e3c <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0bc      	beq.n	80010de <HAL_GPIO_EXTI_Callback+0xfa>
 8001164:	e000      	b.n	8001168 <HAL_GPIO_EXTI_Callback+0x184>
		{
//			ButtonError = 1;
			break;
 8001166:	bf00      	nop
		}
	}
	HAL_Delay(20);
 8001168:	2014      	movs	r0, #20
 800116a:	f000 fbb1 	bl	80018d0 <HAL_Delay>
	EXTI->PR = ENTER_EXTI_5_Pin | DOWN_EXTI_4_Pin | UP_EXTI_3_Pin \
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001170:	f24f 0238 	movw	r2, #61496	; 0xf038
 8001174:	615a      	str	r2, [r3, #20]
			| R1_IN_Pin | R2_IN_Pin |R3_IN_Pin | R4_IN_Pin;
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000006 	.word	0x20000006
 8001184:	20000131 	.word	0x20000131
 8001188:	20000129 	.word	0x20000129
 800118c:	20000110 	.word	0x20000110
 8001190:	200000f8 	.word	0x200000f8
 8001194:	20000128 	.word	0x20000128
 8001198:	2000004b 	.word	0x2000004b
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000049 	.word	0x20000049
 80011a4:	2000004a 	.word	0x2000004a
 80011a8:	20000134 	.word	0x20000134
 80011ac:	20000138 	.word	0x20000138
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	40010400 	.word	0x40010400

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b092      	sub	sp, #72	; 0x48
 80011bc:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011be:	f000 fb25 	bl	800180c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c2:	f000 f8d7 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c6:	f000 f96d 	bl	80014a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011ca:	f000 f90f 	bl	80013ec <MX_I2C1_Init>
  MX_I2C2_Init();
 80011ce:	f000 f93b 	bl	8001448 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  KeyPad_Init(		// Cpl pin + port
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d6:	930d      	str	r3, [sp, #52]	; 0x34
 80011d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011dc:	930c      	str	r3, [sp, #48]	; 0x30
 80011de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80011e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011e8:	930a      	str	r3, [sp, #40]	; 0x28
 80011ea:	4b53      	ldr	r3, [pc, #332]	; (8001338 <main+0x180>)
 80011ec:	9309      	str	r3, [sp, #36]	; 0x24
 80011ee:	4b52      	ldr	r3, [pc, #328]	; (8001338 <main+0x180>)
 80011f0:	9308      	str	r3, [sp, #32]
 80011f2:	4b51      	ldr	r3, [pc, #324]	; (8001338 <main+0x180>)
 80011f4:	9307      	str	r3, [sp, #28]
 80011f6:	4b50      	ldr	r3, [pc, #320]	; (8001338 <main+0x180>)
 80011f8:	9306      	str	r3, [sp, #24]
 80011fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fe:	9305      	str	r3, [sp, #20]
 8001200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001204:	9304      	str	r3, [sp, #16]
 8001206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120a:	9303      	str	r3, [sp, #12]
 800120c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	4b4a      	ldr	r3, [pc, #296]	; (800133c <main+0x184>)
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	4b49      	ldr	r3, [pc, #292]	; (800133c <main+0x184>)
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	4b48      	ldr	r3, [pc, #288]	; (800133c <main+0x184>)
 800121c:	4a47      	ldr	r2, [pc, #284]	; (800133c <main+0x184>)
 800121e:	4948      	ldr	r1, [pc, #288]	; (8001340 <main+0x188>)
 8001220:	4848      	ldr	r0, [pc, #288]	; (8001344 <main+0x18c>)
 8001222:	f7ff f989 	bl	8000538 <KeyPad_Init>
					C1_OUT_Pin, C2_OUT_Pin, C3_OUT_Pin, C4_OUT_Pin,								\
					// Row pin + port
					R1_IN_GPIO_Port, R2_IN_GPIO_Port, R3_IN_GPIO_Port, R4_IN_GPIO_Port,					\
					R1_IN_Pin, R2_IN_Pin, R3_IN_Pin, R4_IN_Pin
			  );
  CLCD_I2C_Init(&LCD1, &hi2c1, (0x27 << 1), 16, 4);
 8001226:	4638      	mov	r0, r7
 8001228:	2304      	movs	r3, #4
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2310      	movs	r3, #16
 800122e:	224e      	movs	r2, #78	; 0x4e
 8001230:	4945      	ldr	r1, [pc, #276]	; (8001348 <main+0x190>)
 8001232:	f7fe ffef 	bl	8000214 <CLCD_I2C_Init>

  CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001236:	463b      	mov	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f859 	bl	80002f4 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1, "Hello");
 8001242:	463b      	mov	r3, r7
 8001244:	4941      	ldr	r1, [pc, #260]	; (800134c <main+0x194>)
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f900 	bl	800044c <CLCD_I2C_WriteString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_keypad == 1)
 800124c:	4b40      	ldr	r3, [pc, #256]	; (8001350 <main+0x198>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b01      	cmp	r3, #1
 8001254:	d107      	bne.n	8001266 <main+0xae>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125a:	483e      	ldr	r0, [pc, #248]	; (8001354 <main+0x19c>)
 800125c:	f000 fe1d 	bl	8001e9a <HAL_GPIO_TogglePin>
		  flag_keypad = 0;
 8001260:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <main+0x198>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
	  }

	  /*test keypad screen lcd*/
	  if(key != KEYPAD_NOT_PRESSED)	//when state_button = KEYPAD
 8001266:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <main+0x1a0>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d043      	beq.n	80012f6 <main+0x13e>
	  {
		  CLCD_I2C_SetCursor(&LCD1, row_password, 1);
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <main+0x1a4>)
 8001270:	7819      	ldrb	r1, [r3, #0]
 8001272:	463b      	mov	r3, r7
 8001274:	2201      	movs	r2, #1
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f83c 	bl	80002f4 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteChar(&LCD1, key);
 800127c:	4b36      	ldr	r3, [pc, #216]	; (8001358 <main+0x1a0>)
 800127e:	781a      	ldrb	r2, [r3, #0]
 8001280:	463b      	mov	r3, r7
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f88f 	bl	80003a8 <CLCD_I2C_WriteChar>

		  password[row_password - 1] = key;
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <main+0x1a4>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	3b01      	subs	r3, #1
 8001290:	4a31      	ldr	r2, [pc, #196]	; (8001358 <main+0x1a0>)
 8001292:	7811      	ldrb	r1, [r2, #0]
 8001294:	4a32      	ldr	r2, [pc, #200]	; (8001360 <main+0x1a8>)
 8001296:	54d1      	strb	r1, [r2, r3]
		  row_password++;
 8001298:	4b30      	ldr	r3, [pc, #192]	; (800135c <main+0x1a4>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b2e      	ldr	r3, [pc, #184]	; (800135c <main+0x1a4>)
 80012a2:	701a      	strb	r2, [r3, #0]
		  key = KEYPAD_NOT_PRESSED;
 80012a4:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <main+0x1a0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]

		  if(row_password > size_row_pass)
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <main+0x1a4>)
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <main+0x1ac>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d91f      	bls.n	80012f6 <main+0x13e>
		  {
			  enter_num_pass.signal_enter_pass = NOT_DONE;
 80012b6:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <main+0x1b0>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
			  enter_num_pass.signal_enter_num = NOT_DONE;
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <main+0x1b0>)
 80012be:	2201      	movs	r2, #1
 80012c0:	705a      	strb	r2, [r3, #1]

			  state_button = BUTTON;
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <main+0x1b4>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
			  /*Neu Mang hinh nhap du 5 so*/
			  /*reset mang hinh*/
			  CLCD_I2C_Clear(&LCD1);
 80012c8:	463b      	mov	r3, r7
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f924 	bl	8000518 <CLCD_I2C_Clear>

			  state_star_pass = STAR;
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <main+0x1b8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
			  row_password = 1;
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <main+0x1a4>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
			  for(uint8_t i = 0; i <= sizeof(password); i++)
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e006      	b.n	80012f0 <main+0x138>
			  {
				  password[i] = 0;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <main+0x1a8>)
 80012e6:	2100      	movs	r1, #0
 80012e8:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i = 0; i <= sizeof(password); i++)
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	3301      	adds	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d9f5      	bls.n	80012e2 <main+0x12a>
			  }
		  }
	  }

	  if((enter_num_pass.signal_enter_pass == PROCESSING) || (enter_num_pass.signal_enter_num == PROCESSING))
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <main+0x1b0>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <main+0x152>
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <main+0x1b0>)
 8001302:	785b      	ldrb	r3, [r3, #1]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10e      	bne.n	8001328 <main+0x170>
//
//		  CLCD_I2C_Clear(&LCD1);
//
//		  lcd_system_handler(&LCD1);

		  CLCD_I2C_SetCursor(&LCD1, 0, 1);
 800130a:	463b      	mov	r3, r7
 800130c:	2201      	movs	r2, #1
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f7fe ffef 	bl	80002f4 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteChar(&LCD1, '>');
 8001316:	463b      	mov	r3, r7
 8001318:	213e      	movs	r1, #62	; 0x3e
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f844 	bl	80003a8 <CLCD_I2C_WriteChar>
		  state_button = KEYPAD;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <main+0x1b4>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	e002      	b.n	800132e <main+0x176>
	  }
	  else
	  {
		  state_button = BUTTON;
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <main+0x1b4>)
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
	  }


	  lcd_system_handler(&LCD1);
 800132e:	463b      	mov	r3, r7
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fcdf 	bl	8000cf4 <lcd_system_handler>
	  if(flag_keypad == 1)
 8001336:	e789      	b.n	800124c <main+0x94>
 8001338:	40010c00 	.word	0x40010c00
 800133c:	40010800 	.word	0x40010800
 8001340:	20000110 	.word	0x20000110
 8001344:	200000f8 	.word	0x200000f8
 8001348:	20000050 	.word	0x20000050
 800134c:	08003278 	.word	0x08003278
 8001350:	20000131 	.word	0x20000131
 8001354:	40011000 	.word	0x40011000
 8001358:	20000128 	.word	0x20000128
 800135c:	20000007 	.word	0x20000007
 8001360:	2000012c 	.word	0x2000012c
 8001364:	20000008 	.word	0x20000008
 8001368:	20000004 	.word	0x20000004
 800136c:	20000006 	.word	0x20000006
 8001370:	2000004c 	.word	0x2000004c

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b090      	sub	sp, #64	; 0x40
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 0318 	add.w	r3, r7, #24
 800137e:	2228      	movs	r2, #40	; 0x28
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fe76 	bl	8003074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001396:	2302      	movs	r3, #2
 8001398:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139a:	2301      	movs	r3, #1
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800139e:	2310      	movs	r3, #16
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a6:	f107 0318 	add.w	r3, r7, #24
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fa42 	bl	8002834 <HAL_RCC_OscConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013b6:	f000 f909 	bl	80015cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ba:	230f      	movs	r3, #15
 80013bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fcb0 	bl	8002d38 <HAL_RCC_ClockConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013de:	f000 f8f5 	bl	80015cc <Error_Handler>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3740      	adds	r7, #64	; 0x40
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_I2C1_Init+0x50>)
 80013f2:	4a13      	ldr	r2, [pc, #76]	; (8001440 <MX_I2C1_Init+0x54>)
 80013f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_I2C1_Init+0x50>)
 80013f8:	4a12      	ldr	r2, [pc, #72]	; (8001444 <MX_I2C1_Init+0x58>)
 80013fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_I2C1_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_I2C1_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_I2C1_Init+0x50>)
 800140a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <MX_I2C1_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_I2C1_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_I2C1_Init+0x50>)
 800142a:	f000 fd67 	bl	8001efc <HAL_I2C_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001434:	f000 f8ca 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000050 	.word	0x20000050
 8001440:	40005400 	.word	0x40005400
 8001444:	000186a0 	.word	0x000186a0

08001448 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_I2C2_Init+0x50>)
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <MX_I2C2_Init+0x54>)
 8001450:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_I2C2_Init+0x50>)
 8001454:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <MX_I2C2_Init+0x58>)
 8001456:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_I2C2_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_I2C2_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_I2C2_Init+0x50>)
 8001466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <MX_I2C2_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_I2C2_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <MX_I2C2_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_I2C2_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_I2C2_Init+0x50>)
 8001486:	f000 fd39 	bl	8001efc <HAL_I2C_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001490:	f000 f89c 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200000a4 	.word	0x200000a4
 800149c:	40005800 	.word	0x40005800
 80014a0:	000186a0 	.word	0x000186a0

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b8:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <MX_GPIO_Init+0x114>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a3e      	ldr	r2, [pc, #248]	; (80015b8 <MX_GPIO_Init+0x114>)
 80014be:	f043 0310 	orr.w	r3, r3, #16
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <MX_GPIO_Init+0x114>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <MX_GPIO_Init+0x114>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a38      	ldr	r2, [pc, #224]	; (80015b8 <MX_GPIO_Init+0x114>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <MX_GPIO_Init+0x114>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <MX_GPIO_Init+0x114>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a32      	ldr	r2, [pc, #200]	; (80015b8 <MX_GPIO_Init+0x114>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <MX_GPIO_Init+0x114>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001506:	482d      	ldr	r0, [pc, #180]	; (80015bc <MX_GPIO_Init+0x118>)
 8001508:	f000 fcaf 	bl	8001e6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R7_Pin|R6_Pin|R5_Pin|R4_Pin
 800150c:	2200      	movs	r2, #0
 800150e:	f640 71fe 	movw	r1, #4094	; 0xffe
 8001512:	482b      	ldr	r0, [pc, #172]	; (80015c0 <MX_GPIO_Init+0x11c>)
 8001514:	f000 fca9 	bl	8001e6a <HAL_GPIO_WritePin>
                          |R3_Pin|R2_Pin|R1_Pin|C4_OUT_Pin
                          |C3_OUT_Pin|C2_OUT_Pin|C1_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2302      	movs	r3, #2
 8001528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4619      	mov	r1, r3
 8001530:	4822      	ldr	r0, [pc, #136]	; (80015bc <MX_GPIO_Init+0x118>)
 8001532:	f000 faff 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin R6_Pin R5_Pin R4_Pin
                           R3_Pin R2_Pin R1_Pin C4_OUT_Pin
                           C3_OUT_Pin C2_OUT_Pin C1_OUT_Pin */
  GPIO_InitStruct.Pin = R7_Pin|R6_Pin|R5_Pin|R4_Pin
 8001536:	f640 73fe 	movw	r3, #4094	; 0xffe
 800153a:	613b      	str	r3, [r7, #16]
                          |R3_Pin|R2_Pin|R1_Pin|C4_OUT_Pin
                          |C3_OUT_Pin|C2_OUT_Pin|C1_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001540:	2302      	movs	r3, #2
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2302      	movs	r3, #2
 8001546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4619      	mov	r1, r3
 800154e:	481c      	ldr	r0, [pc, #112]	; (80015c0 <MX_GPIO_Init+0x11c>)
 8001550:	f000 faf0 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_IN_Pin R3_IN_Pin R2_IN_Pin R1_IN_Pin
                           UP_EXTI_3_Pin DOWN_EXTI_4_Pin ENTER_EXTI_5_Pin */
  GPIO_InitStruct.Pin = R4_IN_Pin|R3_IN_Pin|R2_IN_Pin|R1_IN_Pin
 8001554:	f24f 0338 	movw	r3, #61496	; 0xf038
 8001558:	613b      	str	r3, [r7, #16]
                          |UP_EXTI_3_Pin|DOWN_EXTI_4_Pin|ENTER_EXTI_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <MX_GPIO_Init+0x120>)
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155e:	2301      	movs	r3, #1
 8001560:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4619      	mov	r1, r3
 8001568:	4817      	ldr	r0, [pc, #92]	; (80015c8 <MX_GPIO_Init+0x124>)
 800156a:	f000 fae3 	bl	8001b34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2105      	movs	r1, #5
 8001572:	2009      	movs	r0, #9
 8001574:	f000 faa7 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001578:	2009      	movs	r0, #9
 800157a:	f000 fac0 	bl	8001afe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2105      	movs	r1, #5
 8001582:	200a      	movs	r0, #10
 8001584:	f000 fa9f 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001588:	200a      	movs	r0, #10
 800158a:	f000 fab8 	bl	8001afe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2105      	movs	r1, #5
 8001592:	2017      	movs	r0, #23
 8001594:	f000 fa97 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001598:	2017      	movs	r0, #23
 800159a:	f000 fab0 	bl	8001afe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2105      	movs	r1, #5
 80015a2:	2028      	movs	r0, #40	; 0x28
 80015a4:	f000 fa8f 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015a8:	2028      	movs	r0, #40	; 0x28
 80015aa:	f000 faa8 	bl	8001afe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ae:	bf00      	nop
 80015b0:	3720      	adds	r7, #32
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40011000 	.word	0x40011000
 80015c0:	40010800 	.word	0x40010800
 80015c4:	10210000 	.word	0x10210000
 80015c8:	40010c00 	.word	0x40010c00

080015cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <Error_Handler+0x8>
	...

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_MspInit+0x5c>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	4a14      	ldr	r2, [pc, #80]	; (8001634 <HAL_MspInit+0x5c>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6193      	str	r3, [r2, #24]
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_MspInit+0x5c>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_MspInit+0x5c>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <HAL_MspInit+0x5c>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	61d3      	str	r3, [r2, #28]
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_MspInit+0x5c>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_MspInit+0x60>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_MspInit+0x60>)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	40021000 	.word	0x40021000
 8001638:	40010000 	.word	0x40010000

0800163c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0318 	add.w	r3, r7, #24
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a2b      	ldr	r2, [pc, #172]	; (8001704 <HAL_I2C_MspInit+0xc8>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d124      	bne.n	80016a6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <HAL_I2C_MspInit+0xcc>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a29      	ldr	r2, [pc, #164]	; (8001708 <HAL_I2C_MspInit+0xcc>)
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <HAL_I2C_MspInit+0xcc>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001674:	23c0      	movs	r3, #192	; 0xc0
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001678:	2312      	movs	r3, #18
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f107 0318 	add.w	r3, r7, #24
 8001684:	4619      	mov	r1, r3
 8001686:	4821      	ldr	r0, [pc, #132]	; (800170c <HAL_I2C_MspInit+0xd0>)
 8001688:	f000 fa54 	bl	8001b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <HAL_I2C_MspInit+0xcc>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <HAL_I2C_MspInit+0xcc>)
 8001692:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001696:	61d3      	str	r3, [r2, #28]
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_I2C_MspInit+0xcc>)
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016a4:	e029      	b.n	80016fa <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a19      	ldr	r2, [pc, #100]	; (8001710 <HAL_I2C_MspInit+0xd4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d124      	bne.n	80016fa <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_I2C_MspInit+0xcc>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <HAL_I2C_MspInit+0xcc>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_I2C_MspInit+0xcc>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ce:	2312      	movs	r3, #18
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 0318 	add.w	r3, r7, #24
 80016da:	4619      	mov	r1, r3
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <HAL_I2C_MspInit+0xd0>)
 80016de:	f000 fa29 	bl	8001b34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_I2C_MspInit+0xcc>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <HAL_I2C_MspInit+0xcc>)
 80016e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ec:	61d3      	str	r3, [r2, #28]
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_I2C_MspInit+0xcc>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40005400 	.word	0x40005400
 8001708:	40021000 	.word	0x40021000
 800170c:	40010c00 	.word	0x40010c00
 8001710:	40005800 	.word	0x40005800

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175a:	f000 f89d 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}

08001762 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_EXTI_3_Pin);
 8001766:	2008      	movs	r0, #8
 8001768:	f000 fbb0 	bl	8001ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_EXTI_4_Pin);
 8001774:	2010      	movs	r0, #16
 8001776:	f000 fba9 	bl	8001ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}

0800177e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENTER_EXTI_5_Pin);
 8001782:	2020      	movs	r0, #32
 8001784:	f000 fba2 	bl	8001ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R4_IN_Pin);
 8001790:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001794:	f000 fb9a 	bl	8001ecc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R3_IN_Pin);
 8001798:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800179c:	f000 fb96 	bl	8001ecc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R2_IN_Pin);
 80017a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017a4:	f000 fb92 	bl	8001ecc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R1_IN_Pin);
 80017a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017ac:	f000 fb8e 	bl	8001ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c0:	f7ff fff8 	bl	80017b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017c6:	490c      	ldr	r1, [pc, #48]	; (80017f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017c8:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a09      	ldr	r2, [pc, #36]	; (8001800 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017dc:	4c09      	ldr	r4, [pc, #36]	; (8001804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ea:	f001 fc1f 	bl	800302c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ee:	f7ff fce3 	bl	80011b8 <main>
  bx lr
 80017f2:	4770      	bx	lr
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80017fc:	080032c4 	.word	0x080032c4
  ldr r2, =_sbss
 8001800:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001804:	20000140 	.word	0x20000140

08001808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC1_2_IRQHandler>
	...

0800180c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_Init+0x28>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_Init+0x28>)
 8001816:	f043 0310 	orr.w	r3, r3, #16
 800181a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 f947 	bl	8001ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001822:	2004      	movs	r0, #4
 8001824:	f000 f808 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001828:	f7ff fed6 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x54>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x58>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f95f 	bl	8001b1a <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00e      	b.n	8001884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d80a      	bhi.n	8001882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f000 f927 	bl	8001ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001878:	4a06      	ldr	r2, [pc, #24]	; (8001894 <HAL_InitTick+0x5c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000000c 	.word	0x2000000c
 8001890:	20000014 	.word	0x20000014
 8001894:	20000010 	.word	0x20000010

08001898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x1c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_IncTick+0x20>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a03      	ldr	r2, [pc, #12]	; (80018b8 <HAL_IncTick+0x20>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	20000014 	.word	0x20000014
 80018b8:	2000013c 	.word	0x2000013c

080018bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b02      	ldr	r3, [pc, #8]	; (80018cc <HAL_GetTick+0x10>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	2000013c 	.word	0x2000013c

080018d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff fff0 	bl	80018bc <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d005      	beq.n	80018f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_Delay+0x44>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f6:	bf00      	nop
 80018f8:	f7ff ffe0 	bl	80018bc <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d8f7      	bhi.n	80018f8 <HAL_Delay+0x28>
  {
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000014 	.word	0x20000014

08001918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001934:	4013      	ands	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194a:	4a04      	ldr	r2, [pc, #16]	; (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	60d3      	str	r3, [r2, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <__NVIC_GetPriorityGrouping+0x18>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	f003 0307 	and.w	r3, r3, #7
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	2b00      	cmp	r3, #0
 800198c:	db0b      	blt.n	80019a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	f003 021f 	and.w	r2, r3, #31
 8001994:	4906      	ldr	r1, [pc, #24]	; (80019b0 <__NVIC_EnableIRQ+0x34>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	2001      	movs	r0, #1
 800199e:	fa00 f202 	lsl.w	r2, r0, r2
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100

080019b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0a      	blt.n	80019de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	490c      	ldr	r1, [pc, #48]	; (8001a00 <__NVIC_SetPriority+0x4c>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019dc:	e00a      	b.n	80019f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4908      	ldr	r1, [pc, #32]	; (8001a04 <__NVIC_SetPriority+0x50>)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	3b04      	subs	r3, #4
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	761a      	strb	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f1c3 0307 	rsb	r3, r3, #7
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	bf28      	it	cs
 8001a26:	2304      	movcs	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d902      	bls.n	8001a38 <NVIC_EncodePriority+0x30>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b03      	subs	r3, #3
 8001a36:	e000      	b.n	8001a3a <NVIC_EncodePriority+0x32>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43d9      	mvns	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	4313      	orrs	r3, r2
         );
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	; 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a7c:	d301      	bcc.n	8001a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00f      	b.n	8001aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <SysTick_Config+0x40>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f7ff ff90 	bl	80019b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <SysTick_Config+0x40>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <SysTick_Config+0x40>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff2d 	bl	8001918 <__NVIC_SetPriorityGrouping>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad8:	f7ff ff42 	bl	8001960 <__NVIC_GetPriorityGrouping>
 8001adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff ff90 	bl	8001a08 <NVIC_EncodePriority>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff5f 	bl	80019b4 <__NVIC_SetPriority>
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff35 	bl	800197c <__NVIC_EnableIRQ>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffa2 	bl	8001a6c <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b08b      	sub	sp, #44	; 0x2c
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b46:	e169      	b.n	8001e1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	f040 8158 	bne.w	8001e16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4a9a      	ldr	r2, [pc, #616]	; (8001dd4 <HAL_GPIO_Init+0x2a0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d05e      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b70:	4a98      	ldr	r2, [pc, #608]	; (8001dd4 <HAL_GPIO_Init+0x2a0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d875      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b76:	4a98      	ldr	r2, [pc, #608]	; (8001dd8 <HAL_GPIO_Init+0x2a4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d058      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b7c:	4a96      	ldr	r2, [pc, #600]	; (8001dd8 <HAL_GPIO_Init+0x2a4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d86f      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b82:	4a96      	ldr	r2, [pc, #600]	; (8001ddc <HAL_GPIO_Init+0x2a8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d052      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b88:	4a94      	ldr	r2, [pc, #592]	; (8001ddc <HAL_GPIO_Init+0x2a8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d869      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b8e:	4a94      	ldr	r2, [pc, #592]	; (8001de0 <HAL_GPIO_Init+0x2ac>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d04c      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001b94:	4a92      	ldr	r2, [pc, #584]	; (8001de0 <HAL_GPIO_Init+0x2ac>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d863      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001b9a:	4a92      	ldr	r2, [pc, #584]	; (8001de4 <HAL_GPIO_Init+0x2b0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d046      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
 8001ba0:	4a90      	ldr	r2, [pc, #576]	; (8001de4 <HAL_GPIO_Init+0x2b0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d85d      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001ba6:	2b12      	cmp	r3, #18
 8001ba8:	d82a      	bhi.n	8001c00 <HAL_GPIO_Init+0xcc>
 8001baa:	2b12      	cmp	r3, #18
 8001bac:	d859      	bhi.n	8001c62 <HAL_GPIO_Init+0x12e>
 8001bae:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <HAL_GPIO_Init+0x80>)
 8001bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb4:	08001c2f 	.word	0x08001c2f
 8001bb8:	08001c09 	.word	0x08001c09
 8001bbc:	08001c1b 	.word	0x08001c1b
 8001bc0:	08001c5d 	.word	0x08001c5d
 8001bc4:	08001c63 	.word	0x08001c63
 8001bc8:	08001c63 	.word	0x08001c63
 8001bcc:	08001c63 	.word	0x08001c63
 8001bd0:	08001c63 	.word	0x08001c63
 8001bd4:	08001c63 	.word	0x08001c63
 8001bd8:	08001c63 	.word	0x08001c63
 8001bdc:	08001c63 	.word	0x08001c63
 8001be0:	08001c63 	.word	0x08001c63
 8001be4:	08001c63 	.word	0x08001c63
 8001be8:	08001c63 	.word	0x08001c63
 8001bec:	08001c63 	.word	0x08001c63
 8001bf0:	08001c63 	.word	0x08001c63
 8001bf4:	08001c63 	.word	0x08001c63
 8001bf8:	08001c11 	.word	0x08001c11
 8001bfc:	08001c25 	.word	0x08001c25
 8001c00:	4a79      	ldr	r2, [pc, #484]	; (8001de8 <HAL_GPIO_Init+0x2b4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c06:	e02c      	b.n	8001c62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	623b      	str	r3, [r7, #32]
          break;
 8001c0e:	e029      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	3304      	adds	r3, #4
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e024      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	3308      	adds	r3, #8
 8001c20:	623b      	str	r3, [r7, #32]
          break;
 8001c22:	e01f      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	330c      	adds	r3, #12
 8001c2a:	623b      	str	r3, [r7, #32]
          break;
 8001c2c:	e01a      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c36:	2304      	movs	r3, #4
 8001c38:	623b      	str	r3, [r7, #32]
          break;
 8001c3a:	e013      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c44:	2308      	movs	r3, #8
 8001c46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	611a      	str	r2, [r3, #16]
          break;
 8001c4e:	e009      	b.n	8001c64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c50:	2308      	movs	r3, #8
 8001c52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	615a      	str	r2, [r3, #20]
          break;
 8001c5a:	e003      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
          break;
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x130>
          break;
 8001c62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2bff      	cmp	r3, #255	; 0xff
 8001c68:	d801      	bhi.n	8001c6e <HAL_GPIO_Init+0x13a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	e001      	b.n	8001c72 <HAL_GPIO_Init+0x13e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3304      	adds	r3, #4
 8001c72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2bff      	cmp	r3, #255	; 0xff
 8001c78:	d802      	bhi.n	8001c80 <HAL_GPIO_Init+0x14c>
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	e002      	b.n	8001c86 <HAL_GPIO_Init+0x152>
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	3b08      	subs	r3, #8
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	210f      	movs	r1, #15
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	401a      	ands	r2, r3
 8001c98:	6a39      	ldr	r1, [r7, #32]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 80b1 	beq.w	8001e16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb4:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <HAL_GPIO_Init+0x2b8>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	4a4c      	ldr	r2, [pc, #304]	; (8001dec <HAL_GPIO_Init+0x2b8>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6193      	str	r3, [r2, #24]
 8001cc0:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_GPIO_Init+0x2b8>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ccc:	4a48      	ldr	r2, [pc, #288]	; (8001df0 <HAL_GPIO_Init+0x2bc>)
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a40      	ldr	r2, [pc, #256]	; (8001df4 <HAL_GPIO_Init+0x2c0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <HAL_GPIO_Init+0x1ec>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3f      	ldr	r2, [pc, #252]	; (8001df8 <HAL_GPIO_Init+0x2c4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00d      	beq.n	8001d1c <HAL_GPIO_Init+0x1e8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a3e      	ldr	r2, [pc, #248]	; (8001dfc <HAL_GPIO_Init+0x2c8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d007      	beq.n	8001d18 <HAL_GPIO_Init+0x1e4>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a3d      	ldr	r2, [pc, #244]	; (8001e00 <HAL_GPIO_Init+0x2cc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d101      	bne.n	8001d14 <HAL_GPIO_Init+0x1e0>
 8001d10:	2303      	movs	r3, #3
 8001d12:	e006      	b.n	8001d22 <HAL_GPIO_Init+0x1ee>
 8001d14:	2304      	movs	r3, #4
 8001d16:	e004      	b.n	8001d22 <HAL_GPIO_Init+0x1ee>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e002      	b.n	8001d22 <HAL_GPIO_Init+0x1ee>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <HAL_GPIO_Init+0x1ee>
 8001d20:	2300      	movs	r3, #0
 8001d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d24:	f002 0203 	and.w	r2, r2, #3
 8001d28:	0092      	lsls	r2, r2, #2
 8001d2a:	4093      	lsls	r3, r2
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d32:	492f      	ldr	r1, [pc, #188]	; (8001df0 <HAL_GPIO_Init+0x2bc>)
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d006      	beq.n	8001d5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	492c      	ldr	r1, [pc, #176]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4928      	ldr	r1, [pc, #160]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d006      	beq.n	8001d82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d74:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	4922      	ldr	r1, [pc, #136]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60cb      	str	r3, [r1, #12]
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	491e      	ldr	r1, [pc, #120]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4918      	ldr	r1, [pc, #96]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	4914      	ldr	r1, [pc, #80]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d021      	beq.n	8001e08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	490e      	ldr	r1, [pc, #56]	; (8001e04 <HAL_GPIO_Init+0x2d0>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]
 8001dd0:	e021      	b.n	8001e16 <HAL_GPIO_Init+0x2e2>
 8001dd2:	bf00      	nop
 8001dd4:	10320000 	.word	0x10320000
 8001dd8:	10310000 	.word	0x10310000
 8001ddc:	10220000 	.word	0x10220000
 8001de0:	10210000 	.word	0x10210000
 8001de4:	10120000 	.word	0x10120000
 8001de8:	10110000 	.word	0x10110000
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40010000 	.word	0x40010000
 8001df4:	40010800 	.word	0x40010800
 8001df8:	40010c00 	.word	0x40010c00
 8001dfc:	40011000 	.word	0x40011000
 8001e00:	40011400 	.word	0x40011400
 8001e04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	4909      	ldr	r1, [pc, #36]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	3301      	adds	r3, #1
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	fa22 f303 	lsr.w	r3, r2, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f47f ae8e 	bne.w	8001b48 <HAL_GPIO_Init+0x14>
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	372c      	adds	r7, #44	; 0x2c
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	40010400 	.word	0x40010400

08001e3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	e001      	b.n	8001e5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	807b      	strh	r3, [r7, #2]
 8001e76:	4613      	mov	r3, r2
 8001e78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e7a:	787b      	ldrb	r3, [r7, #1]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e80:	887a      	ldrh	r2, [r7, #2]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e86:	e003      	b.n	8001e90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	041a      	lsls	r2, r3, #16
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	611a      	str	r2, [r3, #16]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eac:	887a      	ldrh	r2, [r7, #2]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	041a      	lsls	r2, r3, #16
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43d9      	mvns	r1, r3
 8001eb8:	887b      	ldrh	r3, [r7, #2]
 8001eba:	400b      	ands	r3, r1
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	611a      	str	r2, [r3, #16]
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f87a 	bl	8000fe4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40010400 	.word	0x40010400

08001efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e12b      	b.n	8002166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fb8a 	bl	800163c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2224      	movs	r2, #36	; 0x24
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f60:	f001 f832 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
 8001f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4a81      	ldr	r2, [pc, #516]	; (8002170 <HAL_I2C_Init+0x274>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d807      	bhi.n	8001f80 <HAL_I2C_Init+0x84>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a80      	ldr	r2, [pc, #512]	; (8002174 <HAL_I2C_Init+0x278>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	bf94      	ite	ls
 8001f78:	2301      	movls	r3, #1
 8001f7a:	2300      	movhi	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	e006      	b.n	8001f8e <HAL_I2C_Init+0x92>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a7d      	ldr	r2, [pc, #500]	; (8002178 <HAL_I2C_Init+0x27c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	bf94      	ite	ls
 8001f88:	2301      	movls	r3, #1
 8001f8a:	2300      	movhi	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0e7      	b.n	8002166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4a78      	ldr	r2, [pc, #480]	; (800217c <HAL_I2C_Init+0x280>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	0c9b      	lsrs	r3, r3, #18
 8001fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a6a      	ldr	r2, [pc, #424]	; (8002170 <HAL_I2C_Init+0x274>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d802      	bhi.n	8001fd0 <HAL_I2C_Init+0xd4>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	e009      	b.n	8001fe4 <HAL_I2C_Init+0xe8>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	4a69      	ldr	r2, [pc, #420]	; (8002180 <HAL_I2C_Init+0x284>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ff6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	495c      	ldr	r1, [pc, #368]	; (8002170 <HAL_I2C_Init+0x274>)
 8002000:	428b      	cmp	r3, r1
 8002002:	d819      	bhi.n	8002038 <HAL_I2C_Init+0x13c>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e59      	subs	r1, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002012:	1c59      	adds	r1, r3, #1
 8002014:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002018:	400b      	ands	r3, r1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_I2C_Init+0x138>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1e59      	subs	r1, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fbb1 f3f3 	udiv	r3, r1, r3
 800202c:	3301      	adds	r3, #1
 800202e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002032:	e051      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 8002034:	2304      	movs	r3, #4
 8002036:	e04f      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d111      	bne.n	8002064 <HAL_I2C_Init+0x168>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1e58      	subs	r0, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	440b      	add	r3, r1
 800204e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002052:	3301      	adds	r3, #1
 8002054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e012      	b.n	800208a <HAL_I2C_Init+0x18e>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1e58      	subs	r0, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	0099      	lsls	r1, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	fbb0 f3f3 	udiv	r3, r0, r3
 800207a:	3301      	adds	r3, #1
 800207c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Init+0x196>
 800208e:	2301      	movs	r3, #1
 8002090:	e022      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10e      	bne.n	80020b8 <HAL_I2C_Init+0x1bc>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1e58      	subs	r0, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6859      	ldr	r1, [r3, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	440b      	add	r3, r1
 80020a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ac:	3301      	adds	r3, #1
 80020ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b6:	e00f      	b.n	80020d8 <HAL_I2C_Init+0x1dc>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1e58      	subs	r0, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	0099      	lsls	r1, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	6809      	ldr	r1, [r1, #0]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6911      	ldr	r1, [r2, #16]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68d2      	ldr	r2, [r2, #12]
 8002112:	4311      	orrs	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	430b      	orrs	r3, r1
 800211a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	000186a0 	.word	0x000186a0
 8002174:	001e847f 	.word	0x001e847f
 8002178:	003d08ff 	.word	0x003d08ff
 800217c:	431bde83 	.word	0x431bde83
 8002180:	10624dd3 	.word	0x10624dd3

08002184 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	461a      	mov	r2, r3
 8002190:	460b      	mov	r3, r1
 8002192:	817b      	strh	r3, [r7, #10]
 8002194:	4613      	mov	r3, r2
 8002196:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff fb90 	bl	80018bc <HAL_GetTick>
 800219c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	f040 80e0 	bne.w	800236c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2319      	movs	r3, #25
 80021b2:	2201      	movs	r2, #1
 80021b4:	4970      	ldr	r1, [pc, #448]	; (8002378 <HAL_I2C_Master_Transmit+0x1f4>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f964 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
 80021c4:	e0d3      	b.n	800236e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_I2C_Master_Transmit+0x50>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e0cc      	b.n	800236e <HAL_I2C_Master_Transmit+0x1ea>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d007      	beq.n	80021fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0201 	orr.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002208:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2221      	movs	r2, #33	; 0x21
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2210      	movs	r2, #16
 8002216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	893a      	ldrh	r2, [r7, #8]
 800222a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4a50      	ldr	r2, [pc, #320]	; (800237c <HAL_I2C_Master_Transmit+0x1f8>)
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800223c:	8979      	ldrh	r1, [r7, #10]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	6a3a      	ldr	r2, [r7, #32]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f89c 	bl	8002380 <I2C_MasterRequestWrite>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e08d      	b.n	800236e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002268:	e066      	b.n	8002338 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	6a39      	ldr	r1, [r7, #32]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fa22 	bl	80026b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2b04      	cmp	r3, #4
 8002280:	d107      	bne.n	8002292 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002290:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e06b      	b.n	800236e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	781a      	ldrb	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d11b      	bne.n	800230c <HAL_I2C_Master_Transmit+0x188>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d017      	beq.n	800230c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	6a39      	ldr	r1, [r7, #32]
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fa19 	bl	8002748 <I2C_WaitOnBTFFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00d      	beq.n	8002338 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	2b04      	cmp	r3, #4
 8002322:	d107      	bne.n	8002334 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002332:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e01a      	b.n	800236e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233c:	2b00      	cmp	r3, #0
 800233e:	d194      	bne.n	800226a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	e000      	b.n	800236e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
  }
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	00100002 	.word	0x00100002
 800237c:	ffff0000 	.word	0xffff0000

08002380 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af02      	add	r7, sp, #8
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	460b      	mov	r3, r1
 800238e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b08      	cmp	r3, #8
 800239a:	d006      	beq.n	80023aa <I2C_MasterRequestWrite+0x2a>
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d003      	beq.n	80023aa <I2C_MasterRequestWrite+0x2a>
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023a8:	d108      	bne.n	80023bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	e00b      	b.n	80023d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	2b12      	cmp	r3, #18
 80023c2:	d107      	bne.n	80023d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f84f 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00d      	beq.n	8002408 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fa:	d103      	bne.n	8002404 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e035      	b.n	8002474 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002410:	d108      	bne.n	8002424 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002412:	897b      	ldrh	r3, [r7, #10]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002420:	611a      	str	r2, [r3, #16]
 8002422:	e01b      	b.n	800245c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002424:	897b      	ldrh	r3, [r7, #10]
 8002426:	11db      	asrs	r3, r3, #7
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f003 0306 	and.w	r3, r3, #6
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f063 030f 	orn	r3, r3, #15
 8002434:	b2da      	uxtb	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	490e      	ldr	r1, [pc, #56]	; (800247c <I2C_MasterRequestWrite+0xfc>)
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f898 	bl	8002578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e010      	b.n	8002474 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002452:	897b      	ldrh	r3, [r7, #10]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	4907      	ldr	r1, [pc, #28]	; (8002480 <I2C_MasterRequestWrite+0x100>)
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f888 	bl	8002578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	00010008 	.word	0x00010008
 8002480:	00010002 	.word	0x00010002

08002484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002494:	e048      	b.n	8002528 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d044      	beq.n	8002528 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249e:	f7ff fa0d 	bl	80018bc <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d139      	bne.n	8002528 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d10d      	bne.n	80024da <I2C_WaitOnFlagUntilTimeout+0x56>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	43da      	mvns	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	4013      	ands	r3, r2
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	e00c      	b.n	80024f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	43da      	mvns	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	4013      	ands	r3, r2
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d116      	bne.n	8002528 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f043 0220 	orr.w	r2, r3, #32
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e023      	b.n	8002570 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	0c1b      	lsrs	r3, r3, #16
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d10d      	bne.n	800254e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	43da      	mvns	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4013      	ands	r3, r2
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	e00c      	b.n	8002568 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	43da      	mvns	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4013      	ands	r3, r2
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	429a      	cmp	r2, r3
 800256c:	d093      	beq.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002586:	e071      	b.n	800266c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002596:	d123      	bne.n	80025e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f043 0204 	orr.w	r2, r3, #4
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e067      	b.n	80026b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e6:	d041      	beq.n	800266c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e8:	f7ff f968 	bl	80018bc <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d302      	bcc.n	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d136      	bne.n	800266c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	0c1b      	lsrs	r3, r3, #16
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10c      	bne.n	8002622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	43da      	mvns	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4013      	ands	r3, r2
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf14      	ite	ne
 800261a:	2301      	movne	r3, #1
 800261c:	2300      	moveq	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	e00b      	b.n	800263a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	43da      	mvns	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	4013      	ands	r3, r2
 800262e:	b29b      	uxth	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d016      	beq.n	800266c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f043 0220 	orr.w	r2, r3, #32
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e021      	b.n	80026b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	0c1b      	lsrs	r3, r3, #16
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d10c      	bne.n	8002690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	43da      	mvns	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	4013      	ands	r3, r2
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf14      	ite	ne
 8002688:	2301      	movne	r3, #1
 800268a:	2300      	moveq	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	e00b      	b.n	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	43da      	mvns	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4013      	ands	r3, r2
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf14      	ite	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2300      	moveq	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f47f af6d 	bne.w	8002588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026c4:	e034      	b.n	8002730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f886 	bl	80027d8 <I2C_IsAcknowledgeFailed>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e034      	b.n	8002740 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026dc:	d028      	beq.n	8002730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026de:	f7ff f8ed 	bl	80018bc <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d302      	bcc.n	80026f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d11d      	bne.n	8002730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b80      	cmp	r3, #128	; 0x80
 8002700:	d016      	beq.n	8002730 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f043 0220 	orr.w	r2, r3, #32
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e007      	b.n	8002740 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	2b80      	cmp	r3, #128	; 0x80
 800273c:	d1c3      	bne.n	80026c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002754:	e034      	b.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f83e 	bl	80027d8 <I2C_IsAcknowledgeFailed>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e034      	b.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d028      	beq.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276e:	f7ff f8a5 	bl	80018bc <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	429a      	cmp	r2, r3
 800277c:	d302      	bcc.n	8002784 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d11d      	bne.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b04      	cmp	r3, #4
 8002790:	d016      	beq.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f043 0220 	orr.w	r2, r3, #32
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e007      	b.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d1c3      	bne.n	8002756 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ee:	d11b      	bne.n	8002828 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f043 0204 	orr.w	r2, r3, #4
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e272      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8087 	beq.w	8002962 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002854:	4b92      	ldr	r3, [pc, #584]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b04      	cmp	r3, #4
 800285e:	d00c      	beq.n	800287a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002860:	4b8f      	ldr	r3, [pc, #572]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	d112      	bne.n	8002892 <HAL_RCC_OscConfig+0x5e>
 800286c:	4b8c      	ldr	r3, [pc, #560]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002878:	d10b      	bne.n	8002892 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287a:	4b89      	ldr	r3, [pc, #548]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d06c      	beq.n	8002960 <HAL_RCC_OscConfig+0x12c>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d168      	bne.n	8002960 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e24c      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289a:	d106      	bne.n	80028aa <HAL_RCC_OscConfig+0x76>
 800289c:	4b80      	ldr	r3, [pc, #512]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a7f      	ldr	r2, [pc, #508]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	e02e      	b.n	8002908 <HAL_RCC_OscConfig+0xd4>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10c      	bne.n	80028cc <HAL_RCC_OscConfig+0x98>
 80028b2:	4b7b      	ldr	r3, [pc, #492]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a7a      	ldr	r2, [pc, #488]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b78      	ldr	r3, [pc, #480]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a77      	ldr	r2, [pc, #476]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e01d      	b.n	8002908 <HAL_RCC_OscConfig+0xd4>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0xbc>
 80028d6:	4b72      	ldr	r3, [pc, #456]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a71      	ldr	r2, [pc, #452]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b6f      	ldr	r3, [pc, #444]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a6e      	ldr	r2, [pc, #440]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e00b      	b.n	8002908 <HAL_RCC_OscConfig+0xd4>
 80028f0:	4b6b      	ldr	r3, [pc, #428]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a6a      	ldr	r2, [pc, #424]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a67      	ldr	r2, [pc, #412]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002906:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe ffd4 	bl	80018bc <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002918:	f7fe ffd0 	bl	80018bc <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	; 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e200      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b5d      	ldr	r3, [pc, #372]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0xe4>
 8002936:	e014      	b.n	8002962 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe ffc0 	bl	80018bc <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002940:	f7fe ffbc 	bl	80018bc <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e1ec      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002952:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x10c>
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d063      	beq.n	8002a36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800296e:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800297a:	4b49      	ldr	r3, [pc, #292]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b08      	cmp	r3, #8
 8002984:	d11c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x18c>
 8002986:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d116      	bne.n	80029c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002992:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_RCC_OscConfig+0x176>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d001      	beq.n	80029aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e1c0      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4939      	ldr	r1, [pc, #228]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029be:	e03a      	b.n	8002a36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d020      	beq.n	8002a0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c8:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe ff75 	bl	80018bc <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d6:	f7fe ff71 	bl	80018bc <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e1a1      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f4:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4927      	ldr	r1, [pc, #156]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	600b      	str	r3, [r1, #0]
 8002a08:	e015      	b.n	8002a36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0a:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7fe ff54 	bl	80018bc <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a18:	f7fe ff50 	bl	80018bc <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e180      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d03a      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d019      	beq.n	8002a7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a50:	f7fe ff34 	bl	80018bc <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a58:	f7fe ff30 	bl	80018bc <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e160      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f000 faba 	bl	8002ff0 <RCC_Delay>
 8002a7c:	e01c      	b.n	8002ab8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a84:	f7fe ff1a 	bl	80018bc <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8a:	e00f      	b.n	8002aac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7fe ff16 	bl	80018bc <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d908      	bls.n	8002aac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e146      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	42420000 	.word	0x42420000
 8002aa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	4b92      	ldr	r3, [pc, #584]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1e9      	bne.n	8002a8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a6 	beq.w	8002c12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aca:	4b8b      	ldr	r3, [pc, #556]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10d      	bne.n	8002af2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad6:	4b88      	ldr	r3, [pc, #544]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	4a87      	ldr	r2, [pc, #540]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	61d3      	str	r3, [r2, #28]
 8002ae2:	4b85      	ldr	r3, [pc, #532]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aee:	2301      	movs	r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	4b82      	ldr	r3, [pc, #520]	; (8002cfc <HAL_RCC_OscConfig+0x4c8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d118      	bne.n	8002b30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afe:	4b7f      	ldr	r3, [pc, #508]	; (8002cfc <HAL_RCC_OscConfig+0x4c8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a7e      	ldr	r2, [pc, #504]	; (8002cfc <HAL_RCC_OscConfig+0x4c8>)
 8002b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fed7 	bl	80018bc <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b12:	f7fe fed3 	bl	80018bc <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b64      	cmp	r3, #100	; 0x64
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e103      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	4b75      	ldr	r3, [pc, #468]	; (8002cfc <HAL_RCC_OscConfig+0x4c8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x312>
 8002b38:	4b6f      	ldr	r3, [pc, #444]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4a6e      	ldr	r2, [pc, #440]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6213      	str	r3, [r2, #32]
 8002b44:	e02d      	b.n	8002ba2 <HAL_RCC_OscConfig+0x36e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x334>
 8002b4e:	4b6a      	ldr	r3, [pc, #424]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a69      	ldr	r2, [pc, #420]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6213      	str	r3, [r2, #32]
 8002b5a:	4b67      	ldr	r3, [pc, #412]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4a66      	ldr	r2, [pc, #408]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	6213      	str	r3, [r2, #32]
 8002b66:	e01c      	b.n	8002ba2 <HAL_RCC_OscConfig+0x36e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d10c      	bne.n	8002b8a <HAL_RCC_OscConfig+0x356>
 8002b70:	4b61      	ldr	r3, [pc, #388]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	4a60      	ldr	r2, [pc, #384]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b76:	f043 0304 	orr.w	r3, r3, #4
 8002b7a:	6213      	str	r3, [r2, #32]
 8002b7c:	4b5e      	ldr	r3, [pc, #376]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4a5d      	ldr	r2, [pc, #372]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6213      	str	r3, [r2, #32]
 8002b88:	e00b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x36e>
 8002b8a:	4b5b      	ldr	r3, [pc, #364]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4a5a      	ldr	r2, [pc, #360]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	6213      	str	r3, [r2, #32]
 8002b96:	4b58      	ldr	r3, [pc, #352]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	4a57      	ldr	r2, [pc, #348]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	f023 0304 	bic.w	r3, r3, #4
 8002ba0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d015      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002baa:	f7fe fe87 	bl	80018bc <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7fe fe83 	bl	80018bc <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e0b1      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc8:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ee      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x37e>
 8002bd4:	e014      	b.n	8002c00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fe71 	bl	80018bc <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7fe fe6d 	bl	80018bc <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e09b      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf4:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ee      	bne.n	8002bde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c06:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	4a3b      	ldr	r2, [pc, #236]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8087 	beq.w	8002d2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c1c:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d061      	beq.n	8002cec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d146      	bne.n	8002cbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c30:	4b33      	ldr	r3, [pc, #204]	; (8002d00 <HAL_RCC_OscConfig+0x4cc>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c36:	f7fe fe41 	bl	80018bc <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7fe fe3d 	bl	80018bc <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e06d      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c50:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f0      	bne.n	8002c3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c64:	d108      	bne.n	8002c78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c66:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	4921      	ldr	r1, [pc, #132]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c78:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a19      	ldr	r1, [r3, #32]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	491b      	ldr	r1, [pc, #108]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x4cc>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7fe fe11 	bl	80018bc <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe fe0d 	bl	80018bc <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e03d      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x46a>
 8002cbc:	e035      	b.n	8002d2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <HAL_RCC_OscConfig+0x4cc>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fdfa 	bl	80018bc <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe fdf6 	bl	80018bc <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e026      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x498>
 8002cea:	e01e      	b.n	8002d2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e019      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_RCC_OscConfig+0x500>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000

08002d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0d0      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b6a      	ldr	r3, [pc, #424]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d910      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b67      	ldr	r3, [pc, #412]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 0207 	bic.w	r2, r3, #7
 8002d62:	4965      	ldr	r1, [pc, #404]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b63      	ldr	r3, [pc, #396]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0b8      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d94:	4b59      	ldr	r3, [pc, #356]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4a58      	ldr	r2, [pc, #352]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dac:	4b53      	ldr	r3, [pc, #332]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a52      	ldr	r2, [pc, #328]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002db6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db8:	4b50      	ldr	r3, [pc, #320]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	494d      	ldr	r1, [pc, #308]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d040      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	4b47      	ldr	r3, [pc, #284]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d115      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e07f      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	4b41      	ldr	r3, [pc, #260]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e073      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e06b      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b39      	ldr	r3, [pc, #228]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4936      	ldr	r1, [pc, #216]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e28:	f7fe fd48 	bl	80018bc <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7fe fd44 	bl	80018bc <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e053      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e58:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d210      	bcs.n	8002e88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 0207 	bic.w	r2, r3, #7
 8002e6e:	4922      	ldr	r1, [pc, #136]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e032      	b.n	8002eee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4916      	ldr	r1, [pc, #88]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	490e      	ldr	r1, [pc, #56]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ec6:	f000 f821 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	490a      	ldr	r1, [pc, #40]	; (8002f00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed8:	5ccb      	ldrb	r3, [r1, r3]
 8002eda:	fa22 f303 	lsr.w	r3, r2, r3
 8002ede:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <HAL_RCC_ClockConfig+0x1cc>)
 8002ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1d0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fca6 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40022000 	.word	0x40022000
 8002efc:	40021000 	.word	0x40021000
 8002f00:	08003290 	.word	0x08003290
 8002f04:	2000000c 	.word	0x2000000c
 8002f08:	20000010 	.word	0x20000010

08002f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f26:	4b1e      	ldr	r3, [pc, #120]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d002      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x30>
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d003      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0x36>
 8002f3a:	e027      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f3e:	613b      	str	r3, [r7, #16]
      break;
 8002f40:	e027      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	0c9b      	lsrs	r3, r3, #18
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f4c:	5cd3      	ldrb	r3, [r2, r3]
 8002f4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d010      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f5a:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	0c5b      	lsrs	r3, r3, #17
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	4a11      	ldr	r2, [pc, #68]	; (8002fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f66:	5cd3      	ldrb	r3, [r2, r3]
 8002f68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f6e:	fb03 f202 	mul.w	r2, r3, r2
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e004      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f80:	fb02 f303 	mul.w	r3, r2, r3
 8002f84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	613b      	str	r3, [r7, #16]
      break;
 8002f8a:	e002      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f8e:	613b      	str	r3, [r7, #16]
      break;
 8002f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f92:	693b      	ldr	r3, [r7, #16]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	007a1200 	.word	0x007a1200
 8002fa8:	080032a8 	.word	0x080032a8
 8002fac:	080032b8 	.word	0x080032b8
 8002fb0:	003d0900 	.word	0x003d0900

08002fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb8:	4b02      	ldr	r3, [pc, #8]	; (8002fc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	2000000c 	.word	0x2000000c

08002fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fcc:	f7ff fff2 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	4903      	ldr	r1, [pc, #12]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fde:	5ccb      	ldrb	r3, [r1, r3]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	080032a0 	.word	0x080032a0

08002ff0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <RCC_Delay+0x34>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <RCC_Delay+0x38>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0a5b      	lsrs	r3, r3, #9
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800300c:	bf00      	nop
  }
  while (Delay --);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1e5a      	subs	r2, r3, #1
 8003012:	60fa      	str	r2, [r7, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f9      	bne.n	800300c <RCC_Delay+0x1c>
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	2000000c 	.word	0x2000000c
 8003028:	10624dd3 	.word	0x10624dd3

0800302c <__libc_init_array>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	2600      	movs	r6, #0
 8003030:	4d0c      	ldr	r5, [pc, #48]	; (8003064 <__libc_init_array+0x38>)
 8003032:	4c0d      	ldr	r4, [pc, #52]	; (8003068 <__libc_init_array+0x3c>)
 8003034:	1b64      	subs	r4, r4, r5
 8003036:	10a4      	asrs	r4, r4, #2
 8003038:	42a6      	cmp	r6, r4
 800303a:	d109      	bne.n	8003050 <__libc_init_array+0x24>
 800303c:	f000 f822 	bl	8003084 <_init>
 8003040:	2600      	movs	r6, #0
 8003042:	4d0a      	ldr	r5, [pc, #40]	; (800306c <__libc_init_array+0x40>)
 8003044:	4c0a      	ldr	r4, [pc, #40]	; (8003070 <__libc_init_array+0x44>)
 8003046:	1b64      	subs	r4, r4, r5
 8003048:	10a4      	asrs	r4, r4, #2
 800304a:	42a6      	cmp	r6, r4
 800304c:	d105      	bne.n	800305a <__libc_init_array+0x2e>
 800304e:	bd70      	pop	{r4, r5, r6, pc}
 8003050:	f855 3b04 	ldr.w	r3, [r5], #4
 8003054:	4798      	blx	r3
 8003056:	3601      	adds	r6, #1
 8003058:	e7ee      	b.n	8003038 <__libc_init_array+0xc>
 800305a:	f855 3b04 	ldr.w	r3, [r5], #4
 800305e:	4798      	blx	r3
 8003060:	3601      	adds	r6, #1
 8003062:	e7f2      	b.n	800304a <__libc_init_array+0x1e>
 8003064:	080032bc 	.word	0x080032bc
 8003068:	080032bc 	.word	0x080032bc
 800306c:	080032bc 	.word	0x080032bc
 8003070:	080032c0 	.word	0x080032c0

08003074 <memset>:
 8003074:	4603      	mov	r3, r0
 8003076:	4402      	add	r2, r0
 8003078:	4293      	cmp	r3, r2
 800307a:	d100      	bne.n	800307e <memset+0xa>
 800307c:	4770      	bx	lr
 800307e:	f803 1b01 	strb.w	r1, [r3], #1
 8003082:	e7f9      	b.n	8003078 <memset+0x4>

08003084 <_init>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	bf00      	nop
 8003088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308a:	bc08      	pop	{r3}
 800308c:	469e      	mov	lr, r3
 800308e:	4770      	bx	lr

08003090 <_fini>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr
