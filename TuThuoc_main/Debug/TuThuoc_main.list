
TuThuoc_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  080065c8  080065c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006978  08006978  0002012c  2**0
                  CONTENTS
  4 .ARM          00000000  08006978  08006978  0002012c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006978  08006978  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006978  08006978  00016978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800697c  0800697c  0001697c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08006980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000012c  08006aac  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08006aac  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8c1  00000000  00000000  00020155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002675  00000000  00000000  0002ea16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00031090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  00031c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fbe  00000000  00000000  00032710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ad4  00000000  00000000  0004b6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087384  00000000  00000000  0005c1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3526  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a30  00000000  00000000  000e3578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000012c 	.word	0x2000012c
 8000128:	00000000 	.word	0x00000000
 800012c:	080065b0 	.word	0x080065b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000130 	.word	0x20000130
 8000148:	080065b0 	.word	0x080065b0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <at24_I2C_Init>:

static uint8_t at24_lock = 0;
static I2C_HandleTypeDef hi2c_lib;

void at24_I2C_Init(I2C_HandleTypeDef i2c)
{
 800015c:	b084      	sub	sp, #16
 800015e:	b580      	push	{r7, lr}
 8000160:	af00      	add	r7, sp, #0
 8000162:	f107 0c08 	add.w	ip, r7, #8
 8000166:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c_lib = i2c;
 800016a:	4b07      	ldr	r3, [pc, #28]	; (8000188 <at24_I2C_Init+0x2c>)
 800016c:	4618      	mov	r0, r3
 800016e:	f107 0308 	add.w	r3, r7, #8
 8000172:	2254      	movs	r2, #84	; 0x54
 8000174:	4619      	mov	r1, r3
 8000176:	f004 ffc5 	bl	8005104 <memcpy>
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000182:	b004      	add	sp, #16
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	2000014c 	.word	0x2000014c

0800018c <at24_isConnected>:
  * @brief  Checks if memory device is ready for communication.
  * @param  none
  * @retval bool status
  */
bool at24_isConnected(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
	HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
  #endif
  if (HAL_I2C_IsDeviceReady(&hi2c_lib, _EEPROM_ADDRESS, 2, 100) == HAL_OK)
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	2202      	movs	r2, #2
 8000194:	21a0      	movs	r1, #160	; 0xa0
 8000196:	4805      	ldr	r0, [pc, #20]	; (80001ac <at24_isConnected+0x20>)
 8000198:	f003 f834 	bl	8003204 <HAL_I2C_IsDeviceReady>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d101      	bne.n	80001a6 <at24_isConnected+0x1a>
    return true;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e000      	b.n	80001a8 <at24_isConnected+0x1c>
  else
    return false;
 80001a6:	2300      	movs	r3, #0
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	2000014c 	.word	0x2000014c

080001b0 <at24_read>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
bool at24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b088      	sub	sp, #32
 80001b4:	af04      	add	r7, sp, #16
 80001b6:	60b9      	str	r1, [r7, #8]
 80001b8:	607a      	str	r2, [r7, #4]
 80001ba:	603b      	str	r3, [r7, #0]
 80001bc:	4603      	mov	r3, r0
 80001be:	81fb      	strh	r3, [r7, #14]
//	HAL_IWDG_Refresh(&hi2c_lib);
  if (at24_lock == 1)
 80001c0:	4b13      	ldr	r3, [pc, #76]	; (8000210 <at24_read+0x60>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d101      	bne.n	80001cc <at24_read+0x1c>
    return false;
 80001c8:	2300      	movs	r3, #0
 80001ca:	e01c      	b.n	8000206 <at24_read+0x56>
  at24_lock = 1;
 80001cc:	4b10      	ldr	r3, [pc, #64]	; (8000210 <at24_read+0x60>)
 80001ce:	2201      	movs	r2, #1
 80001d0:	701a      	strb	r2, [r3, #0]
  #elif (_EEPROM_SIZE_KBIT == 8)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT==16)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #else
  if (HAL_I2C_Mem_Read(&hi2c_lib, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	89f9      	ldrh	r1, [r7, #14]
 80001d8:	683a      	ldr	r2, [r7, #0]
 80001da:	9202      	str	r2, [sp, #8]
 80001dc:	9301      	str	r3, [sp, #4]
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	2310      	movs	r3, #16
 80001e4:	460a      	mov	r2, r1
 80001e6:	21a0      	movs	r1, #160	; 0xa0
 80001e8:	480a      	ldr	r0, [pc, #40]	; (8000214 <at24_read+0x64>)
 80001ea:	f002 fda3 	bl	8002d34 <HAL_I2C_Mem_Read>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d104      	bne.n	80001fe <at24_read+0x4e>
  #endif
  {
    at24_lock = 0;
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <at24_read+0x60>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	701a      	strb	r2, [r3, #0]
    return true;
 80001fa:	2301      	movs	r3, #1
 80001fc:	e003      	b.n	8000206 <at24_read+0x56>
  }
  else
  {
    at24_lock = 0;
 80001fe:	4b04      	ldr	r3, [pc, #16]	; (8000210 <at24_read+0x60>)
 8000200:	2200      	movs	r2, #0
 8000202:	701a      	strb	r2, [r3, #0]
    return false;
 8000204:	2300      	movs	r3, #0
  }
}
 8000206:	4618      	mov	r0, r3
 8000208:	3710      	adds	r7, #16
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	20000148 	.word	0x20000148
 8000214:	2000014c 	.word	0x2000014c

08000218 <CLCD_Delay>:
//************************** Low Level Function ****************************************************************//
uint8_t currentline;
uint8_t Xcursor,Ycursor,countWriteChar,CurrentWriteChar;
CLCD_I2C_Name LCD1;
static void CLCD_Delay(uint16_t Time)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000222:	88fb      	ldrh	r3, [r7, #6]
 8000224:	4618      	mov	r0, r3
 8000226:	f001 ff7b 	bl	8002120 <HAL_Delay>
}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}

08000232 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000232:	b580      	push	{r7, lr}
 8000234:	b086      	sub	sp, #24
 8000236:	af02      	add	r7, sp, #8
 8000238:	6078      	str	r0, [r7, #4]
 800023a:	460b      	mov	r3, r1
 800023c:	70fb      	strb	r3, [r7, #3]
 800023e:	4613      	mov	r3, r2
 8000240:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000242:	78fb      	ldrb	r3, [r7, #3]
 8000244:	f023 030f 	bic.w	r3, r3, #15
 8000248:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 800024a:	78fb      	ldrb	r3, [r7, #3]
 800024c:	011b      	lsls	r3, r3, #4
 800024e:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	7adb      	ldrb	r3, [r3, #11]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d007      	beq.n	8000268 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 8000258:	7bfb      	ldrb	r3, [r7, #15]
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8000260:	7bbb      	ldrb	r3, [r7, #14]
 8000262:	f043 0308 	orr.w	r3, r3, #8
 8000266:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8000268:	78bb      	ldrb	r3, [r7, #2]
 800026a:	2b01      	cmp	r3, #1
 800026c:	d108      	bne.n	8000280 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 800026e:	7bfb      	ldrb	r3, [r7, #15]
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8000276:	7bbb      	ldrb	r3, [r7, #14]
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	73bb      	strb	r3, [r7, #14]
 800027e:	e00a      	b.n	8000296 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8000280:	78bb      	ldrb	r3, [r7, #2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d107      	bne.n	8000296 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8000286:	7bfb      	ldrb	r3, [r7, #15]
 8000288:	f023 0301 	bic.w	r3, r3, #1
 800028c:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 800028e:	7bbb      	ldrb	r3, [r7, #14]
 8000290:	f023 0301 	bic.w	r3, r3, #1
 8000294:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8000296:	7bfb      	ldrb	r3, [r7, #15]
 8000298:	f043 0304 	orr.w	r3, r3, #4
 800029c:	b2db      	uxtb	r3, r3
 800029e:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f7ff ffb9 	bl	8000218 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
 80002a8:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80002aa:	7bbb      	ldrb	r3, [r7, #14]
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f7ff ffaf 	bl	8000218 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80002ba:	7bbb      	ldrb	r3, [r7, #14]
 80002bc:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	6818      	ldr	r0, [r3, #0]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	791b      	ldrb	r3, [r3, #4]
 80002c6:	b299      	uxth	r1, r3
 80002c8:	f107 0208 	add.w	r2, r7, #8
 80002cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	2304      	movs	r3, #4
 80002d4:	f002 fc30 	bl	8002b38 <HAL_I2C_Master_Transmit>

}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <CLCD_I2C_Init>:
//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	4611      	mov	r1, r2
 80002ec:	461a      	mov	r2, r3
 80002ee:	460b      	mov	r3, r1
 80002f0:	71fb      	strb	r3, [r7, #7]
 80002f2:	4613      	mov	r3, r2
 80002f4:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	68ba      	ldr	r2, [r7, #8]
 80002fa:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	79fa      	ldrb	r2, [r7, #7]
 8000300:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	79ba      	ldrb	r2, [r7, #6]
 8000306:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	7e3a      	ldrb	r2, [r7, #24]
 800030c:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	2228      	movs	r2, #40	; 0x28
 8000312:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	2206      	movs	r2, #6
 8000318:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	220c      	movs	r2, #12
 800031e:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	2214      	movs	r2, #20
 8000324:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	2208      	movs	r2, #8
 800032a:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 800032c:	2032      	movs	r0, #50	; 0x32
 800032e:	f7ff ff73 	bl	8000218 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000332:	2200      	movs	r2, #0
 8000334:	2133      	movs	r1, #51	; 0x33
 8000336:	68f8      	ldr	r0, [r7, #12]
 8000338:	f7ff ff7b 	bl	8000232 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800033c:	2200      	movs	r2, #0
 800033e:	2133      	movs	r1, #51	; 0x33
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	f7ff ff76 	bl	8000232 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000346:	2005      	movs	r0, #5
 8000348:	f7ff ff66 	bl	8000218 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 800034c:	2200      	movs	r2, #0
 800034e:	2132      	movs	r1, #50	; 0x32
 8000350:	68f8      	ldr	r0, [r7, #12]
 8000352:	f7ff ff6e 	bl	8000232 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000356:	2005      	movs	r0, #5
 8000358:	f7ff ff5e 	bl	8000218 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 800035c:	2200      	movs	r2, #0
 800035e:	2120      	movs	r1, #32
 8000360:	68f8      	ldr	r0, [r7, #12]
 8000362:	f7ff ff66 	bl	8000232 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000366:	2005      	movs	r0, #5
 8000368:	f7ff ff56 	bl	8000218 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	79db      	ldrb	r3, [r3, #7]
 8000370:	2200      	movs	r2, #0
 8000372:	4619      	mov	r1, r3
 8000374:	68f8      	ldr	r0, [r7, #12]
 8000376:	f7ff ff5c 	bl	8000232 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	7a1b      	ldrb	r3, [r3, #8]
 800037e:	2200      	movs	r2, #0
 8000380:	4619      	mov	r1, r3
 8000382:	68f8      	ldr	r0, [r7, #12]
 8000384:	f7ff ff55 	bl	8000232 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	7a5b      	ldrb	r3, [r3, #9]
 800038c:	2200      	movs	r2, #0
 800038e:	4619      	mov	r1, r3
 8000390:	68f8      	ldr	r0, [r7, #12]
 8000392:	f7ff ff4e 	bl	8000232 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	7a9b      	ldrb	r3, [r3, #10]
 800039a:	2200      	movs	r2, #0
 800039c:	4619      	mov	r1, r3
 800039e:	68f8      	ldr	r0, [r7, #12]
 80003a0:	f7ff ff47 	bl	8000232 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2101      	movs	r1, #1
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f7ff ff42 	bl	8000232 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2102      	movs	r1, #2
 80003b2:	68f8      	ldr	r0, [r7, #12]
 80003b4:	f7ff ff3d 	bl	8000232 <CLCD_WriteI2C>
}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	460b      	mov	r3, r1
 80003ca:	70fb      	strb	r3, [r7, #3]
 80003cc:	4613      	mov	r3, r2
 80003ce:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 80003d0:	2300      	movs	r3, #0
 80003d2:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	78fa      	ldrb	r2, [r7, #3]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d303      	bcc.n	80003e6 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	795b      	ldrb	r3, [r3, #5]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	799b      	ldrb	r3, [r3, #6]
 80003ea:	78ba      	ldrb	r2, [r7, #2]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d303      	bcc.n	80003f8 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	799b      	ldrb	r3, [r3, #6]
 80003f4:	3b01      	subs	r3, #1
 80003f6:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 80003f8:	78bb      	ldrb	r3, [r7, #2]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d102      	bne.n	8000404 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 80003fe:	78fb      	ldrb	r3, [r7, #3]
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	e013      	b.n	800042c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000404:	78bb      	ldrb	r3, [r7, #2]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d103      	bne.n	8000412 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	3340      	adds	r3, #64	; 0x40
 800040e:	73fb      	strb	r3, [r7, #15]
 8000410:	e00c      	b.n	800042c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8000412:	78bb      	ldrb	r3, [r7, #2]
 8000414:	2b02      	cmp	r3, #2
 8000416:	d103      	bne.n	8000420 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x10 + Xpos;
 8000418:	78fb      	ldrb	r3, [r7, #3]
 800041a:	3310      	adds	r3, #16
 800041c:	73fb      	strb	r3, [r7, #15]
 800041e:	e005      	b.n	800042c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000420:	78bb      	ldrb	r3, [r7, #2]
 8000422:	2b03      	cmp	r3, #3
 8000424:	d102      	bne.n	800042c <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x50 + Xpos;
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	3350      	adds	r3, #80	; 0x50
 800042a:	73fb      	strb	r3, [r7, #15]
	}
	Xcursor = Xpos;
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <CLCD_I2C_SetCursor+0xa4>)
 800042e:	78fb      	ldrb	r3, [r7, #3]
 8000430:	7013      	strb	r3, [r2, #0]

	Ycursor = Ypos;
 8000432:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <CLCD_I2C_SetCursor+0xa8>)
 8000434:	78bb      	ldrb	r3, [r7, #2]
 8000436:	7013      	strb	r3, [r2, #0]
	currentline = Ycursor;
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <CLCD_I2C_SetCursor+0xa8>)
 800043a:	781a      	ldrb	r2, [r3, #0]
 800043c:	4b0b      	ldr	r3, [pc, #44]	; (800046c <CLCD_I2C_SetCursor+0xac>)
 800043e:	701a      	strb	r2, [r3, #0]
	countWriteChar = Xcursor;
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <CLCD_I2C_SetCursor+0xa4>)
 8000442:	781a      	ldrb	r2, [r3, #0]
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <CLCD_I2C_SetCursor+0xb0>)
 8000446:	701a      	strb	r2, [r3, #0]
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800044e:	b2db      	uxtb	r3, r3
 8000450:	2200      	movs	r2, #0
 8000452:	4619      	mov	r1, r3
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff feec 	bl	8000232 <CLCD_WriteI2C>
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	200001a1 	.word	0x200001a1
 8000468:	200001a2 	.word	0x200001a2
 800046c:	200001a0 	.word	0x200001a0
 8000470:	200001a3 	.word	0x200001a3

08000474 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	460b      	mov	r3, r1
 800047e:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8000480:	78fb      	ldrb	r3, [r7, #3]
 8000482:	2201      	movs	r2, #1
 8000484:	4619      	mov	r1, r3
 8000486:	6878      	ldr	r0, [r7, #4]
 8000488:	f7ff fed3 	bl	8000232 <CLCD_WriteI2C>
	countWriteChar++;
 800048c:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <CLCD_I2C_WriteChar+0x94>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	b2da      	uxtb	r2, r3
 8000494:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <CLCD_I2C_WriteChar+0x94>)
 8000496:	701a      	strb	r2, [r3, #0]
	if (CurrentWriteChar)
 8000498:	4b1c      	ldr	r3, [pc, #112]	; (800050c <CLCD_I2C_WriteChar+0x98>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d02b      	beq.n	80004f8 <CLCD_I2C_WriteChar+0x84>
	{
	if (countWriteChar ==20)
 80004a0:	4b19      	ldr	r3, [pc, #100]	; (8000508 <CLCD_I2C_WriteChar+0x94>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b14      	cmp	r3, #20
 80004a6:	d127      	bne.n	80004f8 <CLCD_I2C_WriteChar+0x84>
	{
	switch(currentline)
 80004a8:	4b19      	ldr	r3, [pc, #100]	; (8000510 <CLCD_I2C_WriteChar+0x9c>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d825      	bhi.n	80004fc <CLCD_I2C_WriteChar+0x88>
 80004b0:	a201      	add	r2, pc, #4	; (adr r2, 80004b8 <CLCD_I2C_WriteChar+0x44>)
 80004b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b6:	bf00      	nop
 80004b8:	080004c9 	.word	0x080004c9
 80004bc:	080004d5 	.word	0x080004d5
 80004c0:	080004e1 	.word	0x080004e1
 80004c4:	080004ed 	.word	0x080004ed
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2100      	movs	r1, #0
 80004cc:	4811      	ldr	r0, [pc, #68]	; (8000514 <CLCD_I2C_WriteChar+0xa0>)
 80004ce:	f7ff ff77 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80004d2:	e014      	b.n	80004fe <CLCD_I2C_WriteChar+0x8a>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 80004d4:	2202      	movs	r2, #2
 80004d6:	2100      	movs	r1, #0
 80004d8:	480e      	ldr	r0, [pc, #56]	; (8000514 <CLCD_I2C_WriteChar+0xa0>)
 80004da:	f7ff ff71 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80004de:	e00e      	b.n	80004fe <CLCD_I2C_WriteChar+0x8a>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 80004e0:	2203      	movs	r2, #3
 80004e2:	2100      	movs	r1, #0
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <CLCD_I2C_WriteChar+0xa0>)
 80004e6:	f7ff ff6b 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80004ea:	e008      	b.n	80004fe <CLCD_I2C_WriteChar+0x8a>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2100      	movs	r1, #0
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <CLCD_I2C_WriteChar+0xa0>)
 80004f2:	f7ff ff65 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80004f6:	e002      	b.n	80004fe <CLCD_I2C_WriteChar+0x8a>
				default:
								break;
			}
		}
 80004f8:	bf00      	nop
 80004fa:	e000      	b.n	80004fe <CLCD_I2C_WriteChar+0x8a>
								break;
 80004fc:	bf00      	nop
	}
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200001a3 	.word	0x200001a3
 800050c:	200001a4 	.word	0x200001a4
 8000510:	200001a0 	.word	0x200001a0
 8000514:	200001a8 	.word	0x200001a8

08000518 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
	while (*String)
 8000522:	e04a      	b.n	80005ba <CLCD_I2C_WriteString+0xa2>
	{
	CurrentWriteChar=0;
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <CLCD_I2C_WriteString+0xbc>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 800052a:	2300      	movs	r3, #0
 800052c:	73fb      	strb	r3, [r7, #15]
 800052e:	e00e      	b.n	800054e <CLCD_I2C_WriteString+0x36>
		{
			if (*String)
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d012      	beq.n	800055e <CLCD_I2C_WriteString+0x46>
			{
				CLCD_I2C_WriteChar(LCD, *String++);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	603a      	str	r2, [r7, #0]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f7ff ff96 	bl	8000474 <CLCD_I2C_WriteChar>
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	3301      	adds	r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	7bfa      	ldrb	r2, [r7, #15]
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <CLCD_I2C_WriteString+0xc0>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	f1c3 0314 	rsb	r3, r3, #20
 8000558:	429a      	cmp	r2, r3
 800055a:	dbe9      	blt.n	8000530 <CLCD_I2C_WriteString+0x18>
 800055c:	e000      	b.n	8000560 <CLCD_I2C_WriteString+0x48>
			}
			else break;
 800055e:	bf00      	nop
		}
		if (*String)
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d02d      	beq.n	80005c4 <CLCD_I2C_WriteString+0xac>
		{
			switch(currentline)
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <CLCD_I2C_WriteString+0xc4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b03      	cmp	r3, #3
 800056e:	d823      	bhi.n	80005b8 <CLCD_I2C_WriteString+0xa0>
 8000570:	a201      	add	r2, pc, #4	; (adr r2, 8000578 <CLCD_I2C_WriteString+0x60>)
 8000572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000576:	bf00      	nop
 8000578:	08000589 	.word	0x08000589
 800057c:	08000595 	.word	0x08000595
 8000580:	080005a1 	.word	0x080005a1
 8000584:	080005ad 	.word	0x080005ad
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2100      	movs	r1, #0
 800058c:	4814      	ldr	r0, [pc, #80]	; (80005e0 <CLCD_I2C_WriteString+0xc8>)
 800058e:	f7ff ff17 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 8000592:	e012      	b.n	80005ba <CLCD_I2C_WriteString+0xa2>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8000594:	2202      	movs	r2, #2
 8000596:	2100      	movs	r1, #0
 8000598:	4811      	ldr	r0, [pc, #68]	; (80005e0 <CLCD_I2C_WriteString+0xc8>)
 800059a:	f7ff ff11 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 800059e:	e00c      	b.n	80005ba <CLCD_I2C_WriteString+0xa2>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 80005a0:	2203      	movs	r2, #3
 80005a2:	2100      	movs	r1, #0
 80005a4:	480e      	ldr	r0, [pc, #56]	; (80005e0 <CLCD_I2C_WriteString+0xc8>)
 80005a6:	f7ff ff0b 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80005aa:	e006      	b.n	80005ba <CLCD_I2C_WriteString+0xa2>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	480b      	ldr	r0, [pc, #44]	; (80005e0 <CLCD_I2C_WriteString+0xc8>)
 80005b2:	f7ff ff05 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80005b6:	e000      	b.n	80005ba <CLCD_I2C_WriteString+0xa2>
				default:
								break;
 80005b8:	bf00      	nop
	while (*String)
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d1b0      	bne.n	8000524 <CLCD_I2C_WriteString+0xc>
 80005c2:	e000      	b.n	80005c6 <CLCD_I2C_WriteString+0xae>
			}
		}
		else break;
 80005c4:	bf00      	nop

		}
	CurrentWriteChar=1;
 80005c6:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <CLCD_I2C_WriteString+0xbc>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200001a4 	.word	0x200001a4
 80005d8:	200001a1 	.word	0x200001a1
 80005dc:	200001a0 	.word	0x200001a0
 80005e0:	200001a8 	.word	0x200001a8

080005e4 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2101      	movs	r1, #1
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff fe1e 	bl	8000232 <CLCD_WriteI2C>
	CLCD_Delay(5);
 80005f6:	2005      	movs	r0, #5
 80005f8:	f7ff fe0e 	bl	8000218 <CLCD_Delay>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <Check_Keypad_Column>:
  +) RETURN:
    -Keypad_Button_Values[Row-x][x+1]   : Keypad_Button_Values
    -KEYPAD_NOT_PRESSED                 : "\0" (Không ấn nút)
*/
static char Check_Keypad_Column(GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main, uint8_t Row)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO0, ROW_KEY_PAD_main->PIN.GPIO_PIN_A)) //If ROW_1 is LOW
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	8a1b      	ldrh	r3, [r3, #16]
 8000618:	4619      	mov	r1, r3
 800061a:	4610      	mov	r0, r2
 800061c:	f002 f8e8 	bl	80027f0 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d105      	bne.n	8000632 <Check_Keypad_Column+0x2e>
	{
		return Keypad_Button_Values[Row-1][0];
 8000626:	78fb      	ldrb	r3, [r7, #3]
 8000628:	3b01      	subs	r3, #1
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <Check_Keypad_Column+0xa4>)
 800062c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000630:	e036      	b.n	80006a0 <Check_Keypad_Column+0x9c>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO1, ROW_KEY_PAD_main->PIN.GPIO_PIN_B)) //If ROW_2 is LOW
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	685a      	ldr	r2, [r3, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	8a5b      	ldrh	r3, [r3, #18]
 800063a:	4619      	mov	r1, r3
 800063c:	4610      	mov	r0, r2
 800063e:	f002 f8d7 	bl	80027f0 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d106      	bne.n	8000656 <Check_Keypad_Column+0x52>
	{
		return Keypad_Button_Values[Row-1][1];
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	3b01      	subs	r3, #1
 800064c:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <Check_Keypad_Column+0xa4>)
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4413      	add	r3, r2
 8000652:	785b      	ldrb	r3, [r3, #1]
 8000654:	e024      	b.n	80006a0 <Check_Keypad_Column+0x9c>
	}

    if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO2, ROW_KEY_PAD_main->PIN.GPIO_PIN_C)) //If ROW_3 is LOW
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	689a      	ldr	r2, [r3, #8]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	8a9b      	ldrh	r3, [r3, #20]
 800065e:	4619      	mov	r1, r3
 8000660:	4610      	mov	r0, r2
 8000662:	f002 f8c5 	bl	80027f0 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d106      	bne.n	800067a <Check_Keypad_Column+0x76>
	{
		return Keypad_Button_Values[Row-1][2];
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	3b01      	subs	r3, #1
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <Check_Keypad_Column+0xa4>)
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	e012      	b.n	80006a0 <Check_Keypad_Column+0x9c>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO3, ROW_KEY_PAD_main->PIN.GPIO_PIN_D)) //If ROW_4 is LOW
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	68da      	ldr	r2, [r3, #12]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	8adb      	ldrh	r3, [r3, #22]
 8000682:	4619      	mov	r1, r3
 8000684:	4610      	mov	r0, r2
 8000686:	f002 f8b3 	bl	80027f0 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d106      	bne.n	800069e <Check_Keypad_Column+0x9a>
	{
		return Keypad_Button_Values[Row-1][3];
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	3b01      	subs	r3, #1
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <Check_Keypad_Column+0xa4>)
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4413      	add	r3, r2
 800069a:	78db      	ldrb	r3, [r3, #3]
 800069c:	e000      	b.n	80006a0 <Check_Keypad_Column+0x9c>
	}
	return KEYPAD_NOT_PRESSED;                   //If NO Key is pressed
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	080067f4 	.word	0x080067f4

080006ac <KEYPAD_Read>:
  +) RETURN:
    -char check                                  	: const char Keypad_Button_Values[x][y]
    -KEYPAD_NOT_PRESSED                     		: '\0' {reason of failed)
*/
static char KEYPAD_Read(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    char check = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	73fb      	strb	r3, [r7, #15]
    /*Set COL_1 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_RESET);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6818      	ldr	r0, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	8a1b      	ldrh	r3, [r3, #16]
 80006c2:	2200      	movs	r2, #0
 80006c4:	4619      	mov	r1, r3
 80006c6:	f002 f8aa 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6858      	ldr	r0, [r3, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	8a5b      	ldrh	r3, [r3, #18]
 80006d2:	2201      	movs	r2, #1
 80006d4:	4619      	mov	r1, r3
 80006d6:	f002 f8a2 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6898      	ldr	r0, [r3, #8]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	8a9b      	ldrh	r3, [r3, #20]
 80006e2:	2201      	movs	r2, #1
 80006e4:	4619      	mov	r1, r3
 80006e6:	f002 f89a 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	68d8      	ldr	r0, [r3, #12]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	8adb      	ldrh	r3, [r3, #22]
 80006f2:	2201      	movs	r2, #1
 80006f4:	4619      	mov	r1, r3
 80006f6:	f002 f892 	bl	800281e <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 1);
 80006fa:	2101      	movs	r1, #1
 80006fc:	6838      	ldr	r0, [r7, #0]
 80006fe:	f7ff ff81 	bl	8000604 <Check_Keypad_Column>
 8000702:	4603      	mov	r3, r0
 8000704:	73fb      	strb	r3, [r7, #15]
    if(check)
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <KEYPAD_Read+0x64>
    {
    	return check;
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	e081      	b.n	8000814 <KEYPAD_Read+0x168>
    }
    /*Set COL_2 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6818      	ldr	r0, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	8a1b      	ldrh	r3, [r3, #16]
 8000718:	2201      	movs	r2, #1
 800071a:	4619      	mov	r1, r3
 800071c:	f002 f87f 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_RESET);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6858      	ldr	r0, [r3, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	8a5b      	ldrh	r3, [r3, #18]
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f002 f877 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6898      	ldr	r0, [r3, #8]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	8a9b      	ldrh	r3, [r3, #20]
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	f002 f86f 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68d8      	ldr	r0, [r3, #12]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	8adb      	ldrh	r3, [r3, #22]
 8000748:	2201      	movs	r2, #1
 800074a:	4619      	mov	r1, r3
 800074c:	f002 f867 	bl	800281e <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 2);
 8000750:	2102      	movs	r1, #2
 8000752:	6838      	ldr	r0, [r7, #0]
 8000754:	f7ff ff56 	bl	8000604 <Check_Keypad_Column>
 8000758:	4603      	mov	r3, r0
 800075a:	73fb      	strb	r3, [r7, #15]
    if(check)
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <KEYPAD_Read+0xba>
    {
    	return check;
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	e056      	b.n	8000814 <KEYPAD_Read+0x168>
    }
    /*Set COL_3 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	8a1b      	ldrh	r3, [r3, #16]
 800076e:	2201      	movs	r2, #1
 8000770:	4619      	mov	r1, r3
 8000772:	f002 f854 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6858      	ldr	r0, [r3, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	8a5b      	ldrh	r3, [r3, #18]
 800077e:	2201      	movs	r2, #1
 8000780:	4619      	mov	r1, r3
 8000782:	f002 f84c 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_RESET);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6898      	ldr	r0, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	8a9b      	ldrh	r3, [r3, #20]
 800078e:	2200      	movs	r2, #0
 8000790:	4619      	mov	r1, r3
 8000792:	f002 f844 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68d8      	ldr	r0, [r3, #12]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	8adb      	ldrh	r3, [r3, #22]
 800079e:	2201      	movs	r2, #1
 80007a0:	4619      	mov	r1, r3
 80007a2:	f002 f83c 	bl	800281e <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 3);
 80007a6:	2103      	movs	r1, #3
 80007a8:	6838      	ldr	r0, [r7, #0]
 80007aa:	f7ff ff2b 	bl	8000604 <Check_Keypad_Column>
 80007ae:	4603      	mov	r3, r0
 80007b0:	73fb      	strb	r3, [r7, #15]
    if(check)
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <KEYPAD_Read+0x110>
    {
    	return check;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	e02b      	b.n	8000814 <KEYPAD_Read+0x168>
    }
    /*Set COL_4 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	8a1b      	ldrh	r3, [r3, #16]
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	f002 f829 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6858      	ldr	r0, [r3, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	8a5b      	ldrh	r3, [r3, #18]
 80007d4:	2201      	movs	r2, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	f002 f821 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6898      	ldr	r0, [r3, #8]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	8a9b      	ldrh	r3, [r3, #20]
 80007e4:	2201      	movs	r2, #1
 80007e6:	4619      	mov	r1, r3
 80007e8:	f002 f819 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_RESET);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	68d8      	ldr	r0, [r3, #12]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	8adb      	ldrh	r3, [r3, #22]
 80007f4:	2200      	movs	r2, #0
 80007f6:	4619      	mov	r1, r3
 80007f8:	f002 f811 	bl	800281e <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 4);
 80007fc:	2104      	movs	r1, #4
 80007fe:	6838      	ldr	r0, [r7, #0]
 8000800:	f7ff ff00 	bl	8000604 <Check_Keypad_Column>
 8000804:	4603      	mov	r3, r0
 8000806:	73fb      	strb	r3, [r7, #15]
    if(check)
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <KEYPAD_Read+0x166>
    {
    	return check;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	e000      	b.n	8000814 <KEYPAD_Read+0x168>
    }
    /*Key not pressed */
    return KEYPAD_NOT_PRESSED;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <KeyPad_Init>:
void KeyPad_Init(	GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD,
					GPIO_TypeDef* C_port0, GPIO_TypeDef* C_port1, GPIO_TypeDef* C_port2, GPIO_TypeDef* C_port3,\
					uint16_t C_pin0, uint16_t C_pin1, uint16_t C_pin2, uint16_t C_pin3,\
					GPIO_TypeDef* R_port0, GPIO_TypeDef* R_port1, GPIO_TypeDef* R_port2, GPIO_TypeDef* R_port3,\
					uint16_t R_pin0, uint16_t R_pin1, uint16_t R_pin2, uint16_t R_pin3)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	603b      	str	r3, [r7, #0]
	//OUTPUT
  COL_KEY_PAD->PORT.GPIO0 = C_port0;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	601a      	str	r2, [r3, #0]
  COL_KEY_PAD->PORT.GPIO1 = C_port1;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	605a      	str	r2, [r3, #4]
  COL_KEY_PAD->PORT.GPIO2 = C_port2;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	609a      	str	r2, [r3, #8]
  COL_KEY_PAD->PORT.GPIO3 = C_port3;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	69fa      	ldr	r2, [r7, #28]
 8000840:	60da      	str	r2, [r3, #12]

  COL_KEY_PAD->PIN.GPIO_PIN_A = C_pin0;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	8c3a      	ldrh	r2, [r7, #32]
 8000846:	821a      	strh	r2, [r3, #16]
  COL_KEY_PAD->PIN.GPIO_PIN_B = C_pin1;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800084c:	825a      	strh	r2, [r3, #18]
  COL_KEY_PAD->PIN.GPIO_PIN_C = C_pin2;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000852:	829a      	strh	r2, [r3, #20]
  COL_KEY_PAD->PIN.GPIO_PIN_D = C_pin3;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000858:	82da      	strh	r2, [r3, #22]
  //INPUT
  ROW_KEY_PAD->PORT.GPIO0 = R_port0;
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800085e:	601a      	str	r2, [r3, #0]
  ROW_KEY_PAD->PORT.GPIO1 = R_port1;
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000864:	605a      	str	r2, [r3, #4]
  ROW_KEY_PAD->PORT.GPIO2 = R_port2;
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800086a:	609a      	str	r2, [r3, #8]
  ROW_KEY_PAD->PORT.GPIO3 = R_port3;
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000870:	60da      	str	r2, [r3, #12]

  ROW_KEY_PAD->PIN.GPIO_PIN_A = R_pin0;
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000878:	821a      	strh	r2, [r3, #16]
  ROW_KEY_PAD->PIN.GPIO_PIN_B = R_pin1;
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000880:	825a      	strh	r2, [r3, #18]
  ROW_KEY_PAD->PIN.GPIO_PIN_C = R_pin2;
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8000888:	829a      	strh	r2, [r3, #20]
  ROW_KEY_PAD->PIN.GPIO_PIN_D = R_pin3;
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8000890:	82da      	strh	r2, [r3, #22]
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <KEYPAD_Handler>:



char KEYPAD_Handler(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	char key = KEYPAD_Read(COL_KEY_PAD, ROW_KEY_PAD_main);;
 80008a6:	6839      	ldr	r1, [r7, #0]
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff feff 	bl	80006ac <KEYPAD_Read>
 80008ae:	4603      	mov	r3, r0
 80008b0:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_RESET);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	8a1b      	ldrh	r3, [r3, #16]
 80008ba:	2200      	movs	r2, #0
 80008bc:	4619      	mov	r1, r3
 80008be:	f001 ffae 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_RESET);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6858      	ldr	r0, [r3, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	8a5b      	ldrh	r3, [r3, #18]
 80008ca:	2200      	movs	r2, #0
 80008cc:	4619      	mov	r1, r3
 80008ce:	f001 ffa6 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_RESET);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6898      	ldr	r0, [r3, #8]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	8a9b      	ldrh	r3, [r3, #20]
 80008da:	2200      	movs	r2, #0
 80008dc:	4619      	mov	r1, r3
 80008de:	f001 ff9e 	bl	800281e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_RESET);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	68d8      	ldr	r0, [r3, #12]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	8adb      	ldrh	r3, [r3, #22]
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	f001 ff96 	bl	800281e <HAL_GPIO_WritePin>
    return key;
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <handler_keyIN_enterKey_DisplayLCD>:




STATE_KEY handler_keyIN_enterKey_DisplayLCD(CLCD_I2C_Name* LCD_user, STATE_SELECT_BUTTON_HANDLER_TYPEDEF state_button, char* key, char* password)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	460b      	mov	r3, r1
 800090a:	72fb      	strb	r3, [r7, #11]
	  if(*key != KEYPAD_NOT_PRESSED)	//when state_button = KEYPAD
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d06b      	beq.n	80009ec <handler_keyIN_enterKey_DisplayLCD+0xf0>
	  {
		  if(enter_num_pass.signal_enter_pass == PROCESSING)	// Được thay đổi trong lcd_user.c
 8000914:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <handler_keyIN_enterKey_DisplayLCD+0xfc>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d130      	bne.n	800097e <handler_keyIN_enterKey_DisplayLCD+0x82>
		  {
			  CLCD_I2C_SetCursor(LCD_user, row_key_password, 2);
 800091c:	4b37      	ldr	r3, [pc, #220]	; (80009fc <handler_keyIN_enterKey_DisplayLCD+0x100>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2202      	movs	r2, #2
 8000922:	4619      	mov	r1, r3
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	f7ff fd4b 	bl	80003c0 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteChar(LCD_user, *key);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	4619      	mov	r1, r3
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f7ff fd9f 	bl	8000474 <CLCD_I2C_WriteChar>

			  password[row_key_password - ROW_BEGIN_KEPAD_PASS] = *key;
 8000936:	4b31      	ldr	r3, [pc, #196]	; (80009fc <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	3b09      	subs	r3, #9
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	4413      	add	r3, r2
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	7812      	ldrb	r2, [r2, #0]
 8000944:	701a      	strb	r2, [r3, #0]
			  row_key_password++;
 8000946:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000950:	701a      	strb	r2, [r3, #0]
			  *key = KEYPAD_NOT_PRESSED;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]

			  if(row_key_password > SIZE_ROW_PASS)
 8000958:	4b28      	ldr	r3, [pc, #160]	; (80009fc <handler_keyIN_enterKey_DisplayLCD+0x100>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b0d      	cmp	r3, #13
 800095e:	d90c      	bls.n	800097a <handler_keyIN_enterKey_DisplayLCD+0x7e>
			  {
				  state_button = BUTTON;
 8000960:	2301      	movs	r3, #1
 8000962:	72fb      	strb	r3, [r7, #11]
				  /*Neu Mang hinh nhap du 5 so*/
				  /*reset mang hinh*/
				  CLCD_I2C_Clear(LCD_user);
 8000964:	68f8      	ldr	r0, [r7, #12]
 8000966:	f7ff fe3d 	bl	80005e4 <CLCD_I2C_Clear>

				  state_star_pass = STAR;
 800096a:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <handler_keyIN_enterKey_DisplayLCD+0x104>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
				  row_key_password = ROW_BEGIN_KEPAD_PASS;
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000972:	2209      	movs	r2, #9
 8000974:	701a      	strb	r2, [r3, #0]
				  return KEY_OK;
 8000976:	2301      	movs	r3, #1
 8000978:	e039      	b.n	80009ee <handler_keyIN_enterKey_DisplayLCD+0xf2>
			  }
			  else
			  {
				  return KEY_NOT;
 800097a:	2300      	movs	r3, #0
 800097c:	e037      	b.n	80009ee <handler_keyIN_enterKey_DisplayLCD+0xf2>
			  }
		  }/*END if(enter_num_pass.signal_enter_pass == PROCESSING)*/
		  else if(enter_num_pass.signal_enter_num == PROCESSING)
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <handler_keyIN_enterKey_DisplayLCD+0xfc>)
 8000980:	785b      	ldrb	r3, [r3, #1]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d130      	bne.n	80009e8 <handler_keyIN_enterKey_DisplayLCD+0xec>
		  {
			  CLCD_I2C_SetCursor(LCD_user, row_key_num, 1);
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2201      	movs	r2, #1
 800098c:	4619      	mov	r1, r3
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f7ff fd16 	bl	80003c0 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteChar(LCD_user, *key);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	f7ff fd6a 	bl	8000474 <CLCD_I2C_WriteChar>

			  password[row_key_num - ROW_BEGIN_KEPAD_NUM] = *key;
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	3b09      	subs	r3, #9
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	7812      	ldrb	r2, [r2, #0]
 80009ae:	701a      	strb	r2, [r3, #0]
			  row_key_num++;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 80009ba:	701a      	strb	r2, [r3, #0]
			  *key = KEYPAD_NOT_PRESSED;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]

			  if(row_key_num > SIZE_ROW_NUM)
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b09      	cmp	r3, #9
 80009c8:	d90c      	bls.n	80009e4 <handler_keyIN_enterKey_DisplayLCD+0xe8>
			  {
				  state_button = BUTTON;
 80009ca:	2301      	movs	r3, #1
 80009cc:	72fb      	strb	r3, [r7, #11]
				  /*Neu Mang hinh nhap du 5 so*/
				  /*reset mang hinh*/
				  CLCD_I2C_Clear(LCD_user);
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f7ff fe08 	bl	80005e4 <CLCD_I2C_Clear>

				  state_star_pass = STAR;
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <handler_keyIN_enterKey_DisplayLCD+0x104>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
				  row_key_num = ROW_BEGIN_KEPAD_NUM;
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 80009dc:	2209      	movs	r2, #9
 80009de:	701a      	strb	r2, [r3, #0]
				  return KEY_OK;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e004      	b.n	80009ee <handler_keyIN_enterKey_DisplayLCD+0xf2>
			  }
			  else
			  {
				  return KEY_NOT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	e002      	b.n	80009ee <handler_keyIN_enterKey_DisplayLCD+0xf2>
			  }
		  }/*END if(enter_num_pass.signal_enter_num == PROCESSING)*/
		  else
		  {
			  return KEY_NOT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	e000      	b.n	80009ee <handler_keyIN_enterKey_DisplayLCD+0xf2>
		  }
	  }/*END if(*key != KEYPAD_NOT_PRESSED)*/
	  else
	  {
		  return KEY_NOT;
 80009ec:	2300      	movs	r3, #0
	  }
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000b0 	.word	0x200000b0
 80009fc:	20000001 	.word	0x20000001
 8000a00:	200001ba 	.word	0x200001ba
 8000a04:	20000000 	.word	0x20000000

08000a08 <handler_keyIN_CheckPIN_NUM>:



void handler_keyIN_CheckPIN_NUM(char * num_pin_buffer)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	static uint8_t counter = 0;
	if(enter_num_pass.signal_enter_num == PROCESSING)
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <handler_keyIN_CheckPIN_NUM+0xe4>)
 8000a12:	785b      	ldrb	r3, [r3, #1]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d12d      	bne.n	8000a74 <handler_keyIN_CheckPIN_NUM+0x6c>
	{
		counter = 0;
 8000a18:	4b35      	ldr	r3, [pc, #212]	; (8000af0 <handler_keyIN_CheckPIN_NUM+0xe8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
		num_ok = 0;
 8000a1e:	4b35      	ldr	r3, [pc, #212]	; (8000af4 <handler_keyIN_CheckPIN_NUM+0xec>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
		enter_num_pass.signal_enter_num = NOT_DONE;
 8000a24:	4b31      	ldr	r3, [pc, #196]	; (8000aec <handler_keyIN_CheckPIN_NUM+0xe4>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	705a      	strb	r2, [r3, #1]
		for(uint8_t j = 0; j < 7; j++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73fb      	strb	r3, [r7, #15]
 8000a2e:	e016      	b.n	8000a5e <handler_keyIN_CheckPIN_NUM+0x56>
		{
			if(strstr(num_pin_buffer, jagged_num[j]) != NULL)
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	4a31      	ldr	r2, [pc, #196]	; (8000af8 <handler_keyIN_CheckPIN_NUM+0xf0>)
 8000a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f004 fb98 	bl	8005170 <strstr>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d008      	beq.n	8000a58 <handler_keyIN_CheckPIN_NUM+0x50>
			{
				num_ok = j;
 8000a46:	4a2b      	ldr	r2, [pc, #172]	; (8000af4 <handler_keyIN_CheckPIN_NUM+0xec>)
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	7013      	strb	r3, [r2, #0]
				counter++;
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <handler_keyIN_CheckPIN_NUM+0xe8>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <handler_keyIN_CheckPIN_NUM+0xe8>)
 8000a56:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 7; j++)
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	2b06      	cmp	r3, #6
 8000a62:	d9e5      	bls.n	8000a30 <handler_keyIN_CheckPIN_NUM+0x28>
			}
		}
		if(counter == 0)
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <handler_keyIN_CheckPIN_NUM+0xe8>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d12c      	bne.n	8000ac6 <handler_keyIN_CheckPIN_NUM+0xbe>
		{
			num_ok = 0;
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <handler_keyIN_CheckPIN_NUM+0xec>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	e028      	b.n	8000ac6 <handler_keyIN_CheckPIN_NUM+0xbe>
		}
	}
	else if(enter_num_pass.signal_enter_pass == PROCESSING && counter != 0)
 8000a74:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <handler_keyIN_CheckPIN_NUM+0xe4>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d11b      	bne.n	8000ab4 <handler_keyIN_CheckPIN_NUM+0xac>
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <handler_keyIN_CheckPIN_NUM+0xe8>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d017      	beq.n	8000ab4 <handler_keyIN_CheckPIN_NUM+0xac>
	{
		enter_num_pass.signal_enter_pass = NOT_DONE;
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <handler_keyIN_CheckPIN_NUM+0xe4>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
		if(strstr(num_pin_buffer, jagged_pass[num_ok]) != NULL)
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <handler_keyIN_CheckPIN_NUM+0xec>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <handler_keyIN_CheckPIN_NUM+0xf4>)
 8000a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a96:	4619      	mov	r1, r3
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f004 fb69 	bl	8005170 <strstr>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <handler_keyIN_CheckPIN_NUM+0xa4>
		{
			Index_mode = INDEX_MODE_OKE_PASS;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <handler_keyIN_CheckPIN_NUM+0xf8>)
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	701a      	strb	r2, [r3, #0]
		if(strstr(num_pin_buffer, jagged_pass[num_ok]) != NULL)
 8000aaa:	e00c      	b.n	8000ac6 <handler_keyIN_CheckPIN_NUM+0xbe>
		}
		else
		{
			Index_mode = INDEX_MODE_NO_OKE_PASS;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <handler_keyIN_CheckPIN_NUM+0xf8>)
 8000aae:	2204      	movs	r2, #4
 8000ab0:	701a      	strb	r2, [r3, #0]
		if(strstr(num_pin_buffer, jagged_pass[num_ok]) != NULL)
 8000ab2:	e008      	b.n	8000ac6 <handler_keyIN_CheckPIN_NUM+0xbe>
		}
	}
	else
	{
		enter_num_pass.signal_enter_num = NOT_DONE;
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <handler_keyIN_CheckPIN_NUM+0xe4>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	705a      	strb	r2, [r3, #1]
		enter_num_pass.signal_enter_pass = NOT_DONE;
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <handler_keyIN_CheckPIN_NUM+0xe4>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
		Index_mode = INDEX_MODE_NO_OKE_PASS;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <handler_keyIN_CheckPIN_NUM+0xf8>)
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	701a      	strb	r2, [r3, #0]
	}
	/*Reset*/
	for(uint8_t i = 0; i < sizeof(num_pin_buffer); i++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	73bb      	strb	r3, [r7, #14]
 8000aca:	e007      	b.n	8000adc <handler_keyIN_CheckPIN_NUM+0xd4>
	{
		num_pin_buffer[i] = 0;
 8000acc:	7bbb      	ldrb	r3, [r7, #14]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(num_pin_buffer); i++)
 8000ad6:	7bbb      	ldrb	r3, [r7, #14]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	73bb      	strb	r3, [r7, #14]
 8000adc:	7bbb      	ldrb	r3, [r7, #14]
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d9f4      	bls.n	8000acc <handler_keyIN_CheckPIN_NUM+0xc4>
	}
}
 8000ae2:	bf00      	nop
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000b0 	.word	0x200000b0
 8000af0:	200001b6 	.word	0x200001b6
 8000af4:	200001b5 	.word	0x200001b5
 8000af8:	2000003c 	.word	0x2000003c
 8000afc:	20000090 	.word	0x20000090
 8000b00:	200001bb 	.word	0x200001bb

08000b04 <lcd_user_display>:
    -STATUS_DISPLAY_TYPEDEF status_display         : STATUS_1 -> STATUS_7
  +) RETURN:
    -void
*/
static void lcd_user_display(CLCD_I2C_Name* LCD_user, STATUS_DISPLAY_TYPEDEF status_display)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]
	if(language == ENGLISH)
 8000b10:	4bb3      	ldr	r3, [pc, #716]	; (8000de0 <lcd_user_display+0x2dc>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	f040 810d 	bne.w	8000d34 <lcd_user_display+0x230>
	{
		if(status_display == STATUS_BEGIN)
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d124      	bne.n	8000b6a <lcd_user_display+0x66>
		{
			// dislay hello ! Status_Display=0
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fc4b 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 8000b2a:	49ae      	ldr	r1, [pc, #696]	; (8000de4 <lcd_user_display+0x2e0>)
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff fcf3 	bl	8000518 <CLCD_I2C_WriteString>

			CLCD_I2C_SetCursor(LCD_user, 4, 1);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2104      	movs	r1, #4
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff fc42 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"SV-NV-KH");
 8000b3c:	49aa      	ldr	r1, [pc, #680]	; (8000de8 <lcd_user_display+0x2e4>)
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff fcea 	bl	8000518 <CLCD_I2C_WriteString>

			CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000b44:	2202      	movs	r2, #2
 8000b46:	2104      	movs	r1, #4
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fc39 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 8000b4e:	49a7      	ldr	r1, [pc, #668]	; (8000dec <lcd_user_display+0x2e8>)
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff fce1 	bl	8000518 <CLCD_I2C_WriteString>

			CLCD_I2C_SetCursor(LCD_user, 2, 3);
 8000b56:	2203      	movs	r2, #3
 8000b58:	2102      	movs	r1, #2
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff fc30 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Press \"Enter\"!");
 8000b60:	49a3      	ldr	r1, [pc, #652]	; (8000df0 <lcd_user_display+0x2ec>)
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff fcd8 	bl	8000518 <CLCD_I2C_WriteString>

			CLCD_I2C_SetCursor(LCD_user, 0, 3);
			CLCD_I2C_WriteString(LCD_user,"-EXIT");
		}
	}/*END if(language == ENGLISH)*/
}
 8000b68:	e233      	b.n	8000fd2 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_MENU)
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d124      	bne.n	8000bba <lcd_user_display+0xb6>
			CLCD_I2C_SetCursor(LCD_user, 3, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2103      	movs	r1, #3
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff fc23 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"SELECT MODE");
 8000b7a:	499e      	ldr	r1, [pc, #632]	; (8000df4 <lcd_user_display+0x2f0>)
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fccb 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2100      	movs	r1, #0
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff fc1a 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Language");
 8000b8c:	499a      	ldr	r1, [pc, #616]	; (8000df8 <lcd_user_display+0x2f4>)
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff fcc2 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000b94:	2202      	movs	r2, #2
 8000b96:	2100      	movs	r1, #0
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fc11 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Enter password");
 8000b9e:	4997      	ldr	r1, [pc, #604]	; (8000dfc <lcd_user_display+0x2f8>)
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fcb9 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	2100      	movs	r1, #0
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff fc08 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Exit");
 8000bb0:	4993      	ldr	r1, [pc, #588]	; (8000e00 <lcd_user_display+0x2fc>)
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fcb0 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000bb8:	e20b      	b.n	8000fd2 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN)							// PASSWORD
 8000bba:	78fb      	ldrb	r3, [r7, #3]
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d152      	bne.n	8000c66 <lcd_user_display+0x162>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fbfb 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Information:");
 8000bca:	498e      	ldr	r1, [pc, #568]	; (8000e04 <lcd_user_display+0x300>)
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fca3 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff fbf2 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-NUM:");
 8000bdc:	498a      	ldr	r1, [pc, #552]	; (8000e08 <lcd_user_display+0x304>)
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fc9a 	bl	8000518 <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000be4:	4b89      	ldr	r3, [pc, #548]	; (8000e0c <lcd_user_display+0x308>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d109      	bne.n	8000c00 <lcd_user_display+0xfc>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_NUM - 1, 1);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2108      	movs	r1, #8
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fbe5 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*");
 8000bf6:	4986      	ldr	r1, [pc, #536]	; (8000e10 <lcd_user_display+0x30c>)
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fc8d 	bl	8000518 <CLCD_I2C_WriteString>
 8000bfe:	e008      	b.n	8000c12 <lcd_user_display+0x10e>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_NUM - 1, 1);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2108      	movs	r1, #8
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff fbdb 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8000c0a:	4982      	ldr	r1, [pc, #520]	; (8000e14 <lcd_user_display+0x310>)
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fc83 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000c12:	2202      	movs	r2, #2
 8000c14:	2100      	movs	r1, #0
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff fbd2 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-PIN: ");
 8000c1c:	497e      	ldr	r1, [pc, #504]	; (8000e18 <lcd_user_display+0x314>)
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fc7a 	bl	8000518 <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000c24:	4b79      	ldr	r3, [pc, #484]	; (8000e0c <lcd_user_display+0x308>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d109      	bne.n	8000c40 <lcd_user_display+0x13c>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_PASS - 1, 2);
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	2108      	movs	r1, #8
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff fbc5 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*****");
 8000c36:	4979      	ldr	r1, [pc, #484]	; (8000e1c <lcd_user_display+0x318>)
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff fc6d 	bl	8000518 <CLCD_I2C_WriteString>
 8000c3e:	e008      	b.n	8000c52 <lcd_user_display+0x14e>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_PASS - 1, 2);
 8000c40:	2202      	movs	r2, #2
 8000c42:	2108      	movs	r1, #8
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff fbbb 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8000c4a:	4972      	ldr	r1, [pc, #456]	; (8000e14 <lcd_user_display+0x310>)
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff fc63 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000c52:	2203      	movs	r2, #3
 8000c54:	2100      	movs	r1, #0
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fbb2 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Exit");
 8000c5c:	4968      	ldr	r1, [pc, #416]	; (8000e00 <lcd_user_display+0x2fc>)
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff fc5a 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000c64:	e1b5      	b.n	8000fd2 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN_OK)
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d11b      	bne.n	8000ca4 <lcd_user_display+0x1a0>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff fba5 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Password OKE!");
 8000c76:	496a      	ldr	r1, [pc, #424]	; (8000e20 <lcd_user_display+0x31c>)
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff fc4d 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2100      	movs	r1, #0
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fb9c 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Wait few ");
 8000c88:	4966      	ldr	r1, [pc, #408]	; (8000e24 <lcd_user_display+0x320>)
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff fc44 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 3, 2);
 8000c90:	2202      	movs	r2, #2
 8000c92:	2103      	movs	r1, #3
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff fb93 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"minutes...");
 8000c9a:	4963      	ldr	r1, [pc, #396]	; (8000e28 <lcd_user_display+0x324>)
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff fc3b 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000ca2:	e196      	b.n	8000fd2 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN_FAIL)
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	2b05      	cmp	r3, #5
 8000ca8:	d11b      	bne.n	8000ce2 <lcd_user_display+0x1de>
		  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff fb86 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"Password FAIL!");
 8000cb4:	495d      	ldr	r1, [pc, #372]	; (8000e2c <lcd_user_display+0x328>)
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fc2e 	bl	8000518 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff fb7d 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"\"Enter\" to enter");
 8000cc6:	495a      	ldr	r1, [pc, #360]	; (8000e30 <lcd_user_display+0x32c>)
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff fc25 	bl	8000518 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000cce:	2202      	movs	r2, #2
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fb74 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"new password :<");
 8000cd8:	4956      	ldr	r1, [pc, #344]	; (8000e34 <lcd_user_display+0x330>)
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff fc1c 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000ce0:	e177      	b.n	8000fd2 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_LANGUAGE)
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	2b06      	cmp	r3, #6
 8000ce6:	f040 8174 	bne.w	8000fd2 <lcd_user_display+0x4ce>
			CLCD_I2C_SetCursor(LCD_user, 3, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2103      	movs	r1, #3
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fb66 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Language");
 8000cf4:	4950      	ldr	r1, [pc, #320]	; (8000e38 <lcd_user_display+0x334>)
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff fc0e 	bl	8000518 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2100      	movs	r1, #0
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fb5d 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 8000d06:	494d      	ldr	r1, [pc, #308]	; (8000e3c <lcd_user_display+0x338>)
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fc05 	bl	8000518 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000d0e:	2202      	movs	r2, #2
 8000d10:	2100      	movs	r1, #0
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff fb54 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"-English");
 8000d18:	4949      	ldr	r1, [pc, #292]	; (8000e40 <lcd_user_display+0x33c>)
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fbfc 	bl	8000518 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000d20:	2203      	movs	r2, #3
 8000d22:	2100      	movs	r1, #0
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fb4b 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"-EXIT");
 8000d2a:	4946      	ldr	r1, [pc, #280]	; (8000e44 <lcd_user_display+0x340>)
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff fbf3 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000d32:	e14e      	b.n	8000fd2 <lcd_user_display+0x4ce>
	else if(language == VIETNAMESE)
 8000d34:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <lcd_user_display+0x2dc>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f040 814a 	bne.w	8000fd2 <lcd_user_display+0x4ce>
		if(status_display == STATUS_BEGIN)
 8000d3e:	78fb      	ldrb	r3, [r7, #3]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d124      	bne.n	8000d8e <lcd_user_display+0x28a>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fb39 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 8000d4e:	4925      	ldr	r1, [pc, #148]	; (8000de4 <lcd_user_display+0x2e0>)
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff fbe1 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 4, 1);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2104      	movs	r1, #4
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fb30 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"SV-NV-KH");
 8000d60:	4921      	ldr	r1, [pc, #132]	; (8000de8 <lcd_user_display+0x2e4>)
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff fbd8 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000d68:	2202      	movs	r2, #2
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff fb27 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 8000d72:	491e      	ldr	r1, [pc, #120]	; (8000dec <lcd_user_display+0x2e8>)
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff fbcf 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 2, 3);
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fb1e 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Nhan \"Enter\"!");
 8000d84:	4930      	ldr	r1, [pc, #192]	; (8000e48 <lcd_user_display+0x344>)
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fbc6 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000d8c:	e121      	b.n	8000fd2 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_MENU)
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d163      	bne.n	8000e5c <lcd_user_display+0x358>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff fb11 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Lua chon che do:");
 8000d9e:	492b      	ldr	r1, [pc, #172]	; (8000e4c <lcd_user_display+0x348>)
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff fbb9 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2100      	movs	r1, #0
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff fb08 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Ngon ngu");
 8000db0:	4927      	ldr	r1, [pc, #156]	; (8000e50 <lcd_user_display+0x34c>)
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fbb0 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000db8:	2202      	movs	r2, #2
 8000dba:	2100      	movs	r1, #0
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff faff 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Nhap ma pin");
 8000dc2:	4924      	ldr	r1, [pc, #144]	; (8000e54 <lcd_user_display+0x350>)
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff fba7 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000dca:	2203      	movs	r2, #3
 8000dcc:	2100      	movs	r1, #0
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff faf6 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Thoat");
 8000dd4:	4920      	ldr	r1, [pc, #128]	; (8000e58 <lcd_user_display+0x354>)
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fb9e 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000ddc:	e0f9      	b.n	8000fd2 <lcd_user_display+0x4ce>
 8000dde:	bf00      	nop
 8000de0:	200001bd 	.word	0x200001bd
 8000de4:	080065c8 	.word	0x080065c8
 8000de8:	080065dc 	.word	0x080065dc
 8000dec:	080065e8 	.word	0x080065e8
 8000df0:	080065f4 	.word	0x080065f4
 8000df4:	08006604 	.word	0x08006604
 8000df8:	08006610 	.word	0x08006610
 8000dfc:	0800661c 	.word	0x0800661c
 8000e00:	0800662c 	.word	0x0800662c
 8000e04:	08006634 	.word	0x08006634
 8000e08:	08006644 	.word	0x08006644
 8000e0c:	200001ba 	.word	0x200001ba
 8000e10:	0800664c 	.word	0x0800664c
 8000e14:	08006650 	.word	0x08006650
 8000e18:	08006654 	.word	0x08006654
 8000e1c:	0800665c 	.word	0x0800665c
 8000e20:	08006664 	.word	0x08006664
 8000e24:	08006674 	.word	0x08006674
 8000e28:	08006680 	.word	0x08006680
 8000e2c:	0800668c 	.word	0x0800668c
 8000e30:	0800669c 	.word	0x0800669c
 8000e34:	080066b0 	.word	0x080066b0
 8000e38:	080066c0 	.word	0x080066c0
 8000e3c:	080066cc 	.word	0x080066cc
 8000e40:	080066d8 	.word	0x080066d8
 8000e44:	080066e4 	.word	0x080066e4
 8000e48:	080066ec 	.word	0x080066ec
 8000e4c:	080066fc 	.word	0x080066fc
 8000e50:	08006710 	.word	0x08006710
 8000e54:	0800671c 	.word	0x0800671c
 8000e58:	0800672c 	.word	0x0800672c
		else if(status_display == STATUS_PIN)										//PASSWORD
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d152      	bne.n	8000f08 <lcd_user_display+0x404>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff faaa 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TT benh nhan:");
 8000e6c:	495b      	ldr	r1, [pc, #364]	; (8000fdc <lcd_user_display+0x4d8>)
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fb52 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2100      	movs	r1, #0
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff faa1 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-STT:");
 8000e7e:	4958      	ldr	r1, [pc, #352]	; (8000fe0 <lcd_user_display+0x4dc>)
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff fb49 	bl	8000518 <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000e86:	4b57      	ldr	r3, [pc, #348]	; (8000fe4 <lcd_user_display+0x4e0>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d109      	bne.n	8000ea2 <lcd_user_display+0x39e>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_NUM - 1, 1);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2108      	movs	r1, #8
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff fa94 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*");
 8000e98:	4953      	ldr	r1, [pc, #332]	; (8000fe8 <lcd_user_display+0x4e4>)
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fb3c 	bl	8000518 <CLCD_I2C_WriteString>
 8000ea0:	e008      	b.n	8000eb4 <lcd_user_display+0x3b0>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_NUM - 1, 1);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fa8a 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8000eac:	494f      	ldr	r1, [pc, #316]	; (8000fec <lcd_user_display+0x4e8>)
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fb32 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff fa81 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-PIN: ");
 8000ebe:	494c      	ldr	r1, [pc, #304]	; (8000ff0 <lcd_user_display+0x4ec>)
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff fb29 	bl	8000518 <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000ec6:	4b47      	ldr	r3, [pc, #284]	; (8000fe4 <lcd_user_display+0x4e0>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d109      	bne.n	8000ee2 <lcd_user_display+0x3de>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_PASS - 1, 2);
 8000ece:	2202      	movs	r2, #2
 8000ed0:	2108      	movs	r1, #8
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff fa74 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*****");
 8000ed8:	4946      	ldr	r1, [pc, #280]	; (8000ff4 <lcd_user_display+0x4f0>)
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fb1c 	bl	8000518 <CLCD_I2C_WriteString>
 8000ee0:	e008      	b.n	8000ef4 <lcd_user_display+0x3f0>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_PASS - 1, 2);
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff fa6a 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8000eec:	493f      	ldr	r1, [pc, #252]	; (8000fec <lcd_user_display+0x4e8>)
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fb12 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff fa61 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Thoat");
 8000efe:	493e      	ldr	r1, [pc, #248]	; (8000ff8 <lcd_user_display+0x4f4>)
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fb09 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000f06:	e064      	b.n	8000fd2 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN_OK)
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d11b      	bne.n	8000f46 <lcd_user_display+0x442>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff fa54 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"PIN OKE!");
 8000f18:	4938      	ldr	r1, [pc, #224]	; (8000ffc <lcd_user_display+0x4f8>)
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fafc 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2100      	movs	r1, #0
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff fa4b 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Cho");
 8000f2a:	4935      	ldr	r1, [pc, #212]	; (8001000 <lcd_user_display+0x4fc>)
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff faf3 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 3, 2);
 8000f32:	2202      	movs	r2, #2
 8000f34:	2103      	movs	r1, #3
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fa42 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"1 phut...");
 8000f3c:	4931      	ldr	r1, [pc, #196]	; (8001004 <lcd_user_display+0x500>)
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff faea 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000f44:	e045      	b.n	8000fd2 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN_FAIL)
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	2b05      	cmp	r3, #5
 8000f4a:	d11b      	bne.n	8000f84 <lcd_user_display+0x480>
		  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fa35 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"PIN sai!");
 8000f56:	492c      	ldr	r1, [pc, #176]	; (8001008 <lcd_user_display+0x504>)
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff fadd 	bl	8000518 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2100      	movs	r1, #0
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fa2c 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"\"Nhap\" de nhap");
 8000f68:	4928      	ldr	r1, [pc, #160]	; (800100c <lcd_user_display+0x508>)
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff fad4 	bl	8000518 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000f70:	2202      	movs	r2, #2
 8000f72:	2104      	movs	r1, #4
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fa23 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"PIN moi :<");
 8000f7a:	4925      	ldr	r1, [pc, #148]	; (8001010 <lcd_user_display+0x50c>)
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff facb 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000f82:	e026      	b.n	8000fd2 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_LANGUAGE)
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d123      	bne.n	8000fd2 <lcd_user_display+0x4ce>
			CLCD_I2C_SetCursor(LCD_user, 3, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fa16 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Ngon ngu");
 8000f94:	491f      	ldr	r1, [pc, #124]	; (8001014 <lcd_user_display+0x510>)
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff fabe 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff fa0d 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 8000fa6:	491c      	ldr	r1, [pc, #112]	; (8001018 <lcd_user_display+0x514>)
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff fab5 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000fae:	2202      	movs	r2, #2
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fa04 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-English");
 8000fb8:	4918      	ldr	r1, [pc, #96]	; (800101c <lcd_user_display+0x518>)
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff faac 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff f9fb 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-EXIT");
 8000fca:	4915      	ldr	r1, [pc, #84]	; (8001020 <lcd_user_display+0x51c>)
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff faa3 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	08006734 	.word	0x08006734
 8000fe0:	08006744 	.word	0x08006744
 8000fe4:	200001ba 	.word	0x200001ba
 8000fe8:	0800664c 	.word	0x0800664c
 8000fec:	08006650 	.word	0x08006650
 8000ff0:	08006654 	.word	0x08006654
 8000ff4:	0800665c 	.word	0x0800665c
 8000ff8:	0800672c 	.word	0x0800672c
 8000ffc:	0800674c 	.word	0x0800674c
 8001000:	08006758 	.word	0x08006758
 8001004:	0800675c 	.word	0x0800675c
 8001008:	08006768 	.word	0x08006768
 800100c:	08006774 	.word	0x08006774
 8001010:	08006784 	.word	0x08006784
 8001014:	08006790 	.word	0x08006790
 8001018:	080066cc 	.word	0x080066cc
 800101c:	080066d8 	.word	0x080066d8
 8001020:	080066e4 	.word	0x080066e4

08001024 <lcd_system_handler>:


//************************** High Level Function ****************************************************************//
void lcd_system_handler(CLCD_I2C_Name* LCD_user)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	if(delete)
 800102c:	4b7c      	ldr	r3, [pc, #496]	; (8001220 <lcd_system_handler+0x1fc>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d005      	beq.n	8001040 <lcd_system_handler+0x1c>
	{
		CLCD_I2C_Clear(LCD_user);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fad5 	bl	80005e4 <CLCD_I2C_Clear>
		delete = 0;
 800103a:	4b79      	ldr	r3, [pc, #484]	; (8001220 <lcd_system_handler+0x1fc>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
	}
	if(Mode == 0)												//Begin
 8001040:	4b78      	ldr	r3, [pc, #480]	; (8001224 <lcd_system_handler+0x200>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d112      	bne.n	8001070 <lcd_system_handler+0x4c>
	{
		Config = CONFIG_ROW0;
 800104a:	4b77      	ldr	r3, [pc, #476]	; (8001228 <lcd_system_handler+0x204>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
		Enter = 0;
 8001050:	4b76      	ldr	r3, [pc, #472]	; (800122c <lcd_system_handler+0x208>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
		Status_Display = STATUS_BEGIN;
 8001056:	4b76      	ldr	r3, [pc, #472]	; (8001230 <lcd_system_handler+0x20c>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
		lcd_user_display(LCD_user, Status_Display);
 800105c:	4b74      	ldr	r3, [pc, #464]	; (8001230 <lcd_system_handler+0x20c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fd4e 	bl	8000b04 <lcd_user_display>
		Index_mode = INDEX_MODE_MENU;
 8001068:	4b72      	ldr	r3, [pc, #456]	; (8001234 <lcd_system_handler+0x210>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
                Status_Display = STATUS_PIN;
                delete = 1;
            }
		}
	}/*END if(Mode == 1)*/
}
 800106e:	e18d      	b.n	800138c <lcd_system_handler+0x368>
	else if(Mode == 1)
 8001070:	4b6c      	ldr	r3, [pc, #432]	; (8001224 <lcd_system_handler+0x200>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b01      	cmp	r3, #1
 8001078:	f040 8188 	bne.w	800138c <lcd_system_handler+0x368>
		if(Index_mode == INDEX_MODE_MENU)						//  Select modes
 800107c:	4b6d      	ldr	r3, [pc, #436]	; (8001234 <lcd_system_handler+0x210>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d165      	bne.n	8001150 <lcd_system_handler+0x12c>
			if (flag_button)
 8001084:	4b6c      	ldr	r3, [pc, #432]	; (8001238 <lcd_system_handler+0x214>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <lcd_system_handler+0x76>
				CLCD_I2C_Clear(LCD_user);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff faa8 	bl	80005e4 <CLCD_I2C_Clear>
				flag_button = 0;
 8001094:	4b68      	ldr	r3, [pc, #416]	; (8001238 <lcd_system_handler+0x214>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
			Status_Display = STATUS_MENU;
 800109a:	4b65      	ldr	r3, [pc, #404]	; (8001230 <lcd_system_handler+0x20c>)
 800109c:	2202      	movs	r2, #2
 800109e:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_ROW0)
 80010a0:	4b61      	ldr	r3, [pc, #388]	; (8001228 <lcd_system_handler+0x204>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d045      	beq.n	8001136 <lcd_system_handler+0x112>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 80010aa:	4b5f      	ldr	r3, [pc, #380]	; (8001228 <lcd_system_handler+0x204>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	210f      	movs	r1, #15
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff f982 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 80010bc:	495f      	ldr	r1, [pc, #380]	; (800123c <lcd_system_handler+0x218>)
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fa2a 	bl	8000518 <CLCD_I2C_WriteString>
				if(Enter)
 80010c4:	4b59      	ldr	r3, [pc, #356]	; (800122c <lcd_system_handler+0x208>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d039      	beq.n	8001142 <lcd_system_handler+0x11e>
					Enter = 0;
 80010ce:	4b57      	ldr	r3, [pc, #348]	; (800122c <lcd_system_handler+0x208>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 80010d4:	4b54      	ldr	r3, [pc, #336]	; (8001228 <lcd_system_handler+0x204>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d108      	bne.n	80010f0 <lcd_system_handler+0xcc>
                        Index_mode = INDEX_MODE_LANGUAGE;
 80010de:	4b55      	ldr	r3, [pc, #340]	; (8001234 <lcd_system_handler+0x210>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 80010e4:	4b50      	ldr	r3, [pc, #320]	; (8001228 <lcd_system_handler+0x204>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 80010ea:	4b4d      	ldr	r3, [pc, #308]	; (8001220 <lcd_system_handler+0x1fc>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 80010f0:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <lcd_system_handler+0x204>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d108      	bne.n	800110c <lcd_system_handler+0xe8>
                        Index_mode = INDEX_MODE_PIN;
 80010fa:	4b4e      	ldr	r3, [pc, #312]	; (8001234 <lcd_system_handler+0x210>)
 80010fc:	2202      	movs	r2, #2
 80010fe:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8001100:	4b49      	ldr	r3, [pc, #292]	; (8001228 <lcd_system_handler+0x204>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8001106:	4b46      	ldr	r3, [pc, #280]	; (8001220 <lcd_system_handler+0x1fc>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 800110c:	4b46      	ldr	r3, [pc, #280]	; (8001228 <lcd_system_handler+0x204>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b25b      	sxtb	r3, r3
 8001112:	2b03      	cmp	r3, #3
 8001114:	d115      	bne.n	8001142 <lcd_system_handler+0x11e>
                        Index_mode = INDEX_MODE_LANGUAGE;
 8001116:	4b47      	ldr	r3, [pc, #284]	; (8001234 <lcd_system_handler+0x210>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
                        Mode = 0;
 800111c:	4b41      	ldr	r3, [pc, #260]	; (8001224 <lcd_system_handler+0x200>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW0;
 8001122:	4b41      	ldr	r3, [pc, #260]	; (8001228 <lcd_system_handler+0x204>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_BEGIN;
 8001128:	4b41      	ldr	r3, [pc, #260]	; (8001230 <lcd_system_handler+0x20c>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 800112e:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <lcd_system_handler+0x1fc>)
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e005      	b.n	8001142 <lcd_system_handler+0x11e>
				Config = CONFIG_ROW1;
 8001136:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <lcd_system_handler+0x204>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 800113c:	4b3b      	ldr	r3, [pc, #236]	; (800122c <lcd_system_handler+0x208>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8001142:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <lcd_system_handler+0x20c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4619      	mov	r1, r3
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fcdb 	bl	8000b04 <lcd_user_display>
}
 800114e:	e11d      	b.n	800138c <lcd_system_handler+0x368>
		else if(INDEX_MODE_LANGUAGE == Index_mode)					// Languge
 8001150:	4b38      	ldr	r3, [pc, #224]	; (8001234 <lcd_system_handler+0x210>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d175      	bne.n	8001244 <lcd_system_handler+0x220>
			Status_Display = STATUS_LANGUAGE;
 8001158:	4b35      	ldr	r3, [pc, #212]	; (8001230 <lcd_system_handler+0x20c>)
 800115a:	2206      	movs	r2, #6
 800115c:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 800115e:	4b34      	ldr	r3, [pc, #208]	; (8001230 <lcd_system_handler+0x20c>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fccd 	bl	8000b04 <lcd_user_display>
			if (flag_button)
 800116a:	4b33      	ldr	r3, [pc, #204]	; (8001238 <lcd_system_handler+0x214>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <lcd_system_handler+0x15c>
				CLCD_I2C_Clear(LCD_user);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff fa35 	bl	80005e4 <CLCD_I2C_Clear>
				flag_button = 0;
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <lcd_system_handler+0x214>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_ROW0)
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <lcd_system_handler+0x204>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b25b      	sxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d03c      	beq.n	8001204 <lcd_system_handler+0x1e0>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <lcd_system_handler+0x204>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b25b      	sxtb	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	461a      	mov	r2, r3
 8001194:	210f      	movs	r1, #15
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff f912 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 800119c:	4927      	ldr	r1, [pc, #156]	; (800123c <lcd_system_handler+0x218>)
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff f9ba 	bl	8000518 <CLCD_I2C_WriteString>
				if(Enter)
 80011a4:	4b21      	ldr	r3, [pc, #132]	; (800122c <lcd_system_handler+0x208>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d030      	beq.n	8001210 <lcd_system_handler+0x1ec>
					Enter = 0;
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <lcd_system_handler+0x208>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <lcd_system_handler+0x204>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d105      	bne.n	80011ca <lcd_system_handler+0x1a6>
						language = VIETNAMESE;
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <lcd_system_handler+0x21c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <lcd_system_handler+0x204>)
 80011c6:	2203      	movs	r2, #3
 80011c8:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <lcd_system_handler+0x204>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d105      	bne.n	80011e0 <lcd_system_handler+0x1bc>
						language = ENGLISH;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <lcd_system_handler+0x21c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <lcd_system_handler+0x204>)
 80011dc:	2203      	movs	r2, #3
 80011de:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <lcd_system_handler+0x204>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d112      	bne.n	8001210 <lcd_system_handler+0x1ec>
                        Index_mode = INDEX_MODE_MENU;
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <lcd_system_handler+0x210>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW0;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <lcd_system_handler+0x204>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_MENU;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <lcd_system_handler+0x20c>)
 80011f8:	2202      	movs	r2, #2
 80011fa:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <lcd_system_handler+0x1fc>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	e005      	b.n	8001210 <lcd_system_handler+0x1ec>
				Config = CONFIG_ROW1;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <lcd_system_handler+0x204>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <lcd_system_handler+0x208>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <lcd_system_handler+0x20c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fc74 	bl	8000b04 <lcd_user_display>
}
 800121c:	e0b6      	b.n	800138c <lcd_system_handler+0x368>
 800121e:	bf00      	nop
 8001220:	200001be 	.word	0x200001be
 8001224:	200001b7 	.word	0x200001b7
 8001228:	200000ac 	.word	0x200000ac
 800122c:	200001b8 	.word	0x200001b8
 8001230:	200001bc 	.word	0x200001bc
 8001234:	200001bb 	.word	0x200001bb
 8001238:	200001b9 	.word	0x200001b9
 800123c:	0800679c 	.word	0x0800679c
 8001240:	200001bd 	.word	0x200001bd
		else if(INDEX_MODE_PIN == Index_mode)						// Enter Password
 8001244:	4b53      	ldr	r3, [pc, #332]	; (8001394 <lcd_system_handler+0x370>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d15c      	bne.n	8001306 <lcd_system_handler+0x2e2>
			Status_Display = STATUS_PIN;
 800124c:	4b52      	ldr	r3, [pc, #328]	; (8001398 <lcd_system_handler+0x374>)
 800124e:	2203      	movs	r2, #3
 8001250:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8001252:	4b51      	ldr	r3, [pc, #324]	; (8001398 <lcd_system_handler+0x374>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4619      	mov	r1, r3
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fc53 	bl	8000b04 <lcd_user_display>
			if (flag_button)
 800125e:	4b4f      	ldr	r3, [pc, #316]	; (800139c <lcd_system_handler+0x378>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <lcd_system_handler+0x250>
				CLCD_I2C_Clear(LCD_user);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff f9bb 	bl	80005e4 <CLCD_I2C_Clear>
				flag_button = 0;
 800126e:	4b4b      	ldr	r3, [pc, #300]	; (800139c <lcd_system_handler+0x378>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_ROW0)
 8001274:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <lcd_system_handler+0x37c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b25b      	sxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d036      	beq.n	80012ec <lcd_system_handler+0x2c8>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 800127e:	4b48      	ldr	r3, [pc, #288]	; (80013a0 <lcd_system_handler+0x37c>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b25b      	sxtb	r3, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	210f      	movs	r1, #15
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff f898 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8001290:	4944      	ldr	r1, [pc, #272]	; (80013a4 <lcd_system_handler+0x380>)
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff f940 	bl	8000518 <CLCD_I2C_WriteString>
				if(Enter)
 8001298:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <lcd_system_handler+0x384>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d02a      	beq.n	80012f8 <lcd_system_handler+0x2d4>
					Enter = 0;
 80012a2:	4b41      	ldr	r3, [pc, #260]	; (80013a8 <lcd_system_handler+0x384>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)	// Nhap so thu tu
 80012a8:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <lcd_system_handler+0x37c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <lcd_system_handler+0x294>
						enter_num_pass.signal_enter_num = PROCESSING;
 80012b2:	4b3e      	ldr	r3, [pc, #248]	; (80013ac <lcd_system_handler+0x388>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	705a      	strb	r2, [r3, #1]
					if(Config == CONFIG_ROW2)	// Nhap pass
 80012b8:	4b39      	ldr	r3, [pc, #228]	; (80013a0 <lcd_system_handler+0x37c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d102      	bne.n	80012c8 <lcd_system_handler+0x2a4>
						enter_num_pass.signal_enter_pass = PROCESSING;
 80012c2:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <lcd_system_handler+0x388>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 80012c8:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <lcd_system_handler+0x37c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d112      	bne.n	80012f8 <lcd_system_handler+0x2d4>
						Index_mode = INDEX_MODE_MENU;
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <lcd_system_handler+0x370>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW0;
 80012d8:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <lcd_system_handler+0x37c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
						Status_Display = STATUS_MENU;
 80012de:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <lcd_system_handler+0x374>)
 80012e0:	2202      	movs	r2, #2
 80012e2:	701a      	strb	r2, [r3, #0]
						delete = 1;
 80012e4:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <lcd_system_handler+0x38c>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	e005      	b.n	80012f8 <lcd_system_handler+0x2d4>
				Config = CONFIG_ROW1;
 80012ec:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <lcd_system_handler+0x37c>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 80012f2:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <lcd_system_handler+0x384>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <lcd_system_handler+0x374>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fc00 	bl	8000b04 <lcd_user_display>
}
 8001304:	e042      	b.n	800138c <lcd_system_handler+0x368>
		else if(INDEX_MODE_OKE_PASS == Index_mode)					// Pass oke
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <lcd_system_handler+0x370>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d11d      	bne.n	800134a <lcd_system_handler+0x326>
			Status_Display = STATUS_PIN_OK;
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <lcd_system_handler+0x374>)
 8001310:	2204      	movs	r2, #4
 8001312:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8001314:	4b20      	ldr	r3, [pc, #128]	; (8001398 <lcd_system_handler+0x374>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fbf2 	bl	8000b04 <lcd_user_display>
			if(Enter)
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <lcd_system_handler+0x384>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d030      	beq.n	800138c <lcd_system_handler+0x368>
				Enter = 0;
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <lcd_system_handler+0x384>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
                Index_mode = INDEX_MODE_MENU;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <lcd_system_handler+0x370>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
                Config = CONFIG_ROW0;
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <lcd_system_handler+0x37c>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
                Status_Display = STATUS_MENU;
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <lcd_system_handler+0x374>)
 800133e:	2202      	movs	r2, #2
 8001340:	701a      	strb	r2, [r3, #0]
                delete = 1;
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <lcd_system_handler+0x38c>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
}
 8001348:	e020      	b.n	800138c <lcd_system_handler+0x368>
		else if(INDEX_MODE_NO_OKE_PASS == Index_mode)				// Pass fail
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <lcd_system_handler+0x370>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b04      	cmp	r3, #4
 8001350:	d11c      	bne.n	800138c <lcd_system_handler+0x368>
			Status_Display = STATUS_PIN_FAIL;
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <lcd_system_handler+0x374>)
 8001354:	2205      	movs	r2, #5
 8001356:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <lcd_system_handler+0x374>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fbd0 	bl	8000b04 <lcd_user_display>
			if(Enter)
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <lcd_system_handler+0x384>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00e      	beq.n	800138c <lcd_system_handler+0x368>
				Enter = 0;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <lcd_system_handler+0x384>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
                Index_mode = INDEX_MODE_PIN;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <lcd_system_handler+0x370>)
 8001376:	2202      	movs	r2, #2
 8001378:	701a      	strb	r2, [r3, #0]
                Config = CONFIG_ROW0;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <lcd_system_handler+0x37c>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
                Status_Display = STATUS_PIN;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <lcd_system_handler+0x374>)
 8001382:	2203      	movs	r2, #3
 8001384:	701a      	strb	r2, [r3, #0]
                delete = 1;
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <lcd_system_handler+0x38c>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200001bb 	.word	0x200001bb
 8001398:	200001bc 	.word	0x200001bc
 800139c:	200001b9 	.word	0x200001b9
 80013a0:	200000ac 	.word	0x200000ac
 80013a4:	0800679c 	.word	0x0800679c
 80013a8:	200001b8 	.word	0x200001b8
 80013ac:	200000b0 	.word	0x200000b0
 80013b0:	200001be 	.word	0x200001be

080013b4 <response>:
    -uint8_t * string								: chu truyen di (OKE, FAIL dai loai)
  +) RETURN:
    -
*/
static void response(char *string)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&Lib_uart, (uint8_t *) string, strlen(string), 1000);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7fe fec5 	bl	800014c <strlen>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <response+0x28>)
 80013ce:	f003 f847 	bl	8004460 <HAL_UART_Transmit>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200001c0 	.word	0x200001c0

080013e0 <UART_Check_string>:
  +) RETURN:
    -bool											: true
    												  false
*/
static bool UART_Check_string(uint8_t * rxBuffer)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	if(strstr((char*)rxBuffer, confirm_NUM_PIN) != NULL)
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <UART_Check_string+0x28>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f003 febe 	bl	8005170 <strstr>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <UART_Check_string+0x1e>
	{
		return true;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <UART_Check_string+0x20>
	}
	else
	{
		return false;
 80013fe:	2300      	movs	r3, #0
	}
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200000b4 	.word	0x200000b4

0800140c <UART_SetNUM_PIN>:
    -uint8_t * rxBuffer								: value frome EXTI uart
  +) RETURN:
    -void
*/
static void UART_SetNUM_PIN(uint8_t * rxBuffer)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	char response_string[20] = {0};
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
   /* Kiểm tra độ dài của command "*NUM-PIN:x,abcde\n\r"*/
   if(strlen((char*)rxBuffer) == 17)
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7fe fe90 	bl	800014c <strlen>
 800142c:	4603      	mov	r3, r0
 800142e:	2b11      	cmp	r3, #17
 8001430:	d130      	bne.n	8001494 <UART_SetNUM_PIN+0x88>
   {
      /*Tách NUM thiết bị */
      char *token = NULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
      token = strtok((char*)rxBuffer, ":"); //*NUM-PIN:
 8001436:	491b      	ldr	r1, [pc, #108]	; (80014a4 <UART_SetNUM_PIN+0x98>)
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f003 feaf 	bl	800519c <strtok>
 800143e:	61f8      	str	r0, [r7, #28]
      token = strtok(NULL, ","); //x
 8001440:	4919      	ldr	r1, [pc, #100]	; (80014a8 <UART_SetNUM_PIN+0x9c>)
 8001442:	2000      	movs	r0, #0
 8001444:	f003 feaa 	bl	800519c <strtok>
 8001448:	61f8      	str	r0, [r7, #28]
      num = *token - 48; //num = x
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	3b30      	subs	r3, #48	; 0x30
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <UART_SetNUM_PIN+0xa0>)
 8001454:	701a      	strb	r2, [r3, #0]


      /*Tách PIN thiết bị */
      token = strtok(NULL, "\n"); //abcde
 8001456:	4916      	ldr	r1, [pc, #88]	; (80014b0 <UART_SetNUM_PIN+0xa4>)
 8001458:	2000      	movs	r0, #0
 800145a:	f003 fe9f 	bl	800519c <strtok>
 800145e:	61f8      	str	r0, [r7, #28]
      memcpy(pin, token, 5); //pin = "abcde";
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <UART_SetNUM_PIN+0xa8>)
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	6810      	ldr	r0, [r2, #0]
 8001466:	6018      	str	r0, [r3, #0]
 8001468:	7912      	ldrb	r2, [r2, #4]
 800146a:	711a      	strb	r2, [r3, #4]

      token = NULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]

//      sprintf(response_string, "num: %d, pin: %c%c%c%c%c", num, pin[0], pin[1], pin[2], pin[3], pin[4]);
      sprintf(response_string, "num: %d, pin: %s", num, pin);
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <UART_SetNUM_PIN+0xa0>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	f107 0008 	add.w	r0, r7, #8
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <UART_SetNUM_PIN+0xa8>)
 800147c:	490e      	ldr	r1, [pc, #56]	; (80014b8 <UART_SetNUM_PIN+0xac>)
 800147e:	f003 fe57 	bl	8005130 <siprintf>
      response(response_string);
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff94 	bl	80013b4 <response>
      response("\r\n+OK\r\n ");
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <UART_SetNUM_PIN+0xb0>)
 800148e:	f7ff ff91 	bl	80013b4 <response>
   }
   else
   {
      response("\r\n+ERROR:error command\r\n");
   }
}
 8001492:	e002      	b.n	800149a <UART_SetNUM_PIN+0x8e>
      response("\r\n+ERROR:error command\r\n");
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <UART_SetNUM_PIN+0xb4>)
 8001496:	f7ff ff8d 	bl	80013b4 <response>
}
 800149a:	bf00      	nop
 800149c:	3720      	adds	r7, #32
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	080067ac 	.word	0x080067ac
 80014a8:	080067b0 	.word	0x080067b0
 80014ac:	20000208 	.word	0x20000208
 80014b0:	080067b4 	.word	0x080067b4
 80014b4:	2000020c 	.word	0x2000020c
 80014b8:	080067b8 	.word	0x080067b8
 80014bc:	080067cc 	.word	0x080067cc
 80014c0:	080067d8 	.word	0x080067d8

080014c4 <UART_Assign_password>:
    -uint8_t * rxBuffer								: value frome EXTI uart
  +) RETURN:
    -void
*/
static void UART_Assign_password()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i <= sizeof(jagged_pass[num - 1]); i++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	71fb      	strb	r3, [r7, #7]
 80014ce:	e00e      	b.n	80014ee <UART_Assign_password+0x2a>
	{
		*(jagged_pass[num - 1] + i) = pin[i];
 80014d0:	79fa      	ldrb	r2, [r7, #7]
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <UART_Assign_password+0x3c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	490a      	ldr	r1, [pc, #40]	; (8001504 <UART_Assign_password+0x40>)
 80014da:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	440b      	add	r3, r1
 80014e2:	4909      	ldr	r1, [pc, #36]	; (8001508 <UART_Assign_password+0x44>)
 80014e4:	5c8a      	ldrb	r2, [r1, r2]
 80014e6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i <= sizeof(jagged_pass[num - 1]); i++)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	3301      	adds	r3, #1
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d9ed      	bls.n	80014d0 <UART_Assign_password+0xc>
	}
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	20000208 	.word	0x20000208
 8001504:	20000090 	.word	0x20000090
 8001508:	2000020c 	.word	0x2000020c

0800150c <UART_Init_UART>:


//************************** High Level Function ****************************************************************//

void UART_Init_UART(UART_HandleTypeDef *huart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	Lib_uart = *huart;
 8001514:	4a05      	ldr	r2, [pc, #20]	; (800152c <UART_Init_UART+0x20>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	2348      	movs	r3, #72	; 0x48
 800151e:	461a      	mov	r2, r3
 8001520:	f003 fdf0 	bl	8005104 <memcpy>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200001c0 	.word	0x200001c0

08001530 <UART_handler>:



STATE_TX_PIN UART_handler(uint8_t * rxBuffer, char* NUM, char* PIN)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
	if(UART_Check_string(rxBuffer) == true)	// Kiem tra chuoi
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f7ff ff4f 	bl	80013e0 <UART_Check_string>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d01a      	beq.n	800157e <UART_handler+0x4e>
	{
		UART_SetNUM_PIN(rxBuffer);			// Gan vao val "pin" voi num tuong ung
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff ff5f 	bl	800140c <UART_SetNUM_PIN>

		UART_Assign_password();				// Gan vao Array extern ben handler_keyIN.h
 800154e:	f7ff ffb9 	bl	80014c4 <UART_Assign_password>

		//Lay lai gia tri num va pin
		*NUM = num;
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <UART_handler+0x58>)
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i <= sizeof(PIN); i++)
 800155a:	2300      	movs	r3, #0
 800155c:	75fb      	strb	r3, [r7, #23]
 800155e:	e009      	b.n	8001574 <UART_handler+0x44>
		{
			PIN[i] = pin[i];
 8001560:	7dfa      	ldrb	r2, [r7, #23]
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	440b      	add	r3, r1
 8001568:	4908      	ldr	r1, [pc, #32]	; (800158c <UART_handler+0x5c>)
 800156a:	5c8a      	ldrb	r2, [r1, r2]
 800156c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i <= sizeof(PIN); i++)
 800156e:	7dfb      	ldrb	r3, [r7, #23]
 8001570:	3301      	adds	r3, #1
 8001572:	75fb      	strb	r3, [r7, #23]
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	2b04      	cmp	r3, #4
 8001578:	d9f2      	bls.n	8001560 <UART_handler+0x30>
		}

		return UART_HANDLER_OKE;
 800157a:	2300      	movs	r3, #0
 800157c:	e000      	b.n	8001580 <UART_handler+0x50>
	}
	else
	{
		return UART_HANDLER_ERROR;
 800157e:	2301      	movs	r3, #1
	}
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000208 	.word	0x20000208
 800158c:	2000020c 	.word	0x2000020c

08001590 <HAL_GPIO_EXTI_Callback>:
uint8_t rxBuffer[20]={0};
volatile uint8_t rxBufferIndex = 0;
volatile uint8_t flag_rx_done = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
	static uint32_t TimeBegin = 0;
	static uint32_t TimeNow = 0;
/*CODE ISR*/
	/*flag keypad*/
	if(((R1_IN_Pin == GPIO_Pin) | (R2_IN_Pin == GPIO_Pin) | (R3_IN_Pin == GPIO_Pin) | (R4_IN_Pin == GPIO_Pin)) && (state_button == KEYPAD))
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015a0:	bf0c      	ite	eq
 80015a2:	2301      	moveq	r3, #1
 80015a4:	2300      	movne	r3, #0
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	88fa      	ldrh	r2, [r7, #6]
 80015ce:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80015d2:	bf0c      	ite	eq
 80015d4:	2201      	moveq	r2, #1
 80015d6:	2200      	movne	r2, #0
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	4313      	orrs	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00e      	beq.n	80015fe <HAL_GPIO_EXTI_Callback+0x6e>
 80015e0:	4b53      	ldr	r3, [pc, #332]	; (8001730 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10a      	bne.n	80015fe <HAL_GPIO_EXTI_Callback+0x6e>
	{
		flag_keypad = 1;
 80015e8:	4b52      	ldr	r3, [pc, #328]	; (8001734 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
		key = KEYPAD_Handler(&COL_KEY_PAD_main, &ROW_KEY_PAD_main);
 80015ee:	4952      	ldr	r1, [pc, #328]	; (8001738 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80015f0:	4852      	ldr	r0, [pc, #328]	; (800173c <HAL_GPIO_EXTI_Callback+0x1ac>)
 80015f2:	f7ff f953 	bl	800089c <KEYPAD_Handler>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b51      	ldr	r3, [pc, #324]	; (8001740 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80015fc:	701a      	strb	r2, [r3, #0]
	}
	/*flag lcd*/
	if(state_button == BUTTON)
 80015fe:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d13b      	bne.n	800167e <HAL_GPIO_EXTI_Callback+0xee>
	{
		flag_button = 1;
 8001606:	4b4f      	ldr	r3, [pc, #316]	; (8001744 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
		if(UP_EXTI_3_Pin == GPIO_Pin)
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	2b08      	cmp	r3, #8
 8001610:	d111      	bne.n	8001636 <HAL_GPIO_EXTI_Callback+0xa6>
		{
			Config++;
 8001612:	4b4d      	ldr	r3, [pc, #308]	; (8001748 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b25b      	sxtb	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	3301      	adds	r3, #1
 800161c:	b2db      	uxtb	r3, r3
 800161e:	b25a      	sxtb	r2, r3
 8001620:	4b49      	ldr	r3, [pc, #292]	; (8001748 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001622:	701a      	strb	r2, [r3, #0]
			if(Config > CONFIG_ROW3) Config = CONFIG_ROW1;
 8001624:	4b48      	ldr	r3, [pc, #288]	; (8001748 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b25b      	sxtb	r3, r3
 800162a:	2b03      	cmp	r3, #3
 800162c:	dd27      	ble.n	800167e <HAL_GPIO_EXTI_Callback+0xee>
 800162e:	4b46      	ldr	r3, [pc, #280]	; (8001748 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	e023      	b.n	800167e <HAL_GPIO_EXTI_Callback+0xee>
		}
		else if(DOWN_EXTI_4_Pin == GPIO_Pin)
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	2b10      	cmp	r3, #16
 800163a:	d111      	bne.n	8001660 <HAL_GPIO_EXTI_Callback+0xd0>
		{
			Config--;
 800163c:	4b42      	ldr	r3, [pc, #264]	; (8001748 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b25b      	sxtb	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	3b01      	subs	r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	b25a      	sxtb	r2, r3
 800164a:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800164c:	701a      	strb	r2, [r3, #0]
			if(Config < CONFIG_ROW1) Config = CONFIG_ROW3;
 800164e:	4b3e      	ldr	r3, [pc, #248]	; (8001748 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b25b      	sxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	dc12      	bgt.n	800167e <HAL_GPIO_EXTI_Callback+0xee>
 8001658:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800165a:	2203      	movs	r2, #3
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	e00e      	b.n	800167e <HAL_GPIO_EXTI_Callback+0xee>
		}
		else if(ENTER_EXTI_5_Pin == GPIO_Pin)
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	2b20      	cmp	r3, #32
 8001664:	d10b      	bne.n	800167e <HAL_GPIO_EXTI_Callback+0xee>
		{
			if(1 == Mode)
 8001666:	4b39      	ldr	r3, [pc, #228]	; (800174c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b01      	cmp	r3, #1
 800166e:	d103      	bne.n	8001678 <HAL_GPIO_EXTI_Callback+0xe8>
			{
				Enter = 1;
 8001670:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e002      	b.n	800167e <HAL_GPIO_EXTI_Callback+0xee>
			}
			else
			{
				Mode = 1;
 8001678:	4b34      	ldr	r3, [pc, #208]	; (800174c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	/*END CODE ISR*/

	HAL_Delay(20);
 800167e:	2014      	movs	r0, #20
 8001680:	f000 fd4e 	bl	8002120 <HAL_Delay>
	TimeBegin = HAL_GetTick();
 8001684:	f000 fd42 	bl	800210c <HAL_GetTick>
 8001688:	4603      	mov	r3, r0
 800168a:	4a32      	ldr	r2, [pc, #200]	; (8001754 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800168c:	6013      	str	r3, [r2, #0]
	while(		HAL_GPIO_ReadPin(GPIOB, UP_EXTI_3_Pin) == GPIO_PIN_RESET		\
 800168e:	e00d      	b.n	80016ac <HAL_GPIO_EXTI_Callback+0x11c>
			|| 	HAL_GPIO_ReadPin(R1_IN_GPIO_Port, R1_IN_Pin) == GPIO_PIN_RESET		\
			|| 	HAL_GPIO_ReadPin(R2_IN_GPIO_Port, R2_IN_Pin) == GPIO_PIN_RESET 		\
			|| 	HAL_GPIO_ReadPin(R3_IN_GPIO_Port, R3_IN_Pin) == GPIO_PIN_RESET		\
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
	{
		TimeNow = HAL_GetTick();
 8001690:	f000 fd3c 	bl	800210c <HAL_GetTick>
 8001694:	4603      	mov	r3, r0
 8001696:	4a30      	ldr	r2, [pc, #192]	; (8001758 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001698:	6013      	str	r3, [r2, #0]
		if(TimeNow - TimeBegin == 5000)
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <HAL_GPIO_EXTI_Callback+0x1c8>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d035      	beq.n	8001718 <HAL_GPIO_EXTI_Callback+0x188>
	while(		HAL_GPIO_ReadPin(GPIOB, UP_EXTI_3_Pin) == GPIO_PIN_RESET		\
 80016ac:	2108      	movs	r1, #8
 80016ae:	482b      	ldr	r0, [pc, #172]	; (800175c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80016b0:	f001 f89e 	bl	80027f0 <HAL_GPIO_ReadPin>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0ea      	beq.n	8001690 <HAL_GPIO_EXTI_Callback+0x100>
			|| 	HAL_GPIO_ReadPin(GPIOB, DOWN_EXTI_4_Pin) == GPIO_PIN_RESET 		\
 80016ba:	2110      	movs	r1, #16
 80016bc:	4827      	ldr	r0, [pc, #156]	; (800175c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80016be:	f001 f897 	bl	80027f0 <HAL_GPIO_ReadPin>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0e3      	beq.n	8001690 <HAL_GPIO_EXTI_Callback+0x100>
			|| 	HAL_GPIO_ReadPin(GPIOB, ENTER_EXTI_5_Pin) == GPIO_PIN_RESET		\
 80016c8:	2120      	movs	r1, #32
 80016ca:	4824      	ldr	r0, [pc, #144]	; (800175c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80016cc:	f001 f890 	bl	80027f0 <HAL_GPIO_ReadPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0dc      	beq.n	8001690 <HAL_GPIO_EXTI_Callback+0x100>
			|| 	HAL_GPIO_ReadPin(R1_IN_GPIO_Port, R1_IN_Pin) == GPIO_PIN_RESET		\
 80016d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016da:	4820      	ldr	r0, [pc, #128]	; (800175c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80016dc:	f001 f888 	bl	80027f0 <HAL_GPIO_ReadPin>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0d4      	beq.n	8001690 <HAL_GPIO_EXTI_Callback+0x100>
			|| 	HAL_GPIO_ReadPin(R2_IN_GPIO_Port, R2_IN_Pin) == GPIO_PIN_RESET 		\
 80016e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ea:	481c      	ldr	r0, [pc, #112]	; (800175c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80016ec:	f001 f880 	bl	80027f0 <HAL_GPIO_ReadPin>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0cc      	beq.n	8001690 <HAL_GPIO_EXTI_Callback+0x100>
			|| 	HAL_GPIO_ReadPin(R3_IN_GPIO_Port, R3_IN_Pin) == GPIO_PIN_RESET		\
 80016f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fa:	4818      	ldr	r0, [pc, #96]	; (800175c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80016fc:	f001 f878 	bl	80027f0 <HAL_GPIO_ReadPin>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0c4      	beq.n	8001690 <HAL_GPIO_EXTI_Callback+0x100>
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
 8001706:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800170a:	4814      	ldr	r0, [pc, #80]	; (800175c <HAL_GPIO_EXTI_Callback+0x1cc>)
 800170c:	f001 f870 	bl	80027f0 <HAL_GPIO_ReadPin>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0bc      	beq.n	8001690 <HAL_GPIO_EXTI_Callback+0x100>
 8001716:	e000      	b.n	800171a <HAL_GPIO_EXTI_Callback+0x18a>
		{
//			ButtonError = 1;
			break;
 8001718:	bf00      	nop
		}
	}
	HAL_Delay(20);
 800171a:	2014      	movs	r0, #20
 800171c:	f000 fd00 	bl	8002120 <HAL_Delay>
	EXTI->PR = ENTER_EXTI_5_Pin | DOWN_EXTI_4_Pin | UP_EXTI_3_Pin \
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001722:	f24f 0238 	movw	r2, #61496	; 0xf038
 8001726:	615a      	str	r2, [r3, #20]
			| R1_IN_Pin | R2_IN_Pin |R3_IN_Pin | R4_IN_Pin;
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200000b8 	.word	0x200000b8
 8001734:	200001b4 	.word	0x200001b4
 8001738:	200002c8 	.word	0x200002c8
 800173c:	200002b0 	.word	0x200002b0
 8001740:	200002e0 	.word	0x200002e0
 8001744:	200001b9 	.word	0x200001b9
 8001748:	200000ac 	.word	0x200000ac
 800174c:	200001b7 	.word	0x200001b7
 8001750:	200001b8 	.word	0x200001b8
 8001754:	20000328 	.word	0x20000328
 8001758:	2000032c 	.word	0x2000032c
 800175c:	40010c00 	.word	0x40010c00
 8001760:	40010400 	.word	0x40010400

08001764 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	if(rxByte == '\r')
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_UART_RxCpltCallback+0x5c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b0d      	cmp	r3, #13
 8001774:	d103      	bne.n	800177e <HAL_UART_RxCpltCallback+0x1a>
	{
		flag_rx_done = 1;
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_UART_RxCpltCallback+0x60>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	e00f      	b.n	800179e <HAL_UART_RxCpltCallback+0x3a>
	}
	else
	{
		rxBuffer[rxBufferIndex] = rxByte;
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_UART_RxCpltCallback+0x64>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_UART_RxCpltCallback+0x5c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2d9      	uxtb	r1, r3
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_UART_RxCpltCallback+0x68>)
 800178e:	5499      	strb	r1, [r3, r2]
		rxBufferIndex++;
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_UART_RxCpltCallback+0x64>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	3301      	adds	r3, #1
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_UART_RxCpltCallback+0x64>)
 800179c:	701a      	strb	r2, [r3, #0]
	}
	if(rxBufferIndex >= 20)
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_UART_RxCpltCallback+0x64>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b13      	cmp	r3, #19
 80017a6:	d902      	bls.n	80017ae <HAL_UART_RxCpltCallback+0x4a>
	{
		rxBufferIndex = 0;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <HAL_UART_RxCpltCallback+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxByte, 1);
 80017ae:	2201      	movs	r2, #1
 80017b0:	4903      	ldr	r1, [pc, #12]	; (80017c0 <HAL_UART_RxCpltCallback+0x5c>)
 80017b2:	4807      	ldr	r0, [pc, #28]	; (80017d0 <HAL_UART_RxCpltCallback+0x6c>)
 80017b4:	f002 fed7 	bl	8004566 <HAL_UART_Receive_IT>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000030d 	.word	0x2000030d
 80017c4:	20000325 	.word	0x20000325
 80017c8:	20000324 	.word	0x20000324
 80017cc:	20000310 	.word	0x20000310
 80017d0:	20000268 	.word	0x20000268

080017d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b097      	sub	sp, #92	; 0x5c
 80017d8:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017da:	f000 fc3f 	bl	800205c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017de:	f000 f8e5 	bl	80019ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e2:	f000 f977 	bl	8001ad4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017e6:	f000 f91d 	bl	8001a24 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80017ea:	f000 f949 	bl	8001a80 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // INIT HAL lib
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxByte, 1);
 80017ee:	2201      	movs	r2, #1
 80017f0:	4958      	ldr	r1, [pc, #352]	; (8001954 <main+0x180>)
 80017f2:	4859      	ldr	r0, [pc, #356]	; (8001958 <main+0x184>)
 80017f4:	f002 feb7 	bl	8004566 <HAL_UART_Receive_IT>

  // INIT user
  KeyPad_Init(		// Cpl pin + port
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	930d      	str	r3, [sp, #52]	; 0x34
 80017fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001802:	930c      	str	r3, [sp, #48]	; 0x30
 8001804:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001808:	930b      	str	r3, [sp, #44]	; 0x2c
 800180a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800180e:	930a      	str	r3, [sp, #40]	; 0x28
 8001810:	4b52      	ldr	r3, [pc, #328]	; (800195c <main+0x188>)
 8001812:	9309      	str	r3, [sp, #36]	; 0x24
 8001814:	4b51      	ldr	r3, [pc, #324]	; (800195c <main+0x188>)
 8001816:	9308      	str	r3, [sp, #32]
 8001818:	4b50      	ldr	r3, [pc, #320]	; (800195c <main+0x188>)
 800181a:	9307      	str	r3, [sp, #28]
 800181c:	4b4f      	ldr	r3, [pc, #316]	; (800195c <main+0x188>)
 800181e:	9306      	str	r3, [sp, #24]
 8001820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001824:	9305      	str	r3, [sp, #20]
 8001826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800182a:	9304      	str	r3, [sp, #16]
 800182c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001830:	9303      	str	r3, [sp, #12]
 8001832:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	4b49      	ldr	r3, [pc, #292]	; (8001960 <main+0x18c>)
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	4b48      	ldr	r3, [pc, #288]	; (8001960 <main+0x18c>)
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	4b47      	ldr	r3, [pc, #284]	; (8001960 <main+0x18c>)
 8001842:	4a47      	ldr	r2, [pc, #284]	; (8001960 <main+0x18c>)
 8001844:	4947      	ldr	r1, [pc, #284]	; (8001964 <main+0x190>)
 8001846:	4848      	ldr	r0, [pc, #288]	; (8001968 <main+0x194>)
 8001848:	f7fe ffe8 	bl	800081c <KeyPad_Init>
					C1_OUT_Pin, C2_OUT_Pin, C3_OUT_Pin, C4_OUT_Pin,										\
					// Row pin + port
					R1_IN_GPIO_Port, R2_IN_GPIO_Port, R3_IN_GPIO_Port, R4_IN_GPIO_Port,					\
					R1_IN_Pin, R2_IN_Pin, R3_IN_Pin, R4_IN_Pin
			  );
  CLCD_I2C_Init(&LCD1, &hi2c1, (0x27 << 1), 16, 4);
 800184c:	4638      	mov	r0, r7
 800184e:	2304      	movs	r3, #4
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2310      	movs	r3, #16
 8001854:	224e      	movs	r2, #78	; 0x4e
 8001856:	4945      	ldr	r1, [pc, #276]	; (800196c <main+0x198>)
 8001858:	f7fe fd42 	bl	80002e0 <CLCD_I2C_Init>

  at24_I2C_Init(hi2c1);
 800185c:	4c43      	ldr	r4, [pc, #268]	; (800196c <main+0x198>)
 800185e:	4668      	mov	r0, sp
 8001860:	f104 0310 	add.w	r3, r4, #16
 8001864:	2244      	movs	r2, #68	; 0x44
 8001866:	4619      	mov	r1, r3
 8001868:	f003 fc4c 	bl	8005104 <memcpy>
 800186c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001870:	f7fe fc74 	bl	800015c <at24_I2C_Init>

  UART_Init_UART(&huart3);
 8001874:	4838      	ldr	r0, [pc, #224]	; (8001958 <main+0x184>)
 8001876:	f7ff fe49 	bl	800150c <UART_Init_UART>

	if(at24_isConnected())
 800187a:	f7fe fc87 	bl	800018c <at24_isConnected>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00c      	beq.n	800189e <main+0xca>
	{
		readStatus = at24_read(MEM_ADDR,rData, 15, 100);
 8001884:	2364      	movs	r3, #100	; 0x64
 8001886:	220f      	movs	r2, #15
 8001888:	4939      	ldr	r1, [pc, #228]	; (8001970 <main+0x19c>)
 800188a:	2000      	movs	r0, #0
 800188c:	f7fe fc90 	bl	80001b0 <at24_read>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	4b37      	ldr	r3, [pc, #220]	; (8001974 <main+0x1a0>)
 8001896:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8001898:	200a      	movs	r0, #10
 800189a:	f000 fc41 	bl	8002120 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*Debug key*/
	  if(flag_keypad == 1)
 800189e:	4b36      	ldr	r3, [pc, #216]	; (8001978 <main+0x1a4>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d106      	bne.n	80018b6 <main+0xe2>
	  {
		  flag_keypad = 0;
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <main+0x1a4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED_KEY_GPIO_Port, LED_KEY_Pin);
 80018ae:	2110      	movs	r1, #16
 80018b0:	482b      	ldr	r0, [pc, #172]	; (8001960 <main+0x18c>)
 80018b2:	f000 ffcc 	bl	800284e <HAL_GPIO_TogglePin>
	  }
	  if(flag_button == 1)
 80018b6:	4b31      	ldr	r3, [pc, #196]	; (800197c <main+0x1a8>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d107      	bne.n	80018d0 <main+0xfc>
	  {
		  flag_button = 0;
 80018c0:	4b2e      	ldr	r3, [pc, #184]	; (800197c <main+0x1a8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED_BUTTON_GPIO_Port, LED_BUTTON_Pin);
 80018c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ca:	482d      	ldr	r0, [pc, #180]	; (8001980 <main+0x1ac>)
 80018cc:	f000 ffbf 	bl	800284e <HAL_GPIO_TogglePin>
	  }


	  /*UART handler after uart rx is exexecuted*/
	  if(flag_rx_done == 1)
 80018d0:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <main+0x1b0>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d117      	bne.n	800190a <main+0x136>
	  {
		  flag_rx_done = 0;
 80018da:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <main+0x1b0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
		  /*function handler uart*/
		  if(UART_handler(rxBuffer, &num_IN_UART, pin_IN_UART) == UART_HANDLER_OKE);
 80018e0:	4a29      	ldr	r2, [pc, #164]	; (8001988 <main+0x1b4>)
 80018e2:	492a      	ldr	r1, [pc, #168]	; (800198c <main+0x1b8>)
 80018e4:	482a      	ldr	r0, [pc, #168]	; (8001990 <main+0x1bc>)
 80018e6:	f7ff fe23 	bl	8001530 <UART_handler>
		  /*End function handler uart*/


		  for(uint8_t i =0; i < sizeof(rxBuffer); i++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
 80018ee:	e009      	b.n	8001904 <main+0x130>
		  {
			  rxBuffer[i] = 0;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	4a27      	ldr	r2, [pc, #156]	; (8001990 <main+0x1bc>)
 80018f4:	2100      	movs	r1, #0
 80018f6:	54d1      	strb	r1, [r2, r3]
		  	  rxBufferIndex = 0;
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <main+0x1c0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i =0; i < sizeof(rxBuffer); i++)
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	3301      	adds	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	2b13      	cmp	r3, #19
 8001908:	d9f2      	bls.n	80018f0 <main+0x11c>
		  }
	  }


	  /*Enter key and display on LCD pass/num*/
	  if(handler_keyIN_enterKey_DisplayLCD(&LCD1, state_button, &key, pin_IN) == KEY_OK)
 800190a:	4b23      	ldr	r3, [pc, #140]	; (8001998 <main+0x1c4>)
 800190c:	7819      	ldrb	r1, [r3, #0]
 800190e:	4638      	mov	r0, r7
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <main+0x1c8>)
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <main+0x1cc>)
 8001914:	f7fe fff2 	bl	80008fc <handler_keyIN_enterKey_DisplayLCD>
 8001918:	4603      	mov	r3, r0
 800191a:	2b01      	cmp	r3, #1
 800191c:	d102      	bne.n	8001924 <main+0x150>
	  {
		  handler_keyIN_CheckPIN_NUM(pin_IN);
 800191e:	481f      	ldr	r0, [pc, #124]	; (800199c <main+0x1c8>)
 8001920:	f7ff f872 	bl	8000a08 <handler_keyIN_CheckPIN_NUM>
	  }


	  /*Chuyển đổi chế độ ch�?n kiểu nút nhấn thao tác màng hình*/
	  if((enter_num_pass.signal_enter_pass == PROCESSING) || (enter_num_pass.signal_enter_num == PROCESSING))
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <main+0x1d0>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <main+0x160>
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <main+0x1d0>)
 800192e:	785b      	ldrb	r3, [r3, #1]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d106      	bne.n	8001942 <main+0x16e>
	  {
		  state_star_pass = NONE_STAR;
 8001934:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <main+0x1d4>)
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
		  state_button = KEYPAD;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <main+0x1c4>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e002      	b.n	8001948 <main+0x174>
	  }
	  else
	  {
		  state_button = BUTTON;
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <main+0x1c4>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
	  }

	  lcd_system_handler(&LCD1);
 8001948:	463b      	mov	r3, r7
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fb6a 	bl	8001024 <lcd_system_handler>
	  if(flag_keypad == 1)
 8001950:	e7a5      	b.n	800189e <main+0xca>
 8001952:	bf00      	nop
 8001954:	2000030d 	.word	0x2000030d
 8001958:	20000268 	.word	0x20000268
 800195c:	40010c00 	.word	0x40010c00
 8001960:	40010800 	.word	0x40010800
 8001964:	200002c8 	.word	0x200002c8
 8001968:	200002b0 	.word	0x200002b0
 800196c:	20000214 	.word	0x20000214
 8001970:	200002f4 	.word	0x200002f4
 8001974:	200002f2 	.word	0x200002f2
 8001978:	200001b4 	.word	0x200001b4
 800197c:	200001b9 	.word	0x200001b9
 8001980:	40011000 	.word	0x40011000
 8001984:	20000325 	.word	0x20000325
 8001988:	200002ec 	.word	0x200002ec
 800198c:	200002f1 	.word	0x200002f1
 8001990:	20000310 	.word	0x20000310
 8001994:	20000324 	.word	0x20000324
 8001998:	200000b8 	.word	0x200000b8
 800199c:	200002e4 	.word	0x200002e4
 80019a0:	200002e0 	.word	0x200002e0
 80019a4:	200000b0 	.word	0x200000b0
 80019a8:	200001ba 	.word	0x200001ba

080019ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b090      	sub	sp, #64	; 0x40
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	f107 0318 	add.w	r3, r7, #24
 80019b6:	2228      	movs	r2, #40	; 0x28
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 fbb0 	bl	8005120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d2:	2301      	movs	r3, #1
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d6:	2310      	movs	r3, #16
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019de:	f107 0318 	add.w	r3, r7, #24
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 f8dc 	bl	8003ba0 <HAL_RCC_OscConfig>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80019ee:	f000 f925 	bl	8001c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f2:	230f      	movs	r3, #15
 80019f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 fb4a 	bl	80040a4 <HAL_RCC_ClockConfig>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a16:	f000 f911 	bl	8001c3c <Error_Handler>
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	3740      	adds	r7, #64	; 0x40
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MX_I2C1_Init+0x50>)
 8001a2a:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <MX_I2C1_Init+0x54>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_I2C1_Init+0x50>)
 8001a30:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <MX_I2C1_Init+0x58>)
 8001a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_I2C1_Init+0x50>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_I2C1_Init+0x50>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_I2C1_Init+0x50>)
 8001a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <MX_I2C1_Init+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_I2C1_Init+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <MX_I2C1_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_I2C1_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <MX_I2C1_Init+0x50>)
 8001a62:	f000 ff25 	bl	80028b0 <HAL_I2C_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a6c:	f000 f8e6 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000214 	.word	0x20000214
 8001a78:	40005400 	.word	0x40005400
 8001a7c:	000186a0 	.word	0x000186a0

08001a80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <MX_USART3_UART_Init+0x50>)
 8001a88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_USART3_UART_Init+0x4c>)
 8001ab8:	f002 fc82 	bl	80043c0 <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ac2:	f000 f8bb 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000268 	.word	0x20000268
 8001ad0:	40004800 	.word	0x40004800

08001ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae8:	4b4f      	ldr	r3, [pc, #316]	; (8001c28 <MX_GPIO_Init+0x154>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a4e      	ldr	r2, [pc, #312]	; (8001c28 <MX_GPIO_Init+0x154>)
 8001aee:	f043 0310 	orr.w	r3, r3, #16
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <MX_GPIO_Init+0x154>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b00:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <MX_GPIO_Init+0x154>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a48      	ldr	r2, [pc, #288]	; (8001c28 <MX_GPIO_Init+0x154>)
 8001b06:	f043 0304 	orr.w	r3, r3, #4
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b46      	ldr	r3, [pc, #280]	; (8001c28 <MX_GPIO_Init+0x154>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b18:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <MX_GPIO_Init+0x154>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a42      	ldr	r2, [pc, #264]	; (8001c28 <MX_GPIO_Init+0x154>)
 8001b1e:	f043 0308 	orr.w	r3, r3, #8
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b40      	ldr	r3, [pc, #256]	; (8001c28 <MX_GPIO_Init+0x154>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUTTON_GPIO_Port, LED_BUTTON_Pin, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b36:	483d      	ldr	r0, [pc, #244]	; (8001c2c <MX_GPIO_Init+0x158>)
 8001b38:	f000 fe71 	bl	800281e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATE_Pin|LED_KEY_Pin|LED_RESULT_Pin|LED_USER_Pin
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f640 71f8 	movw	r1, #4088	; 0xff8
 8001b42:	483b      	ldr	r0, [pc, #236]	; (8001c30 <MX_GPIO_Init+0x15c>)
 8001b44:	f000 fe6b 	bl	800281e <HAL_GPIO_WritePin>
                          |DATA_595_Pin|C4_OUT_Pin|C3_OUT_Pin|C2_OUT_Pin
                          |C1_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_595_Pin|LAT_595_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2103      	movs	r1, #3
 8001b4c:	4839      	ldr	r0, [pc, #228]	; (8001c34 <MX_GPIO_Init+0x160>)
 8001b4e:	f000 fe66 	bl	800281e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUTTON_Pin */
  GPIO_InitStruct.Pin = LED_BUTTON_Pin;
 8001b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2302      	movs	r3, #2
 8001b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4830      	ldr	r0, [pc, #192]	; (8001c2c <MX_GPIO_Init+0x158>)
 8001b6c:	f000 fcbc 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATE_Pin LED_KEY_Pin LED_RESULT_Pin LED_USER_Pin
                           DATA_595_Pin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|LED_KEY_Pin|LED_RESULT_Pin|LED_USER_Pin
 8001b70:	23f8      	movs	r3, #248	; 0xf8
 8001b72:	613b      	str	r3, [r7, #16]
                          |DATA_595_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	4619      	mov	r1, r3
 8001b86:	482a      	ldr	r0, [pc, #168]	; (8001c30 <MX_GPIO_Init+0x15c>)
 8001b88:	f000 fcae 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_595_Pin LAT_595_Pin */
  GPIO_InitStruct.Pin = CLK_595_Pin|LAT_595_Pin;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4824      	ldr	r0, [pc, #144]	; (8001c34 <MX_GPIO_Init+0x160>)
 8001ba4:	f000 fca0 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_IN_Pin R3_IN_Pin R2_IN_Pin R1_IN_Pin
                           UP_EXTI_3_Pin DOWN_EXTI_4_Pin ENTER_EXTI_5_Pin */
  GPIO_InitStruct.Pin = R4_IN_Pin|R3_IN_Pin|R2_IN_Pin|R1_IN_Pin
 8001ba8:	f24f 0338 	movw	r3, #61496	; 0xf038
 8001bac:	613b      	str	r3, [r7, #16]
                          |UP_EXTI_3_Pin|DOWN_EXTI_4_Pin|ENTER_EXTI_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bae:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <MX_GPIO_Init+0x164>)
 8001bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	4619      	mov	r1, r3
 8001bbc:	481d      	ldr	r0, [pc, #116]	; (8001c34 <MX_GPIO_Init+0x160>)
 8001bbe:	f000 fc93 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_OUT_Pin C3_OUT_Pin C2_OUT_Pin C1_OUT_Pin */
  GPIO_InitStruct.Pin = C4_OUT_Pin|C3_OUT_Pin|C2_OUT_Pin|C1_OUT_Pin;
 8001bc2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4815      	ldr	r0, [pc, #84]	; (8001c30 <MX_GPIO_Init+0x15c>)
 8001bdc:	f000 fc84 	bl	80024e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2105      	movs	r1, #5
 8001be4:	2009      	movs	r0, #9
 8001be6:	f000 fb96 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001bea:	2009      	movs	r0, #9
 8001bec:	f000 fbaf 	bl	800234e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2105      	movs	r1, #5
 8001bf4:	200a      	movs	r0, #10
 8001bf6:	f000 fb8e 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001bfa:	200a      	movs	r0, #10
 8001bfc:	f000 fba7 	bl	800234e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2105      	movs	r1, #5
 8001c04:	2017      	movs	r0, #23
 8001c06:	f000 fb86 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c0a:	2017      	movs	r0, #23
 8001c0c:	f000 fb9f 	bl	800234e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2105      	movs	r1, #5
 8001c14:	2028      	movs	r0, #40	; 0x28
 8001c16:	f000 fb7e 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c1a:	2028      	movs	r0, #40	; 0x28
 8001c1c:	f000 fb97 	bl	800234e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c20:	bf00      	nop
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40011000 	.word	0x40011000
 8001c30:	40010800 	.word	0x40010800
 8001c34:	40010c00 	.word	0x40010c00
 8001c38:	10210000 	.word	0x10210000

08001c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c40:	b672      	cpsid	i
}
 8001c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <Error_Handler+0x8>
	...

08001c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_MspInit+0x5c>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <HAL_MspInit+0x5c>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6193      	str	r3, [r2, #24]
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_MspInit+0x5c>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <HAL_MspInit+0x5c>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <HAL_MspInit+0x5c>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	61d3      	str	r3, [r2, #28]
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <HAL_MspInit+0x5c>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_MspInit+0x60>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_MspInit+0x60>)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010000 	.word	0x40010000

08001cac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <HAL_I2C_MspInit+0x70>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d123      	bne.n	8001d14 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <HAL_I2C_MspInit+0x74>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a13      	ldr	r2, [pc, #76]	; (8001d20 <HAL_I2C_MspInit+0x74>)
 8001cd2:	f043 0308 	orr.w	r3, r3, #8
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_I2C_MspInit+0x74>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ce4:	23c0      	movs	r3, #192	; 0xc0
 8001ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce8:	2312      	movs	r3, #18
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480b      	ldr	r0, [pc, #44]	; (8001d24 <HAL_I2C_MspInit+0x78>)
 8001cf8:	f000 fbf6 	bl	80024e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_I2C_MspInit+0x74>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	4a07      	ldr	r2, [pc, #28]	; (8001d20 <HAL_I2C_MspInit+0x74>)
 8001d02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d06:	61d3      	str	r3, [r2, #28]
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_I2C_MspInit+0x74>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d14:	bf00      	nop
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40005400 	.word	0x40005400
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010c00 	.word	0x40010c00

08001d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a20      	ldr	r2, [pc, #128]	; (8001dc4 <HAL_UART_MspInit+0x9c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d139      	bne.n	8001dbc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_UART_MspInit+0xa0>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <HAL_UART_MspInit+0xa0>)
 8001d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d52:	61d3      	str	r3, [r2, #28]
 8001d54:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <HAL_UART_MspInit+0xa0>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_UART_MspInit+0xa0>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <HAL_UART_MspInit+0xa0>)
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_UART_MspInit+0xa0>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480f      	ldr	r0, [pc, #60]	; (8001dcc <HAL_UART_MspInit+0xa4>)
 8001d8e:	f000 fbab 	bl	80024e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	4619      	mov	r1, r3
 8001da6:	4809      	ldr	r0, [pc, #36]	; (8001dcc <HAL_UART_MspInit+0xa4>)
 8001da8:	f000 fb9e 	bl	80024e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2100      	movs	r1, #0
 8001db0:	2027      	movs	r0, #39	; 0x27
 8001db2:	f000 fab0 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001db6:	2027      	movs	r0, #39	; 0x27
 8001db8:	f000 fac9 	bl	800234e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001dbc:	bf00      	nop
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40004800 	.word	0x40004800
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40010c00 	.word	0x40010c00

08001dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <NMI_Handler+0x4>

08001dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <MemManage_Handler+0x4>

08001de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <BusFault_Handler+0x4>

08001de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <UsageFault_Handler+0x4>

08001dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e16:	f000 f967 	bl	80020e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_EXTI_3_Pin);
 8001e22:	2008      	movs	r0, #8
 8001e24:	f000 fd2c 	bl	8002880 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_EXTI_4_Pin);
 8001e30:	2010      	movs	r0, #16
 8001e32:	f000 fd25 	bl	8002880 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENTER_EXTI_5_Pin);
 8001e3e:	2020      	movs	r0, #32
 8001e40:	f000 fd1e 	bl	8002880 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <USART3_IRQHandler+0x10>)
 8001e4e:	f002 fbaf 	bl	80045b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000268 	.word	0x20000268

08001e5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R4_IN_Pin);
 8001e60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e64:	f000 fd0c 	bl	8002880 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R3_IN_Pin);
 8001e68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e6c:	f000 fd08 	bl	8002880 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R2_IN_Pin);
 8001e70:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e74:	f000 fd04 	bl	8002880 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R1_IN_Pin);
 8001e78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e7c:	f000 fd00 	bl	8002880 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return 1;
 8001e88:	2301      	movs	r3, #1
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <_kill>:

int _kill(int pid, int sig)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e9c:	f003 f908 	bl	80050b0 <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2216      	movs	r2, #22
 8001ea4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_exit>:

void _exit (int status)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eba:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffe7 	bl	8001e92 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec4:	e7fe      	b.n	8001ec4 <_exit+0x12>

08001ec6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	e00a      	b.n	8001eee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ed8:	f3af 8000 	nop.w
 8001edc:	4601      	mov	r1, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	60ba      	str	r2, [r7, #8]
 8001ee4:	b2ca      	uxtb	r2, r1
 8001ee6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3301      	adds	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dbf0      	blt.n	8001ed8 <_read+0x12>
  }

  return len;
 8001ef6:	687b      	ldr	r3, [r7, #4]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e009      	b.n	8001f26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	60ba      	str	r2, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3301      	adds	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	dbf1      	blt.n	8001f12 <_write+0x12>
  }
  return len;
 8001f2e:	687b      	ldr	r3, [r7, #4]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_close>:

int _close(int file)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f5e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <_isatty>:

int _isatty(int file)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f74:	2301      	movs	r3, #1
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <_sbrk+0x5c>)
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <_sbrk+0x60>)
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <_sbrk+0x64>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <_sbrk+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d207      	bcs.n	8001fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc8:	f003 f872 	bl	80050b0 <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	220c      	movs	r2, #12
 8001fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e009      	b.n	8001fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <_sbrk+0x64>)
 8001fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20005000 	.word	0x20005000
 8001ff8:	00000400 	.word	0x00000400
 8001ffc:	20000330 	.word	0x20000330
 8002000:	20000348 	.word	0x20000348

08002004 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002010:	f7ff fff8 	bl	8002004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002014:	480b      	ldr	r0, [pc, #44]	; (8002044 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002016:	490c      	ldr	r1, [pc, #48]	; (8002048 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002018:	4a0c      	ldr	r2, [pc, #48]	; (800204c <LoopFillZerobss+0x16>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a09      	ldr	r2, [pc, #36]	; (8002050 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800202c:	4c09      	ldr	r4, [pc, #36]	; (8002054 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800203a:	f003 f83f 	bl	80050bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800203e:	f7ff fbc9 	bl	80017d4 <main>
  bx lr
 8002042:	4770      	bx	lr
  ldr r0, =_sdata
 8002044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002048:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 800204c:	08006980 	.word	0x08006980
  ldr r2, =_sbss
 8002050:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8002054:	20000348 	.word	0x20000348

08002058 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002058:	e7fe      	b.n	8002058 <ADC1_2_IRQHandler>
	...

0800205c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_Init+0x28>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a07      	ldr	r2, [pc, #28]	; (8002084 <HAL_Init+0x28>)
 8002066:	f043 0310 	orr.w	r3, r3, #16
 800206a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206c:	2003      	movs	r0, #3
 800206e:	f000 f947 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002072:	2004      	movs	r0, #4
 8002074:	f000 f808 	bl	8002088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002078:	f7ff fde6 	bl	8001c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40022000 	.word	0x40022000

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_InitTick+0x54>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_InitTick+0x58>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209e:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f95f 	bl	800236a <HAL_SYSTICK_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00e      	b.n	80020d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d80a      	bhi.n	80020d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020bc:	2200      	movs	r2, #0
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f000 f927 	bl	8002316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c8:	4a06      	ldr	r2, [pc, #24]	; (80020e4 <HAL_InitTick+0x5c>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200000bc 	.word	0x200000bc
 80020e0:	200000c4 	.word	0x200000c4
 80020e4:	200000c0 	.word	0x200000c0

080020e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_IncTick+0x1c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_IncTick+0x20>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a03      	ldr	r2, [pc, #12]	; (8002108 <HAL_IncTick+0x20>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	200000c4 	.word	0x200000c4
 8002108:	20000334 	.word	0x20000334

0800210c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return uwTick;
 8002110:	4b02      	ldr	r3, [pc, #8]	; (800211c <HAL_GetTick+0x10>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	20000334 	.word	0x20000334

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff fff0 	bl	800210c <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffe0 	bl	800210c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200000c4 	.word	0x200000c4

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4906      	ldr	r1, [pc, #24]	; (8002200 <__NVIC_EnableIRQ+0x34>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100

08002204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	db0a      	blt.n	800222e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	490c      	ldr	r1, [pc, #48]	; (8002250 <__NVIC_SetPriority+0x4c>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	0112      	lsls	r2, r2, #4
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	440b      	add	r3, r1
 8002228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800222c:	e00a      	b.n	8002244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4908      	ldr	r1, [pc, #32]	; (8002254 <__NVIC_SetPriority+0x50>)
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	3b04      	subs	r3, #4
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	440b      	add	r3, r1
 8002242:	761a      	strb	r2, [r3, #24]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f1c3 0307 	rsb	r3, r3, #7
 8002272:	2b04      	cmp	r3, #4
 8002274:	bf28      	it	cs
 8002276:	2304      	movcs	r3, #4
 8002278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3304      	adds	r3, #4
 800227e:	2b06      	cmp	r3, #6
 8002280:	d902      	bls.n	8002288 <NVIC_EncodePriority+0x30>
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3b03      	subs	r3, #3
 8002286:	e000      	b.n	800228a <NVIC_EncodePriority+0x32>
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	f04f 32ff 	mov.w	r2, #4294967295
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	401a      	ands	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a0:	f04f 31ff 	mov.w	r1, #4294967295
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	43d9      	mvns	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	4313      	orrs	r3, r2
         );
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022cc:	d301      	bcc.n	80022d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00f      	b.n	80022f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <SysTick_Config+0x40>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022da:	210f      	movs	r1, #15
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f7ff ff90 	bl	8002204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SysTick_Config+0x40>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SysTick_Config+0x40>)
 80022ec:	2207      	movs	r2, #7
 80022ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	e000e010 	.word	0xe000e010

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff2d 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002328:	f7ff ff42 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 800232c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ff90 	bl	8002258 <NVIC_EncodePriority>
 8002338:	4602      	mov	r2, r0
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff5f 	bl	8002204 <__NVIC_SetPriority>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff35 	bl	80021cc <__NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ffa2 	bl	80022bc <SysTick_Config>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d008      	beq.n	80023ac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2204      	movs	r2, #4
 800239e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e020      	b.n	80023ee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 020e 	bic.w	r2, r2, #14
 80023ba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d4:	2101      	movs	r1, #1
 80023d6:	fa01 f202 	lsl.w	r2, r1, r2
 80023da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d005      	beq.n	800241c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2204      	movs	r2, #4
 8002414:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	e051      	b.n	80024c0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 020e 	bic.w	r2, r2, #14
 800242a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0201 	bic.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a22      	ldr	r2, [pc, #136]	; (80024cc <HAL_DMA_Abort_IT+0xd4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d029      	beq.n	800249a <HAL_DMA_Abort_IT+0xa2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a21      	ldr	r2, [pc, #132]	; (80024d0 <HAL_DMA_Abort_IT+0xd8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d022      	beq.n	8002496 <HAL_DMA_Abort_IT+0x9e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <HAL_DMA_Abort_IT+0xdc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d01a      	beq.n	8002490 <HAL_DMA_Abort_IT+0x98>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <HAL_DMA_Abort_IT+0xe0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d012      	beq.n	800248a <HAL_DMA_Abort_IT+0x92>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <HAL_DMA_Abort_IT+0xe4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00a      	beq.n	8002484 <HAL_DMA_Abort_IT+0x8c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <HAL_DMA_Abort_IT+0xe8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d102      	bne.n	800247e <HAL_DMA_Abort_IT+0x86>
 8002478:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800247c:	e00e      	b.n	800249c <HAL_DMA_Abort_IT+0xa4>
 800247e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002482:	e00b      	b.n	800249c <HAL_DMA_Abort_IT+0xa4>
 8002484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002488:	e008      	b.n	800249c <HAL_DMA_Abort_IT+0xa4>
 800248a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248e:	e005      	b.n	800249c <HAL_DMA_Abort_IT+0xa4>
 8002490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002494:	e002      	b.n	800249c <HAL_DMA_Abort_IT+0xa4>
 8002496:	2310      	movs	r3, #16
 8002498:	e000      	b.n	800249c <HAL_DMA_Abort_IT+0xa4>
 800249a:	2301      	movs	r3, #1
 800249c:	4a11      	ldr	r2, [pc, #68]	; (80024e4 <HAL_DMA_Abort_IT+0xec>)
 800249e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4798      	blx	r3
    } 
  }
  return status;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40020008 	.word	0x40020008
 80024d0:	4002001c 	.word	0x4002001c
 80024d4:	40020030 	.word	0x40020030
 80024d8:	40020044 	.word	0x40020044
 80024dc:	40020058 	.word	0x40020058
 80024e0:	4002006c 	.word	0x4002006c
 80024e4:	40020000 	.word	0x40020000

080024e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b08b      	sub	sp, #44	; 0x2c
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fa:	e169      	b.n	80027d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024fc:	2201      	movs	r2, #1
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	429a      	cmp	r2, r3
 8002516:	f040 8158 	bne.w	80027ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4a9a      	ldr	r2, [pc, #616]	; (8002788 <HAL_GPIO_Init+0x2a0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d05e      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 8002524:	4a98      	ldr	r2, [pc, #608]	; (8002788 <HAL_GPIO_Init+0x2a0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d875      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 800252a:	4a98      	ldr	r2, [pc, #608]	; (800278c <HAL_GPIO_Init+0x2a4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d058      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 8002530:	4a96      	ldr	r2, [pc, #600]	; (800278c <HAL_GPIO_Init+0x2a4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d86f      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 8002536:	4a96      	ldr	r2, [pc, #600]	; (8002790 <HAL_GPIO_Init+0x2a8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d052      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 800253c:	4a94      	ldr	r2, [pc, #592]	; (8002790 <HAL_GPIO_Init+0x2a8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d869      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 8002542:	4a94      	ldr	r2, [pc, #592]	; (8002794 <HAL_GPIO_Init+0x2ac>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d04c      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 8002548:	4a92      	ldr	r2, [pc, #584]	; (8002794 <HAL_GPIO_Init+0x2ac>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d863      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 800254e:	4a92      	ldr	r2, [pc, #584]	; (8002798 <HAL_GPIO_Init+0x2b0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d046      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
 8002554:	4a90      	ldr	r2, [pc, #576]	; (8002798 <HAL_GPIO_Init+0x2b0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d85d      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 800255a:	2b12      	cmp	r3, #18
 800255c:	d82a      	bhi.n	80025b4 <HAL_GPIO_Init+0xcc>
 800255e:	2b12      	cmp	r3, #18
 8002560:	d859      	bhi.n	8002616 <HAL_GPIO_Init+0x12e>
 8002562:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <HAL_GPIO_Init+0x80>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	080025e3 	.word	0x080025e3
 800256c:	080025bd 	.word	0x080025bd
 8002570:	080025cf 	.word	0x080025cf
 8002574:	08002611 	.word	0x08002611
 8002578:	08002617 	.word	0x08002617
 800257c:	08002617 	.word	0x08002617
 8002580:	08002617 	.word	0x08002617
 8002584:	08002617 	.word	0x08002617
 8002588:	08002617 	.word	0x08002617
 800258c:	08002617 	.word	0x08002617
 8002590:	08002617 	.word	0x08002617
 8002594:	08002617 	.word	0x08002617
 8002598:	08002617 	.word	0x08002617
 800259c:	08002617 	.word	0x08002617
 80025a0:	08002617 	.word	0x08002617
 80025a4:	08002617 	.word	0x08002617
 80025a8:	08002617 	.word	0x08002617
 80025ac:	080025c5 	.word	0x080025c5
 80025b0:	080025d9 	.word	0x080025d9
 80025b4:	4a79      	ldr	r2, [pc, #484]	; (800279c <HAL_GPIO_Init+0x2b4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025ba:	e02c      	b.n	8002616 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	623b      	str	r3, [r7, #32]
          break;
 80025c2:	e029      	b.n	8002618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	3304      	adds	r3, #4
 80025ca:	623b      	str	r3, [r7, #32]
          break;
 80025cc:	e024      	b.n	8002618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	3308      	adds	r3, #8
 80025d4:	623b      	str	r3, [r7, #32]
          break;
 80025d6:	e01f      	b.n	8002618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	330c      	adds	r3, #12
 80025de:	623b      	str	r3, [r7, #32]
          break;
 80025e0:	e01a      	b.n	8002618 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d102      	bne.n	80025f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ea:	2304      	movs	r3, #4
 80025ec:	623b      	str	r3, [r7, #32]
          break;
 80025ee:	e013      	b.n	8002618 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025f8:	2308      	movs	r3, #8
 80025fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	611a      	str	r2, [r3, #16]
          break;
 8002602:	e009      	b.n	8002618 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002604:	2308      	movs	r3, #8
 8002606:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	615a      	str	r2, [r3, #20]
          break;
 800260e:	e003      	b.n	8002618 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002610:	2300      	movs	r3, #0
 8002612:	623b      	str	r3, [r7, #32]
          break;
 8002614:	e000      	b.n	8002618 <HAL_GPIO_Init+0x130>
          break;
 8002616:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2bff      	cmp	r3, #255	; 0xff
 800261c:	d801      	bhi.n	8002622 <HAL_GPIO_Init+0x13a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	e001      	b.n	8002626 <HAL_GPIO_Init+0x13e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2bff      	cmp	r3, #255	; 0xff
 800262c:	d802      	bhi.n	8002634 <HAL_GPIO_Init+0x14c>
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	e002      	b.n	800263a <HAL_GPIO_Init+0x152>
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	3b08      	subs	r3, #8
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	210f      	movs	r1, #15
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	401a      	ands	r2, r3
 800264c:	6a39      	ldr	r1, [r7, #32]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	431a      	orrs	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80b1 	beq.w	80027ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002668:	4b4d      	ldr	r3, [pc, #308]	; (80027a0 <HAL_GPIO_Init+0x2b8>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	4a4c      	ldr	r2, [pc, #304]	; (80027a0 <HAL_GPIO_Init+0x2b8>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6193      	str	r3, [r2, #24]
 8002674:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <HAL_GPIO_Init+0x2b8>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002680:	4a48      	ldr	r2, [pc, #288]	; (80027a4 <HAL_GPIO_Init+0x2bc>)
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	3302      	adds	r3, #2
 8002688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	220f      	movs	r2, #15
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4013      	ands	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a40      	ldr	r2, [pc, #256]	; (80027a8 <HAL_GPIO_Init+0x2c0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d013      	beq.n	80026d4 <HAL_GPIO_Init+0x1ec>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a3f      	ldr	r2, [pc, #252]	; (80027ac <HAL_GPIO_Init+0x2c4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00d      	beq.n	80026d0 <HAL_GPIO_Init+0x1e8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a3e      	ldr	r2, [pc, #248]	; (80027b0 <HAL_GPIO_Init+0x2c8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d007      	beq.n	80026cc <HAL_GPIO_Init+0x1e4>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a3d      	ldr	r2, [pc, #244]	; (80027b4 <HAL_GPIO_Init+0x2cc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d101      	bne.n	80026c8 <HAL_GPIO_Init+0x1e0>
 80026c4:	2303      	movs	r3, #3
 80026c6:	e006      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026c8:	2304      	movs	r3, #4
 80026ca:	e004      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e002      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026d4:	2300      	movs	r3, #0
 80026d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d8:	f002 0203 	and.w	r2, r2, #3
 80026dc:	0092      	lsls	r2, r2, #2
 80026de:	4093      	lsls	r3, r2
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026e6:	492f      	ldr	r1, [pc, #188]	; (80027a4 <HAL_GPIO_Init+0x2bc>)
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002700:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	492c      	ldr	r1, [pc, #176]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	608b      	str	r3, [r1, #8]
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800270e:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	43db      	mvns	r3, r3
 8002716:	4928      	ldr	r1, [pc, #160]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002718:	4013      	ands	r3, r2
 800271a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d006      	beq.n	8002736 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002728:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	4922      	ldr	r1, [pc, #136]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
 8002734:	e006      	b.n	8002744 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	43db      	mvns	r3, r3
 800273e:	491e      	ldr	r1, [pc, #120]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002740:	4013      	ands	r3, r2
 8002742:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d006      	beq.n	800275e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	4918      	ldr	r1, [pc, #96]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
 800275c:	e006      	b.n	800276c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	43db      	mvns	r3, r3
 8002766:	4914      	ldr	r1, [pc, #80]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 8002768:	4013      	ands	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d021      	beq.n	80027bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	490e      	ldr	r1, [pc, #56]	; (80027b8 <HAL_GPIO_Init+0x2d0>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]
 8002784:	e021      	b.n	80027ca <HAL_GPIO_Init+0x2e2>
 8002786:	bf00      	nop
 8002788:	10320000 	.word	0x10320000
 800278c:	10310000 	.word	0x10310000
 8002790:	10220000 	.word	0x10220000
 8002794:	10210000 	.word	0x10210000
 8002798:	10120000 	.word	0x10120000
 800279c:	10110000 	.word	0x10110000
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40010000 	.word	0x40010000
 80027a8:	40010800 	.word	0x40010800
 80027ac:	40010c00 	.word	0x40010c00
 80027b0:	40011000 	.word	0x40011000
 80027b4:	40011400 	.word	0x40011400
 80027b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_GPIO_Init+0x304>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	4909      	ldr	r1, [pc, #36]	; (80027ec <HAL_GPIO_Init+0x304>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	3301      	adds	r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f47f ae8e 	bne.w	80024fc <HAL_GPIO_Init+0x14>
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	372c      	adds	r7, #44	; 0x2c
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	40010400 	.word	0x40010400

080027f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e001      	b.n	8002812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	807b      	strh	r3, [r7, #2]
 800282a:	4613      	mov	r3, r2
 800282c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800282e:	787b      	ldrb	r3, [r7, #1]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002834:	887a      	ldrh	r2, [r7, #2]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800283a:	e003      	b.n	8002844 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	041a      	lsls	r2, r3, #16
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	611a      	str	r2, [r3, #16]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002860:	887a      	ldrh	r2, [r7, #2]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	041a      	lsls	r2, r3, #16
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43d9      	mvns	r1, r3
 800286c:	887b      	ldrh	r3, [r7, #2]
 800286e:	400b      	ands	r3, r1
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	611a      	str	r2, [r3, #16]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002896:	4a05      	ldr	r2, [pc, #20]	; (80028ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fe76 	bl	8001590 <HAL_GPIO_EXTI_Callback>
  }
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40010400 	.word	0x40010400

080028b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e12b      	b.n	8002b1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff f9e8 	bl	8001cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2224      	movs	r2, #36	; 0x24
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0201 	bic.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002914:	f001 fd0e 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 8002918:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4a81      	ldr	r2, [pc, #516]	; (8002b24 <HAL_I2C_Init+0x274>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d807      	bhi.n	8002934 <HAL_I2C_Init+0x84>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4a80      	ldr	r2, [pc, #512]	; (8002b28 <HAL_I2C_Init+0x278>)
 8002928:	4293      	cmp	r3, r2
 800292a:	bf94      	ite	ls
 800292c:	2301      	movls	r3, #1
 800292e:	2300      	movhi	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e006      	b.n	8002942 <HAL_I2C_Init+0x92>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a7d      	ldr	r2, [pc, #500]	; (8002b2c <HAL_I2C_Init+0x27c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	bf94      	ite	ls
 800293c:	2301      	movls	r3, #1
 800293e:	2300      	movhi	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0e7      	b.n	8002b1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4a78      	ldr	r2, [pc, #480]	; (8002b30 <HAL_I2C_Init+0x280>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	430a      	orrs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a6a      	ldr	r2, [pc, #424]	; (8002b24 <HAL_I2C_Init+0x274>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d802      	bhi.n	8002984 <HAL_I2C_Init+0xd4>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	3301      	adds	r3, #1
 8002982:	e009      	b.n	8002998 <HAL_I2C_Init+0xe8>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	4a69      	ldr	r2, [pc, #420]	; (8002b34 <HAL_I2C_Init+0x284>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	3301      	adds	r3, #1
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	430b      	orrs	r3, r1
 800299e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	495c      	ldr	r1, [pc, #368]	; (8002b24 <HAL_I2C_Init+0x274>)
 80029b4:	428b      	cmp	r3, r1
 80029b6:	d819      	bhi.n	80029ec <HAL_I2C_Init+0x13c>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1e59      	subs	r1, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c6:	1c59      	adds	r1, r3, #1
 80029c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029cc:	400b      	ands	r3, r1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_I2C_Init+0x138>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1e59      	subs	r1, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e6:	e051      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 80029e8:	2304      	movs	r3, #4
 80029ea:	e04f      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d111      	bne.n	8002a18 <HAL_I2C_Init+0x168>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e58      	subs	r0, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	440b      	add	r3, r1
 8002a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	e012      	b.n	8002a3e <HAL_I2C_Init+0x18e>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1e58      	subs	r0, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	0099      	lsls	r1, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_I2C_Init+0x196>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e022      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10e      	bne.n	8002a6c <HAL_I2C_Init+0x1bc>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1e58      	subs	r0, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	440b      	add	r3, r1
 8002a5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a6a:	e00f      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1e58      	subs	r0, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	0099      	lsls	r1, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	6809      	ldr	r1, [r1, #0]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6911      	ldr	r1, [r2, #16]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68d2      	ldr	r2, [r2, #12]
 8002ac6:	4311      	orrs	r1, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	000186a0 	.word	0x000186a0
 8002b28:	001e847f 	.word	0x001e847f
 8002b2c:	003d08ff 	.word	0x003d08ff
 8002b30:	431bde83 	.word	0x431bde83
 8002b34:	10624dd3 	.word	0x10624dd3

08002b38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	461a      	mov	r2, r3
 8002b44:	460b      	mov	r3, r1
 8002b46:	817b      	strh	r3, [r7, #10]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7ff fade 	bl	800210c <HAL_GetTick>
 8002b50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	f040 80e0 	bne.w	8002d20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2319      	movs	r3, #25
 8002b66:	2201      	movs	r2, #1
 8002b68:	4970      	ldr	r1, [pc, #448]	; (8002d2c <HAL_I2C_Master_Transmit+0x1f4>)
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fde2 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b76:	2302      	movs	r3, #2
 8002b78:	e0d3      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_I2C_Master_Transmit+0x50>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e0cc      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d007      	beq.n	8002bae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2221      	movs	r2, #33	; 0x21
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2210      	movs	r2, #16
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	893a      	ldrh	r2, [r7, #8]
 8002bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4a50      	ldr	r2, [pc, #320]	; (8002d30 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bf0:	8979      	ldrh	r1, [r7, #10]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 fc32 	bl	8003460 <I2C_MasterRequestWrite>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e08d      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c1c:	e066      	b.n	8002cec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	6a39      	ldr	r1, [r7, #32]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fea0 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d107      	bne.n	8002c46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06b      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	781a      	ldrb	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d11b      	bne.n	8002cc0 <HAL_I2C_Master_Transmit+0x188>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d017      	beq.n	8002cc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	6a39      	ldr	r1, [r7, #32]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fe97 	bl	80039f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d107      	bne.n	8002ce8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e01a      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d194      	bne.n	8002c1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e000      	b.n	8002d22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	00100002 	.word	0x00100002
 8002d30:	ffff0000 	.word	0xffff0000

08002d34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08c      	sub	sp, #48	; 0x30
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	4608      	mov	r0, r1
 8002d3e:	4611      	mov	r1, r2
 8002d40:	461a      	mov	r2, r3
 8002d42:	4603      	mov	r3, r0
 8002d44:	817b      	strh	r3, [r7, #10]
 8002d46:	460b      	mov	r3, r1
 8002d48:	813b      	strh	r3, [r7, #8]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d52:	f7ff f9db 	bl	800210c <HAL_GetTick>
 8002d56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	f040 8244 	bne.w	80031ee <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	2319      	movs	r3, #25
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	4982      	ldr	r1, [pc, #520]	; (8002f78 <HAL_I2C_Mem_Read+0x244>)
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fcdf 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e237      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_I2C_Mem_Read+0x5a>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e230      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4bc>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d007      	beq.n	8002db4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2222      	movs	r2, #34	; 0x22
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2240      	movs	r2, #64	; 0x40
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002de4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a62      	ldr	r2, [pc, #392]	; (8002f7c <HAL_I2C_Mem_Read+0x248>)
 8002df4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002df6:	88f8      	ldrh	r0, [r7, #6]
 8002df8:	893a      	ldrh	r2, [r7, #8]
 8002dfa:	8979      	ldrh	r1, [r7, #10]
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	4603      	mov	r3, r0
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fbac 	bl	8003564 <I2C_RequestMemoryRead>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e1ec      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d113      	bne.n	8002e46 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e1c0      	b.n	80031c8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d11e      	bne.n	8002e8c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e5e:	b672      	cpsid	i
}
 8002e60:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e88:	b662      	cpsie	i
}
 8002e8a:	e035      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d11e      	bne.n	8002ed2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ea2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea4:	b672      	cpsid	i
}
 8002ea6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ecc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ece:	b662      	cpsie	i
}
 8002ed0:	e012      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ee0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ef8:	e166      	b.n	80031c8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	f200 811f 	bhi.w	8003142 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d123      	bne.n	8002f54 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 fdb9 	bl	8003a88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e167      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f52:	e139      	b.n	80031c8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d152      	bne.n	8003002 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f62:	2200      	movs	r2, #0
 8002f64:	4906      	ldr	r1, [pc, #24]	; (8002f80 <HAL_I2C_Mem_Read+0x24c>)
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fbe4 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e13c      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4bc>
 8002f76:	bf00      	nop
 8002f78:	00100002 	.word	0x00100002
 8002f7c:	ffff0000 	.word	0xffff0000
 8002f80:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f84:	b672      	cpsid	i
}
 8002f86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fca:	b662      	cpsie	i
}
 8002fcc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003000:	e0e2      	b.n	80031c8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003008:	2200      	movs	r2, #0
 800300a:	497b      	ldr	r1, [pc, #492]	; (80031f8 <HAL_I2C_Mem_Read+0x4c4>)
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fb91 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0e9      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800302c:	b672      	cpsid	i
}
 800302e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003062:	4b66      	ldr	r3, [pc, #408]	; (80031fc <HAL_I2C_Mem_Read+0x4c8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	08db      	lsrs	r3, r3, #3
 8003068:	4a65      	ldr	r2, [pc, #404]	; (8003200 <HAL_I2C_Mem_Read+0x4cc>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0a1a      	lsrs	r2, r3, #8
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	00da      	lsls	r2, r3, #3
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	3b01      	subs	r3, #1
 8003080:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d118      	bne.n	80030ba <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f043 0220 	orr.w	r2, r3, #32
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030aa:	b662      	cpsie	i
}
 80030ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e09a      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d1d9      	bne.n	800307c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800310a:	b662      	cpsie	i
}
 800310c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003140:	e042      	b.n	80031c8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003144:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fc9e 	bl	8003a88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e04c      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b04      	cmp	r3, #4
 8003194:	d118      	bne.n	80031c8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f47f ae94 	bne.w	8002efa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e000      	b.n	80031f0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80031ee:	2302      	movs	r3, #2
  }
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3728      	adds	r7, #40	; 0x28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	00010004 	.word	0x00010004
 80031fc:	200000bc 	.word	0x200000bc
 8003200:	14f8b589 	.word	0x14f8b589

08003204 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	460b      	mov	r3, r1
 8003212:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003214:	f7fe ff7a 	bl	800210c <HAL_GetTick>
 8003218:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b20      	cmp	r3, #32
 8003228:	f040 8111 	bne.w	800344e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2319      	movs	r3, #25
 8003232:	2201      	movs	r2, #1
 8003234:	4988      	ldr	r1, [pc, #544]	; (8003458 <HAL_I2C_IsDeviceReady+0x254>)
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 fa7c 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003242:	2302      	movs	r3, #2
 8003244:	e104      	b.n	8003450 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_I2C_IsDeviceReady+0x50>
 8003250:	2302      	movs	r3, #2
 8003252:	e0fd      	b.n	8003450 <HAL_I2C_IsDeviceReady+0x24c>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d007      	beq.n	800327a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003288:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2224      	movs	r2, #36	; 0x24
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a70      	ldr	r2, [pc, #448]	; (800345c <HAL_I2C_IsDeviceReady+0x258>)
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fa3a 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d4:	d103      	bne.n	80032de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e0b6      	b.n	8003450 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80032f2:	f7fe ff0b 	bl	800210c <HAL_GetTick>
 80032f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b02      	cmp	r3, #2
 8003304:	bf0c      	ite	eq
 8003306:	2301      	moveq	r3, #1
 8003308:	2300      	movne	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331c:	bf0c      	ite	eq
 800331e:	2301      	moveq	r3, #1
 8003320:	2300      	movne	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003326:	e025      	b.n	8003374 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003328:	f7fe fef0 	bl	800210c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d302      	bcc.n	800333e <HAL_I2C_IsDeviceReady+0x13a>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d103      	bne.n	8003346 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	22a0      	movs	r2, #160	; 0xa0
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b02      	cmp	r3, #2
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2ba0      	cmp	r3, #160	; 0xa0
 800337e:	d005      	beq.n	800338c <HAL_I2C_IsDeviceReady+0x188>
 8003380:	7dfb      	ldrb	r3, [r7, #23]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d102      	bne.n	800338c <HAL_I2C_IsDeviceReady+0x188>
 8003386:	7dbb      	ldrb	r3, [r7, #22]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0cd      	beq.n	8003328 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d129      	bne.n	80033f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	2319      	movs	r3, #25
 80033ce:	2201      	movs	r2, #1
 80033d0:	4921      	ldr	r1, [pc, #132]	; (8003458 <HAL_I2C_IsDeviceReady+0x254>)
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f9ae 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e036      	b.n	8003450 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e02c      	b.n	8003450 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003404:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800340e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2319      	movs	r3, #25
 8003416:	2201      	movs	r2, #1
 8003418:	490f      	ldr	r1, [pc, #60]	; (8003458 <HAL_I2C_IsDeviceReady+0x254>)
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f98a 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e012      	b.n	8003450 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	3301      	adds	r3, #1
 800342e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	429a      	cmp	r2, r3
 8003436:	f4ff af32 	bcc.w	800329e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800344e:	2302      	movs	r3, #2
  }
}
 8003450:	4618      	mov	r0, r3
 8003452:	3720      	adds	r7, #32
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	00100002 	.word	0x00100002
 800345c:	ffff0000 	.word	0xffff0000

08003460 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	460b      	mov	r3, r1
 800346e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d006      	beq.n	800348a <I2C_MasterRequestWrite+0x2a>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d003      	beq.n	800348a <I2C_MasterRequestWrite+0x2a>
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003488:	d108      	bne.n	800349c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e00b      	b.n	80034b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	2b12      	cmp	r3, #18
 80034a2:	d107      	bne.n	80034b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f937 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00d      	beq.n	80034e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034da:	d103      	bne.n	80034e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e035      	b.n	8003554 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034f0:	d108      	bne.n	8003504 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034f2:	897b      	ldrh	r3, [r7, #10]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003500:	611a      	str	r2, [r3, #16]
 8003502:	e01b      	b.n	800353c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003504:	897b      	ldrh	r3, [r7, #10]
 8003506:	11db      	asrs	r3, r3, #7
 8003508:	b2db      	uxtb	r3, r3
 800350a:	f003 0306 	and.w	r3, r3, #6
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f063 030f 	orn	r3, r3, #15
 8003514:	b2da      	uxtb	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	490e      	ldr	r1, [pc, #56]	; (800355c <I2C_MasterRequestWrite+0xfc>)
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f980 	bl	8003828 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e010      	b.n	8003554 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003532:	897b      	ldrh	r3, [r7, #10]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4907      	ldr	r1, [pc, #28]	; (8003560 <I2C_MasterRequestWrite+0x100>)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f970 	bl	8003828 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	00010008 	.word	0x00010008
 8003560:	00010002 	.word	0x00010002

08003564 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	4608      	mov	r0, r1
 800356e:	4611      	mov	r1, r2
 8003570:	461a      	mov	r2, r3
 8003572:	4603      	mov	r3, r0
 8003574:	817b      	strh	r3, [r7, #10]
 8003576:	460b      	mov	r3, r1
 8003578:	813b      	strh	r3, [r7, #8]
 800357a:	4613      	mov	r3, r2
 800357c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800358c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800359c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f8c2 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c4:	d103      	bne.n	80035ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e0aa      	b.n	8003728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035d2:	897b      	ldrh	r3, [r7, #10]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	6a3a      	ldr	r2, [r7, #32]
 80035e6:	4952      	ldr	r1, [pc, #328]	; (8003730 <I2C_RequestMemoryRead+0x1cc>)
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f91d 	bl	8003828 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e097      	b.n	8003728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800360e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003610:	6a39      	ldr	r1, [r7, #32]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f9a8 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	2b04      	cmp	r3, #4
 8003624:	d107      	bne.n	8003636 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003634:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e076      	b.n	8003728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d105      	bne.n	800364c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003640:	893b      	ldrh	r3, [r7, #8]
 8003642:	b2da      	uxtb	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	611a      	str	r2, [r3, #16]
 800364a:	e021      	b.n	8003690 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800364c:	893b      	ldrh	r3, [r7, #8]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	b29b      	uxth	r3, r3
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365c:	6a39      	ldr	r1, [r7, #32]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f982 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00d      	beq.n	8003686 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b04      	cmp	r3, #4
 8003670:	d107      	bne.n	8003682 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003680:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e050      	b.n	8003728 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003686:	893b      	ldrh	r3, [r7, #8]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003692:	6a39      	ldr	r1, [r7, #32]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f967 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00d      	beq.n	80036bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d107      	bne.n	80036b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e035      	b.n	8003728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f82b 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00d      	beq.n	8003700 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f2:	d103      	bne.n	80036fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e013      	b.n	8003728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003700:	897b      	ldrh	r3, [r7, #10]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	b2da      	uxtb	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	6a3a      	ldr	r2, [r7, #32]
 8003714:	4906      	ldr	r1, [pc, #24]	; (8003730 <I2C_RequestMemoryRead+0x1cc>)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f886 	bl	8003828 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	00010002 	.word	0x00010002

08003734 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003744:	e048      	b.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d044      	beq.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374e:	f7fe fcdd 	bl	800210c <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d302      	bcc.n	8003764 <I2C_WaitOnFlagUntilTimeout+0x30>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d139      	bne.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	0c1b      	lsrs	r3, r3, #16
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b01      	cmp	r3, #1
 800376c:	d10d      	bne.n	800378a <I2C_WaitOnFlagUntilTimeout+0x56>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	43da      	mvns	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4013      	ands	r3, r2
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf0c      	ite	eq
 8003780:	2301      	moveq	r3, #1
 8003782:	2300      	movne	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	461a      	mov	r2, r3
 8003788:	e00c      	b.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	43da      	mvns	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4013      	ands	r3, r2
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d116      	bne.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	f043 0220 	orr.w	r2, r3, #32
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e023      	b.n	8003820 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	0c1b      	lsrs	r3, r3, #16
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d10d      	bne.n	80037fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	43da      	mvns	r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	4013      	ands	r3, r2
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	e00c      	b.n	8003818 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	43da      	mvns	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	4013      	ands	r3, r2
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	429a      	cmp	r2, r3
 800381c:	d093      	beq.n	8003746 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003836:	e071      	b.n	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003846:	d123      	bne.n	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003856:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003860:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	f043 0204 	orr.w	r2, r3, #4
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e067      	b.n	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d041      	beq.n	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003898:	f7fe fc38 	bl	800210c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d302      	bcc.n	80038ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d136      	bne.n	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d10c      	bne.n	80038d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	43da      	mvns	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4013      	ands	r3, r2
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	bf14      	ite	ne
 80038ca:	2301      	movne	r3, #1
 80038cc:	2300      	moveq	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	e00b      	b.n	80038ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	43da      	mvns	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	4013      	ands	r3, r2
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf14      	ite	ne
 80038e4:	2301      	movne	r3, #1
 80038e6:	2300      	moveq	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f043 0220 	orr.w	r2, r3, #32
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e021      	b.n	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	0c1b      	lsrs	r3, r3, #16
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b01      	cmp	r3, #1
 8003924:	d10c      	bne.n	8003940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	43da      	mvns	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	4013      	ands	r3, r2
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e00b      	b.n	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	43da      	mvns	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4013      	ands	r3, r2
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	bf14      	ite	ne
 8003952:	2301      	movne	r3, #1
 8003954:	2300      	moveq	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	f47f af6d 	bne.w	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003974:	e034      	b.n	80039e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f8e3 	bl	8003b42 <I2C_IsAcknowledgeFailed>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e034      	b.n	80039f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d028      	beq.n	80039e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fe fbbd 	bl	800210c <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d11d      	bne.n	80039e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b80      	cmp	r3, #128	; 0x80
 80039b0:	d016      	beq.n	80039e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e007      	b.n	80039f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	2b80      	cmp	r3, #128	; 0x80
 80039ec:	d1c3      	bne.n	8003976 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a04:	e034      	b.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f89b 	bl	8003b42 <I2C_IsAcknowledgeFailed>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e034      	b.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d028      	beq.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1e:	f7fe fb75 	bl	800210c <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d302      	bcc.n	8003a34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d11d      	bne.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d016      	beq.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	f043 0220 	orr.w	r2, r3, #32
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e007      	b.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d1c3      	bne.n	8003a06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a94:	e049      	b.n	8003b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d119      	bne.n	8003ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0210 	mvn.w	r2, #16
 8003aac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e030      	b.n	8003b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad8:	f7fe fb18 	bl	800210c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d302      	bcc.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d11d      	bne.n	8003b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d016      	beq.n	8003b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f043 0220 	orr.w	r2, r3, #32
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e007      	b.n	8003b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d1ae      	bne.n	8003a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b58:	d11b      	bne.n	8003b92 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b62:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f043 0204 	orr.w	r2, r3, #4
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
	...

08003ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e272      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8087 	beq.w	8003cce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bc0:	4b92      	ldr	r3, [pc, #584]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d00c      	beq.n	8003be6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bcc:	4b8f      	ldr	r3, [pc, #572]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d112      	bne.n	8003bfe <HAL_RCC_OscConfig+0x5e>
 8003bd8:	4b8c      	ldr	r3, [pc, #560]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be4:	d10b      	bne.n	8003bfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be6:	4b89      	ldr	r3, [pc, #548]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d06c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x12c>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d168      	bne.n	8003ccc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e24c      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x76>
 8003c08:	4b80      	ldr	r3, [pc, #512]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a7f      	ldr	r2, [pc, #508]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	e02e      	b.n	8003c74 <HAL_RCC_OscConfig+0xd4>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x98>
 8003c1e:	4b7b      	ldr	r3, [pc, #492]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a7a      	ldr	r2, [pc, #488]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b78      	ldr	r3, [pc, #480]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a77      	ldr	r2, [pc, #476]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e01d      	b.n	8003c74 <HAL_RCC_OscConfig+0xd4>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCC_OscConfig+0xbc>
 8003c42:	4b72      	ldr	r3, [pc, #456]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a71      	ldr	r2, [pc, #452]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	4b6f      	ldr	r3, [pc, #444]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6e      	ldr	r2, [pc, #440]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCC_OscConfig+0xd4>
 8003c5c:	4b6b      	ldr	r3, [pc, #428]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a6a      	ldr	r2, [pc, #424]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4b68      	ldr	r3, [pc, #416]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a67      	ldr	r2, [pc, #412]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fe fa46 	bl	800210c <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fe fa42 	bl	800210c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e200      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	4b5d      	ldr	r3, [pc, #372]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0xe4>
 8003ca2:	e014      	b.n	8003cce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fa32 	bl	800210c <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cac:	f7fe fa2e 	bl	800210c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	; 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e1ec      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cbe:	4b53      	ldr	r3, [pc, #332]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x10c>
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d063      	beq.n	8003da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cda:	4b4c      	ldr	r3, [pc, #304]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ce6:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d11c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x18c>
 8003cf2:	4b46      	ldr	r3, [pc, #280]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d116      	bne.n	8003d2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	4b43      	ldr	r3, [pc, #268]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_RCC_OscConfig+0x176>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e1c0      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d16:	4b3d      	ldr	r3, [pc, #244]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4939      	ldr	r1, [pc, #228]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2a:	e03a      	b.n	8003da2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d34:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fe f9e7 	bl	800210c <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d42:	f7fe f9e3 	bl	800210c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1a1      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d54:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b2a      	ldr	r3, [pc, #168]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4927      	ldr	r1, [pc, #156]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]
 8003d74:	e015      	b.n	8003da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d76:	4b26      	ldr	r3, [pc, #152]	; (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7fe f9c6 	bl	800210c <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d84:	f7fe f9c2 	bl	800210c <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e180      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d96:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d03a      	beq.n	8003e24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d019      	beq.n	8003dea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dbc:	f7fe f9a6 	bl	800210c <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc4:	f7fe f9a2 	bl	800210c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e160      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003de2:	2001      	movs	r0, #1
 8003de4:	f000 face 	bl	8004384 <RCC_Delay>
 8003de8:	e01c      	b.n	8003e24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dea:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df0:	f7fe f98c 	bl	800210c <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df6:	e00f      	b.n	8003e18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df8:	f7fe f988 	bl	800210c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d908      	bls.n	8003e18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e146      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	42420000 	.word	0x42420000
 8003e14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e18:	4b92      	ldr	r3, [pc, #584]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e9      	bne.n	8003df8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80a6 	beq.w	8003f7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e32:	2300      	movs	r3, #0
 8003e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e36:	4b8b      	ldr	r3, [pc, #556]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10d      	bne.n	8003e5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	4a87      	ldr	r2, [pc, #540]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	61d3      	str	r3, [r2, #28]
 8003e4e:	4b85      	ldr	r3, [pc, #532]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5e:	4b82      	ldr	r3, [pc, #520]	; (8004068 <HAL_RCC_OscConfig+0x4c8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d118      	bne.n	8003e9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e6a:	4b7f      	ldr	r3, [pc, #508]	; (8004068 <HAL_RCC_OscConfig+0x4c8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a7e      	ldr	r2, [pc, #504]	; (8004068 <HAL_RCC_OscConfig+0x4c8>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e76:	f7fe f949 	bl	800210c <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7e:	f7fe f945 	bl	800210c <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b64      	cmp	r3, #100	; 0x64
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e103      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	4b75      	ldr	r3, [pc, #468]	; (8004068 <HAL_RCC_OscConfig+0x4c8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x312>
 8003ea4:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4a6e      	ldr	r2, [pc, #440]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6213      	str	r3, [r2, #32]
 8003eb0:	e02d      	b.n	8003f0e <HAL_RCC_OscConfig+0x36e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x334>
 8003eba:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4a69      	ldr	r2, [pc, #420]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6213      	str	r3, [r2, #32]
 8003ec6:	4b67      	ldr	r3, [pc, #412]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	4a66      	ldr	r2, [pc, #408]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	6213      	str	r3, [r2, #32]
 8003ed2:	e01c      	b.n	8003f0e <HAL_RCC_OscConfig+0x36e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	d10c      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x356>
 8003edc:	4b61      	ldr	r3, [pc, #388]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	4a60      	ldr	r2, [pc, #384]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ee2:	f043 0304 	orr.w	r3, r3, #4
 8003ee6:	6213      	str	r3, [r2, #32]
 8003ee8:	4b5e      	ldr	r3, [pc, #376]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4a5d      	ldr	r2, [pc, #372]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6213      	str	r3, [r2, #32]
 8003ef4:	e00b      	b.n	8003f0e <HAL_RCC_OscConfig+0x36e>
 8003ef6:	4b5b      	ldr	r3, [pc, #364]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	4a5a      	ldr	r2, [pc, #360]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	6213      	str	r3, [r2, #32]
 8003f02:	4b58      	ldr	r3, [pc, #352]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	4a57      	ldr	r2, [pc, #348]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	f023 0304 	bic.w	r3, r3, #4
 8003f0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d015      	beq.n	8003f42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f16:	f7fe f8f9 	bl	800210c <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fe f8f5 	bl	800210c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e0b1      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f34:	4b4b      	ldr	r3, [pc, #300]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ee      	beq.n	8003f1e <HAL_RCC_OscConfig+0x37e>
 8003f40:	e014      	b.n	8003f6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f42:	f7fe f8e3 	bl	800210c <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fe f8df 	bl	800210c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e09b      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f60:	4b40      	ldr	r3, [pc, #256]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ee      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d105      	bne.n	8003f7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f72:	4b3c      	ldr	r3, [pc, #240]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	4a3b      	ldr	r2, [pc, #236]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 8087 	beq.w	8004096 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f88:	4b36      	ldr	r3, [pc, #216]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d061      	beq.n	8004058 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d146      	bne.n	800402a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9c:	4b33      	ldr	r3, [pc, #204]	; (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fe f8b3 	bl	800210c <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fe f8af 	bl	800210c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e06d      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fbc:	4b29      	ldr	r3, [pc, #164]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd0:	d108      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fd2:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4921      	ldr	r1, [pc, #132]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe4:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a19      	ldr	r1, [r3, #32]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	491b      	ldr	r1, [pc, #108]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	; (800406c <HAL_RCC_OscConfig+0x4cc>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004002:	f7fe f883 	bl	800210c <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400a:	f7fe f87f 	bl	800210c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e03d      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x46a>
 8004028:	e035      	b.n	8004096 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <HAL_RCC_OscConfig+0x4cc>)
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fe f86c 	bl	800210c <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7fe f868 	bl	800210c <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e026      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x498>
 8004056:	e01e      	b.n	8004096 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d107      	bne.n	8004070 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e019      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
 8004064:	40021000 	.word	0x40021000
 8004068:	40007000 	.word	0x40007000
 800406c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <HAL_RCC_OscConfig+0x500>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	429a      	cmp	r2, r3
 8004082:	d106      	bne.n	8004092 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408e:	429a      	cmp	r2, r3
 8004090:	d001      	beq.n	8004096 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40021000 	.word	0x40021000

080040a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0d0      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b8:	4b6a      	ldr	r3, [pc, #424]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d910      	bls.n	80040e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b67      	ldr	r3, [pc, #412]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 0207 	bic.w	r2, r3, #7
 80040ce:	4965      	ldr	r1, [pc, #404]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b63      	ldr	r3, [pc, #396]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0b8      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004100:	4b59      	ldr	r3, [pc, #356]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4a58      	ldr	r2, [pc, #352]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004106:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800410a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004118:	4b53      	ldr	r3, [pc, #332]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a52      	ldr	r2, [pc, #328]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800411e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004122:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b50      	ldr	r3, [pc, #320]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	494d      	ldr	r1, [pc, #308]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004132:	4313      	orrs	r3, r2
 8004134:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d040      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d115      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e07f      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004162:	4b41      	ldr	r3, [pc, #260]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e073      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004172:	4b3d      	ldr	r3, [pc, #244]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e06b      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004182:	4b39      	ldr	r3, [pc, #228]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f023 0203 	bic.w	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	4936      	ldr	r1, [pc, #216]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004194:	f7fd ffba 	bl	800210c <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419c:	f7fd ffb6 	bl	800210c <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e053      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	4b2d      	ldr	r3, [pc, #180]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 020c 	and.w	r2, r3, #12
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d1eb      	bne.n	800419c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c4:	4b27      	ldr	r3, [pc, #156]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d210      	bcs.n	80041f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b24      	ldr	r3, [pc, #144]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 0207 	bic.w	r2, r3, #7
 80041da:	4922      	ldr	r1, [pc, #136]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e032      	b.n	800425a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4916      	ldr	r1, [pc, #88]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800420e:	4313      	orrs	r3, r2
 8004210:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800421e:	4b12      	ldr	r3, [pc, #72]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	490e      	ldr	r1, [pc, #56]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	4313      	orrs	r3, r2
 8004230:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004232:	f000 f821 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 8004236:	4602      	mov	r2, r0
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	490a      	ldr	r1, [pc, #40]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	5ccb      	ldrb	r3, [r1, r3]
 8004246:	fa22 f303 	lsr.w	r3, r2, r3
 800424a:	4a09      	ldr	r2, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x1cc>)
 800424c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCC_ClockConfig+0x1d0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd ff18 	bl	8002088 <HAL_InitTick>

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40022000 	.word	0x40022000
 8004268:	40021000 	.word	0x40021000
 800426c:	08006804 	.word	0x08006804
 8004270:	200000bc 	.word	0x200000bc
 8004274:	200000c0 	.word	0x200000c0

08004278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	2300      	movs	r3, #0
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	2300      	movs	r3, #0
 800428c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004292:	4b1e      	ldr	r3, [pc, #120]	; (800430c <HAL_RCC_GetSysClockFreq+0x94>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 030c 	and.w	r3, r3, #12
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d002      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0x30>
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d003      	beq.n	80042ae <HAL_RCC_GetSysClockFreq+0x36>
 80042a6:	e027      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042a8:	4b19      	ldr	r3, [pc, #100]	; (8004310 <HAL_RCC_GetSysClockFreq+0x98>)
 80042aa:	613b      	str	r3, [r7, #16]
      break;
 80042ac:	e027      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	0c9b      	lsrs	r3, r3, #18
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	4a17      	ldr	r2, [pc, #92]	; (8004314 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042b8:	5cd3      	ldrb	r3, [r2, r3]
 80042ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d010      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <HAL_RCC_GetSysClockFreq+0x94>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	0c5b      	lsrs	r3, r3, #17
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	4a11      	ldr	r2, [pc, #68]	; (8004318 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042d2:	5cd3      	ldrb	r3, [r2, r3]
 80042d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a0d      	ldr	r2, [pc, #52]	; (8004310 <HAL_RCC_GetSysClockFreq+0x98>)
 80042da:	fb03 f202 	mul.w	r2, r3, r2
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e004      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0c      	ldr	r2, [pc, #48]	; (800431c <HAL_RCC_GetSysClockFreq+0xa4>)
 80042ec:	fb02 f303 	mul.w	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	613b      	str	r3, [r7, #16]
      break;
 80042f6:	e002      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetSysClockFreq+0x98>)
 80042fa:	613b      	str	r3, [r7, #16]
      break;
 80042fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fe:	693b      	ldr	r3, [r7, #16]
}
 8004300:	4618      	mov	r0, r3
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40021000 	.word	0x40021000
 8004310:	007a1200 	.word	0x007a1200
 8004314:	0800681c 	.word	0x0800681c
 8004318:	0800682c 	.word	0x0800682c
 800431c:	003d0900 	.word	0x003d0900

08004320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004324:	4b02      	ldr	r3, [pc, #8]	; (8004330 <HAL_RCC_GetHCLKFreq+0x10>)
 8004326:	681b      	ldr	r3, [r3, #0]
}
 8004328:	4618      	mov	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	200000bc 	.word	0x200000bc

08004334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004338:	f7ff fff2 	bl	8004320 <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4903      	ldr	r1, [pc, #12]	; (8004358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40021000 	.word	0x40021000
 8004358:	08006814 	.word	0x08006814

0800435c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004360:	f7ff ffde 	bl	8004320 <HAL_RCC_GetHCLKFreq>
 8004364:	4602      	mov	r2, r0
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	0adb      	lsrs	r3, r3, #11
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	4903      	ldr	r1, [pc, #12]	; (8004380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004372:	5ccb      	ldrb	r3, [r1, r3]
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004378:	4618      	mov	r0, r3
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021000 	.word	0x40021000
 8004380:	08006814 	.word	0x08006814

08004384 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800438c:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <RCC_Delay+0x34>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <RCC_Delay+0x38>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	0a5b      	lsrs	r3, r3, #9
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043a0:	bf00      	nop
  }
  while (Delay --);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1e5a      	subs	r2, r3, #1
 80043a6:	60fa      	str	r2, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f9      	bne.n	80043a0 <RCC_Delay+0x1c>
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr
 80043b8:	200000bc 	.word	0x200000bc
 80043bc:	10624dd3 	.word	0x10624dd3

080043c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e042      	b.n	8004458 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd fc9e 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2224      	movs	r2, #36	; 0x24
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fdc5 	bl	8004f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	; 0x28
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b20      	cmp	r3, #32
 800447e:	d16d      	bne.n	800455c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_UART_Transmit+0x2c>
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e066      	b.n	800455e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2221      	movs	r2, #33	; 0x21
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800449e:	f7fd fe35 	bl	800210c <HAL_GetTick>
 80044a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	88fa      	ldrh	r2, [r7, #6]
 80044a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	88fa      	ldrh	r2, [r7, #6]
 80044ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b8:	d108      	bne.n	80044cc <HAL_UART_Transmit+0x6c>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d104      	bne.n	80044cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	e003      	b.n	80044d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044d4:	e02a      	b.n	800452c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2200      	movs	r2, #0
 80044de:	2180      	movs	r1, #128	; 0x80
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fb14 	bl	8004b0e <UART_WaitOnFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e036      	b.n	800455e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004504:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	3302      	adds	r3, #2
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	e007      	b.n	800451e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	781a      	ldrb	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	3301      	adds	r3, #1
 800451c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1cf      	bne.n	80044d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2200      	movs	r2, #0
 800453e:	2140      	movs	r1, #64	; 0x40
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 fae4 	bl	8004b0e <UART_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e006      	b.n	800455e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	e000      	b.n	800455e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800455c:	2302      	movs	r3, #2
  }
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	4613      	mov	r3, r2
 8004572:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b20      	cmp	r3, #32
 800457e:	d112      	bne.n	80045a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_UART_Receive_IT+0x26>
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e00b      	b.n	80045a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	461a      	mov	r2, r3
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fb24 	bl	8004bea <UART_Start_Receive_IT>
 80045a2:	4603      	mov	r3, r0
 80045a4:	e000      	b.n	80045a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b0ba      	sub	sp, #232	; 0xe8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045dc:	2300      	movs	r3, #0
 80045de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10f      	bne.n	8004616 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <HAL_UART_IRQHandler+0x66>
 8004602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fc01 	bl	8004e16 <UART_Receive_IT>
      return;
 8004614:	e25b      	b.n	8004ace <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80de 	beq.w	80047dc <HAL_UART_IRQHandler+0x22c>
 8004620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800462c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004630:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80d1 	beq.w	80047dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_UART_IRQHandler+0xae>
 8004646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800464a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	f043 0201 	orr.w	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_UART_IRQHandler+0xd2>
 800466a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	f043 0202 	orr.w	r2, r3, #2
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <HAL_UART_IRQHandler+0xf6>
 800468e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	f043 0204 	orr.w	r2, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d011      	beq.n	80046d6 <HAL_UART_IRQHandler+0x126>
 80046b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d105      	bne.n	80046ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	f043 0208 	orr.w	r2, r3, #8
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 81f2 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d008      	beq.n	80046fe <HAL_UART_IRQHandler+0x14e>
 80046ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fb8c 	bl	8004e16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf14      	ite	ne
 800470c:	2301      	movne	r3, #1
 800470e:	2300      	moveq	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d103      	bne.n	800472a <HAL_UART_IRQHandler+0x17a>
 8004722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d04f      	beq.n	80047ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fa96 	bl	8004c5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d041      	beq.n	80047c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3314      	adds	r3, #20
 8004744:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004754:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3314      	adds	r3, #20
 8004766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800476a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800476e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1d9      	bne.n	800473e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d013      	beq.n	80047ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	4a7e      	ldr	r2, [pc, #504]	; (8004990 <HAL_UART_IRQHandler+0x3e0>)
 8004798:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fd fe2a 	bl	80023f8 <HAL_DMA_Abort_IT>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d016      	beq.n	80047d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047b4:	4610      	mov	r0, r2
 80047b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	e00e      	b.n	80047d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f993 	bl	8004ae6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c0:	e00a      	b.n	80047d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f98f 	bl	8004ae6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c8:	e006      	b.n	80047d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f98b 	bl	8004ae6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80047d6:	e175      	b.n	8004ac4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	bf00      	nop
    return;
 80047da:	e173      	b.n	8004ac4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	f040 814f 	bne.w	8004a84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 8148 	beq.w	8004a84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8141 	beq.w	8004a84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004802:	2300      	movs	r3, #0
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 80b6 	beq.w	8004994 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004834:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8145 	beq.w	8004ac8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004846:	429a      	cmp	r2, r3
 8004848:	f080 813e 	bcs.w	8004ac8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004852:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b20      	cmp	r3, #32
 800485c:	f000 8088 	beq.w	8004970 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004876:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800487a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800487e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800488c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004890:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004898:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800489c:	e841 2300 	strex	r3, r2, [r1]
 80048a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1d9      	bne.n	8004860 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3314      	adds	r3, #20
 80048b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e1      	bne.n	80048ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3314      	adds	r3, #20
 80048ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3314      	adds	r3, #20
 8004908:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800490c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800490e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004912:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800491a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e3      	bne.n	80048e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800493e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004940:	f023 0310 	bic.w	r3, r3, #16
 8004944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	330c      	adds	r3, #12
 800494e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004952:	65ba      	str	r2, [r7, #88]	; 0x58
 8004954:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004958:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e3      	bne.n	800492e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	4618      	mov	r0, r3
 800496c:	f7fd fd09 	bl	8002382 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800497e:	b29b      	uxth	r3, r3
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	b29b      	uxth	r3, r3
 8004984:	4619      	mov	r1, r3
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f8b6 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800498c:	e09c      	b.n	8004ac8 <HAL_UART_IRQHandler+0x518>
 800498e:	bf00      	nop
 8004990:	08004d21 	.word	0x08004d21
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800499c:	b29b      	uxth	r3, r3
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 808e 	beq.w	8004acc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8089 	beq.w	8004acc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	330c      	adds	r3, #12
 80049da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049de:	647a      	str	r2, [r7, #68]	; 0x44
 80049e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e3      	bne.n	80049ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3314      	adds	r3, #20
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	623b      	str	r3, [r7, #32]
   return(result);
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3314      	adds	r3, #20
 8004a12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a16:	633a      	str	r2, [r7, #48]	; 0x30
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e3      	bne.n	80049f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0310 	bic.w	r3, r3, #16
 8004a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	330c      	adds	r3, #12
 8004a58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a5c:	61fa      	str	r2, [r7, #28]
 8004a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	69b9      	ldr	r1, [r7, #24]
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	617b      	str	r3, [r7, #20]
   return(result);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e3      	bne.n	8004a38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f83b 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a82:	e023      	b.n	8004acc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d009      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x4f4>
 8004a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f953 	bl	8004d48 <UART_Transmit_IT>
    return;
 8004aa2:	e014      	b.n	8004ace <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00e      	beq.n	8004ace <HAL_UART_IRQHandler+0x51e>
 8004ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f992 	bl	8004de6 <UART_EndTransmit_IT>
    return;
 8004ac2:	e004      	b.n	8004ace <HAL_UART_IRQHandler+0x51e>
    return;
 8004ac4:	bf00      	nop
 8004ac6:	e002      	b.n	8004ace <HAL_UART_IRQHandler+0x51e>
      return;
 8004ac8:	bf00      	nop
 8004aca:	e000      	b.n	8004ace <HAL_UART_IRQHandler+0x51e>
      return;
 8004acc:	bf00      	nop
  }
}
 8004ace:	37e8      	adds	r7, #232	; 0xe8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr

08004af8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr

08004b0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b090      	sub	sp, #64	; 0x40
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1e:	e050      	b.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d04c      	beq.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x30>
 8004b2e:	f7fd faed 	bl	800210c <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d241      	bcs.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b5e:	637a      	str	r2, [r7, #52]	; 0x34
 8004b60:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e5      	bne.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3314      	adds	r3, #20
 8004b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	613b      	str	r3, [r7, #16]
   return(result);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3314      	adds	r3, #20
 8004b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b92:	623a      	str	r2, [r7, #32]
 8004b94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	69f9      	ldr	r1, [r7, #28]
 8004b98:	6a3a      	ldr	r2, [r7, #32]
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e5      	bne.n	8004b72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e00f      	b.n	8004be2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	bf0c      	ite	eq
 8004bd2:	2301      	moveq	r3, #1
 8004bd4:	2300      	movne	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d09f      	beq.n	8004b20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3740      	adds	r7, #64	; 0x40
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b085      	sub	sp, #20
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	88fa      	ldrh	r2, [r7, #6]
 8004c02:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	88fa      	ldrh	r2, [r7, #6]
 8004c08:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2222      	movs	r2, #34	; 0x22
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c2e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0220 	orr.w	r2, r2, #32
 8004c4e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b095      	sub	sp, #84	; 0x54
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	330c      	adds	r3, #12
 8004c6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6e:	e853 3f00 	ldrex	r3, [r3]
 8004c72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c84:	643a      	str	r2, [r7, #64]	; 0x40
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c8c:	e841 2300 	strex	r3, r2, [r1]
 8004c90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e5      	bne.n	8004c64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3314      	adds	r3, #20
 8004c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	e853 3f00 	ldrex	r3, [r3]
 8004ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e5      	bne.n	8004c98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d119      	bne.n	8004d08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 0310 	bic.w	r3, r3, #16
 8004cea:	647b      	str	r3, [r7, #68]	; 0x44
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cf4:	61ba      	str	r2, [r7, #24]
 8004cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6979      	ldr	r1, [r7, #20]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	613b      	str	r3, [r7, #16]
   return(result);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e5      	bne.n	8004cd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d16:	bf00      	nop
 8004d18:	3754      	adds	r7, #84	; 0x54
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f7ff fed3 	bl	8004ae6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b21      	cmp	r3, #33	; 0x21
 8004d5a:	d13e      	bne.n	8004dda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d64:	d114      	bne.n	8004d90 <UART_Transmit_IT+0x48>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d110      	bne.n	8004d90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	1c9a      	adds	r2, r3, #2
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	621a      	str	r2, [r3, #32]
 8004d8e:	e008      	b.n	8004da2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	1c59      	adds	r1, r3, #1
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6211      	str	r1, [r2, #32]
 8004d9a:	781a      	ldrb	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	4619      	mov	r1, r3
 8004db0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10f      	bne.n	8004dd6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e000      	b.n	8004ddc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
  }
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff fe64 	bl	8004ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b08c      	sub	sp, #48	; 0x30
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b22      	cmp	r3, #34	; 0x22
 8004e28:	f040 80ae 	bne.w	8004f88 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e34:	d117      	bne.n	8004e66 <UART_Receive_IT+0x50>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d113      	bne.n	8004e66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	1c9a      	adds	r2, r3, #2
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	629a      	str	r2, [r3, #40]	; 0x28
 8004e64:	e026      	b.n	8004eb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e78:	d007      	beq.n	8004e8a <UART_Receive_IT+0x74>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <UART_Receive_IT+0x82>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	e008      	b.n	8004eaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d15d      	bne.n	8004f84 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0220 	bic.w	r2, r2, #32
 8004ed6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ee6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d135      	bne.n	8004f7a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	330c      	adds	r3, #12
 8004f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	613b      	str	r3, [r7, #16]
   return(result);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f023 0310 	bic.w	r3, r3, #16
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	330c      	adds	r3, #12
 8004f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f34:	623a      	str	r2, [r7, #32]
 8004f36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	69f9      	ldr	r1, [r7, #28]
 8004f3a:	6a3a      	ldr	r2, [r7, #32]
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e5      	bne.n	8004f14 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0310 	and.w	r3, r3, #16
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d10a      	bne.n	8004f6c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff fdc0 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
 8004f78:	e002      	b.n	8004f80 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fc fbf2 	bl	8001764 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	e002      	b.n	8004f8a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	e000      	b.n	8004f8a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f88:	2302      	movs	r3, #2
  }
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3730      	adds	r7, #48	; 0x30
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004fce:	f023 030c 	bic.w	r3, r3, #12
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	68b9      	ldr	r1, [r7, #8]
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a2c      	ldr	r2, [pc, #176]	; (80050a8 <UART_SetConfig+0x114>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d103      	bne.n	8005004 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ffc:	f7ff f9ae 	bl	800435c <HAL_RCC_GetPCLK2Freq>
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	e002      	b.n	800500a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7ff f996 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 8005008:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009a      	lsls	r2, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005020:	4a22      	ldr	r2, [pc, #136]	; (80050ac <UART_SetConfig+0x118>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	0119      	lsls	r1, r3, #4
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009a      	lsls	r2, r3, #2
 8005034:	441a      	add	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <UART_SetConfig+0x118>)
 8005042:	fba3 0302 	umull	r0, r3, r3, r2
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	2064      	movs	r0, #100	; 0x64
 800504a:	fb00 f303 	mul.w	r3, r0, r3
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	3332      	adds	r3, #50	; 0x32
 8005054:	4a15      	ldr	r2, [pc, #84]	; (80050ac <UART_SetConfig+0x118>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005060:	4419      	add	r1, r3
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009a      	lsls	r2, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	fbb2 f2f3 	udiv	r2, r2, r3
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <UART_SetConfig+0x118>)
 800507a:	fba3 0302 	umull	r0, r3, r3, r2
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	2064      	movs	r0, #100	; 0x64
 8005082:	fb00 f303 	mul.w	r3, r0, r3
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	3332      	adds	r3, #50	; 0x32
 800508c:	4a07      	ldr	r2, [pc, #28]	; (80050ac <UART_SetConfig+0x118>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	095b      	lsrs	r3, r3, #5
 8005094:	f003 020f 	and.w	r2, r3, #15
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	440a      	add	r2, r1
 800509e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40013800 	.word	0x40013800
 80050ac:	51eb851f 	.word	0x51eb851f

080050b0 <__errno>:
 80050b0:	4b01      	ldr	r3, [pc, #4]	; (80050b8 <__errno+0x8>)
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	200000c8 	.word	0x200000c8

080050bc <__libc_init_array>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	2600      	movs	r6, #0
 80050c0:	4d0c      	ldr	r5, [pc, #48]	; (80050f4 <__libc_init_array+0x38>)
 80050c2:	4c0d      	ldr	r4, [pc, #52]	; (80050f8 <__libc_init_array+0x3c>)
 80050c4:	1b64      	subs	r4, r4, r5
 80050c6:	10a4      	asrs	r4, r4, #2
 80050c8:	42a6      	cmp	r6, r4
 80050ca:	d109      	bne.n	80050e0 <__libc_init_array+0x24>
 80050cc:	f001 fa70 	bl	80065b0 <_init>
 80050d0:	2600      	movs	r6, #0
 80050d2:	4d0a      	ldr	r5, [pc, #40]	; (80050fc <__libc_init_array+0x40>)
 80050d4:	4c0a      	ldr	r4, [pc, #40]	; (8005100 <__libc_init_array+0x44>)
 80050d6:	1b64      	subs	r4, r4, r5
 80050d8:	10a4      	asrs	r4, r4, #2
 80050da:	42a6      	cmp	r6, r4
 80050dc:	d105      	bne.n	80050ea <__libc_init_array+0x2e>
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e4:	4798      	blx	r3
 80050e6:	3601      	adds	r6, #1
 80050e8:	e7ee      	b.n	80050c8 <__libc_init_array+0xc>
 80050ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ee:	4798      	blx	r3
 80050f0:	3601      	adds	r6, #1
 80050f2:	e7f2      	b.n	80050da <__libc_init_array+0x1e>
 80050f4:	08006978 	.word	0x08006978
 80050f8:	08006978 	.word	0x08006978
 80050fc:	08006978 	.word	0x08006978
 8005100:	0800697c 	.word	0x0800697c

08005104 <memcpy>:
 8005104:	440a      	add	r2, r1
 8005106:	4291      	cmp	r1, r2
 8005108:	f100 33ff 	add.w	r3, r0, #4294967295
 800510c:	d100      	bne.n	8005110 <memcpy+0xc>
 800510e:	4770      	bx	lr
 8005110:	b510      	push	{r4, lr}
 8005112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005116:	4291      	cmp	r1, r2
 8005118:	f803 4f01 	strb.w	r4, [r3, #1]!
 800511c:	d1f9      	bne.n	8005112 <memcpy+0xe>
 800511e:	bd10      	pop	{r4, pc}

08005120 <memset>:
 8005120:	4603      	mov	r3, r0
 8005122:	4402      	add	r2, r0
 8005124:	4293      	cmp	r3, r2
 8005126:	d100      	bne.n	800512a <memset+0xa>
 8005128:	4770      	bx	lr
 800512a:	f803 1b01 	strb.w	r1, [r3], #1
 800512e:	e7f9      	b.n	8005124 <memset+0x4>

08005130 <siprintf>:
 8005130:	b40e      	push	{r1, r2, r3}
 8005132:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005136:	b500      	push	{lr}
 8005138:	b09c      	sub	sp, #112	; 0x70
 800513a:	ab1d      	add	r3, sp, #116	; 0x74
 800513c:	9002      	str	r0, [sp, #8]
 800513e:	9006      	str	r0, [sp, #24]
 8005140:	9107      	str	r1, [sp, #28]
 8005142:	9104      	str	r1, [sp, #16]
 8005144:	4808      	ldr	r0, [pc, #32]	; (8005168 <siprintf+0x38>)
 8005146:	4909      	ldr	r1, [pc, #36]	; (800516c <siprintf+0x3c>)
 8005148:	f853 2b04 	ldr.w	r2, [r3], #4
 800514c:	9105      	str	r1, [sp, #20]
 800514e:	6800      	ldr	r0, [r0, #0]
 8005150:	a902      	add	r1, sp, #8
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	f000 f9ee 	bl	8005534 <_svfiprintf_r>
 8005158:	2200      	movs	r2, #0
 800515a:	9b02      	ldr	r3, [sp, #8]
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	b01c      	add	sp, #112	; 0x70
 8005160:	f85d eb04 	ldr.w	lr, [sp], #4
 8005164:	b003      	add	sp, #12
 8005166:	4770      	bx	lr
 8005168:	200000c8 	.word	0x200000c8
 800516c:	ffff0208 	.word	0xffff0208

08005170 <strstr>:
 8005170:	780a      	ldrb	r2, [r1, #0]
 8005172:	b570      	push	{r4, r5, r6, lr}
 8005174:	b96a      	cbnz	r2, 8005192 <strstr+0x22>
 8005176:	bd70      	pop	{r4, r5, r6, pc}
 8005178:	429a      	cmp	r2, r3
 800517a:	d109      	bne.n	8005190 <strstr+0x20>
 800517c:	460c      	mov	r4, r1
 800517e:	4605      	mov	r5, r0
 8005180:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0f6      	beq.n	8005176 <strstr+0x6>
 8005188:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800518c:	429e      	cmp	r6, r3
 800518e:	d0f7      	beq.n	8005180 <strstr+0x10>
 8005190:	3001      	adds	r0, #1
 8005192:	7803      	ldrb	r3, [r0, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1ef      	bne.n	8005178 <strstr+0x8>
 8005198:	4618      	mov	r0, r3
 800519a:	e7ec      	b.n	8005176 <strstr+0x6>

0800519c <strtok>:
 800519c:	4b16      	ldr	r3, [pc, #88]	; (80051f8 <strtok+0x5c>)
 800519e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a2:	681f      	ldr	r7, [r3, #0]
 80051a4:	4605      	mov	r5, r0
 80051a6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80051a8:	460e      	mov	r6, r1
 80051aa:	b9ec      	cbnz	r4, 80051e8 <strtok+0x4c>
 80051ac:	2050      	movs	r0, #80	; 0x50
 80051ae:	f000 f881 	bl	80052b4 <malloc>
 80051b2:	4602      	mov	r2, r0
 80051b4:	65b8      	str	r0, [r7, #88]	; 0x58
 80051b6:	b920      	cbnz	r0, 80051c2 <strtok+0x26>
 80051b8:	2157      	movs	r1, #87	; 0x57
 80051ba:	4b10      	ldr	r3, [pc, #64]	; (80051fc <strtok+0x60>)
 80051bc:	4810      	ldr	r0, [pc, #64]	; (8005200 <strtok+0x64>)
 80051be:	f000 f849 	bl	8005254 <__assert_func>
 80051c2:	e9c0 4400 	strd	r4, r4, [r0]
 80051c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80051ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80051ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80051d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80051d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80051da:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80051de:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80051e2:	6184      	str	r4, [r0, #24]
 80051e4:	7704      	strb	r4, [r0, #28]
 80051e6:	6244      	str	r4, [r0, #36]	; 0x24
 80051e8:	4631      	mov	r1, r6
 80051ea:	4628      	mov	r0, r5
 80051ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051ee:	2301      	movs	r3, #1
 80051f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051f4:	f000 b806 	b.w	8005204 <__strtok_r>
 80051f8:	200000c8 	.word	0x200000c8
 80051fc:	08006834 	.word	0x08006834
 8005200:	0800684b 	.word	0x0800684b

08005204 <__strtok_r>:
 8005204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005206:	b908      	cbnz	r0, 800520c <__strtok_r+0x8>
 8005208:	6810      	ldr	r0, [r2, #0]
 800520a:	b188      	cbz	r0, 8005230 <__strtok_r+0x2c>
 800520c:	4604      	mov	r4, r0
 800520e:	460f      	mov	r7, r1
 8005210:	4620      	mov	r0, r4
 8005212:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005216:	f817 6b01 	ldrb.w	r6, [r7], #1
 800521a:	b91e      	cbnz	r6, 8005224 <__strtok_r+0x20>
 800521c:	b965      	cbnz	r5, 8005238 <__strtok_r+0x34>
 800521e:	4628      	mov	r0, r5
 8005220:	6015      	str	r5, [r2, #0]
 8005222:	e005      	b.n	8005230 <__strtok_r+0x2c>
 8005224:	42b5      	cmp	r5, r6
 8005226:	d1f6      	bne.n	8005216 <__strtok_r+0x12>
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f0      	bne.n	800520e <__strtok_r+0xa>
 800522c:	6014      	str	r4, [r2, #0]
 800522e:	7003      	strb	r3, [r0, #0]
 8005230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005232:	461c      	mov	r4, r3
 8005234:	e00c      	b.n	8005250 <__strtok_r+0x4c>
 8005236:	b915      	cbnz	r5, 800523e <__strtok_r+0x3a>
 8005238:	460e      	mov	r6, r1
 800523a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800523e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005242:	42ab      	cmp	r3, r5
 8005244:	d1f7      	bne.n	8005236 <__strtok_r+0x32>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f3      	beq.n	8005232 <__strtok_r+0x2e>
 800524a:	2300      	movs	r3, #0
 800524c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005250:	6014      	str	r4, [r2, #0]
 8005252:	e7ed      	b.n	8005230 <__strtok_r+0x2c>

08005254 <__assert_func>:
 8005254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005256:	4614      	mov	r4, r2
 8005258:	461a      	mov	r2, r3
 800525a:	4b09      	ldr	r3, [pc, #36]	; (8005280 <__assert_func+0x2c>)
 800525c:	4605      	mov	r5, r0
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68d8      	ldr	r0, [r3, #12]
 8005262:	b14c      	cbz	r4, 8005278 <__assert_func+0x24>
 8005264:	4b07      	ldr	r3, [pc, #28]	; (8005284 <__assert_func+0x30>)
 8005266:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800526a:	9100      	str	r1, [sp, #0]
 800526c:	462b      	mov	r3, r5
 800526e:	4906      	ldr	r1, [pc, #24]	; (8005288 <__assert_func+0x34>)
 8005270:	f000 f80e 	bl	8005290 <fiprintf>
 8005274:	f000 fe1c 	bl	8005eb0 <abort>
 8005278:	4b04      	ldr	r3, [pc, #16]	; (800528c <__assert_func+0x38>)
 800527a:	461c      	mov	r4, r3
 800527c:	e7f3      	b.n	8005266 <__assert_func+0x12>
 800527e:	bf00      	nop
 8005280:	200000c8 	.word	0x200000c8
 8005284:	080068a8 	.word	0x080068a8
 8005288:	080068b5 	.word	0x080068b5
 800528c:	080068e3 	.word	0x080068e3

08005290 <fiprintf>:
 8005290:	b40e      	push	{r1, r2, r3}
 8005292:	b503      	push	{r0, r1, lr}
 8005294:	4601      	mov	r1, r0
 8005296:	ab03      	add	r3, sp, #12
 8005298:	4805      	ldr	r0, [pc, #20]	; (80052b0 <fiprintf+0x20>)
 800529a:	f853 2b04 	ldr.w	r2, [r3], #4
 800529e:	6800      	ldr	r0, [r0, #0]
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	f000 fa6f 	bl	8005784 <_vfiprintf_r>
 80052a6:	b002      	add	sp, #8
 80052a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052ac:	b003      	add	sp, #12
 80052ae:	4770      	bx	lr
 80052b0:	200000c8 	.word	0x200000c8

080052b4 <malloc>:
 80052b4:	4b02      	ldr	r3, [pc, #8]	; (80052c0 <malloc+0xc>)
 80052b6:	4601      	mov	r1, r0
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	f000 b86b 	b.w	8005394 <_malloc_r>
 80052be:	bf00      	nop
 80052c0:	200000c8 	.word	0x200000c8

080052c4 <_free_r>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	4605      	mov	r5, r0
 80052c8:	2900      	cmp	r1, #0
 80052ca:	d040      	beq.n	800534e <_free_r+0x8a>
 80052cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d0:	1f0c      	subs	r4, r1, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bfb8      	it	lt
 80052d6:	18e4      	addlt	r4, r4, r3
 80052d8:	f001 f836 	bl	8006348 <__malloc_lock>
 80052dc:	4a1c      	ldr	r2, [pc, #112]	; (8005350 <_free_r+0x8c>)
 80052de:	6813      	ldr	r3, [r2, #0]
 80052e0:	b933      	cbnz	r3, 80052f0 <_free_r+0x2c>
 80052e2:	6063      	str	r3, [r4, #4]
 80052e4:	6014      	str	r4, [r2, #0]
 80052e6:	4628      	mov	r0, r5
 80052e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052ec:	f001 b832 	b.w	8006354 <__malloc_unlock>
 80052f0:	42a3      	cmp	r3, r4
 80052f2:	d908      	bls.n	8005306 <_free_r+0x42>
 80052f4:	6820      	ldr	r0, [r4, #0]
 80052f6:	1821      	adds	r1, r4, r0
 80052f8:	428b      	cmp	r3, r1
 80052fa:	bf01      	itttt	eq
 80052fc:	6819      	ldreq	r1, [r3, #0]
 80052fe:	685b      	ldreq	r3, [r3, #4]
 8005300:	1809      	addeq	r1, r1, r0
 8005302:	6021      	streq	r1, [r4, #0]
 8005304:	e7ed      	b.n	80052e2 <_free_r+0x1e>
 8005306:	461a      	mov	r2, r3
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	b10b      	cbz	r3, 8005310 <_free_r+0x4c>
 800530c:	42a3      	cmp	r3, r4
 800530e:	d9fa      	bls.n	8005306 <_free_r+0x42>
 8005310:	6811      	ldr	r1, [r2, #0]
 8005312:	1850      	adds	r0, r2, r1
 8005314:	42a0      	cmp	r0, r4
 8005316:	d10b      	bne.n	8005330 <_free_r+0x6c>
 8005318:	6820      	ldr	r0, [r4, #0]
 800531a:	4401      	add	r1, r0
 800531c:	1850      	adds	r0, r2, r1
 800531e:	4283      	cmp	r3, r0
 8005320:	6011      	str	r1, [r2, #0]
 8005322:	d1e0      	bne.n	80052e6 <_free_r+0x22>
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	4401      	add	r1, r0
 800532a:	6011      	str	r1, [r2, #0]
 800532c:	6053      	str	r3, [r2, #4]
 800532e:	e7da      	b.n	80052e6 <_free_r+0x22>
 8005330:	d902      	bls.n	8005338 <_free_r+0x74>
 8005332:	230c      	movs	r3, #12
 8005334:	602b      	str	r3, [r5, #0]
 8005336:	e7d6      	b.n	80052e6 <_free_r+0x22>
 8005338:	6820      	ldr	r0, [r4, #0]
 800533a:	1821      	adds	r1, r4, r0
 800533c:	428b      	cmp	r3, r1
 800533e:	bf01      	itttt	eq
 8005340:	6819      	ldreq	r1, [r3, #0]
 8005342:	685b      	ldreq	r3, [r3, #4]
 8005344:	1809      	addeq	r1, r1, r0
 8005346:	6021      	streq	r1, [r4, #0]
 8005348:	6063      	str	r3, [r4, #4]
 800534a:	6054      	str	r4, [r2, #4]
 800534c:	e7cb      	b.n	80052e6 <_free_r+0x22>
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	20000338 	.word	0x20000338

08005354 <sbrk_aligned>:
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	4e0e      	ldr	r6, [pc, #56]	; (8005390 <sbrk_aligned+0x3c>)
 8005358:	460c      	mov	r4, r1
 800535a:	6831      	ldr	r1, [r6, #0]
 800535c:	4605      	mov	r5, r0
 800535e:	b911      	cbnz	r1, 8005366 <sbrk_aligned+0x12>
 8005360:	f000 fcd6 	bl	8005d10 <_sbrk_r>
 8005364:	6030      	str	r0, [r6, #0]
 8005366:	4621      	mov	r1, r4
 8005368:	4628      	mov	r0, r5
 800536a:	f000 fcd1 	bl	8005d10 <_sbrk_r>
 800536e:	1c43      	adds	r3, r0, #1
 8005370:	d00a      	beq.n	8005388 <sbrk_aligned+0x34>
 8005372:	1cc4      	adds	r4, r0, #3
 8005374:	f024 0403 	bic.w	r4, r4, #3
 8005378:	42a0      	cmp	r0, r4
 800537a:	d007      	beq.n	800538c <sbrk_aligned+0x38>
 800537c:	1a21      	subs	r1, r4, r0
 800537e:	4628      	mov	r0, r5
 8005380:	f000 fcc6 	bl	8005d10 <_sbrk_r>
 8005384:	3001      	adds	r0, #1
 8005386:	d101      	bne.n	800538c <sbrk_aligned+0x38>
 8005388:	f04f 34ff 	mov.w	r4, #4294967295
 800538c:	4620      	mov	r0, r4
 800538e:	bd70      	pop	{r4, r5, r6, pc}
 8005390:	2000033c 	.word	0x2000033c

08005394 <_malloc_r>:
 8005394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005398:	1ccd      	adds	r5, r1, #3
 800539a:	f025 0503 	bic.w	r5, r5, #3
 800539e:	3508      	adds	r5, #8
 80053a0:	2d0c      	cmp	r5, #12
 80053a2:	bf38      	it	cc
 80053a4:	250c      	movcc	r5, #12
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	4607      	mov	r7, r0
 80053aa:	db01      	blt.n	80053b0 <_malloc_r+0x1c>
 80053ac:	42a9      	cmp	r1, r5
 80053ae:	d905      	bls.n	80053bc <_malloc_r+0x28>
 80053b0:	230c      	movs	r3, #12
 80053b2:	2600      	movs	r6, #0
 80053b4:	603b      	str	r3, [r7, #0]
 80053b6:	4630      	mov	r0, r6
 80053b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053bc:	4e2e      	ldr	r6, [pc, #184]	; (8005478 <_malloc_r+0xe4>)
 80053be:	f000 ffc3 	bl	8006348 <__malloc_lock>
 80053c2:	6833      	ldr	r3, [r6, #0]
 80053c4:	461c      	mov	r4, r3
 80053c6:	bb34      	cbnz	r4, 8005416 <_malloc_r+0x82>
 80053c8:	4629      	mov	r1, r5
 80053ca:	4638      	mov	r0, r7
 80053cc:	f7ff ffc2 	bl	8005354 <sbrk_aligned>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	4604      	mov	r4, r0
 80053d4:	d14d      	bne.n	8005472 <_malloc_r+0xde>
 80053d6:	6834      	ldr	r4, [r6, #0]
 80053d8:	4626      	mov	r6, r4
 80053da:	2e00      	cmp	r6, #0
 80053dc:	d140      	bne.n	8005460 <_malloc_r+0xcc>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	4631      	mov	r1, r6
 80053e2:	4638      	mov	r0, r7
 80053e4:	eb04 0803 	add.w	r8, r4, r3
 80053e8:	f000 fc92 	bl	8005d10 <_sbrk_r>
 80053ec:	4580      	cmp	r8, r0
 80053ee:	d13a      	bne.n	8005466 <_malloc_r+0xd2>
 80053f0:	6821      	ldr	r1, [r4, #0]
 80053f2:	3503      	adds	r5, #3
 80053f4:	1a6d      	subs	r5, r5, r1
 80053f6:	f025 0503 	bic.w	r5, r5, #3
 80053fa:	3508      	adds	r5, #8
 80053fc:	2d0c      	cmp	r5, #12
 80053fe:	bf38      	it	cc
 8005400:	250c      	movcc	r5, #12
 8005402:	4638      	mov	r0, r7
 8005404:	4629      	mov	r1, r5
 8005406:	f7ff ffa5 	bl	8005354 <sbrk_aligned>
 800540a:	3001      	adds	r0, #1
 800540c:	d02b      	beq.n	8005466 <_malloc_r+0xd2>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	442b      	add	r3, r5
 8005412:	6023      	str	r3, [r4, #0]
 8005414:	e00e      	b.n	8005434 <_malloc_r+0xa0>
 8005416:	6822      	ldr	r2, [r4, #0]
 8005418:	1b52      	subs	r2, r2, r5
 800541a:	d41e      	bmi.n	800545a <_malloc_r+0xc6>
 800541c:	2a0b      	cmp	r2, #11
 800541e:	d916      	bls.n	800544e <_malloc_r+0xba>
 8005420:	1961      	adds	r1, r4, r5
 8005422:	42a3      	cmp	r3, r4
 8005424:	6025      	str	r5, [r4, #0]
 8005426:	bf18      	it	ne
 8005428:	6059      	strne	r1, [r3, #4]
 800542a:	6863      	ldr	r3, [r4, #4]
 800542c:	bf08      	it	eq
 800542e:	6031      	streq	r1, [r6, #0]
 8005430:	5162      	str	r2, [r4, r5]
 8005432:	604b      	str	r3, [r1, #4]
 8005434:	4638      	mov	r0, r7
 8005436:	f104 060b 	add.w	r6, r4, #11
 800543a:	f000 ff8b 	bl	8006354 <__malloc_unlock>
 800543e:	f026 0607 	bic.w	r6, r6, #7
 8005442:	1d23      	adds	r3, r4, #4
 8005444:	1af2      	subs	r2, r6, r3
 8005446:	d0b6      	beq.n	80053b6 <_malloc_r+0x22>
 8005448:	1b9b      	subs	r3, r3, r6
 800544a:	50a3      	str	r3, [r4, r2]
 800544c:	e7b3      	b.n	80053b6 <_malloc_r+0x22>
 800544e:	6862      	ldr	r2, [r4, #4]
 8005450:	42a3      	cmp	r3, r4
 8005452:	bf0c      	ite	eq
 8005454:	6032      	streq	r2, [r6, #0]
 8005456:	605a      	strne	r2, [r3, #4]
 8005458:	e7ec      	b.n	8005434 <_malloc_r+0xa0>
 800545a:	4623      	mov	r3, r4
 800545c:	6864      	ldr	r4, [r4, #4]
 800545e:	e7b2      	b.n	80053c6 <_malloc_r+0x32>
 8005460:	4634      	mov	r4, r6
 8005462:	6876      	ldr	r6, [r6, #4]
 8005464:	e7b9      	b.n	80053da <_malloc_r+0x46>
 8005466:	230c      	movs	r3, #12
 8005468:	4638      	mov	r0, r7
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	f000 ff72 	bl	8006354 <__malloc_unlock>
 8005470:	e7a1      	b.n	80053b6 <_malloc_r+0x22>
 8005472:	6025      	str	r5, [r4, #0]
 8005474:	e7de      	b.n	8005434 <_malloc_r+0xa0>
 8005476:	bf00      	nop
 8005478:	20000338 	.word	0x20000338

0800547c <__ssputs_r>:
 800547c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005480:	688e      	ldr	r6, [r1, #8]
 8005482:	4682      	mov	sl, r0
 8005484:	429e      	cmp	r6, r3
 8005486:	460c      	mov	r4, r1
 8005488:	4690      	mov	r8, r2
 800548a:	461f      	mov	r7, r3
 800548c:	d838      	bhi.n	8005500 <__ssputs_r+0x84>
 800548e:	898a      	ldrh	r2, [r1, #12]
 8005490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005494:	d032      	beq.n	80054fc <__ssputs_r+0x80>
 8005496:	6825      	ldr	r5, [r4, #0]
 8005498:	6909      	ldr	r1, [r1, #16]
 800549a:	3301      	adds	r3, #1
 800549c:	eba5 0901 	sub.w	r9, r5, r1
 80054a0:	6965      	ldr	r5, [r4, #20]
 80054a2:	444b      	add	r3, r9
 80054a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054ac:	106d      	asrs	r5, r5, #1
 80054ae:	429d      	cmp	r5, r3
 80054b0:	bf38      	it	cc
 80054b2:	461d      	movcc	r5, r3
 80054b4:	0553      	lsls	r3, r2, #21
 80054b6:	d531      	bpl.n	800551c <__ssputs_r+0xa0>
 80054b8:	4629      	mov	r1, r5
 80054ba:	f7ff ff6b 	bl	8005394 <_malloc_r>
 80054be:	4606      	mov	r6, r0
 80054c0:	b950      	cbnz	r0, 80054d8 <__ssputs_r+0x5c>
 80054c2:	230c      	movs	r3, #12
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295
 80054c8:	f8ca 3000 	str.w	r3, [sl]
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d2:	81a3      	strh	r3, [r4, #12]
 80054d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d8:	464a      	mov	r2, r9
 80054da:	6921      	ldr	r1, [r4, #16]
 80054dc:	f7ff fe12 	bl	8005104 <memcpy>
 80054e0:	89a3      	ldrh	r3, [r4, #12]
 80054e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ea:	81a3      	strh	r3, [r4, #12]
 80054ec:	6126      	str	r6, [r4, #16]
 80054ee:	444e      	add	r6, r9
 80054f0:	6026      	str	r6, [r4, #0]
 80054f2:	463e      	mov	r6, r7
 80054f4:	6165      	str	r5, [r4, #20]
 80054f6:	eba5 0509 	sub.w	r5, r5, r9
 80054fa:	60a5      	str	r5, [r4, #8]
 80054fc:	42be      	cmp	r6, r7
 80054fe:	d900      	bls.n	8005502 <__ssputs_r+0x86>
 8005500:	463e      	mov	r6, r7
 8005502:	4632      	mov	r2, r6
 8005504:	4641      	mov	r1, r8
 8005506:	6820      	ldr	r0, [r4, #0]
 8005508:	f000 ff04 	bl	8006314 <memmove>
 800550c:	68a3      	ldr	r3, [r4, #8]
 800550e:	2000      	movs	r0, #0
 8005510:	1b9b      	subs	r3, r3, r6
 8005512:	60a3      	str	r3, [r4, #8]
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	4433      	add	r3, r6
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	e7db      	b.n	80054d4 <__ssputs_r+0x58>
 800551c:	462a      	mov	r2, r5
 800551e:	f000 ff1f 	bl	8006360 <_realloc_r>
 8005522:	4606      	mov	r6, r0
 8005524:	2800      	cmp	r0, #0
 8005526:	d1e1      	bne.n	80054ec <__ssputs_r+0x70>
 8005528:	4650      	mov	r0, sl
 800552a:	6921      	ldr	r1, [r4, #16]
 800552c:	f7ff feca 	bl	80052c4 <_free_r>
 8005530:	e7c7      	b.n	80054c2 <__ssputs_r+0x46>
	...

08005534 <_svfiprintf_r>:
 8005534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005538:	4698      	mov	r8, r3
 800553a:	898b      	ldrh	r3, [r1, #12]
 800553c:	4607      	mov	r7, r0
 800553e:	061b      	lsls	r3, r3, #24
 8005540:	460d      	mov	r5, r1
 8005542:	4614      	mov	r4, r2
 8005544:	b09d      	sub	sp, #116	; 0x74
 8005546:	d50e      	bpl.n	8005566 <_svfiprintf_r+0x32>
 8005548:	690b      	ldr	r3, [r1, #16]
 800554a:	b963      	cbnz	r3, 8005566 <_svfiprintf_r+0x32>
 800554c:	2140      	movs	r1, #64	; 0x40
 800554e:	f7ff ff21 	bl	8005394 <_malloc_r>
 8005552:	6028      	str	r0, [r5, #0]
 8005554:	6128      	str	r0, [r5, #16]
 8005556:	b920      	cbnz	r0, 8005562 <_svfiprintf_r+0x2e>
 8005558:	230c      	movs	r3, #12
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	f04f 30ff 	mov.w	r0, #4294967295
 8005560:	e0d1      	b.n	8005706 <_svfiprintf_r+0x1d2>
 8005562:	2340      	movs	r3, #64	; 0x40
 8005564:	616b      	str	r3, [r5, #20]
 8005566:	2300      	movs	r3, #0
 8005568:	9309      	str	r3, [sp, #36]	; 0x24
 800556a:	2320      	movs	r3, #32
 800556c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005570:	2330      	movs	r3, #48	; 0x30
 8005572:	f04f 0901 	mov.w	r9, #1
 8005576:	f8cd 800c 	str.w	r8, [sp, #12]
 800557a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005720 <_svfiprintf_r+0x1ec>
 800557e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005582:	4623      	mov	r3, r4
 8005584:	469a      	mov	sl, r3
 8005586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800558a:	b10a      	cbz	r2, 8005590 <_svfiprintf_r+0x5c>
 800558c:	2a25      	cmp	r2, #37	; 0x25
 800558e:	d1f9      	bne.n	8005584 <_svfiprintf_r+0x50>
 8005590:	ebba 0b04 	subs.w	fp, sl, r4
 8005594:	d00b      	beq.n	80055ae <_svfiprintf_r+0x7a>
 8005596:	465b      	mov	r3, fp
 8005598:	4622      	mov	r2, r4
 800559a:	4629      	mov	r1, r5
 800559c:	4638      	mov	r0, r7
 800559e:	f7ff ff6d 	bl	800547c <__ssputs_r>
 80055a2:	3001      	adds	r0, #1
 80055a4:	f000 80aa 	beq.w	80056fc <_svfiprintf_r+0x1c8>
 80055a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055aa:	445a      	add	r2, fp
 80055ac:	9209      	str	r2, [sp, #36]	; 0x24
 80055ae:	f89a 3000 	ldrb.w	r3, [sl]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80a2 	beq.w	80056fc <_svfiprintf_r+0x1c8>
 80055b8:	2300      	movs	r3, #0
 80055ba:	f04f 32ff 	mov.w	r2, #4294967295
 80055be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055c2:	f10a 0a01 	add.w	sl, sl, #1
 80055c6:	9304      	str	r3, [sp, #16]
 80055c8:	9307      	str	r3, [sp, #28]
 80055ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055ce:	931a      	str	r3, [sp, #104]	; 0x68
 80055d0:	4654      	mov	r4, sl
 80055d2:	2205      	movs	r2, #5
 80055d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d8:	4851      	ldr	r0, [pc, #324]	; (8005720 <_svfiprintf_r+0x1ec>)
 80055da:	f000 fe8d 	bl	80062f8 <memchr>
 80055de:	9a04      	ldr	r2, [sp, #16]
 80055e0:	b9d8      	cbnz	r0, 800561a <_svfiprintf_r+0xe6>
 80055e2:	06d0      	lsls	r0, r2, #27
 80055e4:	bf44      	itt	mi
 80055e6:	2320      	movmi	r3, #32
 80055e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ec:	0711      	lsls	r1, r2, #28
 80055ee:	bf44      	itt	mi
 80055f0:	232b      	movmi	r3, #43	; 0x2b
 80055f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055f6:	f89a 3000 	ldrb.w	r3, [sl]
 80055fa:	2b2a      	cmp	r3, #42	; 0x2a
 80055fc:	d015      	beq.n	800562a <_svfiprintf_r+0xf6>
 80055fe:	4654      	mov	r4, sl
 8005600:	2000      	movs	r0, #0
 8005602:	f04f 0c0a 	mov.w	ip, #10
 8005606:	9a07      	ldr	r2, [sp, #28]
 8005608:	4621      	mov	r1, r4
 800560a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800560e:	3b30      	subs	r3, #48	; 0x30
 8005610:	2b09      	cmp	r3, #9
 8005612:	d94e      	bls.n	80056b2 <_svfiprintf_r+0x17e>
 8005614:	b1b0      	cbz	r0, 8005644 <_svfiprintf_r+0x110>
 8005616:	9207      	str	r2, [sp, #28]
 8005618:	e014      	b.n	8005644 <_svfiprintf_r+0x110>
 800561a:	eba0 0308 	sub.w	r3, r0, r8
 800561e:	fa09 f303 	lsl.w	r3, r9, r3
 8005622:	4313      	orrs	r3, r2
 8005624:	46a2      	mov	sl, r4
 8005626:	9304      	str	r3, [sp, #16]
 8005628:	e7d2      	b.n	80055d0 <_svfiprintf_r+0x9c>
 800562a:	9b03      	ldr	r3, [sp, #12]
 800562c:	1d19      	adds	r1, r3, #4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	9103      	str	r1, [sp, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	bfbb      	ittet	lt
 8005636:	425b      	neglt	r3, r3
 8005638:	f042 0202 	orrlt.w	r2, r2, #2
 800563c:	9307      	strge	r3, [sp, #28]
 800563e:	9307      	strlt	r3, [sp, #28]
 8005640:	bfb8      	it	lt
 8005642:	9204      	strlt	r2, [sp, #16]
 8005644:	7823      	ldrb	r3, [r4, #0]
 8005646:	2b2e      	cmp	r3, #46	; 0x2e
 8005648:	d10c      	bne.n	8005664 <_svfiprintf_r+0x130>
 800564a:	7863      	ldrb	r3, [r4, #1]
 800564c:	2b2a      	cmp	r3, #42	; 0x2a
 800564e:	d135      	bne.n	80056bc <_svfiprintf_r+0x188>
 8005650:	9b03      	ldr	r3, [sp, #12]
 8005652:	3402      	adds	r4, #2
 8005654:	1d1a      	adds	r2, r3, #4
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	9203      	str	r2, [sp, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	bfb8      	it	lt
 800565e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005662:	9305      	str	r3, [sp, #20]
 8005664:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005724 <_svfiprintf_r+0x1f0>
 8005668:	2203      	movs	r2, #3
 800566a:	4650      	mov	r0, sl
 800566c:	7821      	ldrb	r1, [r4, #0]
 800566e:	f000 fe43 	bl	80062f8 <memchr>
 8005672:	b140      	cbz	r0, 8005686 <_svfiprintf_r+0x152>
 8005674:	2340      	movs	r3, #64	; 0x40
 8005676:	eba0 000a 	sub.w	r0, r0, sl
 800567a:	fa03 f000 	lsl.w	r0, r3, r0
 800567e:	9b04      	ldr	r3, [sp, #16]
 8005680:	3401      	adds	r4, #1
 8005682:	4303      	orrs	r3, r0
 8005684:	9304      	str	r3, [sp, #16]
 8005686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800568a:	2206      	movs	r2, #6
 800568c:	4826      	ldr	r0, [pc, #152]	; (8005728 <_svfiprintf_r+0x1f4>)
 800568e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005692:	f000 fe31 	bl	80062f8 <memchr>
 8005696:	2800      	cmp	r0, #0
 8005698:	d038      	beq.n	800570c <_svfiprintf_r+0x1d8>
 800569a:	4b24      	ldr	r3, [pc, #144]	; (800572c <_svfiprintf_r+0x1f8>)
 800569c:	bb1b      	cbnz	r3, 80056e6 <_svfiprintf_r+0x1b2>
 800569e:	9b03      	ldr	r3, [sp, #12]
 80056a0:	3307      	adds	r3, #7
 80056a2:	f023 0307 	bic.w	r3, r3, #7
 80056a6:	3308      	adds	r3, #8
 80056a8:	9303      	str	r3, [sp, #12]
 80056aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ac:	4433      	add	r3, r6
 80056ae:	9309      	str	r3, [sp, #36]	; 0x24
 80056b0:	e767      	b.n	8005582 <_svfiprintf_r+0x4e>
 80056b2:	460c      	mov	r4, r1
 80056b4:	2001      	movs	r0, #1
 80056b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80056ba:	e7a5      	b.n	8005608 <_svfiprintf_r+0xd4>
 80056bc:	2300      	movs	r3, #0
 80056be:	f04f 0c0a 	mov.w	ip, #10
 80056c2:	4619      	mov	r1, r3
 80056c4:	3401      	adds	r4, #1
 80056c6:	9305      	str	r3, [sp, #20]
 80056c8:	4620      	mov	r0, r4
 80056ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056ce:	3a30      	subs	r2, #48	; 0x30
 80056d0:	2a09      	cmp	r2, #9
 80056d2:	d903      	bls.n	80056dc <_svfiprintf_r+0x1a8>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0c5      	beq.n	8005664 <_svfiprintf_r+0x130>
 80056d8:	9105      	str	r1, [sp, #20]
 80056da:	e7c3      	b.n	8005664 <_svfiprintf_r+0x130>
 80056dc:	4604      	mov	r4, r0
 80056de:	2301      	movs	r3, #1
 80056e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80056e4:	e7f0      	b.n	80056c8 <_svfiprintf_r+0x194>
 80056e6:	ab03      	add	r3, sp, #12
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	462a      	mov	r2, r5
 80056ec:	4638      	mov	r0, r7
 80056ee:	4b10      	ldr	r3, [pc, #64]	; (8005730 <_svfiprintf_r+0x1fc>)
 80056f0:	a904      	add	r1, sp, #16
 80056f2:	f3af 8000 	nop.w
 80056f6:	1c42      	adds	r2, r0, #1
 80056f8:	4606      	mov	r6, r0
 80056fa:	d1d6      	bne.n	80056aa <_svfiprintf_r+0x176>
 80056fc:	89ab      	ldrh	r3, [r5, #12]
 80056fe:	065b      	lsls	r3, r3, #25
 8005700:	f53f af2c 	bmi.w	800555c <_svfiprintf_r+0x28>
 8005704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005706:	b01d      	add	sp, #116	; 0x74
 8005708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570c:	ab03      	add	r3, sp, #12
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	462a      	mov	r2, r5
 8005712:	4638      	mov	r0, r7
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <_svfiprintf_r+0x1fc>)
 8005716:	a904      	add	r1, sp, #16
 8005718:	f000 f9d4 	bl	8005ac4 <_printf_i>
 800571c:	e7eb      	b.n	80056f6 <_svfiprintf_r+0x1c2>
 800571e:	bf00      	nop
 8005720:	080068e4 	.word	0x080068e4
 8005724:	080068ea 	.word	0x080068ea
 8005728:	080068ee 	.word	0x080068ee
 800572c:	00000000 	.word	0x00000000
 8005730:	0800547d 	.word	0x0800547d

08005734 <__sfputc_r>:
 8005734:	6893      	ldr	r3, [r2, #8]
 8005736:	b410      	push	{r4}
 8005738:	3b01      	subs	r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	6093      	str	r3, [r2, #8]
 800573e:	da07      	bge.n	8005750 <__sfputc_r+0x1c>
 8005740:	6994      	ldr	r4, [r2, #24]
 8005742:	42a3      	cmp	r3, r4
 8005744:	db01      	blt.n	800574a <__sfputc_r+0x16>
 8005746:	290a      	cmp	r1, #10
 8005748:	d102      	bne.n	8005750 <__sfputc_r+0x1c>
 800574a:	bc10      	pop	{r4}
 800574c:	f000 baf0 	b.w	8005d30 <__swbuf_r>
 8005750:	6813      	ldr	r3, [r2, #0]
 8005752:	1c58      	adds	r0, r3, #1
 8005754:	6010      	str	r0, [r2, #0]
 8005756:	7019      	strb	r1, [r3, #0]
 8005758:	4608      	mov	r0, r1
 800575a:	bc10      	pop	{r4}
 800575c:	4770      	bx	lr

0800575e <__sfputs_r>:
 800575e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005760:	4606      	mov	r6, r0
 8005762:	460f      	mov	r7, r1
 8005764:	4614      	mov	r4, r2
 8005766:	18d5      	adds	r5, r2, r3
 8005768:	42ac      	cmp	r4, r5
 800576a:	d101      	bne.n	8005770 <__sfputs_r+0x12>
 800576c:	2000      	movs	r0, #0
 800576e:	e007      	b.n	8005780 <__sfputs_r+0x22>
 8005770:	463a      	mov	r2, r7
 8005772:	4630      	mov	r0, r6
 8005774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005778:	f7ff ffdc 	bl	8005734 <__sfputc_r>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d1f3      	bne.n	8005768 <__sfputs_r+0xa>
 8005780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005784 <_vfiprintf_r>:
 8005784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005788:	460d      	mov	r5, r1
 800578a:	4614      	mov	r4, r2
 800578c:	4698      	mov	r8, r3
 800578e:	4606      	mov	r6, r0
 8005790:	b09d      	sub	sp, #116	; 0x74
 8005792:	b118      	cbz	r0, 800579c <_vfiprintf_r+0x18>
 8005794:	6983      	ldr	r3, [r0, #24]
 8005796:	b90b      	cbnz	r3, 800579c <_vfiprintf_r+0x18>
 8005798:	f000 fca8 	bl	80060ec <__sinit>
 800579c:	4b89      	ldr	r3, [pc, #548]	; (80059c4 <_vfiprintf_r+0x240>)
 800579e:	429d      	cmp	r5, r3
 80057a0:	d11b      	bne.n	80057da <_vfiprintf_r+0x56>
 80057a2:	6875      	ldr	r5, [r6, #4]
 80057a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057a6:	07d9      	lsls	r1, r3, #31
 80057a8:	d405      	bmi.n	80057b6 <_vfiprintf_r+0x32>
 80057aa:	89ab      	ldrh	r3, [r5, #12]
 80057ac:	059a      	lsls	r2, r3, #22
 80057ae:	d402      	bmi.n	80057b6 <_vfiprintf_r+0x32>
 80057b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057b2:	f000 fd39 	bl	8006228 <__retarget_lock_acquire_recursive>
 80057b6:	89ab      	ldrh	r3, [r5, #12]
 80057b8:	071b      	lsls	r3, r3, #28
 80057ba:	d501      	bpl.n	80057c0 <_vfiprintf_r+0x3c>
 80057bc:	692b      	ldr	r3, [r5, #16]
 80057be:	b9eb      	cbnz	r3, 80057fc <_vfiprintf_r+0x78>
 80057c0:	4629      	mov	r1, r5
 80057c2:	4630      	mov	r0, r6
 80057c4:	f000 fb06 	bl	8005dd4 <__swsetup_r>
 80057c8:	b1c0      	cbz	r0, 80057fc <_vfiprintf_r+0x78>
 80057ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057cc:	07dc      	lsls	r4, r3, #31
 80057ce:	d50e      	bpl.n	80057ee <_vfiprintf_r+0x6a>
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	b01d      	add	sp, #116	; 0x74
 80057d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057da:	4b7b      	ldr	r3, [pc, #492]	; (80059c8 <_vfiprintf_r+0x244>)
 80057dc:	429d      	cmp	r5, r3
 80057de:	d101      	bne.n	80057e4 <_vfiprintf_r+0x60>
 80057e0:	68b5      	ldr	r5, [r6, #8]
 80057e2:	e7df      	b.n	80057a4 <_vfiprintf_r+0x20>
 80057e4:	4b79      	ldr	r3, [pc, #484]	; (80059cc <_vfiprintf_r+0x248>)
 80057e6:	429d      	cmp	r5, r3
 80057e8:	bf08      	it	eq
 80057ea:	68f5      	ldreq	r5, [r6, #12]
 80057ec:	e7da      	b.n	80057a4 <_vfiprintf_r+0x20>
 80057ee:	89ab      	ldrh	r3, [r5, #12]
 80057f0:	0598      	lsls	r0, r3, #22
 80057f2:	d4ed      	bmi.n	80057d0 <_vfiprintf_r+0x4c>
 80057f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057f6:	f000 fd18 	bl	800622a <__retarget_lock_release_recursive>
 80057fa:	e7e9      	b.n	80057d0 <_vfiprintf_r+0x4c>
 80057fc:	2300      	movs	r3, #0
 80057fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005800:	2320      	movs	r3, #32
 8005802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005806:	2330      	movs	r3, #48	; 0x30
 8005808:	f04f 0901 	mov.w	r9, #1
 800580c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005810:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80059d0 <_vfiprintf_r+0x24c>
 8005814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005818:	4623      	mov	r3, r4
 800581a:	469a      	mov	sl, r3
 800581c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005820:	b10a      	cbz	r2, 8005826 <_vfiprintf_r+0xa2>
 8005822:	2a25      	cmp	r2, #37	; 0x25
 8005824:	d1f9      	bne.n	800581a <_vfiprintf_r+0x96>
 8005826:	ebba 0b04 	subs.w	fp, sl, r4
 800582a:	d00b      	beq.n	8005844 <_vfiprintf_r+0xc0>
 800582c:	465b      	mov	r3, fp
 800582e:	4622      	mov	r2, r4
 8005830:	4629      	mov	r1, r5
 8005832:	4630      	mov	r0, r6
 8005834:	f7ff ff93 	bl	800575e <__sfputs_r>
 8005838:	3001      	adds	r0, #1
 800583a:	f000 80aa 	beq.w	8005992 <_vfiprintf_r+0x20e>
 800583e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005840:	445a      	add	r2, fp
 8005842:	9209      	str	r2, [sp, #36]	; 0x24
 8005844:	f89a 3000 	ldrb.w	r3, [sl]
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 80a2 	beq.w	8005992 <_vfiprintf_r+0x20e>
 800584e:	2300      	movs	r3, #0
 8005850:	f04f 32ff 	mov.w	r2, #4294967295
 8005854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005858:	f10a 0a01 	add.w	sl, sl, #1
 800585c:	9304      	str	r3, [sp, #16]
 800585e:	9307      	str	r3, [sp, #28]
 8005860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005864:	931a      	str	r3, [sp, #104]	; 0x68
 8005866:	4654      	mov	r4, sl
 8005868:	2205      	movs	r2, #5
 800586a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586e:	4858      	ldr	r0, [pc, #352]	; (80059d0 <_vfiprintf_r+0x24c>)
 8005870:	f000 fd42 	bl	80062f8 <memchr>
 8005874:	9a04      	ldr	r2, [sp, #16]
 8005876:	b9d8      	cbnz	r0, 80058b0 <_vfiprintf_r+0x12c>
 8005878:	06d1      	lsls	r1, r2, #27
 800587a:	bf44      	itt	mi
 800587c:	2320      	movmi	r3, #32
 800587e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005882:	0713      	lsls	r3, r2, #28
 8005884:	bf44      	itt	mi
 8005886:	232b      	movmi	r3, #43	; 0x2b
 8005888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800588c:	f89a 3000 	ldrb.w	r3, [sl]
 8005890:	2b2a      	cmp	r3, #42	; 0x2a
 8005892:	d015      	beq.n	80058c0 <_vfiprintf_r+0x13c>
 8005894:	4654      	mov	r4, sl
 8005896:	2000      	movs	r0, #0
 8005898:	f04f 0c0a 	mov.w	ip, #10
 800589c:	9a07      	ldr	r2, [sp, #28]
 800589e:	4621      	mov	r1, r4
 80058a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058a4:	3b30      	subs	r3, #48	; 0x30
 80058a6:	2b09      	cmp	r3, #9
 80058a8:	d94e      	bls.n	8005948 <_vfiprintf_r+0x1c4>
 80058aa:	b1b0      	cbz	r0, 80058da <_vfiprintf_r+0x156>
 80058ac:	9207      	str	r2, [sp, #28]
 80058ae:	e014      	b.n	80058da <_vfiprintf_r+0x156>
 80058b0:	eba0 0308 	sub.w	r3, r0, r8
 80058b4:	fa09 f303 	lsl.w	r3, r9, r3
 80058b8:	4313      	orrs	r3, r2
 80058ba:	46a2      	mov	sl, r4
 80058bc:	9304      	str	r3, [sp, #16]
 80058be:	e7d2      	b.n	8005866 <_vfiprintf_r+0xe2>
 80058c0:	9b03      	ldr	r3, [sp, #12]
 80058c2:	1d19      	adds	r1, r3, #4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	9103      	str	r1, [sp, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bfbb      	ittet	lt
 80058cc:	425b      	neglt	r3, r3
 80058ce:	f042 0202 	orrlt.w	r2, r2, #2
 80058d2:	9307      	strge	r3, [sp, #28]
 80058d4:	9307      	strlt	r3, [sp, #28]
 80058d6:	bfb8      	it	lt
 80058d8:	9204      	strlt	r2, [sp, #16]
 80058da:	7823      	ldrb	r3, [r4, #0]
 80058dc:	2b2e      	cmp	r3, #46	; 0x2e
 80058de:	d10c      	bne.n	80058fa <_vfiprintf_r+0x176>
 80058e0:	7863      	ldrb	r3, [r4, #1]
 80058e2:	2b2a      	cmp	r3, #42	; 0x2a
 80058e4:	d135      	bne.n	8005952 <_vfiprintf_r+0x1ce>
 80058e6:	9b03      	ldr	r3, [sp, #12]
 80058e8:	3402      	adds	r4, #2
 80058ea:	1d1a      	adds	r2, r3, #4
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	9203      	str	r2, [sp, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bfb8      	it	lt
 80058f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80058f8:	9305      	str	r3, [sp, #20]
 80058fa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80059d4 <_vfiprintf_r+0x250>
 80058fe:	2203      	movs	r2, #3
 8005900:	4650      	mov	r0, sl
 8005902:	7821      	ldrb	r1, [r4, #0]
 8005904:	f000 fcf8 	bl	80062f8 <memchr>
 8005908:	b140      	cbz	r0, 800591c <_vfiprintf_r+0x198>
 800590a:	2340      	movs	r3, #64	; 0x40
 800590c:	eba0 000a 	sub.w	r0, r0, sl
 8005910:	fa03 f000 	lsl.w	r0, r3, r0
 8005914:	9b04      	ldr	r3, [sp, #16]
 8005916:	3401      	adds	r4, #1
 8005918:	4303      	orrs	r3, r0
 800591a:	9304      	str	r3, [sp, #16]
 800591c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005920:	2206      	movs	r2, #6
 8005922:	482d      	ldr	r0, [pc, #180]	; (80059d8 <_vfiprintf_r+0x254>)
 8005924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005928:	f000 fce6 	bl	80062f8 <memchr>
 800592c:	2800      	cmp	r0, #0
 800592e:	d03f      	beq.n	80059b0 <_vfiprintf_r+0x22c>
 8005930:	4b2a      	ldr	r3, [pc, #168]	; (80059dc <_vfiprintf_r+0x258>)
 8005932:	bb1b      	cbnz	r3, 800597c <_vfiprintf_r+0x1f8>
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	3307      	adds	r3, #7
 8005938:	f023 0307 	bic.w	r3, r3, #7
 800593c:	3308      	adds	r3, #8
 800593e:	9303      	str	r3, [sp, #12]
 8005940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005942:	443b      	add	r3, r7
 8005944:	9309      	str	r3, [sp, #36]	; 0x24
 8005946:	e767      	b.n	8005818 <_vfiprintf_r+0x94>
 8005948:	460c      	mov	r4, r1
 800594a:	2001      	movs	r0, #1
 800594c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005950:	e7a5      	b.n	800589e <_vfiprintf_r+0x11a>
 8005952:	2300      	movs	r3, #0
 8005954:	f04f 0c0a 	mov.w	ip, #10
 8005958:	4619      	mov	r1, r3
 800595a:	3401      	adds	r4, #1
 800595c:	9305      	str	r3, [sp, #20]
 800595e:	4620      	mov	r0, r4
 8005960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005964:	3a30      	subs	r2, #48	; 0x30
 8005966:	2a09      	cmp	r2, #9
 8005968:	d903      	bls.n	8005972 <_vfiprintf_r+0x1ee>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0c5      	beq.n	80058fa <_vfiprintf_r+0x176>
 800596e:	9105      	str	r1, [sp, #20]
 8005970:	e7c3      	b.n	80058fa <_vfiprintf_r+0x176>
 8005972:	4604      	mov	r4, r0
 8005974:	2301      	movs	r3, #1
 8005976:	fb0c 2101 	mla	r1, ip, r1, r2
 800597a:	e7f0      	b.n	800595e <_vfiprintf_r+0x1da>
 800597c:	ab03      	add	r3, sp, #12
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	462a      	mov	r2, r5
 8005982:	4630      	mov	r0, r6
 8005984:	4b16      	ldr	r3, [pc, #88]	; (80059e0 <_vfiprintf_r+0x25c>)
 8005986:	a904      	add	r1, sp, #16
 8005988:	f3af 8000 	nop.w
 800598c:	4607      	mov	r7, r0
 800598e:	1c78      	adds	r0, r7, #1
 8005990:	d1d6      	bne.n	8005940 <_vfiprintf_r+0x1bc>
 8005992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005994:	07d9      	lsls	r1, r3, #31
 8005996:	d405      	bmi.n	80059a4 <_vfiprintf_r+0x220>
 8005998:	89ab      	ldrh	r3, [r5, #12]
 800599a:	059a      	lsls	r2, r3, #22
 800599c:	d402      	bmi.n	80059a4 <_vfiprintf_r+0x220>
 800599e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059a0:	f000 fc43 	bl	800622a <__retarget_lock_release_recursive>
 80059a4:	89ab      	ldrh	r3, [r5, #12]
 80059a6:	065b      	lsls	r3, r3, #25
 80059a8:	f53f af12 	bmi.w	80057d0 <_vfiprintf_r+0x4c>
 80059ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059ae:	e711      	b.n	80057d4 <_vfiprintf_r+0x50>
 80059b0:	ab03      	add	r3, sp, #12
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	462a      	mov	r2, r5
 80059b6:	4630      	mov	r0, r6
 80059b8:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <_vfiprintf_r+0x25c>)
 80059ba:	a904      	add	r1, sp, #16
 80059bc:	f000 f882 	bl	8005ac4 <_printf_i>
 80059c0:	e7e4      	b.n	800598c <_vfiprintf_r+0x208>
 80059c2:	bf00      	nop
 80059c4:	08006938 	.word	0x08006938
 80059c8:	08006958 	.word	0x08006958
 80059cc:	08006918 	.word	0x08006918
 80059d0:	080068e4 	.word	0x080068e4
 80059d4:	080068ea 	.word	0x080068ea
 80059d8:	080068ee 	.word	0x080068ee
 80059dc:	00000000 	.word	0x00000000
 80059e0:	0800575f 	.word	0x0800575f

080059e4 <_printf_common>:
 80059e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e8:	4616      	mov	r6, r2
 80059ea:	4699      	mov	r9, r3
 80059ec:	688a      	ldr	r2, [r1, #8]
 80059ee:	690b      	ldr	r3, [r1, #16]
 80059f0:	4607      	mov	r7, r0
 80059f2:	4293      	cmp	r3, r2
 80059f4:	bfb8      	it	lt
 80059f6:	4613      	movlt	r3, r2
 80059f8:	6033      	str	r3, [r6, #0]
 80059fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059fe:	460c      	mov	r4, r1
 8005a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a04:	b10a      	cbz	r2, 8005a0a <_printf_common+0x26>
 8005a06:	3301      	adds	r3, #1
 8005a08:	6033      	str	r3, [r6, #0]
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	0699      	lsls	r1, r3, #26
 8005a0e:	bf42      	ittt	mi
 8005a10:	6833      	ldrmi	r3, [r6, #0]
 8005a12:	3302      	addmi	r3, #2
 8005a14:	6033      	strmi	r3, [r6, #0]
 8005a16:	6825      	ldr	r5, [r4, #0]
 8005a18:	f015 0506 	ands.w	r5, r5, #6
 8005a1c:	d106      	bne.n	8005a2c <_printf_common+0x48>
 8005a1e:	f104 0a19 	add.w	sl, r4, #25
 8005a22:	68e3      	ldr	r3, [r4, #12]
 8005a24:	6832      	ldr	r2, [r6, #0]
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	42ab      	cmp	r3, r5
 8005a2a:	dc28      	bgt.n	8005a7e <_printf_common+0x9a>
 8005a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a30:	1e13      	subs	r3, r2, #0
 8005a32:	6822      	ldr	r2, [r4, #0]
 8005a34:	bf18      	it	ne
 8005a36:	2301      	movne	r3, #1
 8005a38:	0692      	lsls	r2, r2, #26
 8005a3a:	d42d      	bmi.n	8005a98 <_printf_common+0xb4>
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	4638      	mov	r0, r7
 8005a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a44:	47c0      	blx	r8
 8005a46:	3001      	adds	r0, #1
 8005a48:	d020      	beq.n	8005a8c <_printf_common+0xa8>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	68e5      	ldr	r5, [r4, #12]
 8005a4e:	f003 0306 	and.w	r3, r3, #6
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	bf18      	it	ne
 8005a56:	2500      	movne	r5, #0
 8005a58:	6832      	ldr	r2, [r6, #0]
 8005a5a:	f04f 0600 	mov.w	r6, #0
 8005a5e:	68a3      	ldr	r3, [r4, #8]
 8005a60:	bf08      	it	eq
 8005a62:	1aad      	subeq	r5, r5, r2
 8005a64:	6922      	ldr	r2, [r4, #16]
 8005a66:	bf08      	it	eq
 8005a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	bfc4      	itt	gt
 8005a70:	1a9b      	subgt	r3, r3, r2
 8005a72:	18ed      	addgt	r5, r5, r3
 8005a74:	341a      	adds	r4, #26
 8005a76:	42b5      	cmp	r5, r6
 8005a78:	d11a      	bne.n	8005ab0 <_printf_common+0xcc>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	e008      	b.n	8005a90 <_printf_common+0xac>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4652      	mov	r2, sl
 8005a82:	4649      	mov	r1, r9
 8005a84:	4638      	mov	r0, r7
 8005a86:	47c0      	blx	r8
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d103      	bne.n	8005a94 <_printf_common+0xb0>
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a94:	3501      	adds	r5, #1
 8005a96:	e7c4      	b.n	8005a22 <_printf_common+0x3e>
 8005a98:	2030      	movs	r0, #48	; 0x30
 8005a9a:	18e1      	adds	r1, r4, r3
 8005a9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005aa6:	4422      	add	r2, r4
 8005aa8:	3302      	adds	r3, #2
 8005aaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aae:	e7c5      	b.n	8005a3c <_printf_common+0x58>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	47c0      	blx	r8
 8005aba:	3001      	adds	r0, #1
 8005abc:	d0e6      	beq.n	8005a8c <_printf_common+0xa8>
 8005abe:	3601      	adds	r6, #1
 8005ac0:	e7d9      	b.n	8005a76 <_printf_common+0x92>
	...

08005ac4 <_printf_i>:
 8005ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac8:	7e0f      	ldrb	r7, [r1, #24]
 8005aca:	4691      	mov	r9, r2
 8005acc:	2f78      	cmp	r7, #120	; 0x78
 8005ace:	4680      	mov	r8, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	469a      	mov	sl, r3
 8005ad4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ad6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ada:	d807      	bhi.n	8005aec <_printf_i+0x28>
 8005adc:	2f62      	cmp	r7, #98	; 0x62
 8005ade:	d80a      	bhi.n	8005af6 <_printf_i+0x32>
 8005ae0:	2f00      	cmp	r7, #0
 8005ae2:	f000 80d9 	beq.w	8005c98 <_printf_i+0x1d4>
 8005ae6:	2f58      	cmp	r7, #88	; 0x58
 8005ae8:	f000 80a4 	beq.w	8005c34 <_printf_i+0x170>
 8005aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005af4:	e03a      	b.n	8005b6c <_printf_i+0xa8>
 8005af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005afa:	2b15      	cmp	r3, #21
 8005afc:	d8f6      	bhi.n	8005aec <_printf_i+0x28>
 8005afe:	a101      	add	r1, pc, #4	; (adr r1, 8005b04 <_printf_i+0x40>)
 8005b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b04:	08005b5d 	.word	0x08005b5d
 8005b08:	08005b71 	.word	0x08005b71
 8005b0c:	08005aed 	.word	0x08005aed
 8005b10:	08005aed 	.word	0x08005aed
 8005b14:	08005aed 	.word	0x08005aed
 8005b18:	08005aed 	.word	0x08005aed
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005aed 	.word	0x08005aed
 8005b24:	08005aed 	.word	0x08005aed
 8005b28:	08005aed 	.word	0x08005aed
 8005b2c:	08005aed 	.word	0x08005aed
 8005b30:	08005c7f 	.word	0x08005c7f
 8005b34:	08005ba1 	.word	0x08005ba1
 8005b38:	08005c61 	.word	0x08005c61
 8005b3c:	08005aed 	.word	0x08005aed
 8005b40:	08005aed 	.word	0x08005aed
 8005b44:	08005ca1 	.word	0x08005ca1
 8005b48:	08005aed 	.word	0x08005aed
 8005b4c:	08005ba1 	.word	0x08005ba1
 8005b50:	08005aed 	.word	0x08005aed
 8005b54:	08005aed 	.word	0x08005aed
 8005b58:	08005c69 	.word	0x08005c69
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	1d1a      	adds	r2, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	602a      	str	r2, [r5, #0]
 8005b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0a4      	b.n	8005cba <_printf_i+0x1f6>
 8005b70:	6820      	ldr	r0, [r4, #0]
 8005b72:	6829      	ldr	r1, [r5, #0]
 8005b74:	0606      	lsls	r6, r0, #24
 8005b76:	f101 0304 	add.w	r3, r1, #4
 8005b7a:	d50a      	bpl.n	8005b92 <_printf_i+0xce>
 8005b7c:	680e      	ldr	r6, [r1, #0]
 8005b7e:	602b      	str	r3, [r5, #0]
 8005b80:	2e00      	cmp	r6, #0
 8005b82:	da03      	bge.n	8005b8c <_printf_i+0xc8>
 8005b84:	232d      	movs	r3, #45	; 0x2d
 8005b86:	4276      	negs	r6, r6
 8005b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b8c:	230a      	movs	r3, #10
 8005b8e:	485e      	ldr	r0, [pc, #376]	; (8005d08 <_printf_i+0x244>)
 8005b90:	e019      	b.n	8005bc6 <_printf_i+0x102>
 8005b92:	680e      	ldr	r6, [r1, #0]
 8005b94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b98:	602b      	str	r3, [r5, #0]
 8005b9a:	bf18      	it	ne
 8005b9c:	b236      	sxthne	r6, r6
 8005b9e:	e7ef      	b.n	8005b80 <_printf_i+0xbc>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	6820      	ldr	r0, [r4, #0]
 8005ba4:	1d19      	adds	r1, r3, #4
 8005ba6:	6029      	str	r1, [r5, #0]
 8005ba8:	0601      	lsls	r1, r0, #24
 8005baa:	d501      	bpl.n	8005bb0 <_printf_i+0xec>
 8005bac:	681e      	ldr	r6, [r3, #0]
 8005bae:	e002      	b.n	8005bb6 <_printf_i+0xf2>
 8005bb0:	0646      	lsls	r6, r0, #25
 8005bb2:	d5fb      	bpl.n	8005bac <_printf_i+0xe8>
 8005bb4:	881e      	ldrh	r6, [r3, #0]
 8005bb6:	2f6f      	cmp	r7, #111	; 0x6f
 8005bb8:	bf0c      	ite	eq
 8005bba:	2308      	moveq	r3, #8
 8005bbc:	230a      	movne	r3, #10
 8005bbe:	4852      	ldr	r0, [pc, #328]	; (8005d08 <_printf_i+0x244>)
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bc6:	6865      	ldr	r5, [r4, #4]
 8005bc8:	2d00      	cmp	r5, #0
 8005bca:	bfa8      	it	ge
 8005bcc:	6821      	ldrge	r1, [r4, #0]
 8005bce:	60a5      	str	r5, [r4, #8]
 8005bd0:	bfa4      	itt	ge
 8005bd2:	f021 0104 	bicge.w	r1, r1, #4
 8005bd6:	6021      	strge	r1, [r4, #0]
 8005bd8:	b90e      	cbnz	r6, 8005bde <_printf_i+0x11a>
 8005bda:	2d00      	cmp	r5, #0
 8005bdc:	d04d      	beq.n	8005c7a <_printf_i+0x1b6>
 8005bde:	4615      	mov	r5, r2
 8005be0:	fbb6 f1f3 	udiv	r1, r6, r3
 8005be4:	fb03 6711 	mls	r7, r3, r1, r6
 8005be8:	5dc7      	ldrb	r7, [r0, r7]
 8005bea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bee:	4637      	mov	r7, r6
 8005bf0:	42bb      	cmp	r3, r7
 8005bf2:	460e      	mov	r6, r1
 8005bf4:	d9f4      	bls.n	8005be0 <_printf_i+0x11c>
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d10b      	bne.n	8005c12 <_printf_i+0x14e>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	07de      	lsls	r6, r3, #31
 8005bfe:	d508      	bpl.n	8005c12 <_printf_i+0x14e>
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	6861      	ldr	r1, [r4, #4]
 8005c04:	4299      	cmp	r1, r3
 8005c06:	bfde      	ittt	le
 8005c08:	2330      	movle	r3, #48	; 0x30
 8005c0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c12:	1b52      	subs	r2, r2, r5
 8005c14:	6122      	str	r2, [r4, #16]
 8005c16:	464b      	mov	r3, r9
 8005c18:	4621      	mov	r1, r4
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	f8cd a000 	str.w	sl, [sp]
 8005c20:	aa03      	add	r2, sp, #12
 8005c22:	f7ff fedf 	bl	80059e4 <_printf_common>
 8005c26:	3001      	adds	r0, #1
 8005c28:	d14c      	bne.n	8005cc4 <_printf_i+0x200>
 8005c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2e:	b004      	add	sp, #16
 8005c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c34:	4834      	ldr	r0, [pc, #208]	; (8005d08 <_printf_i+0x244>)
 8005c36:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c3a:	6829      	ldr	r1, [r5, #0]
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c42:	6029      	str	r1, [r5, #0]
 8005c44:	061d      	lsls	r5, r3, #24
 8005c46:	d514      	bpl.n	8005c72 <_printf_i+0x1ae>
 8005c48:	07df      	lsls	r7, r3, #31
 8005c4a:	bf44      	itt	mi
 8005c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c50:	6023      	strmi	r3, [r4, #0]
 8005c52:	b91e      	cbnz	r6, 8005c5c <_printf_i+0x198>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	f023 0320 	bic.w	r3, r3, #32
 8005c5a:	6023      	str	r3, [r4, #0]
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	e7af      	b.n	8005bc0 <_printf_i+0xfc>
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	f043 0320 	orr.w	r3, r3, #32
 8005c66:	6023      	str	r3, [r4, #0]
 8005c68:	2378      	movs	r3, #120	; 0x78
 8005c6a:	4828      	ldr	r0, [pc, #160]	; (8005d0c <_printf_i+0x248>)
 8005c6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c70:	e7e3      	b.n	8005c3a <_printf_i+0x176>
 8005c72:	0659      	lsls	r1, r3, #25
 8005c74:	bf48      	it	mi
 8005c76:	b2b6      	uxthmi	r6, r6
 8005c78:	e7e6      	b.n	8005c48 <_printf_i+0x184>
 8005c7a:	4615      	mov	r5, r2
 8005c7c:	e7bb      	b.n	8005bf6 <_printf_i+0x132>
 8005c7e:	682b      	ldr	r3, [r5, #0]
 8005c80:	6826      	ldr	r6, [r4, #0]
 8005c82:	1d18      	adds	r0, r3, #4
 8005c84:	6961      	ldr	r1, [r4, #20]
 8005c86:	6028      	str	r0, [r5, #0]
 8005c88:	0635      	lsls	r5, r6, #24
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	d501      	bpl.n	8005c92 <_printf_i+0x1ce>
 8005c8e:	6019      	str	r1, [r3, #0]
 8005c90:	e002      	b.n	8005c98 <_printf_i+0x1d4>
 8005c92:	0670      	lsls	r0, r6, #25
 8005c94:	d5fb      	bpl.n	8005c8e <_printf_i+0x1ca>
 8005c96:	8019      	strh	r1, [r3, #0]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4615      	mov	r5, r2
 8005c9c:	6123      	str	r3, [r4, #16]
 8005c9e:	e7ba      	b.n	8005c16 <_printf_i+0x152>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	1d1a      	adds	r2, r3, #4
 8005ca6:	602a      	str	r2, [r5, #0]
 8005ca8:	681d      	ldr	r5, [r3, #0]
 8005caa:	6862      	ldr	r2, [r4, #4]
 8005cac:	4628      	mov	r0, r5
 8005cae:	f000 fb23 	bl	80062f8 <memchr>
 8005cb2:	b108      	cbz	r0, 8005cb8 <_printf_i+0x1f4>
 8005cb4:	1b40      	subs	r0, r0, r5
 8005cb6:	6060      	str	r0, [r4, #4]
 8005cb8:	6863      	ldr	r3, [r4, #4]
 8005cba:	6123      	str	r3, [r4, #16]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc2:	e7a8      	b.n	8005c16 <_printf_i+0x152>
 8005cc4:	462a      	mov	r2, r5
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	4640      	mov	r0, r8
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	47d0      	blx	sl
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d0ab      	beq.n	8005c2a <_printf_i+0x166>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	079b      	lsls	r3, r3, #30
 8005cd6:	d413      	bmi.n	8005d00 <_printf_i+0x23c>
 8005cd8:	68e0      	ldr	r0, [r4, #12]
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	4298      	cmp	r0, r3
 8005cde:	bfb8      	it	lt
 8005ce0:	4618      	movlt	r0, r3
 8005ce2:	e7a4      	b.n	8005c2e <_printf_i+0x16a>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	4632      	mov	r2, r6
 8005ce8:	4649      	mov	r1, r9
 8005cea:	4640      	mov	r0, r8
 8005cec:	47d0      	blx	sl
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d09b      	beq.n	8005c2a <_printf_i+0x166>
 8005cf2:	3501      	adds	r5, #1
 8005cf4:	68e3      	ldr	r3, [r4, #12]
 8005cf6:	9903      	ldr	r1, [sp, #12]
 8005cf8:	1a5b      	subs	r3, r3, r1
 8005cfa:	42ab      	cmp	r3, r5
 8005cfc:	dcf2      	bgt.n	8005ce4 <_printf_i+0x220>
 8005cfe:	e7eb      	b.n	8005cd8 <_printf_i+0x214>
 8005d00:	2500      	movs	r5, #0
 8005d02:	f104 0619 	add.w	r6, r4, #25
 8005d06:	e7f5      	b.n	8005cf4 <_printf_i+0x230>
 8005d08:	080068f5 	.word	0x080068f5
 8005d0c:	08006906 	.word	0x08006906

08005d10 <_sbrk_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	2300      	movs	r3, #0
 8005d14:	4d05      	ldr	r5, [pc, #20]	; (8005d2c <_sbrk_r+0x1c>)
 8005d16:	4604      	mov	r4, r0
 8005d18:	4608      	mov	r0, r1
 8005d1a:	602b      	str	r3, [r5, #0]
 8005d1c:	f7fc f93c 	bl	8001f98 <_sbrk>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_sbrk_r+0x1a>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_sbrk_r+0x1a>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	20000344 	.word	0x20000344

08005d30 <__swbuf_r>:
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d32:	460e      	mov	r6, r1
 8005d34:	4614      	mov	r4, r2
 8005d36:	4605      	mov	r5, r0
 8005d38:	b118      	cbz	r0, 8005d42 <__swbuf_r+0x12>
 8005d3a:	6983      	ldr	r3, [r0, #24]
 8005d3c:	b90b      	cbnz	r3, 8005d42 <__swbuf_r+0x12>
 8005d3e:	f000 f9d5 	bl	80060ec <__sinit>
 8005d42:	4b21      	ldr	r3, [pc, #132]	; (8005dc8 <__swbuf_r+0x98>)
 8005d44:	429c      	cmp	r4, r3
 8005d46:	d12b      	bne.n	8005da0 <__swbuf_r+0x70>
 8005d48:	686c      	ldr	r4, [r5, #4]
 8005d4a:	69a3      	ldr	r3, [r4, #24]
 8005d4c:	60a3      	str	r3, [r4, #8]
 8005d4e:	89a3      	ldrh	r3, [r4, #12]
 8005d50:	071a      	lsls	r2, r3, #28
 8005d52:	d52f      	bpl.n	8005db4 <__swbuf_r+0x84>
 8005d54:	6923      	ldr	r3, [r4, #16]
 8005d56:	b36b      	cbz	r3, 8005db4 <__swbuf_r+0x84>
 8005d58:	6923      	ldr	r3, [r4, #16]
 8005d5a:	6820      	ldr	r0, [r4, #0]
 8005d5c:	b2f6      	uxtb	r6, r6
 8005d5e:	1ac0      	subs	r0, r0, r3
 8005d60:	6963      	ldr	r3, [r4, #20]
 8005d62:	4637      	mov	r7, r6
 8005d64:	4283      	cmp	r3, r0
 8005d66:	dc04      	bgt.n	8005d72 <__swbuf_r+0x42>
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f000 f92a 	bl	8005fc4 <_fflush_r>
 8005d70:	bb30      	cbnz	r0, 8005dc0 <__swbuf_r+0x90>
 8005d72:	68a3      	ldr	r3, [r4, #8]
 8005d74:	3001      	adds	r0, #1
 8005d76:	3b01      	subs	r3, #1
 8005d78:	60a3      	str	r3, [r4, #8]
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	6022      	str	r2, [r4, #0]
 8005d80:	701e      	strb	r6, [r3, #0]
 8005d82:	6963      	ldr	r3, [r4, #20]
 8005d84:	4283      	cmp	r3, r0
 8005d86:	d004      	beq.n	8005d92 <__swbuf_r+0x62>
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	07db      	lsls	r3, r3, #31
 8005d8c:	d506      	bpl.n	8005d9c <__swbuf_r+0x6c>
 8005d8e:	2e0a      	cmp	r6, #10
 8005d90:	d104      	bne.n	8005d9c <__swbuf_r+0x6c>
 8005d92:	4621      	mov	r1, r4
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 f915 	bl	8005fc4 <_fflush_r>
 8005d9a:	b988      	cbnz	r0, 8005dc0 <__swbuf_r+0x90>
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005da0:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <__swbuf_r+0x9c>)
 8005da2:	429c      	cmp	r4, r3
 8005da4:	d101      	bne.n	8005daa <__swbuf_r+0x7a>
 8005da6:	68ac      	ldr	r4, [r5, #8]
 8005da8:	e7cf      	b.n	8005d4a <__swbuf_r+0x1a>
 8005daa:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <__swbuf_r+0xa0>)
 8005dac:	429c      	cmp	r4, r3
 8005dae:	bf08      	it	eq
 8005db0:	68ec      	ldreq	r4, [r5, #12]
 8005db2:	e7ca      	b.n	8005d4a <__swbuf_r+0x1a>
 8005db4:	4621      	mov	r1, r4
 8005db6:	4628      	mov	r0, r5
 8005db8:	f000 f80c 	bl	8005dd4 <__swsetup_r>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d0cb      	beq.n	8005d58 <__swbuf_r+0x28>
 8005dc0:	f04f 37ff 	mov.w	r7, #4294967295
 8005dc4:	e7ea      	b.n	8005d9c <__swbuf_r+0x6c>
 8005dc6:	bf00      	nop
 8005dc8:	08006938 	.word	0x08006938
 8005dcc:	08006958 	.word	0x08006958
 8005dd0:	08006918 	.word	0x08006918

08005dd4 <__swsetup_r>:
 8005dd4:	4b32      	ldr	r3, [pc, #200]	; (8005ea0 <__swsetup_r+0xcc>)
 8005dd6:	b570      	push	{r4, r5, r6, lr}
 8005dd8:	681d      	ldr	r5, [r3, #0]
 8005dda:	4606      	mov	r6, r0
 8005ddc:	460c      	mov	r4, r1
 8005dde:	b125      	cbz	r5, 8005dea <__swsetup_r+0x16>
 8005de0:	69ab      	ldr	r3, [r5, #24]
 8005de2:	b913      	cbnz	r3, 8005dea <__swsetup_r+0x16>
 8005de4:	4628      	mov	r0, r5
 8005de6:	f000 f981 	bl	80060ec <__sinit>
 8005dea:	4b2e      	ldr	r3, [pc, #184]	; (8005ea4 <__swsetup_r+0xd0>)
 8005dec:	429c      	cmp	r4, r3
 8005dee:	d10f      	bne.n	8005e10 <__swsetup_r+0x3c>
 8005df0:	686c      	ldr	r4, [r5, #4]
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005df8:	0719      	lsls	r1, r3, #28
 8005dfa:	d42c      	bmi.n	8005e56 <__swsetup_r+0x82>
 8005dfc:	06dd      	lsls	r5, r3, #27
 8005dfe:	d411      	bmi.n	8005e24 <__swsetup_r+0x50>
 8005e00:	2309      	movs	r3, #9
 8005e02:	6033      	str	r3, [r6, #0]
 8005e04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e08:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0c:	81a3      	strh	r3, [r4, #12]
 8005e0e:	e03e      	b.n	8005e8e <__swsetup_r+0xba>
 8005e10:	4b25      	ldr	r3, [pc, #148]	; (8005ea8 <__swsetup_r+0xd4>)
 8005e12:	429c      	cmp	r4, r3
 8005e14:	d101      	bne.n	8005e1a <__swsetup_r+0x46>
 8005e16:	68ac      	ldr	r4, [r5, #8]
 8005e18:	e7eb      	b.n	8005df2 <__swsetup_r+0x1e>
 8005e1a:	4b24      	ldr	r3, [pc, #144]	; (8005eac <__swsetup_r+0xd8>)
 8005e1c:	429c      	cmp	r4, r3
 8005e1e:	bf08      	it	eq
 8005e20:	68ec      	ldreq	r4, [r5, #12]
 8005e22:	e7e6      	b.n	8005df2 <__swsetup_r+0x1e>
 8005e24:	0758      	lsls	r0, r3, #29
 8005e26:	d512      	bpl.n	8005e4e <__swsetup_r+0x7a>
 8005e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e2a:	b141      	cbz	r1, 8005e3e <__swsetup_r+0x6a>
 8005e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e30:	4299      	cmp	r1, r3
 8005e32:	d002      	beq.n	8005e3a <__swsetup_r+0x66>
 8005e34:	4630      	mov	r0, r6
 8005e36:	f7ff fa45 	bl	80052c4 <_free_r>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	6363      	str	r3, [r4, #52]	; 0x34
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e44:	81a3      	strh	r3, [r4, #12]
 8005e46:	2300      	movs	r3, #0
 8005e48:	6063      	str	r3, [r4, #4]
 8005e4a:	6923      	ldr	r3, [r4, #16]
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	f043 0308 	orr.w	r3, r3, #8
 8005e54:	81a3      	strh	r3, [r4, #12]
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	b94b      	cbnz	r3, 8005e6e <__swsetup_r+0x9a>
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e64:	d003      	beq.n	8005e6e <__swsetup_r+0x9a>
 8005e66:	4621      	mov	r1, r4
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f000 fa05 	bl	8006278 <__smakebuf_r>
 8005e6e:	89a0      	ldrh	r0, [r4, #12]
 8005e70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e74:	f010 0301 	ands.w	r3, r0, #1
 8005e78:	d00a      	beq.n	8005e90 <__swsetup_r+0xbc>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60a3      	str	r3, [r4, #8]
 8005e7e:	6963      	ldr	r3, [r4, #20]
 8005e80:	425b      	negs	r3, r3
 8005e82:	61a3      	str	r3, [r4, #24]
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	b943      	cbnz	r3, 8005e9a <__swsetup_r+0xc6>
 8005e88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e8c:	d1ba      	bne.n	8005e04 <__swsetup_r+0x30>
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	0781      	lsls	r1, r0, #30
 8005e92:	bf58      	it	pl
 8005e94:	6963      	ldrpl	r3, [r4, #20]
 8005e96:	60a3      	str	r3, [r4, #8]
 8005e98:	e7f4      	b.n	8005e84 <__swsetup_r+0xb0>
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	e7f7      	b.n	8005e8e <__swsetup_r+0xba>
 8005e9e:	bf00      	nop
 8005ea0:	200000c8 	.word	0x200000c8
 8005ea4:	08006938 	.word	0x08006938
 8005ea8:	08006958 	.word	0x08006958
 8005eac:	08006918 	.word	0x08006918

08005eb0 <abort>:
 8005eb0:	2006      	movs	r0, #6
 8005eb2:	b508      	push	{r3, lr}
 8005eb4:	f000 faac 	bl	8006410 <raise>
 8005eb8:	2001      	movs	r0, #1
 8005eba:	f7fb fffa 	bl	8001eb2 <_exit>
	...

08005ec0 <__sflush_r>:
 8005ec0:	898a      	ldrh	r2, [r1, #12]
 8005ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	0710      	lsls	r0, r2, #28
 8005ec8:	460c      	mov	r4, r1
 8005eca:	d457      	bmi.n	8005f7c <__sflush_r+0xbc>
 8005ecc:	684b      	ldr	r3, [r1, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	dc04      	bgt.n	8005edc <__sflush_r+0x1c>
 8005ed2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	dc01      	bgt.n	8005edc <__sflush_r+0x1c>
 8005ed8:	2000      	movs	r0, #0
 8005eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ede:	2e00      	cmp	r6, #0
 8005ee0:	d0fa      	beq.n	8005ed8 <__sflush_r+0x18>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ee8:	682f      	ldr	r7, [r5, #0]
 8005eea:	602b      	str	r3, [r5, #0]
 8005eec:	d032      	beq.n	8005f54 <__sflush_r+0x94>
 8005eee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	075a      	lsls	r2, r3, #29
 8005ef4:	d505      	bpl.n	8005f02 <__sflush_r+0x42>
 8005ef6:	6863      	ldr	r3, [r4, #4]
 8005ef8:	1ac0      	subs	r0, r0, r3
 8005efa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005efc:	b10b      	cbz	r3, 8005f02 <__sflush_r+0x42>
 8005efe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f00:	1ac0      	subs	r0, r0, r3
 8005f02:	2300      	movs	r3, #0
 8005f04:	4602      	mov	r2, r0
 8005f06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f08:	4628      	mov	r0, r5
 8005f0a:	6a21      	ldr	r1, [r4, #32]
 8005f0c:	47b0      	blx	r6
 8005f0e:	1c43      	adds	r3, r0, #1
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	d106      	bne.n	8005f22 <__sflush_r+0x62>
 8005f14:	6829      	ldr	r1, [r5, #0]
 8005f16:	291d      	cmp	r1, #29
 8005f18:	d82c      	bhi.n	8005f74 <__sflush_r+0xb4>
 8005f1a:	4a29      	ldr	r2, [pc, #164]	; (8005fc0 <__sflush_r+0x100>)
 8005f1c:	40ca      	lsrs	r2, r1
 8005f1e:	07d6      	lsls	r6, r2, #31
 8005f20:	d528      	bpl.n	8005f74 <__sflush_r+0xb4>
 8005f22:	2200      	movs	r2, #0
 8005f24:	6062      	str	r2, [r4, #4]
 8005f26:	6922      	ldr	r2, [r4, #16]
 8005f28:	04d9      	lsls	r1, r3, #19
 8005f2a:	6022      	str	r2, [r4, #0]
 8005f2c:	d504      	bpl.n	8005f38 <__sflush_r+0x78>
 8005f2e:	1c42      	adds	r2, r0, #1
 8005f30:	d101      	bne.n	8005f36 <__sflush_r+0x76>
 8005f32:	682b      	ldr	r3, [r5, #0]
 8005f34:	b903      	cbnz	r3, 8005f38 <__sflush_r+0x78>
 8005f36:	6560      	str	r0, [r4, #84]	; 0x54
 8005f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f3a:	602f      	str	r7, [r5, #0]
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	d0cb      	beq.n	8005ed8 <__sflush_r+0x18>
 8005f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f44:	4299      	cmp	r1, r3
 8005f46:	d002      	beq.n	8005f4e <__sflush_r+0x8e>
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f7ff f9bb 	bl	80052c4 <_free_r>
 8005f4e:	2000      	movs	r0, #0
 8005f50:	6360      	str	r0, [r4, #52]	; 0x34
 8005f52:	e7c2      	b.n	8005eda <__sflush_r+0x1a>
 8005f54:	6a21      	ldr	r1, [r4, #32]
 8005f56:	2301      	movs	r3, #1
 8005f58:	4628      	mov	r0, r5
 8005f5a:	47b0      	blx	r6
 8005f5c:	1c41      	adds	r1, r0, #1
 8005f5e:	d1c7      	bne.n	8005ef0 <__sflush_r+0x30>
 8005f60:	682b      	ldr	r3, [r5, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0c4      	beq.n	8005ef0 <__sflush_r+0x30>
 8005f66:	2b1d      	cmp	r3, #29
 8005f68:	d001      	beq.n	8005f6e <__sflush_r+0xae>
 8005f6a:	2b16      	cmp	r3, #22
 8005f6c:	d101      	bne.n	8005f72 <__sflush_r+0xb2>
 8005f6e:	602f      	str	r7, [r5, #0]
 8005f70:	e7b2      	b.n	8005ed8 <__sflush_r+0x18>
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f78:	81a3      	strh	r3, [r4, #12]
 8005f7a:	e7ae      	b.n	8005eda <__sflush_r+0x1a>
 8005f7c:	690f      	ldr	r7, [r1, #16]
 8005f7e:	2f00      	cmp	r7, #0
 8005f80:	d0aa      	beq.n	8005ed8 <__sflush_r+0x18>
 8005f82:	0793      	lsls	r3, r2, #30
 8005f84:	bf18      	it	ne
 8005f86:	2300      	movne	r3, #0
 8005f88:	680e      	ldr	r6, [r1, #0]
 8005f8a:	bf08      	it	eq
 8005f8c:	694b      	ldreq	r3, [r1, #20]
 8005f8e:	1bf6      	subs	r6, r6, r7
 8005f90:	600f      	str	r7, [r1, #0]
 8005f92:	608b      	str	r3, [r1, #8]
 8005f94:	2e00      	cmp	r6, #0
 8005f96:	dd9f      	ble.n	8005ed8 <__sflush_r+0x18>
 8005f98:	4633      	mov	r3, r6
 8005f9a:	463a      	mov	r2, r7
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	6a21      	ldr	r1, [r4, #32]
 8005fa0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005fa4:	47e0      	blx	ip
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	dc06      	bgt.n	8005fb8 <__sflush_r+0xf8>
 8005faa:	89a3      	ldrh	r3, [r4, #12]
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fb4:	81a3      	strh	r3, [r4, #12]
 8005fb6:	e790      	b.n	8005eda <__sflush_r+0x1a>
 8005fb8:	4407      	add	r7, r0
 8005fba:	1a36      	subs	r6, r6, r0
 8005fbc:	e7ea      	b.n	8005f94 <__sflush_r+0xd4>
 8005fbe:	bf00      	nop
 8005fc0:	20400001 	.word	0x20400001

08005fc4 <_fflush_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	690b      	ldr	r3, [r1, #16]
 8005fc8:	4605      	mov	r5, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	b913      	cbnz	r3, 8005fd4 <_fflush_r+0x10>
 8005fce:	2500      	movs	r5, #0
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	b118      	cbz	r0, 8005fde <_fflush_r+0x1a>
 8005fd6:	6983      	ldr	r3, [r0, #24]
 8005fd8:	b90b      	cbnz	r3, 8005fde <_fflush_r+0x1a>
 8005fda:	f000 f887 	bl	80060ec <__sinit>
 8005fde:	4b14      	ldr	r3, [pc, #80]	; (8006030 <_fflush_r+0x6c>)
 8005fe0:	429c      	cmp	r4, r3
 8005fe2:	d11b      	bne.n	800601c <_fflush_r+0x58>
 8005fe4:	686c      	ldr	r4, [r5, #4]
 8005fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0ef      	beq.n	8005fce <_fflush_r+0xa>
 8005fee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ff0:	07d0      	lsls	r0, r2, #31
 8005ff2:	d404      	bmi.n	8005ffe <_fflush_r+0x3a>
 8005ff4:	0599      	lsls	r1, r3, #22
 8005ff6:	d402      	bmi.n	8005ffe <_fflush_r+0x3a>
 8005ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ffa:	f000 f915 	bl	8006228 <__retarget_lock_acquire_recursive>
 8005ffe:	4628      	mov	r0, r5
 8006000:	4621      	mov	r1, r4
 8006002:	f7ff ff5d 	bl	8005ec0 <__sflush_r>
 8006006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006008:	4605      	mov	r5, r0
 800600a:	07da      	lsls	r2, r3, #31
 800600c:	d4e0      	bmi.n	8005fd0 <_fflush_r+0xc>
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	059b      	lsls	r3, r3, #22
 8006012:	d4dd      	bmi.n	8005fd0 <_fflush_r+0xc>
 8006014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006016:	f000 f908 	bl	800622a <__retarget_lock_release_recursive>
 800601a:	e7d9      	b.n	8005fd0 <_fflush_r+0xc>
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <_fflush_r+0x70>)
 800601e:	429c      	cmp	r4, r3
 8006020:	d101      	bne.n	8006026 <_fflush_r+0x62>
 8006022:	68ac      	ldr	r4, [r5, #8]
 8006024:	e7df      	b.n	8005fe6 <_fflush_r+0x22>
 8006026:	4b04      	ldr	r3, [pc, #16]	; (8006038 <_fflush_r+0x74>)
 8006028:	429c      	cmp	r4, r3
 800602a:	bf08      	it	eq
 800602c:	68ec      	ldreq	r4, [r5, #12]
 800602e:	e7da      	b.n	8005fe6 <_fflush_r+0x22>
 8006030:	08006938 	.word	0x08006938
 8006034:	08006958 	.word	0x08006958
 8006038:	08006918 	.word	0x08006918

0800603c <std>:
 800603c:	2300      	movs	r3, #0
 800603e:	b510      	push	{r4, lr}
 8006040:	4604      	mov	r4, r0
 8006042:	e9c0 3300 	strd	r3, r3, [r0]
 8006046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800604a:	6083      	str	r3, [r0, #8]
 800604c:	8181      	strh	r1, [r0, #12]
 800604e:	6643      	str	r3, [r0, #100]	; 0x64
 8006050:	81c2      	strh	r2, [r0, #14]
 8006052:	6183      	str	r3, [r0, #24]
 8006054:	4619      	mov	r1, r3
 8006056:	2208      	movs	r2, #8
 8006058:	305c      	adds	r0, #92	; 0x5c
 800605a:	f7ff f861 	bl	8005120 <memset>
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <std+0x38>)
 8006060:	6224      	str	r4, [r4, #32]
 8006062:	6263      	str	r3, [r4, #36]	; 0x24
 8006064:	4b04      	ldr	r3, [pc, #16]	; (8006078 <std+0x3c>)
 8006066:	62a3      	str	r3, [r4, #40]	; 0x28
 8006068:	4b04      	ldr	r3, [pc, #16]	; (800607c <std+0x40>)
 800606a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800606c:	4b04      	ldr	r3, [pc, #16]	; (8006080 <std+0x44>)
 800606e:	6323      	str	r3, [r4, #48]	; 0x30
 8006070:	bd10      	pop	{r4, pc}
 8006072:	bf00      	nop
 8006074:	08006449 	.word	0x08006449
 8006078:	0800646b 	.word	0x0800646b
 800607c:	080064a3 	.word	0x080064a3
 8006080:	080064c7 	.word	0x080064c7

08006084 <_cleanup_r>:
 8006084:	4901      	ldr	r1, [pc, #4]	; (800608c <_cleanup_r+0x8>)
 8006086:	f000 b8af 	b.w	80061e8 <_fwalk_reent>
 800608a:	bf00      	nop
 800608c:	08005fc5 	.word	0x08005fc5

08006090 <__sfmoreglue>:
 8006090:	2268      	movs	r2, #104	; 0x68
 8006092:	b570      	push	{r4, r5, r6, lr}
 8006094:	1e4d      	subs	r5, r1, #1
 8006096:	4355      	muls	r5, r2
 8006098:	460e      	mov	r6, r1
 800609a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800609e:	f7ff f979 	bl	8005394 <_malloc_r>
 80060a2:	4604      	mov	r4, r0
 80060a4:	b140      	cbz	r0, 80060b8 <__sfmoreglue+0x28>
 80060a6:	2100      	movs	r1, #0
 80060a8:	e9c0 1600 	strd	r1, r6, [r0]
 80060ac:	300c      	adds	r0, #12
 80060ae:	60a0      	str	r0, [r4, #8]
 80060b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060b4:	f7ff f834 	bl	8005120 <memset>
 80060b8:	4620      	mov	r0, r4
 80060ba:	bd70      	pop	{r4, r5, r6, pc}

080060bc <__sfp_lock_acquire>:
 80060bc:	4801      	ldr	r0, [pc, #4]	; (80060c4 <__sfp_lock_acquire+0x8>)
 80060be:	f000 b8b3 	b.w	8006228 <__retarget_lock_acquire_recursive>
 80060c2:	bf00      	nop
 80060c4:	20000341 	.word	0x20000341

080060c8 <__sfp_lock_release>:
 80060c8:	4801      	ldr	r0, [pc, #4]	; (80060d0 <__sfp_lock_release+0x8>)
 80060ca:	f000 b8ae 	b.w	800622a <__retarget_lock_release_recursive>
 80060ce:	bf00      	nop
 80060d0:	20000341 	.word	0x20000341

080060d4 <__sinit_lock_acquire>:
 80060d4:	4801      	ldr	r0, [pc, #4]	; (80060dc <__sinit_lock_acquire+0x8>)
 80060d6:	f000 b8a7 	b.w	8006228 <__retarget_lock_acquire_recursive>
 80060da:	bf00      	nop
 80060dc:	20000342 	.word	0x20000342

080060e0 <__sinit_lock_release>:
 80060e0:	4801      	ldr	r0, [pc, #4]	; (80060e8 <__sinit_lock_release+0x8>)
 80060e2:	f000 b8a2 	b.w	800622a <__retarget_lock_release_recursive>
 80060e6:	bf00      	nop
 80060e8:	20000342 	.word	0x20000342

080060ec <__sinit>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	4604      	mov	r4, r0
 80060f0:	f7ff fff0 	bl	80060d4 <__sinit_lock_acquire>
 80060f4:	69a3      	ldr	r3, [r4, #24]
 80060f6:	b11b      	cbz	r3, 8006100 <__sinit+0x14>
 80060f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060fc:	f7ff bff0 	b.w	80060e0 <__sinit_lock_release>
 8006100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006104:	6523      	str	r3, [r4, #80]	; 0x50
 8006106:	4b13      	ldr	r3, [pc, #76]	; (8006154 <__sinit+0x68>)
 8006108:	4a13      	ldr	r2, [pc, #76]	; (8006158 <__sinit+0x6c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	62a2      	str	r2, [r4, #40]	; 0x28
 800610e:	42a3      	cmp	r3, r4
 8006110:	bf08      	it	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	4620      	mov	r0, r4
 8006116:	bf08      	it	eq
 8006118:	61a3      	streq	r3, [r4, #24]
 800611a:	f000 f81f 	bl	800615c <__sfp>
 800611e:	6060      	str	r0, [r4, #4]
 8006120:	4620      	mov	r0, r4
 8006122:	f000 f81b 	bl	800615c <__sfp>
 8006126:	60a0      	str	r0, [r4, #8]
 8006128:	4620      	mov	r0, r4
 800612a:	f000 f817 	bl	800615c <__sfp>
 800612e:	2200      	movs	r2, #0
 8006130:	2104      	movs	r1, #4
 8006132:	60e0      	str	r0, [r4, #12]
 8006134:	6860      	ldr	r0, [r4, #4]
 8006136:	f7ff ff81 	bl	800603c <std>
 800613a:	2201      	movs	r2, #1
 800613c:	2109      	movs	r1, #9
 800613e:	68a0      	ldr	r0, [r4, #8]
 8006140:	f7ff ff7c 	bl	800603c <std>
 8006144:	2202      	movs	r2, #2
 8006146:	2112      	movs	r1, #18
 8006148:	68e0      	ldr	r0, [r4, #12]
 800614a:	f7ff ff77 	bl	800603c <std>
 800614e:	2301      	movs	r3, #1
 8006150:	61a3      	str	r3, [r4, #24]
 8006152:	e7d1      	b.n	80060f8 <__sinit+0xc>
 8006154:	08006830 	.word	0x08006830
 8006158:	08006085 	.word	0x08006085

0800615c <__sfp>:
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615e:	4607      	mov	r7, r0
 8006160:	f7ff ffac 	bl	80060bc <__sfp_lock_acquire>
 8006164:	4b1e      	ldr	r3, [pc, #120]	; (80061e0 <__sfp+0x84>)
 8006166:	681e      	ldr	r6, [r3, #0]
 8006168:	69b3      	ldr	r3, [r6, #24]
 800616a:	b913      	cbnz	r3, 8006172 <__sfp+0x16>
 800616c:	4630      	mov	r0, r6
 800616e:	f7ff ffbd 	bl	80060ec <__sinit>
 8006172:	3648      	adds	r6, #72	; 0x48
 8006174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006178:	3b01      	subs	r3, #1
 800617a:	d503      	bpl.n	8006184 <__sfp+0x28>
 800617c:	6833      	ldr	r3, [r6, #0]
 800617e:	b30b      	cbz	r3, 80061c4 <__sfp+0x68>
 8006180:	6836      	ldr	r6, [r6, #0]
 8006182:	e7f7      	b.n	8006174 <__sfp+0x18>
 8006184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006188:	b9d5      	cbnz	r5, 80061c0 <__sfp+0x64>
 800618a:	4b16      	ldr	r3, [pc, #88]	; (80061e4 <__sfp+0x88>)
 800618c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006190:	60e3      	str	r3, [r4, #12]
 8006192:	6665      	str	r5, [r4, #100]	; 0x64
 8006194:	f000 f847 	bl	8006226 <__retarget_lock_init_recursive>
 8006198:	f7ff ff96 	bl	80060c8 <__sfp_lock_release>
 800619c:	2208      	movs	r2, #8
 800619e:	4629      	mov	r1, r5
 80061a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80061a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80061a8:	6025      	str	r5, [r4, #0]
 80061aa:	61a5      	str	r5, [r4, #24]
 80061ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061b0:	f7fe ffb6 	bl	8005120 <memset>
 80061b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061bc:	4620      	mov	r0, r4
 80061be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c0:	3468      	adds	r4, #104	; 0x68
 80061c2:	e7d9      	b.n	8006178 <__sfp+0x1c>
 80061c4:	2104      	movs	r1, #4
 80061c6:	4638      	mov	r0, r7
 80061c8:	f7ff ff62 	bl	8006090 <__sfmoreglue>
 80061cc:	4604      	mov	r4, r0
 80061ce:	6030      	str	r0, [r6, #0]
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d1d5      	bne.n	8006180 <__sfp+0x24>
 80061d4:	f7ff ff78 	bl	80060c8 <__sfp_lock_release>
 80061d8:	230c      	movs	r3, #12
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	e7ee      	b.n	80061bc <__sfp+0x60>
 80061de:	bf00      	nop
 80061e0:	08006830 	.word	0x08006830
 80061e4:	ffff0001 	.word	0xffff0001

080061e8 <_fwalk_reent>:
 80061e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ec:	4606      	mov	r6, r0
 80061ee:	4688      	mov	r8, r1
 80061f0:	2700      	movs	r7, #0
 80061f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061fa:	f1b9 0901 	subs.w	r9, r9, #1
 80061fe:	d505      	bpl.n	800620c <_fwalk_reent+0x24>
 8006200:	6824      	ldr	r4, [r4, #0]
 8006202:	2c00      	cmp	r4, #0
 8006204:	d1f7      	bne.n	80061f6 <_fwalk_reent+0xe>
 8006206:	4638      	mov	r0, r7
 8006208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800620c:	89ab      	ldrh	r3, [r5, #12]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d907      	bls.n	8006222 <_fwalk_reent+0x3a>
 8006212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006216:	3301      	adds	r3, #1
 8006218:	d003      	beq.n	8006222 <_fwalk_reent+0x3a>
 800621a:	4629      	mov	r1, r5
 800621c:	4630      	mov	r0, r6
 800621e:	47c0      	blx	r8
 8006220:	4307      	orrs	r7, r0
 8006222:	3568      	adds	r5, #104	; 0x68
 8006224:	e7e9      	b.n	80061fa <_fwalk_reent+0x12>

08006226 <__retarget_lock_init_recursive>:
 8006226:	4770      	bx	lr

08006228 <__retarget_lock_acquire_recursive>:
 8006228:	4770      	bx	lr

0800622a <__retarget_lock_release_recursive>:
 800622a:	4770      	bx	lr

0800622c <__swhatbuf_r>:
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	460e      	mov	r6, r1
 8006230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006234:	4614      	mov	r4, r2
 8006236:	2900      	cmp	r1, #0
 8006238:	461d      	mov	r5, r3
 800623a:	b096      	sub	sp, #88	; 0x58
 800623c:	da08      	bge.n	8006250 <__swhatbuf_r+0x24>
 800623e:	2200      	movs	r2, #0
 8006240:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006244:	602a      	str	r2, [r5, #0]
 8006246:	061a      	lsls	r2, r3, #24
 8006248:	d410      	bmi.n	800626c <__swhatbuf_r+0x40>
 800624a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800624e:	e00e      	b.n	800626e <__swhatbuf_r+0x42>
 8006250:	466a      	mov	r2, sp
 8006252:	f000 f95f 	bl	8006514 <_fstat_r>
 8006256:	2800      	cmp	r0, #0
 8006258:	dbf1      	blt.n	800623e <__swhatbuf_r+0x12>
 800625a:	9a01      	ldr	r2, [sp, #4]
 800625c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006260:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006264:	425a      	negs	r2, r3
 8006266:	415a      	adcs	r2, r3
 8006268:	602a      	str	r2, [r5, #0]
 800626a:	e7ee      	b.n	800624a <__swhatbuf_r+0x1e>
 800626c:	2340      	movs	r3, #64	; 0x40
 800626e:	2000      	movs	r0, #0
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	b016      	add	sp, #88	; 0x58
 8006274:	bd70      	pop	{r4, r5, r6, pc}
	...

08006278 <__smakebuf_r>:
 8006278:	898b      	ldrh	r3, [r1, #12]
 800627a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800627c:	079d      	lsls	r5, r3, #30
 800627e:	4606      	mov	r6, r0
 8006280:	460c      	mov	r4, r1
 8006282:	d507      	bpl.n	8006294 <__smakebuf_r+0x1c>
 8006284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	6123      	str	r3, [r4, #16]
 800628c:	2301      	movs	r3, #1
 800628e:	6163      	str	r3, [r4, #20]
 8006290:	b002      	add	sp, #8
 8006292:	bd70      	pop	{r4, r5, r6, pc}
 8006294:	466a      	mov	r2, sp
 8006296:	ab01      	add	r3, sp, #4
 8006298:	f7ff ffc8 	bl	800622c <__swhatbuf_r>
 800629c:	9900      	ldr	r1, [sp, #0]
 800629e:	4605      	mov	r5, r0
 80062a0:	4630      	mov	r0, r6
 80062a2:	f7ff f877 	bl	8005394 <_malloc_r>
 80062a6:	b948      	cbnz	r0, 80062bc <__smakebuf_r+0x44>
 80062a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ac:	059a      	lsls	r2, r3, #22
 80062ae:	d4ef      	bmi.n	8006290 <__smakebuf_r+0x18>
 80062b0:	f023 0303 	bic.w	r3, r3, #3
 80062b4:	f043 0302 	orr.w	r3, r3, #2
 80062b8:	81a3      	strh	r3, [r4, #12]
 80062ba:	e7e3      	b.n	8006284 <__smakebuf_r+0xc>
 80062bc:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <__smakebuf_r+0x7c>)
 80062be:	62b3      	str	r3, [r6, #40]	; 0x28
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	6020      	str	r0, [r4, #0]
 80062c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c8:	81a3      	strh	r3, [r4, #12]
 80062ca:	9b00      	ldr	r3, [sp, #0]
 80062cc:	6120      	str	r0, [r4, #16]
 80062ce:	6163      	str	r3, [r4, #20]
 80062d0:	9b01      	ldr	r3, [sp, #4]
 80062d2:	b15b      	cbz	r3, 80062ec <__smakebuf_r+0x74>
 80062d4:	4630      	mov	r0, r6
 80062d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062da:	f000 f92d 	bl	8006538 <_isatty_r>
 80062de:	b128      	cbz	r0, 80062ec <__smakebuf_r+0x74>
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	f043 0301 	orr.w	r3, r3, #1
 80062ea:	81a3      	strh	r3, [r4, #12]
 80062ec:	89a0      	ldrh	r0, [r4, #12]
 80062ee:	4305      	orrs	r5, r0
 80062f0:	81a5      	strh	r5, [r4, #12]
 80062f2:	e7cd      	b.n	8006290 <__smakebuf_r+0x18>
 80062f4:	08006085 	.word	0x08006085

080062f8 <memchr>:
 80062f8:	4603      	mov	r3, r0
 80062fa:	b510      	push	{r4, lr}
 80062fc:	b2c9      	uxtb	r1, r1
 80062fe:	4402      	add	r2, r0
 8006300:	4293      	cmp	r3, r2
 8006302:	4618      	mov	r0, r3
 8006304:	d101      	bne.n	800630a <memchr+0x12>
 8006306:	2000      	movs	r0, #0
 8006308:	e003      	b.n	8006312 <memchr+0x1a>
 800630a:	7804      	ldrb	r4, [r0, #0]
 800630c:	3301      	adds	r3, #1
 800630e:	428c      	cmp	r4, r1
 8006310:	d1f6      	bne.n	8006300 <memchr+0x8>
 8006312:	bd10      	pop	{r4, pc}

08006314 <memmove>:
 8006314:	4288      	cmp	r0, r1
 8006316:	b510      	push	{r4, lr}
 8006318:	eb01 0402 	add.w	r4, r1, r2
 800631c:	d902      	bls.n	8006324 <memmove+0x10>
 800631e:	4284      	cmp	r4, r0
 8006320:	4623      	mov	r3, r4
 8006322:	d807      	bhi.n	8006334 <memmove+0x20>
 8006324:	1e43      	subs	r3, r0, #1
 8006326:	42a1      	cmp	r1, r4
 8006328:	d008      	beq.n	800633c <memmove+0x28>
 800632a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800632e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006332:	e7f8      	b.n	8006326 <memmove+0x12>
 8006334:	4601      	mov	r1, r0
 8006336:	4402      	add	r2, r0
 8006338:	428a      	cmp	r2, r1
 800633a:	d100      	bne.n	800633e <memmove+0x2a>
 800633c:	bd10      	pop	{r4, pc}
 800633e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006346:	e7f7      	b.n	8006338 <memmove+0x24>

08006348 <__malloc_lock>:
 8006348:	4801      	ldr	r0, [pc, #4]	; (8006350 <__malloc_lock+0x8>)
 800634a:	f7ff bf6d 	b.w	8006228 <__retarget_lock_acquire_recursive>
 800634e:	bf00      	nop
 8006350:	20000340 	.word	0x20000340

08006354 <__malloc_unlock>:
 8006354:	4801      	ldr	r0, [pc, #4]	; (800635c <__malloc_unlock+0x8>)
 8006356:	f7ff bf68 	b.w	800622a <__retarget_lock_release_recursive>
 800635a:	bf00      	nop
 800635c:	20000340 	.word	0x20000340

08006360 <_realloc_r>:
 8006360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006364:	4680      	mov	r8, r0
 8006366:	4614      	mov	r4, r2
 8006368:	460e      	mov	r6, r1
 800636a:	b921      	cbnz	r1, 8006376 <_realloc_r+0x16>
 800636c:	4611      	mov	r1, r2
 800636e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006372:	f7ff b80f 	b.w	8005394 <_malloc_r>
 8006376:	b92a      	cbnz	r2, 8006384 <_realloc_r+0x24>
 8006378:	f7fe ffa4 	bl	80052c4 <_free_r>
 800637c:	4625      	mov	r5, r4
 800637e:	4628      	mov	r0, r5
 8006380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006384:	f000 f8fa 	bl	800657c <_malloc_usable_size_r>
 8006388:	4284      	cmp	r4, r0
 800638a:	4607      	mov	r7, r0
 800638c:	d802      	bhi.n	8006394 <_realloc_r+0x34>
 800638e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006392:	d812      	bhi.n	80063ba <_realloc_r+0x5a>
 8006394:	4621      	mov	r1, r4
 8006396:	4640      	mov	r0, r8
 8006398:	f7fe fffc 	bl	8005394 <_malloc_r>
 800639c:	4605      	mov	r5, r0
 800639e:	2800      	cmp	r0, #0
 80063a0:	d0ed      	beq.n	800637e <_realloc_r+0x1e>
 80063a2:	42bc      	cmp	r4, r7
 80063a4:	4622      	mov	r2, r4
 80063a6:	4631      	mov	r1, r6
 80063a8:	bf28      	it	cs
 80063aa:	463a      	movcs	r2, r7
 80063ac:	f7fe feaa 	bl	8005104 <memcpy>
 80063b0:	4631      	mov	r1, r6
 80063b2:	4640      	mov	r0, r8
 80063b4:	f7fe ff86 	bl	80052c4 <_free_r>
 80063b8:	e7e1      	b.n	800637e <_realloc_r+0x1e>
 80063ba:	4635      	mov	r5, r6
 80063bc:	e7df      	b.n	800637e <_realloc_r+0x1e>

080063be <_raise_r>:
 80063be:	291f      	cmp	r1, #31
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4604      	mov	r4, r0
 80063c4:	460d      	mov	r5, r1
 80063c6:	d904      	bls.n	80063d2 <_raise_r+0x14>
 80063c8:	2316      	movs	r3, #22
 80063ca:	6003      	str	r3, [r0, #0]
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295
 80063d0:	bd38      	pop	{r3, r4, r5, pc}
 80063d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80063d4:	b112      	cbz	r2, 80063dc <_raise_r+0x1e>
 80063d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063da:	b94b      	cbnz	r3, 80063f0 <_raise_r+0x32>
 80063dc:	4620      	mov	r0, r4
 80063de:	f000 f831 	bl	8006444 <_getpid_r>
 80063e2:	462a      	mov	r2, r5
 80063e4:	4601      	mov	r1, r0
 80063e6:	4620      	mov	r0, r4
 80063e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063ec:	f000 b818 	b.w	8006420 <_kill_r>
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d00a      	beq.n	800640a <_raise_r+0x4c>
 80063f4:	1c59      	adds	r1, r3, #1
 80063f6:	d103      	bne.n	8006400 <_raise_r+0x42>
 80063f8:	2316      	movs	r3, #22
 80063fa:	6003      	str	r3, [r0, #0]
 80063fc:	2001      	movs	r0, #1
 80063fe:	e7e7      	b.n	80063d0 <_raise_r+0x12>
 8006400:	2400      	movs	r4, #0
 8006402:	4628      	mov	r0, r5
 8006404:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006408:	4798      	blx	r3
 800640a:	2000      	movs	r0, #0
 800640c:	e7e0      	b.n	80063d0 <_raise_r+0x12>
	...

08006410 <raise>:
 8006410:	4b02      	ldr	r3, [pc, #8]	; (800641c <raise+0xc>)
 8006412:	4601      	mov	r1, r0
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	f7ff bfd2 	b.w	80063be <_raise_r>
 800641a:	bf00      	nop
 800641c:	200000c8 	.word	0x200000c8

08006420 <_kill_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	2300      	movs	r3, #0
 8006424:	4d06      	ldr	r5, [pc, #24]	; (8006440 <_kill_r+0x20>)
 8006426:	4604      	mov	r4, r0
 8006428:	4608      	mov	r0, r1
 800642a:	4611      	mov	r1, r2
 800642c:	602b      	str	r3, [r5, #0]
 800642e:	f7fb fd30 	bl	8001e92 <_kill>
 8006432:	1c43      	adds	r3, r0, #1
 8006434:	d102      	bne.n	800643c <_kill_r+0x1c>
 8006436:	682b      	ldr	r3, [r5, #0]
 8006438:	b103      	cbz	r3, 800643c <_kill_r+0x1c>
 800643a:	6023      	str	r3, [r4, #0]
 800643c:	bd38      	pop	{r3, r4, r5, pc}
 800643e:	bf00      	nop
 8006440:	20000344 	.word	0x20000344

08006444 <_getpid_r>:
 8006444:	f7fb bd1e 	b.w	8001e84 <_getpid>

08006448 <__sread>:
 8006448:	b510      	push	{r4, lr}
 800644a:	460c      	mov	r4, r1
 800644c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006450:	f000 f89c 	bl	800658c <_read_r>
 8006454:	2800      	cmp	r0, #0
 8006456:	bfab      	itete	ge
 8006458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800645a:	89a3      	ldrhlt	r3, [r4, #12]
 800645c:	181b      	addge	r3, r3, r0
 800645e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006462:	bfac      	ite	ge
 8006464:	6563      	strge	r3, [r4, #84]	; 0x54
 8006466:	81a3      	strhlt	r3, [r4, #12]
 8006468:	bd10      	pop	{r4, pc}

0800646a <__swrite>:
 800646a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800646e:	461f      	mov	r7, r3
 8006470:	898b      	ldrh	r3, [r1, #12]
 8006472:	4605      	mov	r5, r0
 8006474:	05db      	lsls	r3, r3, #23
 8006476:	460c      	mov	r4, r1
 8006478:	4616      	mov	r6, r2
 800647a:	d505      	bpl.n	8006488 <__swrite+0x1e>
 800647c:	2302      	movs	r3, #2
 800647e:	2200      	movs	r2, #0
 8006480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006484:	f000 f868 	bl	8006558 <_lseek_r>
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	4632      	mov	r2, r6
 800648c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	4628      	mov	r0, r5
 8006494:	463b      	mov	r3, r7
 8006496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800649a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800649e:	f000 b817 	b.w	80064d0 <_write_r>

080064a2 <__sseek>:
 80064a2:	b510      	push	{r4, lr}
 80064a4:	460c      	mov	r4, r1
 80064a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064aa:	f000 f855 	bl	8006558 <_lseek_r>
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	bf15      	itete	ne
 80064b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80064b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064be:	81a3      	strheq	r3, [r4, #12]
 80064c0:	bf18      	it	ne
 80064c2:	81a3      	strhne	r3, [r4, #12]
 80064c4:	bd10      	pop	{r4, pc}

080064c6 <__sclose>:
 80064c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ca:	f000 b813 	b.w	80064f4 <_close_r>
	...

080064d0 <_write_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4604      	mov	r4, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	4611      	mov	r1, r2
 80064d8:	2200      	movs	r2, #0
 80064da:	4d05      	ldr	r5, [pc, #20]	; (80064f0 <_write_r+0x20>)
 80064dc:	602a      	str	r2, [r5, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	f7fb fd0e 	bl	8001f00 <_write>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d102      	bne.n	80064ee <_write_r+0x1e>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	b103      	cbz	r3, 80064ee <_write_r+0x1e>
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	20000344 	.word	0x20000344

080064f4 <_close_r>:
 80064f4:	b538      	push	{r3, r4, r5, lr}
 80064f6:	2300      	movs	r3, #0
 80064f8:	4d05      	ldr	r5, [pc, #20]	; (8006510 <_close_r+0x1c>)
 80064fa:	4604      	mov	r4, r0
 80064fc:	4608      	mov	r0, r1
 80064fe:	602b      	str	r3, [r5, #0]
 8006500:	f7fb fd1a 	bl	8001f38 <_close>
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	d102      	bne.n	800650e <_close_r+0x1a>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	b103      	cbz	r3, 800650e <_close_r+0x1a>
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	bd38      	pop	{r3, r4, r5, pc}
 8006510:	20000344 	.word	0x20000344

08006514 <_fstat_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	2300      	movs	r3, #0
 8006518:	4d06      	ldr	r5, [pc, #24]	; (8006534 <_fstat_r+0x20>)
 800651a:	4604      	mov	r4, r0
 800651c:	4608      	mov	r0, r1
 800651e:	4611      	mov	r1, r2
 8006520:	602b      	str	r3, [r5, #0]
 8006522:	f7fb fd14 	bl	8001f4e <_fstat>
 8006526:	1c43      	adds	r3, r0, #1
 8006528:	d102      	bne.n	8006530 <_fstat_r+0x1c>
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	b103      	cbz	r3, 8006530 <_fstat_r+0x1c>
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	bd38      	pop	{r3, r4, r5, pc}
 8006532:	bf00      	nop
 8006534:	20000344 	.word	0x20000344

08006538 <_isatty_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	2300      	movs	r3, #0
 800653c:	4d05      	ldr	r5, [pc, #20]	; (8006554 <_isatty_r+0x1c>)
 800653e:	4604      	mov	r4, r0
 8006540:	4608      	mov	r0, r1
 8006542:	602b      	str	r3, [r5, #0]
 8006544:	f7fb fd12 	bl	8001f6c <_isatty>
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d102      	bne.n	8006552 <_isatty_r+0x1a>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	b103      	cbz	r3, 8006552 <_isatty_r+0x1a>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	20000344 	.word	0x20000344

08006558 <_lseek_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4604      	mov	r4, r0
 800655c:	4608      	mov	r0, r1
 800655e:	4611      	mov	r1, r2
 8006560:	2200      	movs	r2, #0
 8006562:	4d05      	ldr	r5, [pc, #20]	; (8006578 <_lseek_r+0x20>)
 8006564:	602a      	str	r2, [r5, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	f7fb fd0a 	bl	8001f80 <_lseek>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_lseek_r+0x1e>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_lseek_r+0x1e>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	20000344 	.word	0x20000344

0800657c <_malloc_usable_size_r>:
 800657c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006580:	1f18      	subs	r0, r3, #4
 8006582:	2b00      	cmp	r3, #0
 8006584:	bfbc      	itt	lt
 8006586:	580b      	ldrlt	r3, [r1, r0]
 8006588:	18c0      	addlt	r0, r0, r3
 800658a:	4770      	bx	lr

0800658c <_read_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	4611      	mov	r1, r2
 8006594:	2200      	movs	r2, #0
 8006596:	4d05      	ldr	r5, [pc, #20]	; (80065ac <_read_r+0x20>)
 8006598:	602a      	str	r2, [r5, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	f7fb fc93 	bl	8001ec6 <_read>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_read_r+0x1e>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_read_r+0x1e>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	20000344 	.word	0x20000344

080065b0 <_init>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	bf00      	nop
 80065b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b6:	bc08      	pop	{r3}
 80065b8:	469e      	mov	lr, r3
 80065ba:	4770      	bx	lr

080065bc <_fini>:
 80065bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065be:	bf00      	nop
 80065c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c2:	bc08      	pop	{r3}
 80065c4:	469e      	mov	lr, r3
 80065c6:	4770      	bx	lr
