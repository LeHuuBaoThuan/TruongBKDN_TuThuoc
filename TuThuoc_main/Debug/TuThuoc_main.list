
TuThuoc_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003074  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800338c  0800338c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800338c  0800338c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800338c  0800338c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800338c  0800338c  0001338c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000010  080033a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080033a4  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4c4  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a72  00000000  00000000  0002b4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002cf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172d0  00000000  00000000  0002e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf5a  00000000  00000000  00045520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008433f  00000000  00000000  0005247a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d67b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002738  00000000  00000000  000d680c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003168 	.word	0x08003168

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003168 	.word	0x08003168

0800014c <CLCD_Delay>:
//************************** Low Level Function ****************************************************************//
uint8_t currentline;
uint8_t Xcursor,Ycursor,countWriteChar,CurrentWriteChar;
CLCD_I2C_Name LCD1;
static void CLCD_Delay(uint16_t Time)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	4618      	mov	r0, r3
 800015a:	f001 fb39 	bl	80017d0 <HAL_Delay>
}
 800015e:	bf00      	nop
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}

08000166 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b086      	sub	sp, #24
 800016a:	af02      	add	r7, sp, #8
 800016c:	6078      	str	r0, [r7, #4]
 800016e:	460b      	mov	r3, r1
 8000170:	70fb      	strb	r3, [r7, #3]
 8000172:	4613      	mov	r3, r2
 8000174:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000176:	78fb      	ldrb	r3, [r7, #3]
 8000178:	f023 030f 	bic.w	r3, r3, #15
 800017c:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 800017e:	78fb      	ldrb	r3, [r7, #3]
 8000180:	011b      	lsls	r3, r3, #4
 8000182:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	7adb      	ldrb	r3, [r3, #11]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d007      	beq.n	800019c <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	f043 0308 	orr.w	r3, r3, #8
 8000192:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8000194:	7bbb      	ldrb	r3, [r7, #14]
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 800019c:	78bb      	ldrb	r3, [r7, #2]
 800019e:	2b01      	cmp	r3, #1
 80001a0:	d108      	bne.n	80001b4 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001a2:	7bfb      	ldrb	r3, [r7, #15]
 80001a4:	f043 0301 	orr.w	r3, r3, #1
 80001a8:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001aa:	7bbb      	ldrb	r3, [r7, #14]
 80001ac:	f043 0301 	orr.w	r3, r3, #1
 80001b0:	73bb      	strb	r3, [r7, #14]
 80001b2:	e00a      	b.n	80001ca <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001b4:	78bb      	ldrb	r3, [r7, #2]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d107      	bne.n	80001ca <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	f023 0301 	bic.w	r3, r3, #1
 80001c0:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001c2:	7bbb      	ldrb	r3, [r7, #14]
 80001c4:	f023 0301 	bic.w	r3, r3, #1
 80001c8:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f043 0304 	orr.w	r3, r3, #4
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f7ff ffb9 	bl	800014c <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001da:	7bfb      	ldrb	r3, [r7, #15]
 80001dc:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001de:	7bbb      	ldrb	r3, [r7, #14]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffaf 	bl	800014c <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	6818      	ldr	r0, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	791b      	ldrb	r3, [r3, #4]
 80001fa:	b299      	uxth	r1, r3
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2304      	movs	r3, #4
 8000208:	f001 ff3c 	bl	8002084 <HAL_I2C_Master_Transmit>

}
 800020c:	bf00      	nop
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <CLCD_I2C_Init>:
//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	4611      	mov	r1, r2
 8000220:	461a      	mov	r2, r3
 8000222:	460b      	mov	r3, r1
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	4613      	mov	r3, r2
 8000228:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	68ba      	ldr	r2, [r7, #8]
 800022e:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	79fa      	ldrb	r2, [r7, #7]
 8000234:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	79ba      	ldrb	r2, [r7, #6]
 800023a:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	7e3a      	ldrb	r2, [r7, #24]
 8000240:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2228      	movs	r2, #40	; 0x28
 8000246:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2206      	movs	r2, #6
 800024c:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	220c      	movs	r2, #12
 8000252:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	2214      	movs	r2, #20
 8000258:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	2208      	movs	r2, #8
 800025e:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000260:	2032      	movs	r0, #50	; 0x32
 8000262:	f7ff ff73 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000266:	2200      	movs	r2, #0
 8000268:	2133      	movs	r1, #51	; 0x33
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f7ff ff7b 	bl	8000166 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000270:	2200      	movs	r2, #0
 8000272:	2133      	movs	r1, #51	; 0x33
 8000274:	68f8      	ldr	r0, [r7, #12]
 8000276:	f7ff ff76 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800027a:	2005      	movs	r0, #5
 800027c:	f7ff ff66 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000280:	2200      	movs	r2, #0
 8000282:	2132      	movs	r1, #50	; 0x32
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	f7ff ff6e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028a:	2005      	movs	r0, #5
 800028c:	f7ff ff5e 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8000290:	2200      	movs	r2, #0
 8000292:	2120      	movs	r1, #32
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f7ff ff66 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029a:	2005      	movs	r0, #5
 800029c:	f7ff ff56 	bl	800014c <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	79db      	ldrb	r3, [r3, #7]
 80002a4:	2200      	movs	r2, #0
 80002a6:	4619      	mov	r1, r3
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff5c 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	7a1b      	ldrb	r3, [r3, #8]
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f7ff ff55 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	7a5b      	ldrb	r3, [r3, #9]
 80002c0:	2200      	movs	r2, #0
 80002c2:	4619      	mov	r1, r3
 80002c4:	68f8      	ldr	r0, [r7, #12]
 80002c6:	f7ff ff4e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	7a9b      	ldrb	r3, [r3, #10]
 80002ce:	2200      	movs	r2, #0
 80002d0:	4619      	mov	r1, r3
 80002d2:	68f8      	ldr	r0, [r7, #12]
 80002d4:	f7ff ff47 	bl	8000166 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002d8:	2200      	movs	r2, #0
 80002da:	2101      	movs	r1, #1
 80002dc:	68f8      	ldr	r0, [r7, #12]
 80002de:	f7ff ff42 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2102      	movs	r1, #2
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff3d 	bl	8000166 <CLCD_WriteI2C>
}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
 8000300:	4613      	mov	r3, r2
 8000302:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000304:	2300      	movs	r3, #0
 8000306:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	78fa      	ldrb	r2, [r7, #3]
 800030e:	429a      	cmp	r2, r3
 8000310:	d303      	bcc.n	800031a <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	795b      	ldrb	r3, [r3, #5]
 8000316:	3b01      	subs	r3, #1
 8000318:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	799b      	ldrb	r3, [r3, #6]
 800031e:	78ba      	ldrb	r2, [r7, #2]
 8000320:	429a      	cmp	r2, r3
 8000322:	d303      	bcc.n	800032c <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	799b      	ldrb	r3, [r3, #6]
 8000328:	3b01      	subs	r3, #1
 800032a:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 800032c:	78bb      	ldrb	r3, [r7, #2]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d102      	bne.n	8000338 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	e013      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000338:	78bb      	ldrb	r3, [r7, #2]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d103      	bne.n	8000346 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800033e:	78fb      	ldrb	r3, [r7, #3]
 8000340:	3340      	adds	r3, #64	; 0x40
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	e00c      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8000346:	78bb      	ldrb	r3, [r7, #2]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d103      	bne.n	8000354 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x10 + Xpos;
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	3310      	adds	r3, #16
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	e005      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000354:	78bb      	ldrb	r3, [r7, #2]
 8000356:	2b03      	cmp	r3, #3
 8000358:	d102      	bne.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x50 + Xpos;
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	3350      	adds	r3, #80	; 0x50
 800035e:	73fb      	strb	r3, [r7, #15]
	}
	Xcursor = Xpos;
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <CLCD_I2C_SetCursor+0xa4>)
 8000362:	78fb      	ldrb	r3, [r7, #3]
 8000364:	7013      	strb	r3, [r2, #0]

	Ycursor = Ypos;
 8000366:	4a0d      	ldr	r2, [pc, #52]	; (800039c <CLCD_I2C_SetCursor+0xa8>)
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	7013      	strb	r3, [r2, #0]
	currentline = Ycursor;
 800036c:	4b0b      	ldr	r3, [pc, #44]	; (800039c <CLCD_I2C_SetCursor+0xa8>)
 800036e:	781a      	ldrb	r2, [r3, #0]
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <CLCD_I2C_SetCursor+0xac>)
 8000372:	701a      	strb	r2, [r3, #0]
	countWriteChar = Xcursor;
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <CLCD_I2C_SetCursor+0xa4>)
 8000376:	781a      	ldrb	r2, [r3, #0]
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <CLCD_I2C_SetCursor+0xb0>)
 800037a:	701a      	strb	r2, [r3, #0]
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2200      	movs	r2, #0
 8000386:	4619      	mov	r1, r3
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff feec 	bl	8000166 <CLCD_WriteI2C>
}
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000002d 	.word	0x2000002d
 800039c:	2000002e 	.word	0x2000002e
 80003a0:	2000002c 	.word	0x2000002c
 80003a4:	2000002f 	.word	0x2000002f

080003a8 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2201      	movs	r2, #1
 80003b8:	4619      	mov	r1, r3
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f7ff fed3 	bl	8000166 <CLCD_WriteI2C>
	countWriteChar++;
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003ca:	701a      	strb	r2, [r3, #0]
	if (CurrentWriteChar)
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <CLCD_I2C_WriteChar+0x98>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d02b      	beq.n	800042c <CLCD_I2C_WriteChar+0x84>
	{
	if (countWriteChar ==20)
 80003d4:	4b19      	ldr	r3, [pc, #100]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b14      	cmp	r3, #20
 80003da:	d127      	bne.n	800042c <CLCD_I2C_WriteChar+0x84>
	{
	switch(currentline)
 80003dc:	4b19      	ldr	r3, [pc, #100]	; (8000444 <CLCD_I2C_WriteChar+0x9c>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d825      	bhi.n	8000430 <CLCD_I2C_WriteChar+0x88>
 80003e4:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <CLCD_I2C_WriteChar+0x44>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	080003fd 	.word	0x080003fd
 80003f0:	08000409 	.word	0x08000409
 80003f4:	08000415 	.word	0x08000415
 80003f8:	08000421 	.word	0x08000421
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2100      	movs	r1, #0
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 8000402:	f7ff ff77 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 8000406:	e014      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8000408:	2202      	movs	r2, #2
 800040a:	2100      	movs	r1, #0
 800040c:	480e      	ldr	r0, [pc, #56]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 800040e:	f7ff ff71 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 8000412:	e00e      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 8000414:	2203      	movs	r2, #3
 8000416:	2100      	movs	r1, #0
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 800041a:	f7ff ff6b 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 800041e:	e008      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	2100      	movs	r1, #0
 8000424:	4808      	ldr	r0, [pc, #32]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 8000426:	f7ff ff65 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 800042a:	e002      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				default:
								break;
			}
		}
 800042c:	bf00      	nop
 800042e:	e000      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
								break;
 8000430:	bf00      	nop
	}
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	2000002f 	.word	0x2000002f
 8000440:	20000030 	.word	0x20000030
 8000444:	2000002c 	.word	0x2000002c
 8000448:	20000034 	.word	0x20000034

0800044c <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
	while (*String)
 8000456:	e04a      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
	{
	CurrentWriteChar=0;
 8000458:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <CLCD_I2C_WriteString+0xbc>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	e00e      	b.n	8000482 <CLCD_I2C_WriteString+0x36>
		{
			if (*String)
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d012      	beq.n	8000492 <CLCD_I2C_WriteString+0x46>
			{
				CLCD_I2C_WriteChar(LCD, *String++);
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	1c5a      	adds	r2, r3, #1
 8000470:	603a      	str	r2, [r7, #0]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4619      	mov	r1, r3
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f7ff ff96 	bl	80003a8 <CLCD_I2C_WriteChar>
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	3301      	adds	r3, #1
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	7bfa      	ldrb	r2, [r7, #15]
 8000484:	4b21      	ldr	r3, [pc, #132]	; (800050c <CLCD_I2C_WriteString+0xc0>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f1c3 0314 	rsb	r3, r3, #20
 800048c:	429a      	cmp	r2, r3
 800048e:	dbe9      	blt.n	8000464 <CLCD_I2C_WriteString+0x18>
 8000490:	e000      	b.n	8000494 <CLCD_I2C_WriteString+0x48>
			}
			else break;
 8000492:	bf00      	nop
		}
		if (*String)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d02d      	beq.n	80004f8 <CLCD_I2C_WriteString+0xac>
		{
			switch(currentline)
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <CLCD_I2C_WriteString+0xc4>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d823      	bhi.n	80004ec <CLCD_I2C_WriteString+0xa0>
 80004a4:	a201      	add	r2, pc, #4	; (adr r2, 80004ac <CLCD_I2C_WriteString+0x60>)
 80004a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004aa:	bf00      	nop
 80004ac:	080004bd 	.word	0x080004bd
 80004b0:	080004c9 	.word	0x080004c9
 80004b4:	080004d5 	.word	0x080004d5
 80004b8:	080004e1 	.word	0x080004e1
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2100      	movs	r1, #0
 80004c0:	4814      	ldr	r0, [pc, #80]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004c2:	f7ff ff17 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004c6:	e012      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 80004c8:	2202      	movs	r2, #2
 80004ca:	2100      	movs	r1, #0
 80004cc:	4811      	ldr	r0, [pc, #68]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004ce:	f7ff ff11 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004d2:	e00c      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 80004d4:	2203      	movs	r2, #3
 80004d6:	2100      	movs	r1, #0
 80004d8:	480e      	ldr	r0, [pc, #56]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004da:	f7ff ff0b 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004de:	e006      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2100      	movs	r1, #0
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004e6:	f7ff ff05 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004ea:	e000      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				default:
								break;
 80004ec:	bf00      	nop
	while (*String)
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d1b0      	bne.n	8000458 <CLCD_I2C_WriteString+0xc>
 80004f6:	e000      	b.n	80004fa <CLCD_I2C_WriteString+0xae>
			}
		}
		else break;
 80004f8:	bf00      	nop

		}
	CurrentWriteChar=1;
 80004fa:	4b03      	ldr	r3, [pc, #12]	; (8000508 <CLCD_I2C_WriteString+0xbc>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000030 	.word	0x20000030
 800050c:	2000002d 	.word	0x2000002d
 8000510:	2000002c 	.word	0x2000002c
 8000514:	20000034 	.word	0x20000034

08000518 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000520:	2200      	movs	r2, #0
 8000522:	2101      	movs	r1, #1
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff fe1e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800052a:	2005      	movs	r0, #5
 800052c:	f7ff fe0e 	bl	800014c <CLCD_Delay>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <KeyPad_Init>:
void KeyPad_Init(	GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD,
					GPIO_TypeDef* C_port0, GPIO_TypeDef* C_port1, GPIO_TypeDef* C_port2, GPIO_TypeDef* C_port3,\
					uint16_t C_pin0, uint16_t C_pin1, uint16_t C_pin2, uint16_t C_pin3,\
					GPIO_TypeDef* R_port0, GPIO_TypeDef* R_port1, GPIO_TypeDef* R_port2, GPIO_TypeDef* R_port3,\
					uint16_t R_pin0, uint16_t R_pin1, uint16_t R_pin2, uint16_t R_pin3)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	603b      	str	r3, [r7, #0]
	//OUTPUT
  COL_KEY_PAD->PORT.GPIO0 = C_port0;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
  COL_KEY_PAD->PORT.GPIO1 = C_port1;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	683a      	ldr	r2, [r7, #0]
 8000550:	605a      	str	r2, [r3, #4]
  COL_KEY_PAD->PORT.GPIO2 = C_port2;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	69ba      	ldr	r2, [r7, #24]
 8000556:	609a      	str	r2, [r3, #8]
  COL_KEY_PAD->PORT.GPIO3 = C_port3;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	69fa      	ldr	r2, [r7, #28]
 800055c:	60da      	str	r2, [r3, #12]

  COL_KEY_PAD->PIN.GPIO_PIN_A = C_pin0;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	8c3a      	ldrh	r2, [r7, #32]
 8000562:	821a      	strh	r2, [r3, #16]
  COL_KEY_PAD->PIN.GPIO_PIN_B = C_pin1;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000568:	825a      	strh	r2, [r3, #18]
  COL_KEY_PAD->PIN.GPIO_PIN_C = C_pin2;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800056e:	829a      	strh	r2, [r3, #20]
  COL_KEY_PAD->PIN.GPIO_PIN_D = C_pin3;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000574:	82da      	strh	r2, [r3, #22]
  //INPUT
  ROW_KEY_PAD->PORT.GPIO0 = R_port0;
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800057a:	601a      	str	r2, [r3, #0]
  ROW_KEY_PAD->PORT.GPIO1 = R_port1;
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000580:	605a      	str	r2, [r3, #4]
  ROW_KEY_PAD->PORT.GPIO2 = R_port2;
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000586:	609a      	str	r2, [r3, #8]
  ROW_KEY_PAD->PORT.GPIO3 = R_port3;
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800058c:	60da      	str	r2, [r3, #12]

  ROW_KEY_PAD->PIN.GPIO_PIN_A = R_pin0;
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000594:	821a      	strh	r2, [r3, #16]
  ROW_KEY_PAD->PIN.GPIO_PIN_B = R_pin1;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800059c:	825a      	strh	r2, [r3, #18]
  ROW_KEY_PAD->PIN.GPIO_PIN_C = R_pin2;
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80005a4:	829a      	strh	r2, [r3, #20]
  ROW_KEY_PAD->PIN.GPIO_PIN_D = R_pin3;
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80005ac:	82da      	strh	r2, [r3, #22]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <Check_Keypad_Column>:
  +) RETURN:
    -Keypad_Button_Values[Row-x][x+1]   : Keypad_Button_Values
    -KEYPAD_NOT_PRESSED                 : "\0" (Không ấn nút)
*/
static char Check_Keypad_Column(GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main, uint8_t Row)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	70fb      	strb	r3, [r7, #3]
	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO0, ROW_KEY_PAD_main->PIN.GPIO_PIN_A)) //If ROW_1 is LOW
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	8a1b      	ldrh	r3, [r3, #16]
 80005cc:	4619      	mov	r1, r3
 80005ce:	4610      	mov	r0, r2
 80005d0:	f001 fbb4 	bl	8001d3c <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d105      	bne.n	80005e6 <Check_Keypad_Column+0x2e>
	{
		return Keypad_Button_Values[Row-1][0];
 80005da:	78fb      	ldrb	r3, [r7, #3]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a1f      	ldr	r2, [pc, #124]	; (800065c <Check_Keypad_Column+0xa4>)
 80005e0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80005e4:	e036      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO1, ROW_KEY_PAD_main->PIN.GPIO_PIN_B)) //If ROW_2 is LOW
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	8a5b      	ldrh	r3, [r3, #18]
 80005ee:	4619      	mov	r1, r3
 80005f0:	4610      	mov	r0, r2
 80005f2:	f001 fba3 	bl	8001d3c <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d106      	bne.n	800060a <Check_Keypad_Column+0x52>
	{
		return Keypad_Button_Values[Row-1][1];
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	3b01      	subs	r3, #1
 8000600:	4a16      	ldr	r2, [pc, #88]	; (800065c <Check_Keypad_Column+0xa4>)
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	785b      	ldrb	r3, [r3, #1]
 8000608:	e024      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}

    if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO2, ROW_KEY_PAD_main->PIN.GPIO_PIN_C)) //If ROW_3 is LOW
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689a      	ldr	r2, [r3, #8]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	8a9b      	ldrh	r3, [r3, #20]
 8000612:	4619      	mov	r1, r3
 8000614:	4610      	mov	r0, r2
 8000616:	f001 fb91 	bl	8001d3c <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d106      	bne.n	800062e <Check_Keypad_Column+0x76>
	{
		return Keypad_Button_Values[Row-1][2];
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	3b01      	subs	r3, #1
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <Check_Keypad_Column+0xa4>)
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	4413      	add	r3, r2
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	e012      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO3, ROW_KEY_PAD_main->PIN.GPIO_PIN_D)) //If ROW_4 is LOW
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	68da      	ldr	r2, [r3, #12]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	8adb      	ldrh	r3, [r3, #22]
 8000636:	4619      	mov	r1, r3
 8000638:	4610      	mov	r0, r2
 800063a:	f001 fb7f 	bl	8001d3c <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d106      	bne.n	8000652 <Check_Keypad_Column+0x9a>
	{
		return Keypad_Button_Values[Row-1][3];
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <Check_Keypad_Column+0xa4>)
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	78db      	ldrb	r3, [r3, #3]
 8000650:	e000      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}
	return KEYPAD_NOT_PRESSED;                   //If NO Key is pressed
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	08003350 	.word	0x08003350

08000660 <KEYPAD_Read>:
  +) RETURN:
    -char check                                  	: const char Keypad_Button_Values[x][y]
    -KEYPAD_NOT_PRESSED                     		: '\0' {reason of failed)
*/
static char KEYPAD_Read(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main, uint8_t* row)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
    char check = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	75fb      	strb	r3, [r7, #23]
    /*Set COL_1 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_RESET);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	6818      	ldr	r0, [r3, #0]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	8a1b      	ldrh	r3, [r3, #16]
 8000678:	2200      	movs	r2, #0
 800067a:	4619      	mov	r1, r3
 800067c:	f001 fb75 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6858      	ldr	r0, [r3, #4]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	8a5b      	ldrh	r3, [r3, #18]
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	f001 fb6d 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	6898      	ldr	r0, [r3, #8]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	8a9b      	ldrh	r3, [r3, #20]
 8000698:	2201      	movs	r2, #1
 800069a:	4619      	mov	r1, r3
 800069c:	f001 fb65 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	68d8      	ldr	r0, [r3, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	8adb      	ldrh	r3, [r3, #22]
 80006a8:	2201      	movs	r2, #1
 80006aa:	4619      	mov	r1, r3
 80006ac:	f001 fb5d 	bl	8001d6a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 1);
 80006b0:	2101      	movs	r1, #1
 80006b2:	68b8      	ldr	r0, [r7, #8]
 80006b4:	f7ff ff80 	bl	80005b8 <Check_Keypad_Column>
 80006b8:	4603      	mov	r3, r0
 80006ba:	75fb      	strb	r3, [r7, #23]
    if(check)
 80006bc:	7dfb      	ldrb	r3, [r7, #23]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d007      	beq.n	80006d2 <KEYPAD_Read+0x72>
    {
    	*row = *row + 1;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	701a      	strb	r2, [r3, #0]
    	return check;
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	e093      	b.n	80007fa <KEYPAD_Read+0x19a>
    }
    /*Set COL_2 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	8a1b      	ldrh	r3, [r3, #16]
 80006da:	2201      	movs	r2, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	f001 fb44 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_RESET);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	6858      	ldr	r0, [r3, #4]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	8a5b      	ldrh	r3, [r3, #18]
 80006ea:	2200      	movs	r2, #0
 80006ec:	4619      	mov	r1, r3
 80006ee:	f001 fb3c 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6898      	ldr	r0, [r3, #8]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	8a9b      	ldrh	r3, [r3, #20]
 80006fa:	2201      	movs	r2, #1
 80006fc:	4619      	mov	r1, r3
 80006fe:	f001 fb34 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	68d8      	ldr	r0, [r3, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	8adb      	ldrh	r3, [r3, #22]
 800070a:	2201      	movs	r2, #1
 800070c:	4619      	mov	r1, r3
 800070e:	f001 fb2c 	bl	8001d6a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 2);
 8000712:	2102      	movs	r1, #2
 8000714:	68b8      	ldr	r0, [r7, #8]
 8000716:	f7ff ff4f 	bl	80005b8 <Check_Keypad_Column>
 800071a:	4603      	mov	r3, r0
 800071c:	75fb      	strb	r3, [r7, #23]
    if(check)
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d007      	beq.n	8000734 <KEYPAD_Read+0xd4>
    {
    	*row = *row + 1;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	b2da      	uxtb	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	701a      	strb	r2, [r3, #0]
    	return check;
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	e062      	b.n	80007fa <KEYPAD_Read+0x19a>
    }
    /*Set COL_3 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	8a1b      	ldrh	r3, [r3, #16]
 800073c:	2201      	movs	r2, #1
 800073e:	4619      	mov	r1, r3
 8000740:	f001 fb13 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	6858      	ldr	r0, [r3, #4]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	8a5b      	ldrh	r3, [r3, #18]
 800074c:	2201      	movs	r2, #1
 800074e:	4619      	mov	r1, r3
 8000750:	f001 fb0b 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_RESET);
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	6898      	ldr	r0, [r3, #8]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	8a9b      	ldrh	r3, [r3, #20]
 800075c:	2200      	movs	r2, #0
 800075e:	4619      	mov	r1, r3
 8000760:	f001 fb03 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	68d8      	ldr	r0, [r3, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	8adb      	ldrh	r3, [r3, #22]
 800076c:	2201      	movs	r2, #1
 800076e:	4619      	mov	r1, r3
 8000770:	f001 fafb 	bl	8001d6a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 3);
 8000774:	2103      	movs	r1, #3
 8000776:	68b8      	ldr	r0, [r7, #8]
 8000778:	f7ff ff1e 	bl	80005b8 <Check_Keypad_Column>
 800077c:	4603      	mov	r3, r0
 800077e:	75fb      	strb	r3, [r7, #23]
    if(check)
 8000780:	7dfb      	ldrb	r3, [r7, #23]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d007      	beq.n	8000796 <KEYPAD_Read+0x136>
    {
    	*row = *row + 1;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	b2da      	uxtb	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	701a      	strb	r2, [r3, #0]
    	return check;
 8000792:	7dfb      	ldrb	r3, [r7, #23]
 8000794:	e031      	b.n	80007fa <KEYPAD_Read+0x19a>
    }
    /*Set COL_4 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	8a1b      	ldrh	r3, [r3, #16]
 800079e:	2201      	movs	r2, #1
 80007a0:	4619      	mov	r1, r3
 80007a2:	f001 fae2 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6858      	ldr	r0, [r3, #4]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	8a5b      	ldrh	r3, [r3, #18]
 80007ae:	2201      	movs	r2, #1
 80007b0:	4619      	mov	r1, r3
 80007b2:	f001 fada 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6898      	ldr	r0, [r3, #8]
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	8a9b      	ldrh	r3, [r3, #20]
 80007be:	2201      	movs	r2, #1
 80007c0:	4619      	mov	r1, r3
 80007c2:	f001 fad2 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_RESET);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	68d8      	ldr	r0, [r3, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	8adb      	ldrh	r3, [r3, #22]
 80007ce:	2200      	movs	r2, #0
 80007d0:	4619      	mov	r1, r3
 80007d2:	f001 faca 	bl	8001d6a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 4);
 80007d6:	2104      	movs	r1, #4
 80007d8:	68b8      	ldr	r0, [r7, #8]
 80007da:	f7ff feed 	bl	80005b8 <Check_Keypad_Column>
 80007de:	4603      	mov	r3, r0
 80007e0:	75fb      	strb	r3, [r7, #23]
    if(check)
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d007      	beq.n	80007f8 <KEYPAD_Read+0x198>
    {
    	*row = *row + 1;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	701a      	strb	r2, [r3, #0]
    	return check;
 80007f4:	7dfb      	ldrb	r3, [r7, #23]
 80007f6:	e000      	b.n	80007fa <KEYPAD_Read+0x19a>
    }
    /*Key not pressed */
    return KEYPAD_NOT_PRESSED;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <KEYPAD_Handler>:
  +) RETURN:
    -char check                                  	: const char Keypad_Button_Values[x][y]
    -KEYPAD_NOT_PRESSED                     		: '\0' {reason of failed)
*/
char KEYPAD_Handler(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main, uint8_t* row)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	60f8      	str	r0, [r7, #12]
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
	char key = KEYPAD_Read(COL_KEY_PAD, ROW_KEY_PAD_main, row);;
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f7ff ff24 	bl	8000660 <KEYPAD_Read>
 8000818:	4603      	mov	r3, r0
 800081a:	75fb      	strb	r3, [r7, #23]

    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	8a1b      	ldrh	r3, [r3, #16]
 8000824:	2201      	movs	r2, #1
 8000826:	4619      	mov	r1, r3
 8000828:	f001 fa9f 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	6858      	ldr	r0, [r3, #4]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	8a5b      	ldrh	r3, [r3, #18]
 8000834:	2201      	movs	r2, #1
 8000836:	4619      	mov	r1, r3
 8000838:	f001 fa97 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	6898      	ldr	r0, [r3, #8]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	8a9b      	ldrh	r3, [r3, #20]
 8000844:	2201      	movs	r2, #1
 8000846:	4619      	mov	r1, r3
 8000848:	f001 fa8f 	bl	8001d6a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	68d8      	ldr	r0, [r3, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	8adb      	ldrh	r3, [r3, #22]
 8000854:	2201      	movs	r2, #1
 8000856:	4619      	mov	r1, r3
 8000858:	f001 fa87 	bl	8001d6a <HAL_GPIO_WritePin>
    return key;
 800085c:	7dfb      	ldrb	r3, [r7, #23]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <lcd_user_display>:
    -STATUS_DISPLAY_TYPEDEF status_display         : STATUS_1 -> STATUS_7
  +) RETURN:
    -void
*/
void lcd_user_display(CLCD_I2C_Name* LCD_user, STATUS_DISPLAY_TYPEDEF status_display)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
	if(language == ENGLISH)
 8000874:	4ba7      	ldr	r3, [pc, #668]	; (8000b14 <lcd_user_display+0x2ac>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	f040 80d6 	bne.w	8000a2a <lcd_user_display+0x1c2>
	{
		if(status_display == STATUS_1)
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d124      	bne.n	80008ce <lcd_user_display+0x66>
			{
				// dislay hello ! Status_Display=0
				CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff fd33 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 800088e:	49a2      	ldr	r1, [pc, #648]	; (8000b18 <lcd_user_display+0x2b0>)
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff fddb 	bl	800044c <CLCD_I2C_WriteString>

				CLCD_I2C_SetCursor(LCD_user, 3, 1);
 8000896:	2201      	movs	r2, #1
 8000898:	2103      	movs	r1, #3
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff fd2a 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"KHOA CO KHI");
 80008a0:	499e      	ldr	r1, [pc, #632]	; (8000b1c <lcd_user_display+0x2b4>)
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff fdd2 	bl	800044c <CLCD_I2C_WriteString>

				CLCD_I2C_SetCursor(LCD_user, 4, 2);
 80008a8:	2202      	movs	r2, #2
 80008aa:	2104      	movs	r1, #4
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff fd21 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 80008b2:	499b      	ldr	r1, [pc, #620]	; (8000b20 <lcd_user_display+0x2b8>)
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff fdc9 	bl	800044c <CLCD_I2C_WriteString>

				CLCD_I2C_SetCursor(LCD_user, 0, 3);
 80008ba:	2203      	movs	r2, #3
 80008bc:	2100      	movs	r1, #0
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff fd18 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Please Set Mode!");
 80008c4:	4997      	ldr	r1, [pc, #604]	; (8000b24 <lcd_user_display+0x2bc>)
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff fdc0 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
			CLCD_I2C_WriteString(LCD_user,"-EXIT");
		}
	}/*END if(language == ENGLISH)*/

}
 80008cc:	e1c1      	b.n	8000c52 <lcd_user_display+0x3ea>
			else if(status_display == STATUS_2)
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d124      	bne.n	800091e <lcd_user_display+0xb6>
				CLCD_I2C_SetCursor(LCD_user, 3, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2103      	movs	r1, #3
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff fd0b 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"SELECT MODE");
 80008de:	4992      	ldr	r1, [pc, #584]	; (8000b28 <lcd_user_display+0x2c0>)
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff fdb3 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2100      	movs	r1, #0
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff fd02 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"-Language");
 80008f0:	498e      	ldr	r1, [pc, #568]	; (8000b2c <lcd_user_display+0x2c4>)
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff fdaa 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 2);
 80008f8:	2202      	movs	r2, #2
 80008fa:	2100      	movs	r1, #0
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff fcf9 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"-Enter password");
 8000902:	498b      	ldr	r1, [pc, #556]	; (8000b30 <lcd_user_display+0x2c8>)
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff fda1 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 3);
 800090a:	2203      	movs	r2, #3
 800090c:	2100      	movs	r1, #0
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff fcf0 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"-Exit");
 8000914:	4987      	ldr	r1, [pc, #540]	; (8000b34 <lcd_user_display+0x2cc>)
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fd98 	bl	800044c <CLCD_I2C_WriteString>
}
 800091c:	e199      	b.n	8000c52 <lcd_user_display+0x3ea>
			else if(status_display == STATUS_3)
 800091e:	78fb      	ldrb	r3, [r7, #3]
 8000920:	2b03      	cmp	r3, #3
 8000922:	d11b      	bne.n	800095c <lcd_user_display+0xf4>
				CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fce3 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Enter ur number:");
 800092e:	4982      	ldr	r1, [pc, #520]	; (8000b38 <lcd_user_display+0x2d0>)
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fd8b 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000936:	2202      	movs	r2, #2
 8000938:	2100      	movs	r1, #0
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fcda 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Password: ");
 8000940:	497e      	ldr	r1, [pc, #504]	; (8000b3c <lcd_user_display+0x2d4>)
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fd82 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000948:	2203      	movs	r2, #3
 800094a:	2100      	movs	r1, #0
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fcd1 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Exit");
 8000952:	497b      	ldr	r1, [pc, #492]	; (8000b40 <lcd_user_display+0x2d8>)
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff fd79 	bl	800044c <CLCD_I2C_WriteString>
}
 800095a:	e17a      	b.n	8000c52 <lcd_user_display+0x3ea>
			else if(status_display == STATUS_4)
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	2b04      	cmp	r3, #4
 8000960:	d11b      	bne.n	800099a <lcd_user_display+0x132>
				CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fcc4 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Password OKE!");
 800096c:	4975      	ldr	r1, [pc, #468]	; (8000b44 <lcd_user_display+0x2dc>)
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fd6c 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000974:	2201      	movs	r2, #1
 8000976:	2100      	movs	r1, #0
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff fcbb 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Wait few ");
 800097e:	4972      	ldr	r1, [pc, #456]	; (8000b48 <lcd_user_display+0x2e0>)
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff fd63 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 3, 2);
 8000986:	2202      	movs	r2, #2
 8000988:	2103      	movs	r1, #3
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fcb2 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"minutes...");
 8000990:	496e      	ldr	r1, [pc, #440]	; (8000b4c <lcd_user_display+0x2e4>)
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff fd5a 	bl	800044c <CLCD_I2C_WriteString>
}
 8000998:	e15b      	b.n	8000c52 <lcd_user_display+0x3ea>
			else if(status_display == STATUS_5)
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	2b05      	cmp	r3, #5
 800099e:	d11b      	bne.n	80009d8 <lcd_user_display+0x170>
			  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fca5 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"Password FAIL!");
 80009aa:	4969      	ldr	r1, [pc, #420]	; (8000b50 <lcd_user_display+0x2e8>)
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff fd4d 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2100      	movs	r1, #0
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fc9c 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"\"Enter\" to enter");
 80009bc:	4965      	ldr	r1, [pc, #404]	; (8000b54 <lcd_user_display+0x2ec>)
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff fd44 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 80009c4:	2202      	movs	r2, #2
 80009c6:	2104      	movs	r1, #4
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fc93 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"new password :<");
 80009ce:	4962      	ldr	r1, [pc, #392]	; (8000b58 <lcd_user_display+0x2f0>)
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff fd3b 	bl	800044c <CLCD_I2C_WriteString>
}
 80009d6:	e13c      	b.n	8000c52 <lcd_user_display+0x3ea>
			else if(status_display == STATUS_6)
 80009d8:	78fb      	ldrb	r3, [r7, #3]
 80009da:	2b06      	cmp	r3, #6
 80009dc:	f040 8139 	bne.w	8000c52 <lcd_user_display+0x3ea>
				CLCD_I2C_SetCursor(LCD_user, 3, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2103      	movs	r1, #3
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff fc85 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Language");
 80009ea:	495c      	ldr	r1, [pc, #368]	; (8000b5c <lcd_user_display+0x2f4>)
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff fd2d 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2100      	movs	r1, #0
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff fc7c 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 80009fc:	4958      	ldr	r1, [pc, #352]	; (8000b60 <lcd_user_display+0x2f8>)
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff fd24 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000a04:	2202      	movs	r2, #2
 8000a06:	2100      	movs	r1, #0
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff fc73 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"-English");
 8000a0e:	4955      	ldr	r1, [pc, #340]	; (8000b64 <lcd_user_display+0x2fc>)
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff fd1b 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000a16:	2203      	movs	r2, #3
 8000a18:	2100      	movs	r1, #0
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff fc6a 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"-EXIT");
 8000a20:	4951      	ldr	r1, [pc, #324]	; (8000b68 <lcd_user_display+0x300>)
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff fd12 	bl	800044c <CLCD_I2C_WriteString>
}
 8000a28:	e113      	b.n	8000c52 <lcd_user_display+0x3ea>
	else if(language == VIETNAMESE)
 8000a2a:	4b3a      	ldr	r3, [pc, #232]	; (8000b14 <lcd_user_display+0x2ac>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f040 810f 	bne.w	8000c52 <lcd_user_display+0x3ea>
		if(status_display == STATUS_1)
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d124      	bne.n	8000a84 <lcd_user_display+0x21c>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff fc58 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 8000a44:	4934      	ldr	r1, [pc, #208]	; (8000b18 <lcd_user_display+0x2b0>)
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff fd00 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 3, 1);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2103      	movs	r1, #3
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff fc4f 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"KHOA CO KHI");
 8000a56:	4931      	ldr	r1, [pc, #196]	; (8000b1c <lcd_user_display+0x2b4>)
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff fcf7 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000a5e:	2202      	movs	r2, #2
 8000a60:	2104      	movs	r1, #4
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff fc46 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 8000a68:	492d      	ldr	r1, [pc, #180]	; (8000b20 <lcd_user_display+0x2b8>)
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff fcee 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000a70:	2203      	movs	r2, #3
 8000a72:	2100      	movs	r1, #0
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff fc3d 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Please Set Mode!");
 8000a7a:	492a      	ldr	r1, [pc, #168]	; (8000b24 <lcd_user_display+0x2bc>)
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff fce5 	bl	800044c <CLCD_I2C_WriteString>
}
 8000a82:	e0e6      	b.n	8000c52 <lcd_user_display+0x3ea>
		else if(status_display == STATUS_2)
 8000a84:	78fb      	ldrb	r3, [r7, #3]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d124      	bne.n	8000ad4 <lcd_user_display+0x26c>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff fc30 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Lua chon che do:");
 8000a94:	4935      	ldr	r1, [pc, #212]	; (8000b6c <lcd_user_display+0x304>)
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff fcd8 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fc27 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Ngon ngu");
 8000aa6:	4932      	ldr	r1, [pc, #200]	; (8000b70 <lcd_user_display+0x308>)
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fccf 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000aae:	2202      	movs	r2, #2
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fc1e 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Nhap ma pin");
 8000ab8:	492e      	ldr	r1, [pc, #184]	; (8000b74 <lcd_user_display+0x30c>)
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fcc6 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff fc15 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Thoat");
 8000aca:	492b      	ldr	r1, [pc, #172]	; (8000b78 <lcd_user_display+0x310>)
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff fcbd 	bl	800044c <CLCD_I2C_WriteString>
}
 8000ad2:	e0be      	b.n	8000c52 <lcd_user_display+0x3ea>
		else if(status_display == STATUS_3)
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d156      	bne.n	8000b88 <lcd_user_display+0x320>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff fc08 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Nhap stt cua ban:");
 8000ae4:	4925      	ldr	r1, [pc, #148]	; (8000b7c <lcd_user_display+0x314>)
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff fcb0 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000aec:	2202      	movs	r2, #2
 8000aee:	2100      	movs	r1, #0
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fbff 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"PIN: ");
 8000af6:	4922      	ldr	r1, [pc, #136]	; (8000b80 <lcd_user_display+0x318>)
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff fca7 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000afe:	2203      	movs	r2, #3
 8000b00:	2100      	movs	r1, #0
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff fbf6 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Thoat");
 8000b08:	491e      	ldr	r1, [pc, #120]	; (8000b84 <lcd_user_display+0x31c>)
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff fc9e 	bl	800044c <CLCD_I2C_WriteString>
}
 8000b10:	e09f      	b.n	8000c52 <lcd_user_display+0x3ea>
 8000b12:	bf00      	nop
 8000b14:	20000048 	.word	0x20000048
 8000b18:	08003180 	.word	0x08003180
 8000b1c:	08003194 	.word	0x08003194
 8000b20:	080031a0 	.word	0x080031a0
 8000b24:	080031ac 	.word	0x080031ac
 8000b28:	080031c0 	.word	0x080031c0
 8000b2c:	080031cc 	.word	0x080031cc
 8000b30:	080031d8 	.word	0x080031d8
 8000b34:	080031e8 	.word	0x080031e8
 8000b38:	080031f0 	.word	0x080031f0
 8000b3c:	08003204 	.word	0x08003204
 8000b40:	08003210 	.word	0x08003210
 8000b44:	08003218 	.word	0x08003218
 8000b48:	08003228 	.word	0x08003228
 8000b4c:	08003234 	.word	0x08003234
 8000b50:	08003240 	.word	0x08003240
 8000b54:	08003250 	.word	0x08003250
 8000b58:	08003264 	.word	0x08003264
 8000b5c:	08003274 	.word	0x08003274
 8000b60:	08003280 	.word	0x08003280
 8000b64:	0800328c 	.word	0x0800328c
 8000b68:	08003298 	.word	0x08003298
 8000b6c:	080032a0 	.word	0x080032a0
 8000b70:	080032b4 	.word	0x080032b4
 8000b74:	080032c0 	.word	0x080032c0
 8000b78:	080032d0 	.word	0x080032d0
 8000b7c:	080032d8 	.word	0x080032d8
 8000b80:	080032ec 	.word	0x080032ec
 8000b84:	080032f4 	.word	0x080032f4
		else if(status_display == STATUS_4)
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	d11b      	bne.n	8000bc6 <lcd_user_display+0x35e>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff fbae 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"PIN OKE!");
 8000b98:	4930      	ldr	r1, [pc, #192]	; (8000c5c <lcd_user_display+0x3f4>)
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fc56 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff fba5 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Cho");
 8000baa:	492d      	ldr	r1, [pc, #180]	; (8000c60 <lcd_user_display+0x3f8>)
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fc4d 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 3, 2);
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	2103      	movs	r1, #3
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff fb9c 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"1 phut...");
 8000bbc:	4929      	ldr	r1, [pc, #164]	; (8000c64 <lcd_user_display+0x3fc>)
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fc44 	bl	800044c <CLCD_I2C_WriteString>
}
 8000bc4:	e045      	b.n	8000c52 <lcd_user_display+0x3ea>
		else if(status_display == STATUS_5)
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	2b05      	cmp	r3, #5
 8000bca:	d11b      	bne.n	8000c04 <lcd_user_display+0x39c>
		  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff fb8f 	bl	80002f4 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"PIN sai!");
 8000bd6:	4924      	ldr	r1, [pc, #144]	; (8000c68 <lcd_user_display+0x400>)
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fc37 	bl	800044c <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2100      	movs	r1, #0
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff fb86 	bl	80002f4 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"\"Nhap\" de nhap");
 8000be8:	4920      	ldr	r1, [pc, #128]	; (8000c6c <lcd_user_display+0x404>)
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fc2e 	bl	800044c <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fb7d 	bl	80002f4 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"PIN moi :<");
 8000bfa:	491d      	ldr	r1, [pc, #116]	; (8000c70 <lcd_user_display+0x408>)
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fc25 	bl	800044c <CLCD_I2C_WriteString>
}
 8000c02:	e026      	b.n	8000c52 <lcd_user_display+0x3ea>
		else if(status_display == STATUS_6)
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d123      	bne.n	8000c52 <lcd_user_display+0x3ea>
			CLCD_I2C_SetCursor(LCD_user, 3, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2103      	movs	r1, #3
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff fb70 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Ngon ngu");
 8000c14:	4917      	ldr	r1, [pc, #92]	; (8000c74 <lcd_user_display+0x40c>)
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff fc18 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2100      	movs	r1, #0
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff fb67 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 8000c26:	4914      	ldr	r1, [pc, #80]	; (8000c78 <lcd_user_display+0x410>)
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff fc0f 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000c2e:	2202      	movs	r2, #2
 8000c30:	2100      	movs	r1, #0
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fb5e 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-English");
 8000c38:	4910      	ldr	r1, [pc, #64]	; (8000c7c <lcd_user_display+0x414>)
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff fc06 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000c40:	2203      	movs	r2, #3
 8000c42:	2100      	movs	r1, #0
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff fb55 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-EXIT");
 8000c4a:	490d      	ldr	r1, [pc, #52]	; (8000c80 <lcd_user_display+0x418>)
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff fbfd 	bl	800044c <CLCD_I2C_WriteString>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	080032fc 	.word	0x080032fc
 8000c60:	08003308 	.word	0x08003308
 8000c64:	0800330c 	.word	0x0800330c
 8000c68:	08003318 	.word	0x08003318
 8000c6c:	08003324 	.word	0x08003324
 8000c70:	08003334 	.word	0x08003334
 8000c74:	08003340 	.word	0x08003340
 8000c78:	08003280 	.word	0x08003280
 8000c7c:	0800328c 	.word	0x0800328c
 8000c80:	08003298 	.word	0x08003298

08000c84 <lcd_system_handler>:
    -CLCD_I2C_Name* LCD_user            : pointer lcd
  +) RETURN:
    -void
*/
void lcd_system_handler(CLCD_I2C_Name* LCD_user)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	if(delete)
 8000c8c:	4ba4      	ldr	r3, [pc, #656]	; (8000f20 <lcd_system_handler+0x29c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d005      	beq.n	8000ca0 <lcd_system_handler+0x1c>
	{
		CLCD_I2C_Clear(LCD_user);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff fc3f 	bl	8000518 <CLCD_I2C_Clear>
		delete = 0;
 8000c9a:	4ba1      	ldr	r3, [pc, #644]	; (8000f20 <lcd_system_handler+0x29c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
	}
	if(Mode == 0)
 8000ca0:	4ba0      	ldr	r3, [pc, #640]	; (8000f24 <lcd_system_handler+0x2a0>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d112      	bne.n	8000cd0 <lcd_system_handler+0x4c>
	{
		Config = CONFIG_NONE;
 8000caa:	4b9f      	ldr	r3, [pc, #636]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
		Enter = 0;
 8000cb0:	4b9e      	ldr	r3, [pc, #632]	; (8000f2c <lcd_system_handler+0x2a8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
		Status_Display = STATUS_1;
 8000cb6:	4b9e      	ldr	r3, [pc, #632]	; (8000f30 <lcd_system_handler+0x2ac>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
		lcd_user_display(LCD_user, Status_Display);
 8000cbc:	4b9c      	ldr	r3, [pc, #624]	; (8000f30 <lcd_system_handler+0x2ac>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fdd0 	bl	8000868 <lcd_user_display>
		Index_mode = INDEX_MODE_NONE;
 8000cc8:	4b9a      	ldr	r3, [pc, #616]	; (8000f34 <lcd_system_handler+0x2b0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
				Enter = 0;
			}
			lcd_user_display(LCD_user, Status_Display);
		} /*END if(Index_mode == INDEX_MODE2)*/
	}/*END if(Mode == 1)*/
}
 8000cce:	e147      	b.n	8000f60 <lcd_system_handler+0x2dc>
	else if(Mode == 1)
 8000cd0:	4b94      	ldr	r3, [pc, #592]	; (8000f24 <lcd_system_handler+0x2a0>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	f040 8142 	bne.w	8000f60 <lcd_system_handler+0x2dc>
		if(Index_mode == INDEX_MODE_NONE)
 8000cdc:	4b95      	ldr	r3, [pc, #596]	; (8000f34 <lcd_system_handler+0x2b0>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d164      	bne.n	8000dae <lcd_system_handler+0x12a>
			if (flag_button)
 8000ce4:	4b94      	ldr	r3, [pc, #592]	; (8000f38 <lcd_system_handler+0x2b4>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d005      	beq.n	8000cfa <lcd_system_handler+0x76>
				CLCD_I2C_Clear(LCD_user);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fc12 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8000cf4:	4b90      	ldr	r3, [pc, #576]	; (8000f38 <lcd_system_handler+0x2b4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
			Status_Display = STATUS_2;
 8000cfa:	4b8d      	ldr	r3, [pc, #564]	; (8000f30 <lcd_system_handler+0x2ac>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000d00:	4b89      	ldr	r3, [pc, #548]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d044      	beq.n	8000d94 <lcd_system_handler+0x110>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8000d0a:	4b87      	ldr	r3, [pc, #540]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	461a      	mov	r2, r3
 8000d12:	210f      	movs	r1, #15
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff faed 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8000d1a:	4988      	ldr	r1, [pc, #544]	; (8000f3c <lcd_system_handler+0x2b8>)
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fb95 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000d22:	4b82      	ldr	r3, [pc, #520]	; (8000f2c <lcd_system_handler+0x2a8>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d039      	beq.n	8000da0 <lcd_system_handler+0x11c>
					Enter = 0;
 8000d2c:	4b7f      	ldr	r3, [pc, #508]	; (8000f2c <lcd_system_handler+0x2a8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8000d32:	4b7d      	ldr	r3, [pc, #500]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d108      	bne.n	8000d4e <lcd_system_handler+0xca>
                        Index_mode = INDEX_MODE1;
 8000d3c:	4b7d      	ldr	r3, [pc, #500]	; (8000f34 <lcd_system_handler+0x2b0>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8000d42:	4b79      	ldr	r3, [pc, #484]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000d48:	4b75      	ldr	r3, [pc, #468]	; (8000f20 <lcd_system_handler+0x29c>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 8000d4e:	4b76      	ldr	r3, [pc, #472]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d108      	bne.n	8000d6a <lcd_system_handler+0xe6>
                        Index_mode = INDEX_MODE2;
 8000d58:	4b76      	ldr	r3, [pc, #472]	; (8000f34 <lcd_system_handler+0x2b0>)
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8000d5e:	4b72      	ldr	r3, [pc, #456]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000d64:	4b6e      	ldr	r3, [pc, #440]	; (8000f20 <lcd_system_handler+0x29c>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000d6a:	4b6f      	ldr	r3, [pc, #444]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d115      	bne.n	8000da0 <lcd_system_handler+0x11c>
                        Index_mode = INDEX_MODE1;
 8000d74:	4b6f      	ldr	r3, [pc, #444]	; (8000f34 <lcd_system_handler+0x2b0>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
                        Mode = 0;
 8000d7a:	4b6a      	ldr	r3, [pc, #424]	; (8000f24 <lcd_system_handler+0x2a0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000d80:	4b69      	ldr	r3, [pc, #420]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_1;
 8000d86:	4b6a      	ldr	r3, [pc, #424]	; (8000f30 <lcd_system_handler+0x2ac>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000d8c:	4b64      	ldr	r3, [pc, #400]	; (8000f20 <lcd_system_handler+0x29c>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e005      	b.n	8000da0 <lcd_system_handler+0x11c>
				Config = CONFIG_ROW1;
 8000d94:	4b64      	ldr	r3, [pc, #400]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8000d9a:	4b64      	ldr	r3, [pc, #400]	; (8000f2c <lcd_system_handler+0x2a8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000da0:	4b63      	ldr	r3, [pc, #396]	; (8000f30 <lcd_system_handler+0x2ac>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fd5e 	bl	8000868 <lcd_user_display>
}
 8000dac:	e0d8      	b.n	8000f60 <lcd_system_handler+0x2dc>
		else if(INDEX_MODE1 == Index_mode)	// Languge
 8000dae:	4b61      	ldr	r3, [pc, #388]	; (8000f34 <lcd_system_handler+0x2b0>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d161      	bne.n	8000e7a <lcd_system_handler+0x1f6>
			Status_Display = STATUS_6;
 8000db6:	4b5e      	ldr	r3, [pc, #376]	; (8000f30 <lcd_system_handler+0x2ac>)
 8000db8:	2206      	movs	r2, #6
 8000dba:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000dbc:	4b5c      	ldr	r3, [pc, #368]	; (8000f30 <lcd_system_handler+0x2ac>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff fd50 	bl	8000868 <lcd_user_display>
			if (flag_button)
 8000dc8:	4b5b      	ldr	r3, [pc, #364]	; (8000f38 <lcd_system_handler+0x2b4>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d005      	beq.n	8000dde <lcd_system_handler+0x15a>
				CLCD_I2C_Clear(LCD_user);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff fba0 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8000dd8:	4b57      	ldr	r3, [pc, #348]	; (8000f38 <lcd_system_handler+0x2b4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000dde:	4b52      	ldr	r3, [pc, #328]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d03b      	beq.n	8000e60 <lcd_system_handler+0x1dc>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8000de8:	4b4f      	ldr	r3, [pc, #316]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	461a      	mov	r2, r3
 8000df0:	210f      	movs	r1, #15
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff fa7e 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8000df8:	4950      	ldr	r1, [pc, #320]	; (8000f3c <lcd_system_handler+0x2b8>)
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fb26 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000e00:	4b4a      	ldr	r3, [pc, #296]	; (8000f2c <lcd_system_handler+0x2a8>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d030      	beq.n	8000e6c <lcd_system_handler+0x1e8>
					Enter = 0;
 8000e0a:	4b48      	ldr	r3, [pc, #288]	; (8000f2c <lcd_system_handler+0x2a8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8000e10:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d105      	bne.n	8000e26 <lcd_system_handler+0x1a2>
						language = VIETNAMESE;
 8000e1a:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <lcd_system_handler+0x2bc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 8000e20:	4b41      	ldr	r3, [pc, #260]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000e22:	2203      	movs	r2, #3
 8000e24:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 8000e26:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d105      	bne.n	8000e3c <lcd_system_handler+0x1b8>
						language = ENGLISH;
 8000e30:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <lcd_system_handler+0x2bc>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 8000e36:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000e38:	2203      	movs	r2, #3
 8000e3a:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000e3c:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d112      	bne.n	8000e6c <lcd_system_handler+0x1e8>
                        Index_mode = INDEX_MODE_NONE;
 8000e46:	4b3b      	ldr	r3, [pc, #236]	; (8000f34 <lcd_system_handler+0x2b0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000e4c:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_2;
 8000e52:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <lcd_system_handler+0x2ac>)
 8000e54:	2202      	movs	r2, #2
 8000e56:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000e58:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <lcd_system_handler+0x29c>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	e005      	b.n	8000e6c <lcd_system_handler+0x1e8>
				Config = CONFIG_ROW1;
 8000e60:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8000e66:	4b31      	ldr	r3, [pc, #196]	; (8000f2c <lcd_system_handler+0x2a8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000e6c:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <lcd_system_handler+0x2ac>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff fcf8 	bl	8000868 <lcd_user_display>
}
 8000e78:	e072      	b.n	8000f60 <lcd_system_handler+0x2dc>
		else if(INDEX_MODE2 == Index_mode)	// Enter Password
 8000e7a:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <lcd_system_handler+0x2b0>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d16e      	bne.n	8000f60 <lcd_system_handler+0x2dc>
			Status_Display = STATUS_3;
 8000e82:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <lcd_system_handler+0x2ac>)
 8000e84:	2203      	movs	r2, #3
 8000e86:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <lcd_system_handler+0x2ac>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff fcea 	bl	8000868 <lcd_user_display>
			if (flag_button)
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <lcd_system_handler+0x2b4>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d005      	beq.n	8000eaa <lcd_system_handler+0x226>
				CLCD_I2C_Clear(LCD_user);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff fb3a 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <lcd_system_handler+0x2b4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d049      	beq.n	8000f48 <lcd_system_handler+0x2c4>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fa18 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8000ec4:	491d      	ldr	r1, [pc, #116]	; (8000f3c <lcd_system_handler+0x2b8>)
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fac0 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <lcd_system_handler+0x2a8>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d03e      	beq.n	8000f54 <lcd_system_handler+0x2d0>
					Enter = 0;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <lcd_system_handler+0x2a8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d102      	bne.n	8000eec <lcd_system_handler+0x268>
						enter_num_pass.signal_enter_num = PROCESSING;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <lcd_system_handler+0x2c0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	705a      	strb	r2, [r3, #1]
					if(Config == CONFIG_ROW2)
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d102      	bne.n	8000efc <lcd_system_handler+0x278>
						enter_num_pass.signal_enter_pass = PROCESSING;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <lcd_system_handler+0x2c0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d126      	bne.n	8000f54 <lcd_system_handler+0x2d0>
                        Index_mode = INDEX_MODE_NONE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <lcd_system_handler+0x2b0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <lcd_system_handler+0x2a4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_2;
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <lcd_system_handler+0x2ac>)
 8000f14:	2202      	movs	r2, #2
 8000f16:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000f18:	4b01      	ldr	r3, [pc, #4]	; (8000f20 <lcd_system_handler+0x29c>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e019      	b.n	8000f54 <lcd_system_handler+0x2d0>
 8000f20:	20000040 	.word	0x20000040
 8000f24:	20000041 	.word	0x20000041
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000042 	.word	0x20000042
 8000f30:	20000047 	.word	0x20000047
 8000f34:	20000046 	.word	0x20000046
 8000f38:	20000043 	.word	0x20000043
 8000f3c:	0800334c 	.word	0x0800334c
 8000f40:	20000048 	.word	0x20000048
 8000f44:	20000044 	.word	0x20000044
				Config = CONFIG_ROW1;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <lcd_system_handler+0x2e4>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <lcd_system_handler+0x2e8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <lcd_system_handler+0x2ec>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff fc84 	bl	8000868 <lcd_user_display>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000042 	.word	0x20000042
 8000f70:	20000047 	.word	0x20000047

08000f74 <HAL_GPIO_EXTI_Callback>:
uint8_t row = 9 - 1;
uint8_t password[5] = {0};
volatile uint8_t flag_keypad = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
	static uint32_t TimeBegin = 0;
	static uint32_t TimeNow = 0;
	/*CODE ISR*/
	/*flag keypad*/
	if((R1_IN_Pin == GPIO_Pin) | (R2_IN_Pin == GPIO_Pin) | (R3_IN_Pin == GPIO_Pin) | (R4_IN_Pin == GPIO_Pin))
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f84:	bf0c      	ite	eq
 8000f86:	2301      	moveq	r3, #1
 8000f88:	2300      	movne	r3, #0
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f92:	bf0c      	ite	eq
 8000f94:	2301      	moveq	r3, #1
 8000f96:	2300      	movne	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa6:	bf0c      	ite	eq
 8000fa8:	2301      	moveq	r3, #1
 8000faa:	2300      	movne	r3, #0
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	88fa      	ldrh	r2, [r7, #6]
 8000fb2:	2a04      	cmp	r2, #4
 8000fb4:	bf0c      	ite	eq
 8000fb6:	2201      	moveq	r2, #1
 8000fb8:	2200      	movne	r2, #0
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <HAL_GPIO_EXTI_Callback+0x54>
	{
		flag_keypad = 1;
 8000fc2:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x174>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
	}
	/*flag lcd*/
	flag_button = 1;
 8000fc8:	4b48      	ldr	r3, [pc, #288]	; (80010ec <HAL_GPIO_EXTI_Callback+0x178>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
	if(UP_EXTI_3_Pin == GPIO_Pin)
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_GPIO_EXTI_Callback+0x80>
	{
		Config++;
 8000fd4:	4b46      	ldr	r3, [pc, #280]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b44      	ldr	r3, [pc, #272]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000fe0:	701a      	strb	r2, [r3, #0]
		if(Config > CONFIG_ROW3) Config = CONFIG_ROW1;
 8000fe2:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d925      	bls.n	8001038 <HAL_GPIO_EXTI_Callback+0xc4>
 8000fec:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e021      	b.n	8001038 <HAL_GPIO_EXTI_Callback+0xc4>
	}
	else if(DOWN_EXTI_4_Pin == GPIO_Pin)
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	2b10      	cmp	r3, #16
 8000ff8:	d10f      	bne.n	800101a <HAL_GPIO_EXTI_Callback+0xa6>
	{
		Config--;
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	3b01      	subs	r3, #1
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001006:	701a      	strb	r2, [r3, #0]
		if(Config < CONFIG_ROW1) Config = CONFIG_ROW3;
 8001008:	4b39      	ldr	r3, [pc, #228]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x17c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d112      	bne.n	8001038 <HAL_GPIO_EXTI_Callback+0xc4>
 8001012:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001014:	2203      	movs	r2, #3
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	e00e      	b.n	8001038 <HAL_GPIO_EXTI_Callback+0xc4>
	}
	else if(ENTER_EXTI_5_Pin == GPIO_Pin)
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	2b20      	cmp	r3, #32
 800101e:	d10b      	bne.n	8001038 <HAL_GPIO_EXTI_Callback+0xc4>
	{
		if(1 == Mode)
 8001020:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <HAL_GPIO_EXTI_Callback+0x180>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d103      	bne.n	8001032 <HAL_GPIO_EXTI_Callback+0xbe>
		{
			Enter = 1;
 800102a:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <HAL_GPIO_EXTI_Callback+0x184>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	e002      	b.n	8001038 <HAL_GPIO_EXTI_Callback+0xc4>
		}
		else
		{
			Mode = 1;
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <HAL_GPIO_EXTI_Callback+0x180>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
		}
	}
	/*END CODE ISR*/
	HAL_Delay(20);
 8001038:	2014      	movs	r0, #20
 800103a:	f000 fbc9 	bl	80017d0 <HAL_Delay>
	TimeBegin = HAL_GetTick();
 800103e:	f000 fbbd 	bl	80017bc <HAL_GetTick>
 8001042:	4603      	mov	r3, r0
 8001044:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <HAL_GPIO_EXTI_Callback+0x188>)
 8001046:	6013      	str	r3, [r2, #0]
	while(		HAL_GPIO_ReadPin(GPIOB, UP_EXTI_3_Pin) == GPIO_PIN_RESET		\
 8001048:	e00d      	b.n	8001066 <HAL_GPIO_EXTI_Callback+0xf2>
			|| 	HAL_GPIO_ReadPin(R1_IN_GPIO_Port, R1_IN_Pin) == GPIO_PIN_RESET		\
			|| 	HAL_GPIO_ReadPin(R2_IN_GPIO_Port, R2_IN_Pin) == GPIO_PIN_RESET 		\
			|| 	HAL_GPIO_ReadPin(R3_IN_GPIO_Port, R3_IN_Pin) == GPIO_PIN_RESET		\
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
	{
		TimeNow = HAL_GetTick();
 800104a:	f000 fbb7 	bl	80017bc <HAL_GetTick>
 800104e:	4603      	mov	r3, r0
 8001050:	4a2b      	ldr	r2, [pc, #172]	; (8001100 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001052:	6013      	str	r3, [r2, #0]
		if(TimeNow - TimeBegin == 5000)
 8001054:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <HAL_GPIO_EXTI_Callback+0x188>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001062:	4293      	cmp	r3, r2
 8001064:	d034      	beq.n	80010d0 <HAL_GPIO_EXTI_Callback+0x15c>
	while(		HAL_GPIO_ReadPin(GPIOB, UP_EXTI_3_Pin) == GPIO_PIN_RESET		\
 8001066:	2108      	movs	r1, #8
 8001068:	4826      	ldr	r0, [pc, #152]	; (8001104 <HAL_GPIO_EXTI_Callback+0x190>)
 800106a:	f000 fe67 	bl	8001d3c <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0ea      	beq.n	800104a <HAL_GPIO_EXTI_Callback+0xd6>
			|| 	HAL_GPIO_ReadPin(GPIOB, DOWN_EXTI_4_Pin) == GPIO_PIN_RESET 		\
 8001074:	2110      	movs	r1, #16
 8001076:	4823      	ldr	r0, [pc, #140]	; (8001104 <HAL_GPIO_EXTI_Callback+0x190>)
 8001078:	f000 fe60 	bl	8001d3c <HAL_GPIO_ReadPin>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0e3      	beq.n	800104a <HAL_GPIO_EXTI_Callback+0xd6>
			|| 	HAL_GPIO_ReadPin(GPIOB, ENTER_EXTI_5_Pin) == GPIO_PIN_RESET		\
 8001082:	2120      	movs	r1, #32
 8001084:	481f      	ldr	r0, [pc, #124]	; (8001104 <HAL_GPIO_EXTI_Callback+0x190>)
 8001086:	f000 fe59 	bl	8001d3c <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0dc      	beq.n	800104a <HAL_GPIO_EXTI_Callback+0xd6>
			|| 	HAL_GPIO_ReadPin(R1_IN_GPIO_Port, R1_IN_Pin) == GPIO_PIN_RESET		\
 8001090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001094:	481b      	ldr	r0, [pc, #108]	; (8001104 <HAL_GPIO_EXTI_Callback+0x190>)
 8001096:	f000 fe51 	bl	8001d3c <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0d4      	beq.n	800104a <HAL_GPIO_EXTI_Callback+0xd6>
			|| 	HAL_GPIO_ReadPin(R2_IN_GPIO_Port, R2_IN_Pin) == GPIO_PIN_RESET 		\
 80010a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a4:	4817      	ldr	r0, [pc, #92]	; (8001104 <HAL_GPIO_EXTI_Callback+0x190>)
 80010a6:	f000 fe49 	bl	8001d3c <HAL_GPIO_ReadPin>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0cc      	beq.n	800104a <HAL_GPIO_EXTI_Callback+0xd6>
			|| 	HAL_GPIO_ReadPin(R3_IN_GPIO_Port, R3_IN_Pin) == GPIO_PIN_RESET		\
 80010b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b4:	4813      	ldr	r0, [pc, #76]	; (8001104 <HAL_GPIO_EXTI_Callback+0x190>)
 80010b6:	f000 fe41 	bl	8001d3c <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0c4      	beq.n	800104a <HAL_GPIO_EXTI_Callback+0xd6>
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
 80010c0:	2104      	movs	r1, #4
 80010c2:	4810      	ldr	r0, [pc, #64]	; (8001104 <HAL_GPIO_EXTI_Callback+0x190>)
 80010c4:	f000 fe3a 	bl	8001d3c <HAL_GPIO_ReadPin>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0bd      	beq.n	800104a <HAL_GPIO_EXTI_Callback+0xd6>
 80010ce:	e000      	b.n	80010d2 <HAL_GPIO_EXTI_Callback+0x15e>
		{
//			ButtonError = 1;
			break;
 80010d0:	bf00      	nop
		}
	}
	HAL_Delay(20);
 80010d2:	2014      	movs	r0, #20
 80010d4:	f000 fb7c 	bl	80017d0 <HAL_Delay>
	EXTI->PR = ENTER_EXTI_5_Pin | DOWN_EXTI_4_Pin | UP_EXTI_3_Pin \
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_GPIO_EXTI_Callback+0x194>)
 80010da:	f641 423c 	movw	r2, #7228	; 0x1c3c
 80010de:	615a      	str	r2, [r3, #20]
			| R1_IN_Pin | R2_IN_Pin |R3_IN_Pin | R4_IN_Pin;
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000119 	.word	0x20000119
 80010ec:	20000043 	.word	0x20000043
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000041 	.word	0x20000041
 80010f8:	20000042 	.word	0x20000042
 80010fc:	2000011c 	.word	0x2000011c
 8001100:	20000120 	.word	0x20000120
 8001104:	40010c00 	.word	0x40010c00
 8001108:	40010400 	.word	0x40010400

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b092      	sub	sp, #72	; 0x48
 8001110:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001112:	f000 fafb 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001116:	f000 f865 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111a:	f000 f8f7 	bl	800130c <MX_GPIO_Init>
  MX_I2C1_Init();
 800111e:	f000 f89d 	bl	800125c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001122:	f000 f8c9 	bl	80012b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  KeyPad_Init(		// Cpl pin + port
 8001126:	2304      	movs	r3, #4
 8001128:	930d      	str	r3, [sp, #52]	; 0x34
 800112a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112e:	930c      	str	r3, [sp, #48]	; 0x30
 8001130:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001134:	930b      	str	r3, [sp, #44]	; 0x2c
 8001136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113a:	930a      	str	r3, [sp, #40]	; 0x28
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <main+0xb4>)
 800113e:	9309      	str	r3, [sp, #36]	; 0x24
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <main+0xb4>)
 8001142:	9308      	str	r3, [sp, #32]
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <main+0xb4>)
 8001146:	9307      	str	r3, [sp, #28]
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <main+0xb4>)
 800114a:	9306      	str	r3, [sp, #24]
 800114c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001150:	9305      	str	r3, [sp, #20]
 8001152:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001156:	9304      	str	r3, [sp, #16]
 8001158:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800115c:	9303      	str	r3, [sp, #12]
 800115e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <main+0xb4>)
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <main+0xb4>)
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <main+0xb4>)
 800116e:	4a15      	ldr	r2, [pc, #84]	; (80011c4 <main+0xb8>)
 8001170:	4915      	ldr	r1, [pc, #84]	; (80011c8 <main+0xbc>)
 8001172:	4816      	ldr	r0, [pc, #88]	; (80011cc <main+0xc0>)
 8001174:	f7ff f9e0 	bl	8000538 <KeyPad_Init>
					C1_OUT_Pin, C2_OUT_Pin, C3_OUT_Pin, C4_OUT_Pin,								\
					// Row pin + port
					R1_IN_GPIO_Port, R2_IN_GPIO_Port, R3_IN_GPIO_Port, R4_IN_GPIO_Port,					\
					R1_IN_Pin, R2_IN_Pin, R3_IN_Pin, R4_IN_Pin
			  );
  CLCD_I2C_Init(&LCD1, &hi2c1, (0x27 << 1), 16, 4);
 8001178:	1d38      	adds	r0, r7, #4
 800117a:	2304      	movs	r3, #4
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2310      	movs	r3, #16
 8001180:	224e      	movs	r2, #78	; 0x4e
 8001182:	4913      	ldr	r1, [pc, #76]	; (80011d0 <main+0xc4>)
 8001184:	f7ff f846 	bl	8000214 <CLCD_I2C_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_keypad == 1)
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <main+0xc8>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d10b      	bne.n	80011aa <main+0x9e>
	  {
		  flag_keypad = 0;
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <main+0xc8>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
		  key = KEYPAD_Handler(&COL_KEY_PAD_main, &ROW_KEY_PAD_main, &row);
 8001198:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <main+0xcc>)
 800119a:	490b      	ldr	r1, [pc, #44]	; (80011c8 <main+0xbc>)
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <main+0xc0>)
 800119e:	f7ff fb30 	bl	8000802 <KEYPAD_Handler>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <main+0xd0>)
 80011a8:	701a      	strb	r2, [r3, #0]
	  }
	  lcd_system_handler(&LCD1);
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fd69 	bl	8000c84 <lcd_system_handler>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80011b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b6:	480a      	ldr	r0, [pc, #40]	; (80011e0 <main+0xd4>)
 80011b8:	f000 fdef 	bl	8001d9a <HAL_GPIO_TogglePin>
	  if(flag_keypad == 1)
 80011bc:	e7e4      	b.n	8001188 <main+0x7c>
 80011be:	bf00      	nop
 80011c0:	40010c00 	.word	0x40010c00
 80011c4:	40010800 	.word	0x40010800
 80011c8:	20000100 	.word	0x20000100
 80011cc:	200000e8 	.word	0x200000e8
 80011d0:	2000004c 	.word	0x2000004c
 80011d4:	20000119 	.word	0x20000119
 80011d8:	20000001 	.word	0x20000001
 80011dc:	20000118 	.word	0x20000118
 80011e0:	40011000 	.word	0x40011000

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b090      	sub	sp, #64	; 0x40
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	2228      	movs	r2, #40	; 0x28
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 ffb0 	bl	8003158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120a:	2301      	movs	r3, #1
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120e:	2310      	movs	r3, #16
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fa8a 	bl	8002734 <HAL_RCC_OscConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001226:	f000 f92f 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122a:	230f      	movs	r3, #15
 800122c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fcf8 	bl	8002c38 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800124e:	f000 f91b 	bl	8001488 <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3740      	adds	r7, #64	; 0x40
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_I2C1_Init+0x50>)
 8001262:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <MX_I2C1_Init+0x54>)
 8001264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_I2C1_Init+0x50>)
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <MX_I2C1_Init+0x58>)
 800126a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_I2C1_Init+0x50>)
 800127a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <MX_I2C1_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_I2C1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MX_I2C1_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_I2C1_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_I2C1_Init+0x50>)
 800129a:	f000 fdaf 	bl	8001dfc <HAL_I2C_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a4:	f000 f8f0 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000004c 	.word	0x2000004c
 80012b0:	40005400 	.word	0x40005400
 80012b4:	000186a0 	.word	0x000186a0

080012b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_USART1_UART_Init+0x4c>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <MX_USART1_UART_Init+0x50>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_USART1_UART_Init+0x4c>)
 80012c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_USART1_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_USART1_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_USART1_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_USART1_UART_Init+0x4c>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_USART1_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_USART1_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_USART1_UART_Init+0x4c>)
 80012f0:	f001 fe30 	bl	8002f54 <HAL_UART_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012fa:	f000 f8c5 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000a0 	.word	0x200000a0
 8001308:	40013800 	.word	0x40013800

0800130c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <MX_GPIO_Init+0x164>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a52      	ldr	r2, [pc, #328]	; (8001470 <MX_GPIO_Init+0x164>)
 8001326:	f043 0310 	orr.w	r3, r3, #16
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b50      	ldr	r3, [pc, #320]	; (8001470 <MX_GPIO_Init+0x164>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0310 	and.w	r3, r3, #16
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b4d      	ldr	r3, [pc, #308]	; (8001470 <MX_GPIO_Init+0x164>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a4c      	ldr	r2, [pc, #304]	; (8001470 <MX_GPIO_Init+0x164>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <MX_GPIO_Init+0x164>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b47      	ldr	r3, [pc, #284]	; (8001470 <MX_GPIO_Init+0x164>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a46      	ldr	r2, [pc, #280]	; (8001470 <MX_GPIO_Init+0x164>)
 8001356:	f043 0308 	orr.w	r3, r3, #8
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b44      	ldr	r3, [pc, #272]	; (8001470 <MX_GPIO_Init+0x164>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136e:	4841      	ldr	r0, [pc, #260]	; (8001474 <MX_GPIO_Init+0x168>)
 8001370:	f000 fcfb 	bl	8001d6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R7_Pin|R6_Pin|R5_Pin|R4_Pin
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800137a:	483f      	ldr	r0, [pc, #252]	; (8001478 <MX_GPIO_Init+0x16c>)
 800137c:	f000 fcf5 	bl	8001d6a <HAL_GPIO_WritePin>
                          |R3_Pin|R2_Pin|R1_Pin|C1_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C4_OUT_Pin|C3_OUT_Pin|C2_OUT_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001386:	483d      	ldr	r0, [pc, #244]	; (800147c <MX_GPIO_Init+0x170>)
 8001388:	f000 fcef 	bl	8001d6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800138c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2302      	movs	r3, #2
 800139c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4619      	mov	r1, r3
 80013a4:	4833      	ldr	r0, [pc, #204]	; (8001474 <MX_GPIO_Init+0x168>)
 80013a6:	f000 fb45 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin R6_Pin R5_Pin R4_Pin
                           R3_Pin R2_Pin R1_Pin C1_OUT_Pin */
  GPIO_InitStruct.Pin = R7_Pin|R6_Pin|R5_Pin|R4_Pin
 80013aa:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80013ae:	613b      	str	r3, [r7, #16]
                          |R3_Pin|R2_Pin|R1_Pin|C1_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	4619      	mov	r1, r3
 80013c2:	482d      	ldr	r0, [pc, #180]	; (8001478 <MX_GPIO_Init+0x16c>)
 80013c4:	f000 fb36 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : R4_IN_Pin */
  GPIO_InitStruct.Pin = R4_IN_Pin;
 80013c8:	2304      	movs	r3, #4
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013cc:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <MX_GPIO_Init+0x174>)
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(R4_IN_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	4828      	ldr	r0, [pc, #160]	; (800147c <MX_GPIO_Init+0x170>)
 80013dc:	f000 fb2a 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_IN_Pin R2_IN_Pin R1_IN_Pin UP_EXTI_3_Pin
                           DOWN_EXTI_4_Pin ENTER_EXTI_5_Pin */
  GPIO_InitStruct.Pin = R3_IN_Pin|R2_IN_Pin|R1_IN_Pin|UP_EXTI_3_Pin
 80013e0:	f641 4338 	movw	r3, #7224	; 0x1c38
 80013e4:	613b      	str	r3, [r7, #16]
                          |DOWN_EXTI_4_Pin|ENTER_EXTI_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e6:	4b27      	ldr	r3, [pc, #156]	; (8001484 <MX_GPIO_Init+0x178>)
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	4821      	ldr	r0, [pc, #132]	; (800147c <MX_GPIO_Init+0x170>)
 80013f6:	f000 fb1d 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_OUT_Pin C3_OUT_Pin C2_OUT_Pin */
  GPIO_InitStruct.Pin = C4_OUT_Pin|C3_OUT_Pin|C2_OUT_Pin;
 80013fa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001404:	2302      	movs	r3, #2
 8001406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2302      	movs	r3, #2
 800140a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4619      	mov	r1, r3
 8001412:	481a      	ldr	r0, [pc, #104]	; (800147c <MX_GPIO_Init+0x170>)
 8001414:	f000 fb0e 	bl	8001a34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2105      	movs	r1, #5
 800141c:	2008      	movs	r0, #8
 800141e:	f000 fad2 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001422:	2008      	movs	r0, #8
 8001424:	f000 faeb 	bl	80019fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2105      	movs	r1, #5
 800142c:	2009      	movs	r0, #9
 800142e:	f000 faca 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001432:	2009      	movs	r0, #9
 8001434:	f000 fae3 	bl	80019fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2105      	movs	r1, #5
 800143c:	200a      	movs	r0, #10
 800143e:	f000 fac2 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001442:	200a      	movs	r0, #10
 8001444:	f000 fadb 	bl	80019fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2105      	movs	r1, #5
 800144c:	2017      	movs	r0, #23
 800144e:	f000 faba 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001452:	2017      	movs	r0, #23
 8001454:	f000 fad3 	bl	80019fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	2105      	movs	r1, #5
 800145c:	2028      	movs	r0, #40	; 0x28
 800145e:	f000 fab2 	bl	80019c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001462:	2028      	movs	r0, #40	; 0x28
 8001464:	f000 facb 	bl	80019fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	40011000 	.word	0x40011000
 8001478:	40010800 	.word	0x40010800
 800147c:	40010c00 	.word	0x40010c00
 8001480:	10110000 	.word	0x10110000
 8001484:	10210000 	.word	0x10210000

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	e7fe      	b.n	8001490 <Error_Handler+0x8>
	...

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_MspInit+0x5c>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <HAL_MspInit+0x5c>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6193      	str	r3, [r2, #24]
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_MspInit+0x5c>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_MspInit+0x5c>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_MspInit+0x5c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	61d3      	str	r3, [r2, #28]
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_MspInit+0x5c>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_MspInit+0x60>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_MspInit+0x60>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010000 	.word	0x40010000

080014f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <HAL_I2C_MspInit+0x70>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d123      	bne.n	8001560 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <HAL_I2C_MspInit+0x74>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a13      	ldr	r2, [pc, #76]	; (800156c <HAL_I2C_MspInit+0x74>)
 800151e:	f043 0308 	orr.w	r3, r3, #8
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_I2C_MspInit+0x74>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001530:	23c0      	movs	r3, #192	; 0xc0
 8001532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001534:	2312      	movs	r3, #18
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	4619      	mov	r1, r3
 8001542:	480b      	ldr	r0, [pc, #44]	; (8001570 <HAL_I2C_MspInit+0x78>)
 8001544:	f000 fa76 	bl	8001a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_I2C_MspInit+0x74>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_I2C_MspInit+0x74>)
 800154e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001552:	61d3      	str	r3, [r2, #28]
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_I2C_MspInit+0x74>)
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40005400 	.word	0x40005400
 800156c:	40021000 	.word	0x40021000
 8001570:	40010c00 	.word	0x40010c00

08001574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <HAL_UART_MspInit+0x8c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d131      	bne.n	80015f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_UART_MspInit+0x90>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a1a      	ldr	r2, [pc, #104]	; (8001604 <HAL_UART_MspInit+0x90>)
 800159a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_UART_MspInit+0x90>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_UART_MspInit+0x90>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a14      	ldr	r2, [pc, #80]	; (8001604 <HAL_UART_MspInit+0x90>)
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_UART_MspInit+0x90>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4619      	mov	r1, r3
 80015d8:	480b      	ldr	r0, [pc, #44]	; (8001608 <HAL_UART_MspInit+0x94>)
 80015da:	f000 fa2b 	bl	8001a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	4619      	mov	r1, r3
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <HAL_UART_MspInit+0x94>)
 80015f4:	f000 fa1e 	bl	8001a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40013800 	.word	0x40013800
 8001604:	40021000 	.word	0x40021000
 8001608:	40010800 	.word	0x40010800

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <NMI_Handler+0x4>

08001612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <MemManage_Handler+0x4>

0800161e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <BusFault_Handler+0x4>

08001624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <UsageFault_Handler+0x4>

0800162a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001652:	f000 f8a1 	bl	8001798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}

0800165a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R4_IN_Pin);
 800165e:	2004      	movs	r0, #4
 8001660:	f000 fbb4 	bl	8001dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_EXTI_3_Pin);
 800166c:	2008      	movs	r0, #8
 800166e:	f000 fbad 	bl	8001dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}

08001676 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_EXTI_4_Pin);
 800167a:	2010      	movs	r0, #16
 800167c:	f000 fba6 	bl	8001dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENTER_EXTI_5_Pin);
 8001688:	2020      	movs	r0, #32
 800168a:	f000 fb9f 	bl	8001dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}

08001692 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R3_IN_Pin);
 8001696:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800169a:	f000 fb97 	bl	8001dcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R2_IN_Pin);
 800169e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016a2:	f000 fb93 	bl	8001dcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R1_IN_Pin);
 80016a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016aa:	f000 fb8f 	bl	8001dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
	...

080016c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c0:	f7ff fff7 	bl	80016b2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c4:	480b      	ldr	r0, [pc, #44]	; (80016f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016c6:	490c      	ldr	r1, [pc, #48]	; (80016f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016c8:	4a0c      	ldr	r2, [pc, #48]	; (80016fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a09      	ldr	r2, [pc, #36]	; (8001700 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016dc:	4c09      	ldr	r4, [pc, #36]	; (8001704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ea:	f001 fd11 	bl	8003110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ee:	f7ff fd0d 	bl	800110c <main>
  bx lr
 80016f2:	4770      	bx	lr
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80016fc:	08003394 	.word	0x08003394
  ldr r2, =_sbss
 8001700:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001704:	20000128 	.word	0x20000128

08001708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC1_2_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_Init+0x28>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_Init+0x28>)
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171c:	2003      	movs	r0, #3
 800171e:	f000 f947 	bl	80019b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001722:	2004      	movs	r0, #4
 8001724:	f000 f808 	bl	8001738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001728:	f7ff feb4 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40022000 	.word	0x40022000

08001738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x54>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_InitTick+0x58>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f000 f95f 	bl	8001a1a <HAL_SYSTICK_Config>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e00e      	b.n	8001784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b0f      	cmp	r3, #15
 800176a:	d80a      	bhi.n	8001782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800176c:	2200      	movs	r2, #0
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f000 f927 	bl	80019c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001778:	4a06      	ldr	r2, [pc, #24]	; (8001794 <HAL_InitTick+0x5c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e000      	b.n	8001784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000004 	.word	0x20000004
 8001790:	2000000c 	.word	0x2000000c
 8001794:	20000008 	.word	0x20000008

08001798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_IncTick+0x1c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_IncTick+0x20>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	4a03      	ldr	r2, [pc, #12]	; (80017b8 <HAL_IncTick+0x20>)
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	2000000c 	.word	0x2000000c
 80017b8:	20000124 	.word	0x20000124

080017bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b02      	ldr	r3, [pc, #8]	; (80017cc <HAL_GetTick+0x10>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	20000124 	.word	0x20000124

080017d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d8:	f7ff fff0 	bl	80017bc <HAL_GetTick>
 80017dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e8:	d005      	beq.n	80017f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_Delay+0x44>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f6:	bf00      	nop
 80017f8:	f7ff ffe0 	bl	80017bc <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	429a      	cmp	r2, r3
 8001806:	d8f7      	bhi.n	80017f8 <HAL_Delay+0x28>
  {
  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000000c 	.word	0x2000000c

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db0b      	blt.n	80018a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4906      	ldr	r1, [pc, #24]	; (80018b0 <__NVIC_EnableIRQ+0x34>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800197c:	d301      	bcc.n	8001982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197e:	2301      	movs	r3, #1
 8001980:	e00f      	b.n	80019a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <SysTick_Config+0x40>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198a:	210f      	movs	r1, #15
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f7ff ff90 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <SysTick_Config+0x40>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <SysTick_Config+0x40>)
 800199c:	2207      	movs	r2, #7
 800199e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff2d 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d8:	f7ff ff42 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7ff ff90 	bl	8001908 <NVIC_EncodePriority>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff5f 	bl	80018b4 <__NVIC_SetPriority>
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff35 	bl	800187c <__NVIC_EnableIRQ>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ffa2 	bl	800196c <SysTick_Config>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b08b      	sub	sp, #44	; 0x2c
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a46:	e169      	b.n	8001d1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	f040 8158 	bne.w	8001d16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4a9a      	ldr	r2, [pc, #616]	; (8001cd4 <HAL_GPIO_Init+0x2a0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d05e      	beq.n	8001b2e <HAL_GPIO_Init+0xfa>
 8001a70:	4a98      	ldr	r2, [pc, #608]	; (8001cd4 <HAL_GPIO_Init+0x2a0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d875      	bhi.n	8001b62 <HAL_GPIO_Init+0x12e>
 8001a76:	4a98      	ldr	r2, [pc, #608]	; (8001cd8 <HAL_GPIO_Init+0x2a4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d058      	beq.n	8001b2e <HAL_GPIO_Init+0xfa>
 8001a7c:	4a96      	ldr	r2, [pc, #600]	; (8001cd8 <HAL_GPIO_Init+0x2a4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d86f      	bhi.n	8001b62 <HAL_GPIO_Init+0x12e>
 8001a82:	4a96      	ldr	r2, [pc, #600]	; (8001cdc <HAL_GPIO_Init+0x2a8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d052      	beq.n	8001b2e <HAL_GPIO_Init+0xfa>
 8001a88:	4a94      	ldr	r2, [pc, #592]	; (8001cdc <HAL_GPIO_Init+0x2a8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d869      	bhi.n	8001b62 <HAL_GPIO_Init+0x12e>
 8001a8e:	4a94      	ldr	r2, [pc, #592]	; (8001ce0 <HAL_GPIO_Init+0x2ac>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d04c      	beq.n	8001b2e <HAL_GPIO_Init+0xfa>
 8001a94:	4a92      	ldr	r2, [pc, #584]	; (8001ce0 <HAL_GPIO_Init+0x2ac>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d863      	bhi.n	8001b62 <HAL_GPIO_Init+0x12e>
 8001a9a:	4a92      	ldr	r2, [pc, #584]	; (8001ce4 <HAL_GPIO_Init+0x2b0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d046      	beq.n	8001b2e <HAL_GPIO_Init+0xfa>
 8001aa0:	4a90      	ldr	r2, [pc, #576]	; (8001ce4 <HAL_GPIO_Init+0x2b0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d85d      	bhi.n	8001b62 <HAL_GPIO_Init+0x12e>
 8001aa6:	2b12      	cmp	r3, #18
 8001aa8:	d82a      	bhi.n	8001b00 <HAL_GPIO_Init+0xcc>
 8001aaa:	2b12      	cmp	r3, #18
 8001aac:	d859      	bhi.n	8001b62 <HAL_GPIO_Init+0x12e>
 8001aae:	a201      	add	r2, pc, #4	; (adr r2, 8001ab4 <HAL_GPIO_Init+0x80>)
 8001ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab4:	08001b2f 	.word	0x08001b2f
 8001ab8:	08001b09 	.word	0x08001b09
 8001abc:	08001b1b 	.word	0x08001b1b
 8001ac0:	08001b5d 	.word	0x08001b5d
 8001ac4:	08001b63 	.word	0x08001b63
 8001ac8:	08001b63 	.word	0x08001b63
 8001acc:	08001b63 	.word	0x08001b63
 8001ad0:	08001b63 	.word	0x08001b63
 8001ad4:	08001b63 	.word	0x08001b63
 8001ad8:	08001b63 	.word	0x08001b63
 8001adc:	08001b63 	.word	0x08001b63
 8001ae0:	08001b63 	.word	0x08001b63
 8001ae4:	08001b63 	.word	0x08001b63
 8001ae8:	08001b63 	.word	0x08001b63
 8001aec:	08001b63 	.word	0x08001b63
 8001af0:	08001b63 	.word	0x08001b63
 8001af4:	08001b63 	.word	0x08001b63
 8001af8:	08001b11 	.word	0x08001b11
 8001afc:	08001b25 	.word	0x08001b25
 8001b00:	4a79      	ldr	r2, [pc, #484]	; (8001ce8 <HAL_GPIO_Init+0x2b4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d013      	beq.n	8001b2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b06:	e02c      	b.n	8001b62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	623b      	str	r3, [r7, #32]
          break;
 8001b0e:	e029      	b.n	8001b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	3304      	adds	r3, #4
 8001b16:	623b      	str	r3, [r7, #32]
          break;
 8001b18:	e024      	b.n	8001b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	3308      	adds	r3, #8
 8001b20:	623b      	str	r3, [r7, #32]
          break;
 8001b22:	e01f      	b.n	8001b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	330c      	adds	r3, #12
 8001b2a:	623b      	str	r3, [r7, #32]
          break;
 8001b2c:	e01a      	b.n	8001b64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d102      	bne.n	8001b3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b36:	2304      	movs	r3, #4
 8001b38:	623b      	str	r3, [r7, #32]
          break;
 8001b3a:	e013      	b.n	8001b64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d105      	bne.n	8001b50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b44:	2308      	movs	r3, #8
 8001b46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	611a      	str	r2, [r3, #16]
          break;
 8001b4e:	e009      	b.n	8001b64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b50:	2308      	movs	r3, #8
 8001b52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	615a      	str	r2, [r3, #20]
          break;
 8001b5a:	e003      	b.n	8001b64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
          break;
 8001b60:	e000      	b.n	8001b64 <HAL_GPIO_Init+0x130>
          break;
 8001b62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2bff      	cmp	r3, #255	; 0xff
 8001b68:	d801      	bhi.n	8001b6e <HAL_GPIO_Init+0x13a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	e001      	b.n	8001b72 <HAL_GPIO_Init+0x13e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3304      	adds	r3, #4
 8001b72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2bff      	cmp	r3, #255	; 0xff
 8001b78:	d802      	bhi.n	8001b80 <HAL_GPIO_Init+0x14c>
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	e002      	b.n	8001b86 <HAL_GPIO_Init+0x152>
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	3b08      	subs	r3, #8
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	210f      	movs	r1, #15
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	401a      	ands	r2, r3
 8001b98:	6a39      	ldr	r1, [r7, #32]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 80b1 	beq.w	8001d16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb4:	4b4d      	ldr	r3, [pc, #308]	; (8001cec <HAL_GPIO_Init+0x2b8>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a4c      	ldr	r2, [pc, #304]	; (8001cec <HAL_GPIO_Init+0x2b8>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <HAL_GPIO_Init+0x2b8>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bcc:	4a48      	ldr	r2, [pc, #288]	; (8001cf0 <HAL_GPIO_Init+0x2bc>)
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a40      	ldr	r2, [pc, #256]	; (8001cf4 <HAL_GPIO_Init+0x2c0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_GPIO_Init+0x1ec>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a3f      	ldr	r2, [pc, #252]	; (8001cf8 <HAL_GPIO_Init+0x2c4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00d      	beq.n	8001c1c <HAL_GPIO_Init+0x1e8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a3e      	ldr	r2, [pc, #248]	; (8001cfc <HAL_GPIO_Init+0x2c8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d007      	beq.n	8001c18 <HAL_GPIO_Init+0x1e4>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a3d      	ldr	r2, [pc, #244]	; (8001d00 <HAL_GPIO_Init+0x2cc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <HAL_GPIO_Init+0x1e0>
 8001c10:	2303      	movs	r3, #3
 8001c12:	e006      	b.n	8001c22 <HAL_GPIO_Init+0x1ee>
 8001c14:	2304      	movs	r3, #4
 8001c16:	e004      	b.n	8001c22 <HAL_GPIO_Init+0x1ee>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e002      	b.n	8001c22 <HAL_GPIO_Init+0x1ee>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_GPIO_Init+0x1ee>
 8001c20:	2300      	movs	r3, #0
 8001c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c24:	f002 0203 	and.w	r2, r2, #3
 8001c28:	0092      	lsls	r2, r2, #2
 8001c2a:	4093      	lsls	r3, r2
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c32:	492f      	ldr	r1, [pc, #188]	; (8001cf0 <HAL_GPIO_Init+0x2bc>)
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	492c      	ldr	r1, [pc, #176]	; (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
 8001c58:	e006      	b.n	8001c68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c5a:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	4928      	ldr	r1, [pc, #160]	; (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c74:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	4922      	ldr	r1, [pc, #136]	; (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
 8001c80:	e006      	b.n	8001c90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	491e      	ldr	r1, [pc, #120]	; (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d006      	beq.n	8001caa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4918      	ldr	r1, [pc, #96]	; (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	4914      	ldr	r1, [pc, #80]	; (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d021      	beq.n	8001d08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	490e      	ldr	r1, [pc, #56]	; (8001d04 <HAL_GPIO_Init+0x2d0>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
 8001cd0:	e021      	b.n	8001d16 <HAL_GPIO_Init+0x2e2>
 8001cd2:	bf00      	nop
 8001cd4:	10320000 	.word	0x10320000
 8001cd8:	10310000 	.word	0x10310000
 8001cdc:	10220000 	.word	0x10220000
 8001ce0:	10210000 	.word	0x10210000
 8001ce4:	10120000 	.word	0x10120000
 8001ce8:	10110000 	.word	0x10110000
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	40010800 	.word	0x40010800
 8001cf8:	40010c00 	.word	0x40010c00
 8001cfc:	40011000 	.word	0x40011000
 8001d00:	40011400 	.word	0x40011400
 8001d04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	4909      	ldr	r1, [pc, #36]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	3301      	adds	r3, #1
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	fa22 f303 	lsr.w	r3, r2, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f47f ae8e 	bne.w	8001a48 <HAL_GPIO_Init+0x14>
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	372c      	adds	r7, #44	; 0x2c
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	40010400 	.word	0x40010400

08001d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	887b      	ldrh	r3, [r7, #2]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e001      	b.n	8001d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr

08001d6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	807b      	strh	r3, [r7, #2]
 8001d76:	4613      	mov	r3, r2
 8001d78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d7a:	787b      	ldrb	r3, [r7, #1]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d80:	887a      	ldrh	r2, [r7, #2]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d86:	e003      	b.n	8001d90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d88:	887b      	ldrh	r3, [r7, #2]
 8001d8a:	041a      	lsls	r2, r3, #16
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	611a      	str	r2, [r3, #16]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b085      	sub	sp, #20
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dac:	887a      	ldrh	r2, [r7, #2]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4013      	ands	r3, r2
 8001db2:	041a      	lsls	r2, r3, #16
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	400b      	ands	r3, r1
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	611a      	str	r2, [r3, #16]
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff f8c2 	bl	8000f74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40010400 	.word	0x40010400

08001dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e12b      	b.n	8002066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff fb68 	bl	80014f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2224      	movs	r2, #36	; 0x24
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e60:	f001 f832 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8001e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4a81      	ldr	r2, [pc, #516]	; (8002070 <HAL_I2C_Init+0x274>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d807      	bhi.n	8001e80 <HAL_I2C_Init+0x84>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4a80      	ldr	r2, [pc, #512]	; (8002074 <HAL_I2C_Init+0x278>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	bf94      	ite	ls
 8001e78:	2301      	movls	r3, #1
 8001e7a:	2300      	movhi	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	e006      	b.n	8001e8e <HAL_I2C_Init+0x92>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4a7d      	ldr	r2, [pc, #500]	; (8002078 <HAL_I2C_Init+0x27c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	bf94      	ite	ls
 8001e88:	2301      	movls	r3, #1
 8001e8a:	2300      	movhi	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0e7      	b.n	8002066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4a78      	ldr	r2, [pc, #480]	; (800207c <HAL_I2C_Init+0x280>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0c9b      	lsrs	r3, r3, #18
 8001ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a6a      	ldr	r2, [pc, #424]	; (8002070 <HAL_I2C_Init+0x274>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d802      	bhi.n	8001ed0 <HAL_I2C_Init+0xd4>
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	e009      	b.n	8001ee4 <HAL_I2C_Init+0xe8>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	4a69      	ldr	r2, [pc, #420]	; (8002080 <HAL_I2C_Init+0x284>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	099b      	lsrs	r3, r3, #6
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ef6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	495c      	ldr	r1, [pc, #368]	; (8002070 <HAL_I2C_Init+0x274>)
 8001f00:	428b      	cmp	r3, r1
 8001f02:	d819      	bhi.n	8001f38 <HAL_I2C_Init+0x13c>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1e59      	subs	r1, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f12:	1c59      	adds	r1, r3, #1
 8001f14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f18:	400b      	ands	r3, r1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_I2C_Init+0x138>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1e59      	subs	r1, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f32:	e051      	b.n	8001fd8 <HAL_I2C_Init+0x1dc>
 8001f34:	2304      	movs	r3, #4
 8001f36:	e04f      	b.n	8001fd8 <HAL_I2C_Init+0x1dc>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d111      	bne.n	8001f64 <HAL_I2C_Init+0x168>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1e58      	subs	r0, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	440b      	add	r3, r1
 8001f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	e012      	b.n	8001f8a <HAL_I2C_Init+0x18e>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1e58      	subs	r0, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	0099      	lsls	r1, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Init+0x196>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e022      	b.n	8001fd8 <HAL_I2C_Init+0x1dc>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10e      	bne.n	8001fb8 <HAL_I2C_Init+0x1bc>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1e58      	subs	r0, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6859      	ldr	r1, [r3, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	440b      	add	r3, r1
 8001fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb6:	e00f      	b.n	8001fd8 <HAL_I2C_Init+0x1dc>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1e58      	subs	r0, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	0099      	lsls	r1, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	6809      	ldr	r1, [r1, #0]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69da      	ldr	r2, [r3, #28]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002006:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6911      	ldr	r1, [r2, #16]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68d2      	ldr	r2, [r2, #12]
 8002012:	4311      	orrs	r1, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	430b      	orrs	r3, r1
 800201a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	000186a0 	.word	0x000186a0
 8002074:	001e847f 	.word	0x001e847f
 8002078:	003d08ff 	.word	0x003d08ff
 800207c:	431bde83 	.word	0x431bde83
 8002080:	10624dd3 	.word	0x10624dd3

08002084 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af02      	add	r7, sp, #8
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	461a      	mov	r2, r3
 8002090:	460b      	mov	r3, r1
 8002092:	817b      	strh	r3, [r7, #10]
 8002094:	4613      	mov	r3, r2
 8002096:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002098:	f7ff fb90 	bl	80017bc <HAL_GetTick>
 800209c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	f040 80e0 	bne.w	800226c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2319      	movs	r3, #25
 80020b2:	2201      	movs	r2, #1
 80020b4:	4970      	ldr	r1, [pc, #448]	; (8002278 <HAL_I2C_Master_Transmit+0x1f4>)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f964 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020c2:	2302      	movs	r3, #2
 80020c4:	e0d3      	b.n	800226e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_I2C_Master_Transmit+0x50>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e0cc      	b.n	800226e <HAL_I2C_Master_Transmit+0x1ea>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d007      	beq.n	80020fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002108:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2221      	movs	r2, #33	; 0x21
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2210      	movs	r2, #16
 8002116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	893a      	ldrh	r2, [r7, #8]
 800212a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4a50      	ldr	r2, [pc, #320]	; (800227c <HAL_I2C_Master_Transmit+0x1f8>)
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800213c:	8979      	ldrh	r1, [r7, #10]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	6a3a      	ldr	r2, [r7, #32]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f89c 	bl	8002280 <I2C_MasterRequestWrite>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e08d      	b.n	800226e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002168:	e066      	b.n	8002238 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	6a39      	ldr	r1, [r7, #32]
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 fa22 	bl	80025b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00d      	beq.n	8002196 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2b04      	cmp	r3, #4
 8002180:	d107      	bne.n	8002192 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002190:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e06b      	b.n	800226e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d11b      	bne.n	800220c <HAL_I2C_Master_Transmit+0x188>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d017      	beq.n	800220c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	6a39      	ldr	r1, [r7, #32]
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fa19 	bl	8002648 <I2C_WaitOnBTFFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00d      	beq.n	8002238 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	2b04      	cmp	r3, #4
 8002222:	d107      	bne.n	8002234 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002232:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e01a      	b.n	800226e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	d194      	bne.n	800216a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	e000      	b.n	800226e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800226c:	2302      	movs	r3, #2
  }
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	00100002 	.word	0x00100002
 800227c:	ffff0000 	.word	0xffff0000

08002280 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	460b      	mov	r3, r1
 800228e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b08      	cmp	r3, #8
 800229a:	d006      	beq.n	80022aa <I2C_MasterRequestWrite+0x2a>
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d003      	beq.n	80022aa <I2C_MasterRequestWrite+0x2a>
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022a8:	d108      	bne.n	80022bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	e00b      	b.n	80022d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	2b12      	cmp	r3, #18
 80022c2:	d107      	bne.n	80022d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f84f 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00d      	beq.n	8002308 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fa:	d103      	bne.n	8002304 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002302:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e035      	b.n	8002374 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002310:	d108      	bne.n	8002324 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002312:	897b      	ldrh	r3, [r7, #10]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002320:	611a      	str	r2, [r3, #16]
 8002322:	e01b      	b.n	800235c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002324:	897b      	ldrh	r3, [r7, #10]
 8002326:	11db      	asrs	r3, r3, #7
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f003 0306 	and.w	r3, r3, #6
 800232e:	b2db      	uxtb	r3, r3
 8002330:	f063 030f 	orn	r3, r3, #15
 8002334:	b2da      	uxtb	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	490e      	ldr	r1, [pc, #56]	; (800237c <I2C_MasterRequestWrite+0xfc>)
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f898 	bl	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e010      	b.n	8002374 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002352:	897b      	ldrh	r3, [r7, #10]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	4907      	ldr	r1, [pc, #28]	; (8002380 <I2C_MasterRequestWrite+0x100>)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f888 	bl	8002478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	00010008 	.word	0x00010008
 8002380:	00010002 	.word	0x00010002

08002384 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002394:	e048      	b.n	8002428 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d044      	beq.n	8002428 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239e:	f7ff fa0d 	bl	80017bc <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d302      	bcc.n	80023b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d139      	bne.n	8002428 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	0c1b      	lsrs	r3, r3, #16
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d10d      	bne.n	80023da <I2C_WaitOnFlagUntilTimeout+0x56>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	43da      	mvns	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	4013      	ands	r3, r2
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	461a      	mov	r2, r3
 80023d8:	e00c      	b.n	80023f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	43da      	mvns	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4013      	ands	r3, r2
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d116      	bne.n	8002428 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f043 0220 	orr.w	r2, r3, #32
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e023      	b.n	8002470 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	0c1b      	lsrs	r3, r3, #16
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d10d      	bne.n	800244e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	43da      	mvns	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	4013      	ands	r3, r2
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf0c      	ite	eq
 8002444:	2301      	moveq	r3, #1
 8002446:	2300      	movne	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	e00c      	b.n	8002468 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	43da      	mvns	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4013      	ands	r3, r2
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	429a      	cmp	r2, r3
 800246c:	d093      	beq.n	8002396 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002486:	e071      	b.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002496:	d123      	bne.n	80024e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f043 0204 	orr.w	r2, r3, #4
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e067      	b.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e6:	d041      	beq.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e8:	f7ff f968 	bl	80017bc <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d302      	bcc.n	80024fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d136      	bne.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d10c      	bne.n	8002522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4013      	ands	r3, r2
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	e00b      	b.n	800253a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	43da      	mvns	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4013      	ands	r3, r2
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d016      	beq.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f043 0220 	orr.w	r2, r3, #32
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e021      	b.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	0c1b      	lsrs	r3, r3, #16
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d10c      	bne.n	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	43da      	mvns	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4013      	ands	r3, r2
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e00b      	b.n	80025a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	43da      	mvns	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4013      	ands	r3, r2
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bf14      	ite	ne
 80025a2:	2301      	movne	r3, #1
 80025a4:	2300      	moveq	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f47f af6d 	bne.w	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025c4:	e034      	b.n	8002630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f886 	bl	80026d8 <I2C_IsAcknowledgeFailed>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e034      	b.n	8002640 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d028      	beq.n	8002630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025de:	f7ff f8ed 	bl	80017bc <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d302      	bcc.n	80025f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d11d      	bne.n	8002630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fe:	2b80      	cmp	r3, #128	; 0x80
 8002600:	d016      	beq.n	8002630 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e007      	b.n	8002640 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	2b80      	cmp	r3, #128	; 0x80
 800263c:	d1c3      	bne.n	80025c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002654:	e034      	b.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f83e 	bl	80026d8 <I2C_IsAcknowledgeFailed>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e034      	b.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d028      	beq.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266e:	f7ff f8a5 	bl	80017bc <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	429a      	cmp	r2, r3
 800267c:	d302      	bcc.n	8002684 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d11d      	bne.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b04      	cmp	r3, #4
 8002690:	d016      	beq.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f043 0220 	orr.w	r2, r3, #32
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e007      	b.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d1c3      	bne.n	8002656 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ee:	d11b      	bne.n	8002728 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f043 0204 	orr.w	r2, r3, #4
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e272      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8087 	beq.w	8002862 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002754:	4b92      	ldr	r3, [pc, #584]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b04      	cmp	r3, #4
 800275e:	d00c      	beq.n	800277a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002760:	4b8f      	ldr	r3, [pc, #572]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b08      	cmp	r3, #8
 800276a:	d112      	bne.n	8002792 <HAL_RCC_OscConfig+0x5e>
 800276c:	4b8c      	ldr	r3, [pc, #560]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002778:	d10b      	bne.n	8002792 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277a:	4b89      	ldr	r3, [pc, #548]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d06c      	beq.n	8002860 <HAL_RCC_OscConfig+0x12c>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d168      	bne.n	8002860 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e24c      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x76>
 800279c:	4b80      	ldr	r3, [pc, #512]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a7f      	ldr	r2, [pc, #508]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	e02e      	b.n	8002808 <HAL_RCC_OscConfig+0xd4>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x98>
 80027b2:	4b7b      	ldr	r3, [pc, #492]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a7a      	ldr	r2, [pc, #488]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b78      	ldr	r3, [pc, #480]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a77      	ldr	r2, [pc, #476]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e01d      	b.n	8002808 <HAL_RCC_OscConfig+0xd4>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCC_OscConfig+0xbc>
 80027d6:	4b72      	ldr	r3, [pc, #456]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a71      	ldr	r2, [pc, #452]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	4b6f      	ldr	r3, [pc, #444]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a6e      	ldr	r2, [pc, #440]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	e00b      	b.n	8002808 <HAL_RCC_OscConfig+0xd4>
 80027f0:	4b6b      	ldr	r3, [pc, #428]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a6a      	ldr	r2, [pc, #424]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	4b68      	ldr	r3, [pc, #416]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a67      	ldr	r2, [pc, #412]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002806:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d013      	beq.n	8002838 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7fe ffd4 	bl	80017bc <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002818:	f7fe ffd0 	bl	80017bc <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	; 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e200      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0xe4>
 8002836:	e014      	b.n	8002862 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7fe ffc0 	bl	80017bc <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002840:	f7fe ffbc 	bl	80017bc <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	; 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e1ec      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x10c>
 800285e:	e000      	b.n	8002862 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d063      	beq.n	8002936 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800286e:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800287a:	4b49      	ldr	r3, [pc, #292]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b08      	cmp	r3, #8
 8002884:	d11c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x18c>
 8002886:	4b46      	ldr	r3, [pc, #280]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d116      	bne.n	80028c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002892:	4b43      	ldr	r3, [pc, #268]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_RCC_OscConfig+0x176>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e1c0      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4939      	ldr	r1, [pc, #228]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	e03a      	b.n	8002936 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d020      	beq.n	800290a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c8:	4b36      	ldr	r3, [pc, #216]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ce:	f7fe ff75 	bl	80017bc <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d6:	f7fe ff71 	bl	80017bc <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e1a1      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f4:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4927      	ldr	r1, [pc, #156]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]
 8002908:	e015      	b.n	8002936 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290a:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <HAL_RCC_OscConfig+0x270>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe ff54 	bl	80017bc <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002918:	f7fe ff50 	bl	80017bc <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e180      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d03a      	beq.n	80029b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d019      	beq.n	800297e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294a:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <HAL_RCC_OscConfig+0x274>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002950:	f7fe ff34 	bl	80017bc <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002958:	f7fe ff30 	bl	80017bc <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e160      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_RCC_OscConfig+0x26c>)
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002976:	2001      	movs	r0, #1
 8002978:	f000 face 	bl	8002f18 <RCC_Delay>
 800297c:	e01c      	b.n	80029b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_RCC_OscConfig+0x274>)
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002984:	f7fe ff1a 	bl	80017bc <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298a:	e00f      	b.n	80029ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298c:	f7fe ff16 	bl	80017bc <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d908      	bls.n	80029ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e146      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	42420000 	.word	0x42420000
 80029a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ac:	4b92      	ldr	r3, [pc, #584]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1e9      	bne.n	800298c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80a6 	beq.w	8002b12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ca:	4b8b      	ldr	r3, [pc, #556]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	4b88      	ldr	r3, [pc, #544]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	4a87      	ldr	r2, [pc, #540]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e0:	61d3      	str	r3, [r2, #28]
 80029e2:	4b85      	ldr	r3, [pc, #532]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ee:	2301      	movs	r3, #1
 80029f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f2:	4b82      	ldr	r3, [pc, #520]	; (8002bfc <HAL_RCC_OscConfig+0x4c8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d118      	bne.n	8002a30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fe:	4b7f      	ldr	r3, [pc, #508]	; (8002bfc <HAL_RCC_OscConfig+0x4c8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a7e      	ldr	r2, [pc, #504]	; (8002bfc <HAL_RCC_OscConfig+0x4c8>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fed7 	bl	80017bc <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a12:	f7fe fed3 	bl	80017bc <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b64      	cmp	r3, #100	; 0x64
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e103      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b75      	ldr	r3, [pc, #468]	; (8002bfc <HAL_RCC_OscConfig+0x4c8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x312>
 8002a38:	4b6f      	ldr	r3, [pc, #444]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4a6e      	ldr	r2, [pc, #440]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6213      	str	r3, [r2, #32]
 8002a44:	e02d      	b.n	8002aa2 <HAL_RCC_OscConfig+0x36e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x334>
 8002a4e:	4b6a      	ldr	r3, [pc, #424]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4a69      	ldr	r2, [pc, #420]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	6213      	str	r3, [r2, #32]
 8002a5a:	4b67      	ldr	r3, [pc, #412]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	4a66      	ldr	r2, [pc, #408]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	f023 0304 	bic.w	r3, r3, #4
 8002a64:	6213      	str	r3, [r2, #32]
 8002a66:	e01c      	b.n	8002aa2 <HAL_RCC_OscConfig+0x36e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d10c      	bne.n	8002a8a <HAL_RCC_OscConfig+0x356>
 8002a70:	4b61      	ldr	r3, [pc, #388]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	4a60      	ldr	r2, [pc, #384]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	6213      	str	r3, [r2, #32]
 8002a7c:	4b5e      	ldr	r3, [pc, #376]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	4a5d      	ldr	r2, [pc, #372]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6213      	str	r3, [r2, #32]
 8002a88:	e00b      	b.n	8002aa2 <HAL_RCC_OscConfig+0x36e>
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4a5a      	ldr	r2, [pc, #360]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	6213      	str	r3, [r2, #32]
 8002a96:	4b58      	ldr	r3, [pc, #352]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4a57      	ldr	r2, [pc, #348]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	f023 0304 	bic.w	r3, r3, #4
 8002aa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d015      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fe87 	bl	80017bc <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fe fe83 	bl	80017bc <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0b1      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	4b4b      	ldr	r3, [pc, #300]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ee      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x37e>
 8002ad4:	e014      	b.n	8002b00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fe71 	bl	80017bc <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fe fe6d 	bl	80017bc <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e09b      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af4:	4b40      	ldr	r3, [pc, #256]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ee      	bne.n	8002ade <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d105      	bne.n	8002b12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b06:	4b3c      	ldr	r3, [pc, #240]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4a3b      	ldr	r2, [pc, #236]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8087 	beq.w	8002c2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b1c:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d061      	beq.n	8002bec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d146      	bne.n	8002bbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b30:	4b33      	ldr	r3, [pc, #204]	; (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fe fe41 	bl	80017bc <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe fe3d 	bl	80017bc <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e06d      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b50:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b64:	d108      	bne.n	8002b78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b66:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	4921      	ldr	r1, [pc, #132]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b78:	4b1f      	ldr	r3, [pc, #124]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a19      	ldr	r1, [r3, #32]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	491b      	ldr	r1, [pc, #108]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b90:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7fe fe11 	bl	80017bc <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7fe fe0d 	bl	80017bc <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e03d      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x46a>
 8002bbc:	e035      	b.n	8002c2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <HAL_RCC_OscConfig+0x4cc>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fdfa 	bl	80017bc <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe fdf6 	bl	80017bc <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e026      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x498>
 8002bea:	e01e      	b.n	8002c2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d107      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e019      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_OscConfig+0x500>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d106      	bne.n	8002c26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000

08002c38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0d0      	b.n	8002dee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b6a      	ldr	r3, [pc, #424]	; (8002df8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d910      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b67      	ldr	r3, [pc, #412]	; (8002df8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 0207 	bic.w	r2, r3, #7
 8002c62:	4965      	ldr	r1, [pc, #404]	; (8002df8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0b8      	b.n	8002dee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d020      	beq.n	8002cca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c94:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a58      	ldr	r2, [pc, #352]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cac:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a52      	ldr	r2, [pc, #328]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb8:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	494d      	ldr	r1, [pc, #308]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d040      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d115      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e07f      	b.n	8002dee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf6:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e073      	b.n	8002dee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e06b      	b.n	8002dee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d16:	4b39      	ldr	r3, [pc, #228]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f023 0203 	bic.w	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4936      	ldr	r1, [pc, #216]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d28:	f7fe fd48 	bl	80017bc <HAL_GetTick>
 8002d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d30:	f7fe fd44 	bl	80017bc <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e053      	b.n	8002dee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 020c 	and.w	r2, r3, #12
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d1eb      	bne.n	8002d30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d58:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d210      	bcs.n	8002d88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 0207 	bic.w	r2, r3, #7
 8002d6e:	4922      	ldr	r1, [pc, #136]	; (8002df8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d76:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e032      	b.n	8002dee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4916      	ldr	r1, [pc, #88]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	490e      	ldr	r1, [pc, #56]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dc6:	f000 f821 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	490a      	ldr	r1, [pc, #40]	; (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd8:	5ccb      	ldrb	r3, [r1, r3]
 8002dda:	fa22 f303 	lsr.w	r3, r2, r3
 8002dde:	4a09      	ldr	r2, [pc, #36]	; (8002e04 <HAL_RCC_ClockConfig+0x1cc>)
 8002de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1d0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fca6 	bl	8001738 <HAL_InitTick>

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40022000 	.word	0x40022000
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	08003360 	.word	0x08003360
 8002e04:	20000004 	.word	0x20000004
 8002e08:	20000008 	.word	0x20000008

08002e0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	2300      	movs	r3, #0
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e26:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d002      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x30>
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d003      	beq.n	8002e42 <HAL_RCC_GetSysClockFreq+0x36>
 8002e3a:	e027      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e3e:	613b      	str	r3, [r7, #16]
      break;
 8002e40:	e027      	b.n	8002e92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	0c9b      	lsrs	r3, r3, #18
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e4c:	5cd3      	ldrb	r3, [r2, r3]
 8002e4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d010      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e5a:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	0c5b      	lsrs	r3, r3, #17
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	4a11      	ldr	r2, [pc, #68]	; (8002eac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e66:	5cd3      	ldrb	r3, [r2, r3]
 8002e68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e6e:	fb03 f202 	mul.w	r2, r3, r2
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e004      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a0c      	ldr	r2, [pc, #48]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e80:	fb02 f303 	mul.w	r3, r2, r3
 8002e84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	613b      	str	r3, [r7, #16]
      break;
 8002e8a:	e002      	b.n	8002e92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e8e:	613b      	str	r3, [r7, #16]
      break;
 8002e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e92:	693b      	ldr	r3, [r7, #16]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	007a1200 	.word	0x007a1200
 8002ea8:	08003378 	.word	0x08003378
 8002eac:	08003388 	.word	0x08003388
 8002eb0:	003d0900 	.word	0x003d0900

08002eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb8:	4b02      	ldr	r3, [pc, #8]	; (8002ec4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	20000004 	.word	0x20000004

08002ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ecc:	f7ff fff2 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4903      	ldr	r1, [pc, #12]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	08003370 	.word	0x08003370

08002ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ef4:	f7ff ffde 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	0adb      	lsrs	r3, r3, #11
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4903      	ldr	r1, [pc, #12]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000
 8002f14:	08003370 	.word	0x08003370

08002f18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <RCC_Delay+0x34>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <RCC_Delay+0x38>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0a5b      	lsrs	r3, r3, #9
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f34:	bf00      	nop
  }
  while (Delay --);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1e5a      	subs	r2, r3, #1
 8002f3a:	60fa      	str	r2, [r7, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f9      	bne.n	8002f34 <RCC_Delay+0x1c>
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	20000004 	.word	0x20000004
 8002f50:	10624dd3 	.word	0x10624dd3

08002f54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e042      	b.n	8002fec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fe fafa 	bl	8001574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2224      	movs	r2, #36	; 0x24
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f82b 	bl	8002ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800302e:	f023 030c 	bic.w	r3, r3, #12
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	430b      	orrs	r3, r1
 800303a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2c      	ldr	r2, [pc, #176]	; (8003108 <UART_SetConfig+0x114>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d103      	bne.n	8003064 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800305c:	f7ff ff48 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	e002      	b.n	800306a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003064:	f7ff ff30 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8003068:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	009a      	lsls	r2, r3, #2
 8003074:	441a      	add	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	4a22      	ldr	r2, [pc, #136]	; (800310c <UART_SetConfig+0x118>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	0119      	lsls	r1, r3, #4
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	009a      	lsls	r2, r3, #2
 8003094:	441a      	add	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a0:	4b1a      	ldr	r3, [pc, #104]	; (800310c <UART_SetConfig+0x118>)
 80030a2:	fba3 0302 	umull	r0, r3, r3, r2
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	2064      	movs	r0, #100	; 0x64
 80030aa:	fb00 f303 	mul.w	r3, r0, r3
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	3332      	adds	r3, #50	; 0x32
 80030b4:	4a15      	ldr	r2, [pc, #84]	; (800310c <UART_SetConfig+0x118>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c0:	4419      	add	r1, r3
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	009a      	lsls	r2, r3, #2
 80030cc:	441a      	add	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <UART_SetConfig+0x118>)
 80030da:	fba3 0302 	umull	r0, r3, r3, r2
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2064      	movs	r0, #100	; 0x64
 80030e2:	fb00 f303 	mul.w	r3, r0, r3
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	3332      	adds	r3, #50	; 0x32
 80030ec:	4a07      	ldr	r2, [pc, #28]	; (800310c <UART_SetConfig+0x118>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	f003 020f 	and.w	r2, r3, #15
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	440a      	add	r2, r1
 80030fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40013800 	.word	0x40013800
 800310c:	51eb851f 	.word	0x51eb851f

08003110 <__libc_init_array>:
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	2600      	movs	r6, #0
 8003114:	4d0c      	ldr	r5, [pc, #48]	; (8003148 <__libc_init_array+0x38>)
 8003116:	4c0d      	ldr	r4, [pc, #52]	; (800314c <__libc_init_array+0x3c>)
 8003118:	1b64      	subs	r4, r4, r5
 800311a:	10a4      	asrs	r4, r4, #2
 800311c:	42a6      	cmp	r6, r4
 800311e:	d109      	bne.n	8003134 <__libc_init_array+0x24>
 8003120:	f000 f822 	bl	8003168 <_init>
 8003124:	2600      	movs	r6, #0
 8003126:	4d0a      	ldr	r5, [pc, #40]	; (8003150 <__libc_init_array+0x40>)
 8003128:	4c0a      	ldr	r4, [pc, #40]	; (8003154 <__libc_init_array+0x44>)
 800312a:	1b64      	subs	r4, r4, r5
 800312c:	10a4      	asrs	r4, r4, #2
 800312e:	42a6      	cmp	r6, r4
 8003130:	d105      	bne.n	800313e <__libc_init_array+0x2e>
 8003132:	bd70      	pop	{r4, r5, r6, pc}
 8003134:	f855 3b04 	ldr.w	r3, [r5], #4
 8003138:	4798      	blx	r3
 800313a:	3601      	adds	r6, #1
 800313c:	e7ee      	b.n	800311c <__libc_init_array+0xc>
 800313e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003142:	4798      	blx	r3
 8003144:	3601      	adds	r6, #1
 8003146:	e7f2      	b.n	800312e <__libc_init_array+0x1e>
 8003148:	0800338c 	.word	0x0800338c
 800314c:	0800338c 	.word	0x0800338c
 8003150:	0800338c 	.word	0x0800338c
 8003154:	08003390 	.word	0x08003390

08003158 <memset>:
 8003158:	4603      	mov	r3, r0
 800315a:	4402      	add	r2, r0
 800315c:	4293      	cmp	r3, r2
 800315e:	d100      	bne.n	8003162 <memset+0xa>
 8003160:	4770      	bx	lr
 8003162:	f803 1b01 	strb.w	r1, [r3], #1
 8003166:	e7f9      	b.n	800315c <memset+0x4>

08003168 <_init>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	bf00      	nop
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr

08003174 <_fini>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	bf00      	nop
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr
