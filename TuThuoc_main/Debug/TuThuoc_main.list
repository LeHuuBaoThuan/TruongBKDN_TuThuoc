
TuThuoc_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006660  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800676c  0800676c  0000776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006abc  08006abc  00008128  2**0
                  CONTENTS
  4 .ARM          00000008  08006abc  08006abc  00007abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ac4  08006ac4  00008128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ac4  08006ac4  00007ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ac8  08006ac8  00007ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08006acc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000128  08006bf4  00008128  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08006bf4  00008498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1e3  00000000  00000000  00008151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d7  00000000  00000000  00016334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00018c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000921  00000000  00000000  000197f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191a8  00000000  00000000  0001a111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001303b  00000000  00000000  000332b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008799f  00000000  00000000  000462f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdc93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a40  00000000  00000000  000cdcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  000d1718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000128 	.word	0x20000128
 8000128:	00000000 	.word	0x00000000
 800012c:	08006754 	.word	0x08006754

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000012c 	.word	0x2000012c
 8000148:	08006754 	.word	0x08006754

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <at24_I2C_Init>:

static uint8_t at24_lock = 0;
static I2C_HandleTypeDef hi2c_lib;

void at24_I2C_Init(I2C_HandleTypeDef i2c)
{
 800015c:	b084      	sub	sp, #16
 800015e:	b580      	push	{r7, lr}
 8000160:	af00      	add	r7, sp, #0
 8000162:	f107 0c08 	add.w	ip, r7, #8
 8000166:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c_lib = i2c;
 800016a:	4b07      	ldr	r3, [pc, #28]	@ (8000188 <at24_I2C_Init+0x2c>)
 800016c:	4618      	mov	r0, r3
 800016e:	f107 0308 	add.w	r3, r7, #8
 8000172:	2254      	movs	r2, #84	@ 0x54
 8000174:	4619      	mov	r1, r3
 8000176:	f005 fb0e 	bl	8005796 <memcpy>
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000182:	b004      	add	sp, #16
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000148 	.word	0x20000148

0800018c <at24_isConnected>:
  * @brief  Checks if memory device is ready for communication.
  * @param  none
  * @retval bool status
  */
bool at24_isConnected(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
	HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
  #endif
  if (HAL_I2C_IsDeviceReady(&hi2c_lib, _EEPROM_ADDRESS, 2, 100) == HAL_OK)
 8000190:	2364      	movs	r3, #100	@ 0x64
 8000192:	2202      	movs	r2, #2
 8000194:	21a0      	movs	r1, #160	@ 0xa0
 8000196:	4805      	ldr	r0, [pc, #20]	@ (80001ac <at24_isConnected+0x20>)
 8000198:	f003 f994 	bl	80034c4 <HAL_I2C_IsDeviceReady>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d101      	bne.n	80001a6 <at24_isConnected+0x1a>
    return true;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e000      	b.n	80001a8 <at24_isConnected+0x1c>
  else
    return false;
 80001a6:	2300      	movs	r3, #0
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	20000148 	.word	0x20000148

080001b0 <at24_read>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
bool at24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b088      	sub	sp, #32
 80001b4:	af04      	add	r7, sp, #16
 80001b6:	60b9      	str	r1, [r7, #8]
 80001b8:	607a      	str	r2, [r7, #4]
 80001ba:	603b      	str	r3, [r7, #0]
 80001bc:	4603      	mov	r3, r0
 80001be:	81fb      	strh	r3, [r7, #14]
//	HAL_IWDG_Refresh(&hi2c_lib);
  if (at24_lock == 1)
 80001c0:	4b13      	ldr	r3, [pc, #76]	@ (8000210 <at24_read+0x60>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d101      	bne.n	80001cc <at24_read+0x1c>
    return false;
 80001c8:	2300      	movs	r3, #0
 80001ca:	e01c      	b.n	8000206 <at24_read+0x56>
  at24_lock = 1;
 80001cc:	4b10      	ldr	r3, [pc, #64]	@ (8000210 <at24_read+0x60>)
 80001ce:	2201      	movs	r2, #1
 80001d0:	701a      	strb	r2, [r3, #0]
  #elif (_EEPROM_SIZE_KBIT == 8)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT==16)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #else
  if (HAL_I2C_Mem_Read(&hi2c_lib, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	89f9      	ldrh	r1, [r7, #14]
 80001d8:	683a      	ldr	r2, [r7, #0]
 80001da:	9202      	str	r2, [sp, #8]
 80001dc:	9301      	str	r3, [sp, #4]
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	2310      	movs	r3, #16
 80001e4:	460a      	mov	r2, r1
 80001e6:	21a0      	movs	r1, #160	@ 0xa0
 80001e8:	480a      	ldr	r0, [pc, #40]	@ (8000214 <at24_read+0x64>)
 80001ea:	f002 ff03 	bl	8002ff4 <HAL_I2C_Mem_Read>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d104      	bne.n	80001fe <at24_read+0x4e>
  #endif
  {
    at24_lock = 0;
 80001f4:	4b06      	ldr	r3, [pc, #24]	@ (8000210 <at24_read+0x60>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	701a      	strb	r2, [r3, #0]
    return true;
 80001fa:	2301      	movs	r3, #1
 80001fc:	e003      	b.n	8000206 <at24_read+0x56>
  }
  else
  {
    at24_lock = 0;
 80001fe:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <at24_read+0x60>)
 8000200:	2200      	movs	r2, #0
 8000202:	701a      	strb	r2, [r3, #0]
    return false;
 8000204:	2300      	movs	r3, #0
  }
}
 8000206:	4618      	mov	r0, r3
 8000208:	3710      	adds	r7, #16
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	20000144 	.word	0x20000144
 8000214:	20000148 	.word	0x20000148

08000218 <CLCD_Delay>:
//************************** Low Level Function ****************************************************************//
uint8_t currentline;
uint8_t Xcursor,Ycursor,countWriteChar,CurrentWriteChar;
CLCD_I2C_Name LCD1;
static void CLCD_Delay(uint16_t Time)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000222:	88fb      	ldrh	r3, [r7, #6]
 8000224:	4618      	mov	r0, r3
 8000226:	f002 f8db 	bl	80023e0 <HAL_Delay>
}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}

08000232 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000232:	b580      	push	{r7, lr}
 8000234:	b086      	sub	sp, #24
 8000236:	af02      	add	r7, sp, #8
 8000238:	6078      	str	r0, [r7, #4]
 800023a:	460b      	mov	r3, r1
 800023c:	70fb      	strb	r3, [r7, #3]
 800023e:	4613      	mov	r3, r2
 8000240:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000242:	78fb      	ldrb	r3, [r7, #3]
 8000244:	f023 030f 	bic.w	r3, r3, #15
 8000248:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 800024a:	78fb      	ldrb	r3, [r7, #3]
 800024c:	011b      	lsls	r3, r3, #4
 800024e:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	7adb      	ldrb	r3, [r3, #11]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d007      	beq.n	8000268 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 8000258:	7bfb      	ldrb	r3, [r7, #15]
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8000260:	7bbb      	ldrb	r3, [r7, #14]
 8000262:	f043 0308 	orr.w	r3, r3, #8
 8000266:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8000268:	78bb      	ldrb	r3, [r7, #2]
 800026a:	2b01      	cmp	r3, #1
 800026c:	d108      	bne.n	8000280 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 800026e:	7bfb      	ldrb	r3, [r7, #15]
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8000276:	7bbb      	ldrb	r3, [r7, #14]
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	73bb      	strb	r3, [r7, #14]
 800027e:	e00a      	b.n	8000296 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8000280:	78bb      	ldrb	r3, [r7, #2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d107      	bne.n	8000296 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8000286:	7bfb      	ldrb	r3, [r7, #15]
 8000288:	f023 0301 	bic.w	r3, r3, #1
 800028c:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 800028e:	7bbb      	ldrb	r3, [r7, #14]
 8000290:	f023 0301 	bic.w	r3, r3, #1
 8000294:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8000296:	7bfb      	ldrb	r3, [r7, #15]
 8000298:	f043 0304 	orr.w	r3, r3, #4
 800029c:	b2db      	uxtb	r3, r3
 800029e:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f7ff ffb9 	bl	8000218 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
 80002a8:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80002aa:	7bbb      	ldrb	r3, [r7, #14]
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f7ff ffaf 	bl	8000218 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80002ba:	7bbb      	ldrb	r3, [r7, #14]
 80002bc:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	6818      	ldr	r0, [r3, #0]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	791b      	ldrb	r3, [r3, #4]
 80002c6:	4619      	mov	r1, r3
 80002c8:	f107 0208 	add.w	r2, r7, #8
 80002cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	2304      	movs	r3, #4
 80002d4:	f002 fd90 	bl	8002df8 <HAL_I2C_Master_Transmit>

}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <CLCD_I2C_Init>:
//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	4611      	mov	r1, r2
 80002ec:	461a      	mov	r2, r3
 80002ee:	460b      	mov	r3, r1
 80002f0:	71fb      	strb	r3, [r7, #7]
 80002f2:	4613      	mov	r3, r2
 80002f4:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	68ba      	ldr	r2, [r7, #8]
 80002fa:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	79fa      	ldrb	r2, [r7, #7]
 8000300:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	79ba      	ldrb	r2, [r7, #6]
 8000306:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	7e3a      	ldrb	r2, [r7, #24]
 800030c:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	2228      	movs	r2, #40	@ 0x28
 8000312:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	2206      	movs	r2, #6
 8000318:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	220c      	movs	r2, #12
 800031e:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	2214      	movs	r2, #20
 8000324:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	2208      	movs	r2, #8
 800032a:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 800032c:	2032      	movs	r0, #50	@ 0x32
 800032e:	f7ff ff73 	bl	8000218 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000332:	2200      	movs	r2, #0
 8000334:	2133      	movs	r1, #51	@ 0x33
 8000336:	68f8      	ldr	r0, [r7, #12]
 8000338:	f7ff ff7b 	bl	8000232 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800033c:	2200      	movs	r2, #0
 800033e:	2133      	movs	r1, #51	@ 0x33
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	f7ff ff76 	bl	8000232 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000346:	2005      	movs	r0, #5
 8000348:	f7ff ff66 	bl	8000218 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 800034c:	2200      	movs	r2, #0
 800034e:	2132      	movs	r1, #50	@ 0x32
 8000350:	68f8      	ldr	r0, [r7, #12]
 8000352:	f7ff ff6e 	bl	8000232 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000356:	2005      	movs	r0, #5
 8000358:	f7ff ff5e 	bl	8000218 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 800035c:	2200      	movs	r2, #0
 800035e:	2120      	movs	r1, #32
 8000360:	68f8      	ldr	r0, [r7, #12]
 8000362:	f7ff ff66 	bl	8000232 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000366:	2005      	movs	r0, #5
 8000368:	f7ff ff56 	bl	8000218 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	79db      	ldrb	r3, [r3, #7]
 8000370:	2200      	movs	r2, #0
 8000372:	4619      	mov	r1, r3
 8000374:	68f8      	ldr	r0, [r7, #12]
 8000376:	f7ff ff5c 	bl	8000232 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	7a1b      	ldrb	r3, [r3, #8]
 800037e:	2200      	movs	r2, #0
 8000380:	4619      	mov	r1, r3
 8000382:	68f8      	ldr	r0, [r7, #12]
 8000384:	f7ff ff55 	bl	8000232 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	7a5b      	ldrb	r3, [r3, #9]
 800038c:	2200      	movs	r2, #0
 800038e:	4619      	mov	r1, r3
 8000390:	68f8      	ldr	r0, [r7, #12]
 8000392:	f7ff ff4e 	bl	8000232 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	7a9b      	ldrb	r3, [r3, #10]
 800039a:	2200      	movs	r2, #0
 800039c:	4619      	mov	r1, r3
 800039e:	68f8      	ldr	r0, [r7, #12]
 80003a0:	f7ff ff47 	bl	8000232 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2101      	movs	r1, #1
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f7ff ff42 	bl	8000232 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2102      	movs	r1, #2
 80003b2:	68f8      	ldr	r0, [r7, #12]
 80003b4:	f7ff ff3d 	bl	8000232 <CLCD_WriteI2C>
}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	460b      	mov	r3, r1
 80003ca:	70fb      	strb	r3, [r7, #3]
 80003cc:	4613      	mov	r3, r2
 80003ce:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 80003d0:	2300      	movs	r3, #0
 80003d2:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	78fa      	ldrb	r2, [r7, #3]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d303      	bcc.n	80003e6 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	795b      	ldrb	r3, [r3, #5]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	799b      	ldrb	r3, [r3, #6]
 80003ea:	78ba      	ldrb	r2, [r7, #2]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d303      	bcc.n	80003f8 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	799b      	ldrb	r3, [r3, #6]
 80003f4:	3b01      	subs	r3, #1
 80003f6:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 80003f8:	78bb      	ldrb	r3, [r7, #2]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d102      	bne.n	8000404 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 80003fe:	78fb      	ldrb	r3, [r7, #3]
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	e013      	b.n	800042c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000404:	78bb      	ldrb	r3, [r7, #2]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d103      	bne.n	8000412 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	3340      	adds	r3, #64	@ 0x40
 800040e:	73fb      	strb	r3, [r7, #15]
 8000410:	e00c      	b.n	800042c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8000412:	78bb      	ldrb	r3, [r7, #2]
 8000414:	2b02      	cmp	r3, #2
 8000416:	d103      	bne.n	8000420 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x10 + Xpos;
 8000418:	78fb      	ldrb	r3, [r7, #3]
 800041a:	3310      	adds	r3, #16
 800041c:	73fb      	strb	r3, [r7, #15]
 800041e:	e005      	b.n	800042c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000420:	78bb      	ldrb	r3, [r7, #2]
 8000422:	2b03      	cmp	r3, #3
 8000424:	d102      	bne.n	800042c <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x50 + Xpos;
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	3350      	adds	r3, #80	@ 0x50
 800042a:	73fb      	strb	r3, [r7, #15]
	}
	Xcursor = Xpos;
 800042c:	4a0d      	ldr	r2, [pc, #52]	@ (8000464 <CLCD_I2C_SetCursor+0xa4>)
 800042e:	78fb      	ldrb	r3, [r7, #3]
 8000430:	7013      	strb	r3, [r2, #0]

	Ycursor = Ypos;
 8000432:	4a0d      	ldr	r2, [pc, #52]	@ (8000468 <CLCD_I2C_SetCursor+0xa8>)
 8000434:	78bb      	ldrb	r3, [r7, #2]
 8000436:	7013      	strb	r3, [r2, #0]
	currentline = Ycursor;
 8000438:	4b0b      	ldr	r3, [pc, #44]	@ (8000468 <CLCD_I2C_SetCursor+0xa8>)
 800043a:	781a      	ldrb	r2, [r3, #0]
 800043c:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <CLCD_I2C_SetCursor+0xac>)
 800043e:	701a      	strb	r2, [r3, #0]
	countWriteChar = Xcursor;
 8000440:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <CLCD_I2C_SetCursor+0xa4>)
 8000442:	781a      	ldrb	r2, [r3, #0]
 8000444:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <CLCD_I2C_SetCursor+0xb0>)
 8000446:	701a      	strb	r2, [r3, #0]
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800044e:	b2db      	uxtb	r3, r3
 8000450:	2200      	movs	r2, #0
 8000452:	4619      	mov	r1, r3
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff feec 	bl	8000232 <CLCD_WriteI2C>
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	2000019d 	.word	0x2000019d
 8000468:	2000019e 	.word	0x2000019e
 800046c:	2000019c 	.word	0x2000019c
 8000470:	2000019f 	.word	0x2000019f

08000474 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	460b      	mov	r3, r1
 800047e:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8000480:	78fb      	ldrb	r3, [r7, #3]
 8000482:	2201      	movs	r2, #1
 8000484:	4619      	mov	r1, r3
 8000486:	6878      	ldr	r0, [r7, #4]
 8000488:	f7ff fed3 	bl	8000232 <CLCD_WriteI2C>
	countWriteChar++;
 800048c:	4b1d      	ldr	r3, [pc, #116]	@ (8000504 <CLCD_I2C_WriteChar+0x90>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	b2da      	uxtb	r2, r3
 8000494:	4b1b      	ldr	r3, [pc, #108]	@ (8000504 <CLCD_I2C_WriteChar+0x90>)
 8000496:	701a      	strb	r2, [r3, #0]
	if (CurrentWriteChar)
 8000498:	4b1b      	ldr	r3, [pc, #108]	@ (8000508 <CLCD_I2C_WriteChar+0x94>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d02c      	beq.n	80004fa <CLCD_I2C_WriteChar+0x86>
	{
	if (countWriteChar ==20)
 80004a0:	4b18      	ldr	r3, [pc, #96]	@ (8000504 <CLCD_I2C_WriteChar+0x90>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b14      	cmp	r3, #20
 80004a6:	d128      	bne.n	80004fa <CLCD_I2C_WriteChar+0x86>
	{
	switch(currentline)
 80004a8:	4b18      	ldr	r3, [pc, #96]	@ (800050c <CLCD_I2C_WriteChar+0x98>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d823      	bhi.n	80004f8 <CLCD_I2C_WriteChar+0x84>
 80004b0:	a201      	add	r2, pc, #4	@ (adr r2, 80004b8 <CLCD_I2C_WriteChar+0x44>)
 80004b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b6:	bf00      	nop
 80004b8:	080004c9 	.word	0x080004c9
 80004bc:	080004d5 	.word	0x080004d5
 80004c0:	080004e1 	.word	0x080004e1
 80004c4:	080004ed 	.word	0x080004ed
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2100      	movs	r1, #0
 80004cc:	4810      	ldr	r0, [pc, #64]	@ (8000510 <CLCD_I2C_WriteChar+0x9c>)
 80004ce:	f7ff ff77 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80004d2:	e012      	b.n	80004fa <CLCD_I2C_WriteChar+0x86>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 80004d4:	2202      	movs	r2, #2
 80004d6:	2100      	movs	r1, #0
 80004d8:	480d      	ldr	r0, [pc, #52]	@ (8000510 <CLCD_I2C_WriteChar+0x9c>)
 80004da:	f7ff ff71 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80004de:	e00c      	b.n	80004fa <CLCD_I2C_WriteChar+0x86>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 80004e0:	2203      	movs	r2, #3
 80004e2:	2100      	movs	r1, #0
 80004e4:	480a      	ldr	r0, [pc, #40]	@ (8000510 <CLCD_I2C_WriteChar+0x9c>)
 80004e6:	f7ff ff6b 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80004ea:	e006      	b.n	80004fa <CLCD_I2C_WriteChar+0x86>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2100      	movs	r1, #0
 80004f0:	4807      	ldr	r0, [pc, #28]	@ (8000510 <CLCD_I2C_WriteChar+0x9c>)
 80004f2:	f7ff ff65 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80004f6:	e000      	b.n	80004fa <CLCD_I2C_WriteChar+0x86>
				default:
								break;
 80004f8:	bf00      	nop
			}
		}
	}
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000019f 	.word	0x2000019f
 8000508:	200001a0 	.word	0x200001a0
 800050c:	2000019c 	.word	0x2000019c
 8000510:	200001a4 	.word	0x200001a4

08000514 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	while (*String)
 800051e:	e04a      	b.n	80005b6 <CLCD_I2C_WriteString+0xa2>
	{
	CurrentWriteChar=0;
 8000520:	4b2b      	ldr	r3, [pc, #172]	@ (80005d0 <CLCD_I2C_WriteString+0xbc>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 8000526:	2300      	movs	r3, #0
 8000528:	73fb      	strb	r3, [r7, #15]
 800052a:	e00e      	b.n	800054a <CLCD_I2C_WriteString+0x36>
		{
			if (*String)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d012      	beq.n	800055a <CLCD_I2C_WriteString+0x46>
			{
				CLCD_I2C_WriteChar(LCD, *String++);
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	603a      	str	r2, [r7, #0]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f7ff ff98 	bl	8000474 <CLCD_I2C_WriteChar>
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	3301      	adds	r3, #1
 8000548:	73fb      	strb	r3, [r7, #15]
 800054a:	7bfa      	ldrb	r2, [r7, #15]
 800054c:	4b21      	ldr	r3, [pc, #132]	@ (80005d4 <CLCD_I2C_WriteString+0xc0>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	f1c3 0314 	rsb	r3, r3, #20
 8000554:	429a      	cmp	r2, r3
 8000556:	dbe9      	blt.n	800052c <CLCD_I2C_WriteString+0x18>
 8000558:	e000      	b.n	800055c <CLCD_I2C_WriteString+0x48>
			}
			else break;
 800055a:	bf00      	nop
		}
		if (*String)
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d02d      	beq.n	80005c0 <CLCD_I2C_WriteString+0xac>
		{
			switch(currentline)
 8000564:	4b1c      	ldr	r3, [pc, #112]	@ (80005d8 <CLCD_I2C_WriteString+0xc4>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d823      	bhi.n	80005b4 <CLCD_I2C_WriteString+0xa0>
 800056c:	a201      	add	r2, pc, #4	@ (adr r2, 8000574 <CLCD_I2C_WriteString+0x60>)
 800056e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000572:	bf00      	nop
 8000574:	08000585 	.word	0x08000585
 8000578:	08000591 	.word	0x08000591
 800057c:	0800059d 	.word	0x0800059d
 8000580:	080005a9 	.word	0x080005a9
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000584:	2201      	movs	r2, #1
 8000586:	2100      	movs	r1, #0
 8000588:	4814      	ldr	r0, [pc, #80]	@ (80005dc <CLCD_I2C_WriteString+0xc8>)
 800058a:	f7ff ff19 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 800058e:	e012      	b.n	80005b6 <CLCD_I2C_WriteString+0xa2>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8000590:	2202      	movs	r2, #2
 8000592:	2100      	movs	r1, #0
 8000594:	4811      	ldr	r0, [pc, #68]	@ (80005dc <CLCD_I2C_WriteString+0xc8>)
 8000596:	f7ff ff13 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 800059a:	e00c      	b.n	80005b6 <CLCD_I2C_WriteString+0xa2>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 800059c:	2203      	movs	r2, #3
 800059e:	2100      	movs	r1, #0
 80005a0:	480e      	ldr	r0, [pc, #56]	@ (80005dc <CLCD_I2C_WriteString+0xc8>)
 80005a2:	f7ff ff0d 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80005a6:	e006      	b.n	80005b6 <CLCD_I2C_WriteString+0xa2>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2100      	movs	r1, #0
 80005ac:	480b      	ldr	r0, [pc, #44]	@ (80005dc <CLCD_I2C_WriteString+0xc8>)
 80005ae:	f7ff ff07 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80005b2:	e000      	b.n	80005b6 <CLCD_I2C_WriteString+0xa2>
				default:
								break;
 80005b4:	bf00      	nop
	while (*String)
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1b0      	bne.n	8000520 <CLCD_I2C_WriteString+0xc>
 80005be:	e000      	b.n	80005c2 <CLCD_I2C_WriteString+0xae>
			}
		}
		else break;
 80005c0:	bf00      	nop

		}
	CurrentWriteChar=1;
 80005c2:	4b03      	ldr	r3, [pc, #12]	@ (80005d0 <CLCD_I2C_WriteString+0xbc>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200001a0 	.word	0x200001a0
 80005d4:	2000019d 	.word	0x2000019d
 80005d8:	2000019c 	.word	0x2000019c
 80005dc:	200001a4 	.word	0x200001a4

080005e0 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2101      	movs	r1, #1
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff fe20 	bl	8000232 <CLCD_WriteI2C>
	CLCD_Delay(5);
 80005f2:	2005      	movs	r0, #5
 80005f4:	f7ff fe10 	bl	8000218 <CLCD_Delay>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <Check_Keypad_Column>:
  +) RETURN:
    -Keypad_Button_Values[Row-x][x+1]   : Keypad_Button_Values
    -KEYPAD_NOT_PRESSED                 : "\0" (Không ấn nút)
*/
static char Check_Keypad_Column(GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main, uint8_t Row)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO0, ROW_KEY_PAD_main->PIN.GPIO_PIN_A)) //If ROW_1 is LOW
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	8a1b      	ldrh	r3, [r3, #16]
 8000614:	4619      	mov	r1, r3
 8000616:	4610      	mov	r0, r2
 8000618:	f002 fa4a 	bl	8002ab0 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d105      	bne.n	800062e <Check_Keypad_Column+0x2e>
	{
		return Keypad_Button_Values[Row-1][0];
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	3b01      	subs	r3, #1
 8000626:	4a1f      	ldr	r2, [pc, #124]	@ (80006a4 <Check_Keypad_Column+0xa4>)
 8000628:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800062c:	e036      	b.n	800069c <Check_Keypad_Column+0x9c>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO1, ROW_KEY_PAD_main->PIN.GPIO_PIN_B)) //If ROW_2 is LOW
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685a      	ldr	r2, [r3, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	8a5b      	ldrh	r3, [r3, #18]
 8000636:	4619      	mov	r1, r3
 8000638:	4610      	mov	r0, r2
 800063a:	f002 fa39 	bl	8002ab0 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d106      	bne.n	8000652 <Check_Keypad_Column+0x52>
	{
		return Keypad_Button_Values[Row-1][1];
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a16      	ldr	r2, [pc, #88]	@ (80006a4 <Check_Keypad_Column+0xa4>)
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	785b      	ldrb	r3, [r3, #1]
 8000650:	e024      	b.n	800069c <Check_Keypad_Column+0x9c>
	}

    if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO2, ROW_KEY_PAD_main->PIN.GPIO_PIN_C)) //If ROW_3 is LOW
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	689a      	ldr	r2, [r3, #8]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	8a9b      	ldrh	r3, [r3, #20]
 800065a:	4619      	mov	r1, r3
 800065c:	4610      	mov	r0, r2
 800065e:	f002 fa27 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d106      	bne.n	8000676 <Check_Keypad_Column+0x76>
	{
		return Keypad_Button_Values[Row-1][2];
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	3b01      	subs	r3, #1
 800066c:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <Check_Keypad_Column+0xa4>)
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	e012      	b.n	800069c <Check_Keypad_Column+0x9c>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO3, ROW_KEY_PAD_main->PIN.GPIO_PIN_D)) //If ROW_4 is LOW
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	68da      	ldr	r2, [r3, #12]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	8adb      	ldrh	r3, [r3, #22]
 800067e:	4619      	mov	r1, r3
 8000680:	4610      	mov	r0, r2
 8000682:	f002 fa15 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d106      	bne.n	800069a <Check_Keypad_Column+0x9a>
	{
		return Keypad_Button_Values[Row-1][3];
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	3b01      	subs	r3, #1
 8000690:	4a04      	ldr	r2, [pc, #16]	@ (80006a4 <Check_Keypad_Column+0xa4>)
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	78db      	ldrb	r3, [r3, #3]
 8000698:	e000      	b.n	800069c <Check_Keypad_Column+0x9c>
	}
	return KEYPAD_NOT_PRESSED;                   //If NO Key is pressed
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	080069a0 	.word	0x080069a0

080006a8 <KEYPAD_Read>:
  +) RETURN:
    -char check                                  	: const char Keypad_Button_Values[x][y]
    -KEYPAD_NOT_PRESSED                     		: '\0' {reason of failed)
*/
static char KEYPAD_Read(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
    char check = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	73fb      	strb	r3, [r7, #15]
    /*Set COL_1 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_RESET);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6818      	ldr	r0, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	8a1b      	ldrh	r3, [r3, #16]
 80006be:	2200      	movs	r2, #0
 80006c0:	4619      	mov	r1, r3
 80006c2:	f002 fa0c 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6858      	ldr	r0, [r3, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	8a5b      	ldrh	r3, [r3, #18]
 80006ce:	2201      	movs	r2, #1
 80006d0:	4619      	mov	r1, r3
 80006d2:	f002 fa04 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6898      	ldr	r0, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	8a9b      	ldrh	r3, [r3, #20]
 80006de:	2201      	movs	r2, #1
 80006e0:	4619      	mov	r1, r3
 80006e2:	f002 f9fc 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	68d8      	ldr	r0, [r3, #12]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	8adb      	ldrh	r3, [r3, #22]
 80006ee:	2201      	movs	r2, #1
 80006f0:	4619      	mov	r1, r3
 80006f2:	f002 f9f4 	bl	8002ade <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 1);
 80006f6:	2101      	movs	r1, #1
 80006f8:	6838      	ldr	r0, [r7, #0]
 80006fa:	f7ff ff81 	bl	8000600 <Check_Keypad_Column>
 80006fe:	4603      	mov	r3, r0
 8000700:	73fb      	strb	r3, [r7, #15]
    if(check)
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <KEYPAD_Read+0x64>
    {
    	return check;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	e081      	b.n	8000810 <KEYPAD_Read+0x168>
    }
    /*Set COL_2 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	8a1b      	ldrh	r3, [r3, #16]
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	f002 f9e1 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_RESET);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6858      	ldr	r0, [r3, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	8a5b      	ldrh	r3, [r3, #18]
 8000724:	2200      	movs	r2, #0
 8000726:	4619      	mov	r1, r3
 8000728:	f002 f9d9 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6898      	ldr	r0, [r3, #8]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	8a9b      	ldrh	r3, [r3, #20]
 8000734:	2201      	movs	r2, #1
 8000736:	4619      	mov	r1, r3
 8000738:	f002 f9d1 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	68d8      	ldr	r0, [r3, #12]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	8adb      	ldrh	r3, [r3, #22]
 8000744:	2201      	movs	r2, #1
 8000746:	4619      	mov	r1, r3
 8000748:	f002 f9c9 	bl	8002ade <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 2);
 800074c:	2102      	movs	r1, #2
 800074e:	6838      	ldr	r0, [r7, #0]
 8000750:	f7ff ff56 	bl	8000600 <Check_Keypad_Column>
 8000754:	4603      	mov	r3, r0
 8000756:	73fb      	strb	r3, [r7, #15]
    if(check)
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <KEYPAD_Read+0xba>
    {
    	return check;
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	e056      	b.n	8000810 <KEYPAD_Read+0x168>
    }
    /*Set COL_3 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6818      	ldr	r0, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	8a1b      	ldrh	r3, [r3, #16]
 800076a:	2201      	movs	r2, #1
 800076c:	4619      	mov	r1, r3
 800076e:	f002 f9b6 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6858      	ldr	r0, [r3, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	8a5b      	ldrh	r3, [r3, #18]
 800077a:	2201      	movs	r2, #1
 800077c:	4619      	mov	r1, r3
 800077e:	f002 f9ae 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_RESET);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6898      	ldr	r0, [r3, #8]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	8a9b      	ldrh	r3, [r3, #20]
 800078a:	2200      	movs	r2, #0
 800078c:	4619      	mov	r1, r3
 800078e:	f002 f9a6 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	68d8      	ldr	r0, [r3, #12]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	8adb      	ldrh	r3, [r3, #22]
 800079a:	2201      	movs	r2, #1
 800079c:	4619      	mov	r1, r3
 800079e:	f002 f99e 	bl	8002ade <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 3);
 80007a2:	2103      	movs	r1, #3
 80007a4:	6838      	ldr	r0, [r7, #0]
 80007a6:	f7ff ff2b 	bl	8000600 <Check_Keypad_Column>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]
    if(check)
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <KEYPAD_Read+0x110>
    {
    	return check;
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	e02b      	b.n	8000810 <KEYPAD_Read+0x168>
    }
    /*Set COL_4 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	8a1b      	ldrh	r3, [r3, #16]
 80007c0:	2201      	movs	r2, #1
 80007c2:	4619      	mov	r1, r3
 80007c4:	f002 f98b 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6858      	ldr	r0, [r3, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	8a5b      	ldrh	r3, [r3, #18]
 80007d0:	2201      	movs	r2, #1
 80007d2:	4619      	mov	r1, r3
 80007d4:	f002 f983 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6898      	ldr	r0, [r3, #8]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	8a9b      	ldrh	r3, [r3, #20]
 80007e0:	2201      	movs	r2, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	f002 f97b 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_RESET);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68d8      	ldr	r0, [r3, #12]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	8adb      	ldrh	r3, [r3, #22]
 80007f0:	2200      	movs	r2, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	f002 f973 	bl	8002ade <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 4);
 80007f8:	2104      	movs	r1, #4
 80007fa:	6838      	ldr	r0, [r7, #0]
 80007fc:	f7ff ff00 	bl	8000600 <Check_Keypad_Column>
 8000800:	4603      	mov	r3, r0
 8000802:	73fb      	strb	r3, [r7, #15]
    if(check)
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <KEYPAD_Read+0x166>
    {
    	return check;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	e000      	b.n	8000810 <KEYPAD_Read+0x168>
    }
    /*Key not pressed */
    return KEYPAD_NOT_PRESSED;
 800080e:	2300      	movs	r3, #0
}
 8000810:	4618      	mov	r0, r3
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <KeyPad_Init>:
void KeyPad_Init(	GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD,
					GPIO_TypeDef* C_port0, GPIO_TypeDef* C_port1, GPIO_TypeDef* C_port2, GPIO_TypeDef* C_port3,\
					uint16_t C_pin0, uint16_t C_pin1, uint16_t C_pin2, uint16_t C_pin3,\
					GPIO_TypeDef* R_port0, GPIO_TypeDef* R_port1, GPIO_TypeDef* R_port2, GPIO_TypeDef* R_port3,\
					uint16_t R_pin0, uint16_t R_pin1, uint16_t R_pin2, uint16_t R_pin3)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	603b      	str	r3, [r7, #0]
	//OUTPUT
  COL_KEY_PAD->PORT.GPIO0 = C_port0;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	601a      	str	r2, [r3, #0]
  COL_KEY_PAD->PORT.GPIO1 = C_port1;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	605a      	str	r2, [r3, #4]
  COL_KEY_PAD->PORT.GPIO2 = C_port2;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	609a      	str	r2, [r3, #8]
  COL_KEY_PAD->PORT.GPIO3 = C_port3;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	69fa      	ldr	r2, [r7, #28]
 800083c:	60da      	str	r2, [r3, #12]

  COL_KEY_PAD->PIN.GPIO_PIN_A = C_pin0;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	8c3a      	ldrh	r2, [r7, #32]
 8000842:	821a      	strh	r2, [r3, #16]
  COL_KEY_PAD->PIN.GPIO_PIN_B = C_pin1;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000848:	825a      	strh	r2, [r3, #18]
  COL_KEY_PAD->PIN.GPIO_PIN_C = C_pin2;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800084e:	829a      	strh	r2, [r3, #20]
  COL_KEY_PAD->PIN.GPIO_PIN_D = C_pin3;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000854:	82da      	strh	r2, [r3, #22]
  //INPUT
  ROW_KEY_PAD->PORT.GPIO0 = R_port0;
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800085a:	601a      	str	r2, [r3, #0]
  ROW_KEY_PAD->PORT.GPIO1 = R_port1;
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000860:	605a      	str	r2, [r3, #4]
  ROW_KEY_PAD->PORT.GPIO2 = R_port2;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000866:	609a      	str	r2, [r3, #8]
  ROW_KEY_PAD->PORT.GPIO3 = R_port3;
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800086c:	60da      	str	r2, [r3, #12]

  ROW_KEY_PAD->PIN.GPIO_PIN_A = R_pin0;
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000874:	821a      	strh	r2, [r3, #16]
  ROW_KEY_PAD->PIN.GPIO_PIN_B = R_pin1;
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800087c:	825a      	strh	r2, [r3, #18]
  ROW_KEY_PAD->PIN.GPIO_PIN_C = R_pin2;
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8000884:	829a      	strh	r2, [r3, #20]
  ROW_KEY_PAD->PIN.GPIO_PIN_D = R_pin3;
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800088c:	82da      	strh	r2, [r3, #22]
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <KEYPAD_Handler>:



char KEYPAD_Handler(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
	char key = KEYPAD_Read(COL_KEY_PAD, ROW_KEY_PAD_main);;
 80008a2:	6839      	ldr	r1, [r7, #0]
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff feff 	bl	80006a8 <KEYPAD_Read>
 80008aa:	4603      	mov	r3, r0
 80008ac:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_RESET);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	8a1b      	ldrh	r3, [r3, #16]
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	f002 f910 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_RESET);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6858      	ldr	r0, [r3, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	8a5b      	ldrh	r3, [r3, #18]
 80008c6:	2200      	movs	r2, #0
 80008c8:	4619      	mov	r1, r3
 80008ca:	f002 f908 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_RESET);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6898      	ldr	r0, [r3, #8]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	8a9b      	ldrh	r3, [r3, #20]
 80008d6:	2200      	movs	r2, #0
 80008d8:	4619      	mov	r1, r3
 80008da:	f002 f900 	bl	8002ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_RESET);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	68d8      	ldr	r0, [r3, #12]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	8adb      	ldrh	r3, [r3, #22]
 80008e6:	2200      	movs	r2, #0
 80008e8:	4619      	mov	r1, r3
 80008ea:	f002 f8f8 	bl	8002ade <HAL_GPIO_WritePin>
    return key;
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <FET_74HC595_Init>:



void FET_74HC595_Init(	GPIO_TypeDef * DS_Port, GPIO_TypeDef * Shift_Port, GPIO_TypeDef * ST_Port, 			\
						uint16_t DS_Pin, uint16_t SH_Pin, uint16_t ST_Pin)									\
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
 8000904:	807b      	strh	r3, [r7, #2]
	IC74HC595_ST_Port		=	ST_Port;
 8000906:	4a0b      	ldr	r2, [pc, #44]	@ (8000934 <FET_74HC595_Init+0x3c>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6013      	str	r3, [r2, #0]
	IC74hc595_DS_Port		= 	DS_Port;
 800090c:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <FET_74HC595_Init+0x40>)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6013      	str	r3, [r2, #0]
	IC74HC595_Shift_Port	=	Shift_Port;
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <FET_74HC595_Init+0x44>)
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	6013      	str	r3, [r2, #0]
	IC74HC595_ST_Pin		=	ST_Pin;
 8000918:	4a09      	ldr	r2, [pc, #36]	@ (8000940 <FET_74HC595_Init+0x48>)
 800091a:	8bbb      	ldrh	r3, [r7, #28]
 800091c:	8013      	strh	r3, [r2, #0]
	IC74hc595_Shift_Pin		=	SH_Pin;
 800091e:	4a09      	ldr	r2, [pc, #36]	@ (8000944 <FET_74HC595_Init+0x4c>)
 8000920:	8b3b      	ldrh	r3, [r7, #24]
 8000922:	8013      	strh	r3, [r2, #0]
	IC74hc595_DS_Pin		=	DS_Pin;
 8000924:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <FET_74HC595_Init+0x50>)
 8000926:	887b      	ldrh	r3, [r7, #2]
 8000928:	8013      	strh	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	200001b4 	.word	0x200001b4
 8000938:	200001b8 	.word	0x200001b8
 800093c:	200001bc 	.word	0x200001bc
 8000940:	200001c4 	.word	0x200001c4
 8000944:	200001c0 	.word	0x200001c0
 8000948:	200001c2 	.word	0x200001c2

0800094c <FET_74HC595_Set_Reset>:



void FET_74HC595_Set_Reset(uint16_t  tt)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	uint16_t	tam 	= 	tt;
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	81bb      	strh	r3, [r7, #12]
	uint8_t		i 		= 	0;
 800095a:	2300      	movs	r3, #0
 800095c:	73fb      	strb	r3, [r7, #15]
	for(i = 0; i < 8; i++)
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	e031      	b.n	80009c8 <FET_74HC595_Set_Reset+0x7c>
	{
		if(tam & (0x80 >> i))
 8000964:	89ba      	ldrh	r2, [r7, #12]
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	2180      	movs	r1, #128	@ 0x80
 800096a:	fa41 f303 	asr.w	r3, r1, r3
 800096e:	4013      	ands	r3, r2
 8000970:	2b00      	cmp	r3, #0
 8000972:	d008      	beq.n	8000986 <FET_74HC595_Set_Reset+0x3a>
		{
			HAL_GPIO_WritePin(IC74hc595_DS_Port, IC74hc595_DS_Pin, GPIO_PIN_SET);
 8000974:	4b23      	ldr	r3, [pc, #140]	@ (8000a04 <FET_74HC595_Set_Reset+0xb8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a23      	ldr	r2, [pc, #140]	@ (8000a08 <FET_74HC595_Set_Reset+0xbc>)
 800097a:	8811      	ldrh	r1, [r2, #0]
 800097c:	2201      	movs	r2, #1
 800097e:	4618      	mov	r0, r3
 8000980:	f002 f8ad 	bl	8002ade <HAL_GPIO_WritePin>
 8000984:	e007      	b.n	8000996 <FET_74HC595_Set_Reset+0x4a>
		}
		else
		{
			HAL_GPIO_WritePin(IC74hc595_DS_Port, IC74hc595_DS_Pin, GPIO_PIN_RESET);
 8000986:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <FET_74HC595_Set_Reset+0xb8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a08 <FET_74HC595_Set_Reset+0xbc>)
 800098c:	8811      	ldrh	r1, [r2, #0]
 800098e:	2200      	movs	r2, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f002 f8a4 	bl	8002ade <HAL_GPIO_WritePin>
		}
		HAL_GPIO_WritePin(IC74HC595_Shift_Port, IC74hc595_Shift_Pin ,GPIO_PIN_SET);
 8000996:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <FET_74HC595_Set_Reset+0xc0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a1d      	ldr	r2, [pc, #116]	@ (8000a10 <FET_74HC595_Set_Reset+0xc4>)
 800099c:	8811      	ldrh	r1, [r2, #0]
 800099e:	2201      	movs	r2, #1
 80009a0:	4618      	mov	r0, r3
 80009a2:	f002 f89c 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80009a6:	2001      	movs	r0, #1
 80009a8:	f001 fd1a 	bl	80023e0 <HAL_Delay>
		HAL_GPIO_WritePin(IC74HC595_Shift_Port, IC74hc595_Shift_Pin, GPIO_PIN_RESET);
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <FET_74HC595_Set_Reset+0xc0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a17      	ldr	r2, [pc, #92]	@ (8000a10 <FET_74HC595_Set_Reset+0xc4>)
 80009b2:	8811      	ldrh	r1, [r2, #0]
 80009b4:	2200      	movs	r2, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 f891 	bl	8002ade <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80009bc:	2001      	movs	r0, #1
 80009be:	f001 fd0f 	bl	80023e0 <HAL_Delay>
	for(i = 0; i < 8; i++)
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	3301      	adds	r3, #1
 80009c6:	73fb      	strb	r3, [r7, #15]
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	2b07      	cmp	r3, #7
 80009cc:	d9ca      	bls.n	8000964 <FET_74HC595_Set_Reset+0x18>
	}
	HAL_GPIO_WritePin(IC74HC595_ST_Port, IC74HC595_ST_Pin, GPIO_PIN_SET);
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <FET_74HC595_Set_Reset+0xc8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a11      	ldr	r2, [pc, #68]	@ (8000a18 <FET_74HC595_Set_Reset+0xcc>)
 80009d4:	8811      	ldrh	r1, [r2, #0]
 80009d6:	2201      	movs	r2, #1
 80009d8:	4618      	mov	r0, r3
 80009da:	f002 f880 	bl	8002ade <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009de:	2001      	movs	r0, #1
 80009e0:	f001 fcfe 	bl	80023e0 <HAL_Delay>
	HAL_GPIO_WritePin(IC74HC595_ST_Port, IC74HC595_ST_Pin, GPIO_PIN_RESET);
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <FET_74HC595_Set_Reset+0xc8>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000a18 <FET_74HC595_Set_Reset+0xcc>)
 80009ea:	8811      	ldrh	r1, [r2, #0]
 80009ec:	2200      	movs	r2, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 f875 	bl	8002ade <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009f4:	2001      	movs	r0, #1
 80009f6:	f001 fcf3 	bl	80023e0 <HAL_Delay>
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200001b8 	.word	0x200001b8
 8000a08:	200001c2 	.word	0x200001c2
 8000a0c:	200001bc 	.word	0x200001bc
 8000a10:	200001c0 	.word	0x200001c0
 8000a14:	200001b4 	.word	0x200001b4
 8000a18:	200001c4 	.word	0x200001c4

08000a1c <handler_keyIN_enterKey_DisplayLCD>:




STATE_KEY handler_keyIN_enterKey_DisplayLCD(CLCD_I2C_Name* LCD_user, STATE_SELECT_BUTTON_HANDLER_TYPEDEF state_button, char* key, char* password)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	72fb      	strb	r3, [r7, #11]
	  if(*key != KEYPAD_NOT_PRESSED)	//when state_button = KEYPAD
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d06b      	beq.n	8000b0c <handler_keyIN_enterKey_DisplayLCD+0xf0>
	  {
		  if(enter_num_pass.signal_enter_pass == PROCESSING)	// Được thay đổi trong lcd_user.c
 8000a34:	4b38      	ldr	r3, [pc, #224]	@ (8000b18 <handler_keyIN_enterKey_DisplayLCD+0xfc>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d130      	bne.n	8000a9e <handler_keyIN_enterKey_DisplayLCD+0x82>
		  {
			  CLCD_I2C_SetCursor(LCD_user, row_key_password, 2);
 8000a3c:	4b37      	ldr	r3, [pc, #220]	@ (8000b1c <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2202      	movs	r2, #2
 8000a42:	4619      	mov	r1, r3
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f7ff fcbb 	bl	80003c0 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteChar(LCD_user, *key);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f7ff fd0f 	bl	8000474 <CLCD_I2C_WriteChar>

			  password[row_key_password - ROW_BEGIN_KEPAD_PASS] = *key;
 8000a56:	4b31      	ldr	r3, [pc, #196]	@ (8000b1c <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	3b09      	subs	r3, #9
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	7812      	ldrb	r2, [r2, #0]
 8000a64:	701a      	strb	r2, [r3, #0]
			  row_key_password++;
 8000a66:	4b2d      	ldr	r3, [pc, #180]	@ (8000b1c <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b1c <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000a70:	701a      	strb	r2, [r3, #0]
			  *key = KEYPAD_NOT_PRESSED;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]

			  if(row_key_password > SIZE_ROW_PASS)
 8000a78:	4b28      	ldr	r3, [pc, #160]	@ (8000b1c <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b0d      	cmp	r3, #13
 8000a7e:	d90c      	bls.n	8000a9a <handler_keyIN_enterKey_DisplayLCD+0x7e>
			  {
				  state_button = BUTTON;
 8000a80:	2301      	movs	r3, #1
 8000a82:	72fb      	strb	r3, [r7, #11]
				  /*Neu Mang hinh nhap du 5 so*/
				  /*reset mang hinh*/
				  CLCD_I2C_Clear(LCD_user);
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f7ff fdab 	bl	80005e0 <CLCD_I2C_Clear>

				  state_star_pass = STAR;
 8000a8a:	4b25      	ldr	r3, [pc, #148]	@ (8000b20 <handler_keyIN_enterKey_DisplayLCD+0x104>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
				  row_key_password = ROW_BEGIN_KEPAD_PASS;
 8000a90:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000a92:	2209      	movs	r2, #9
 8000a94:	701a      	strb	r2, [r3, #0]
				  return KEY_OK;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e039      	b.n	8000b0e <handler_keyIN_enterKey_DisplayLCD+0xf2>
			  }
			  else
			  {
				  return KEY_NOT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e037      	b.n	8000b0e <handler_keyIN_enterKey_DisplayLCD+0xf2>
			  }
		  }/*END if(enter_num_pass.signal_enter_pass == PROCESSING)*/
		  else if(enter_num_pass.signal_enter_num == PROCESSING)
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <handler_keyIN_enterKey_DisplayLCD+0xfc>)
 8000aa0:	785b      	ldrb	r3, [r3, #1]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d130      	bne.n	8000b08 <handler_keyIN_enterKey_DisplayLCD+0xec>
		  {
			  CLCD_I2C_SetCursor(LCD_user, row_key_num, 1);
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4619      	mov	r1, r3
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff fc86 	bl	80003c0 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteChar(LCD_user, *key);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f7ff fcda 	bl	8000474 <CLCD_I2C_WriteChar>

			  password[row_key_num - ROW_BEGIN_KEPAD_NUM] = *key;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	3b09      	subs	r3, #9
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	7812      	ldrb	r2, [r2, #0]
 8000ace:	701a      	strb	r2, [r3, #0]
			  row_key_num++;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 8000ada:	701a      	strb	r2, [r3, #0]
			  *key = KEYPAD_NOT_PRESSED;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]

			  if(row_key_num > SIZE_ROW_NUM)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b09      	cmp	r3, #9
 8000ae8:	d90c      	bls.n	8000b04 <handler_keyIN_enterKey_DisplayLCD+0xe8>
			  {
				  state_button = BUTTON;
 8000aea:	2301      	movs	r3, #1
 8000aec:	72fb      	strb	r3, [r7, #11]
				  /*Neu Mang hinh nhap du 5 so*/
				  /*reset mang hinh*/
				  CLCD_I2C_Clear(LCD_user);
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f7ff fd76 	bl	80005e0 <CLCD_I2C_Clear>

				  state_star_pass = STAR;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <handler_keyIN_enterKey_DisplayLCD+0x104>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
				  row_key_num = ROW_BEGIN_KEPAD_NUM;
 8000afa:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 8000afc:	2209      	movs	r2, #9
 8000afe:	701a      	strb	r2, [r3, #0]
				  return KEY_OK;
 8000b00:	2301      	movs	r3, #1
 8000b02:	e004      	b.n	8000b0e <handler_keyIN_enterKey_DisplayLCD+0xf2>
			  }
			  else
			  {
				  return KEY_NOT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	e002      	b.n	8000b0e <handler_keyIN_enterKey_DisplayLCD+0xf2>
			  }
		  }/*END if(enter_num_pass.signal_enter_num == PROCESSING)*/
		  else
		  {
			  return KEY_NOT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e000      	b.n	8000b0e <handler_keyIN_enterKey_DisplayLCD+0xf2>
		  }
	  }/*END if(*key != KEYPAD_NOT_PRESSED)*/
	  else
	  {
		  return KEY_NOT;
 8000b0c:	2300      	movs	r3, #0
	  }
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000b0 	.word	0x200000b0
 8000b1c:	20000002 	.word	0x20000002
 8000b20:	200001cc 	.word	0x200001cc
 8000b24:	20000001 	.word	0x20000001

08000b28 <handler_keyIN_CheckPIN_NUM>:



STATE_HANDLER handler_keyIN_CheckPIN_NUM(char * num_pin_buffer, uint8_t* num)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
	static uint8_t counter = 0;
	if(enter_num_pass.signal_enter_num == PROCESSING)	// Nếu nhấn nút nhập num
 8000b32:	4b47      	ldr	r3, [pc, #284]	@ (8000c50 <handler_keyIN_CheckPIN_NUM+0x128>)
 8000b34:	785b      	ldrb	r3, [r3, #1]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d137      	bne.n	8000baa <handler_keyIN_CheckPIN_NUM+0x82>
	{
		counter = 0;
 8000b3a:	4b46      	ldr	r3, [pc, #280]	@ (8000c54 <handler_keyIN_CheckPIN_NUM+0x12c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
		num_ok = 0;
 8000b40:	4b45      	ldr	r3, [pc, #276]	@ (8000c58 <handler_keyIN_CheckPIN_NUM+0x130>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
		enter_num_pass.signal_enter_num = NOT_DONE;
 8000b46:	4b42      	ldr	r3, [pc, #264]	@ (8000c50 <handler_keyIN_CheckPIN_NUM+0x128>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	705a      	strb	r2, [r3, #1]
		for(uint8_t j = 0; j < 7; j++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e016      	b.n	8000b80 <handler_keyIN_CheckPIN_NUM+0x58>
		{
			if(strstr(num_pin_buffer, jagged_num[j]) != NULL)		// Check num
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	4a41      	ldr	r2, [pc, #260]	@ (8000c5c <handler_keyIN_CheckPIN_NUM+0x134>)
 8000b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f004 fd91 	bl	8005684 <strstr>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d008      	beq.n	8000b7a <handler_keyIN_CheckPIN_NUM+0x52>
			{
				num_ok = j;
 8000b68:	4a3b      	ldr	r2, [pc, #236]	@ (8000c58 <handler_keyIN_CheckPIN_NUM+0x130>)
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	7013      	strb	r3, [r2, #0]
				counter++;	// VD: Nhập đúng pass nằm ở stt1, thì counter = 1
 8000b6e:	4b39      	ldr	r3, [pc, #228]	@ (8000c54 <handler_keyIN_CheckPIN_NUM+0x12c>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b37      	ldr	r3, [pc, #220]	@ (8000c54 <handler_keyIN_CheckPIN_NUM+0x12c>)
 8000b78:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 7; j++)
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d9e5      	bls.n	8000b52 <handler_keyIN_CheckPIN_NUM+0x2a>
			}
		}
		if(counter == 0)
 8000b86:	4b33      	ldr	r3, [pc, #204]	@ (8000c54 <handler_keyIN_CheckPIN_NUM+0x12c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d107      	bne.n	8000b9e <handler_keyIN_CheckPIN_NUM+0x76>
		{
			*num = 0;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
			num_ok = 0;
 8000b94:	4b30      	ldr	r3, [pc, #192]	@ (8000c58 <handler_keyIN_CheckPIN_NUM+0x130>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
			return NUM_NONE;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e053      	b.n	8000c46 <handler_keyIN_CheckPIN_NUM+0x11e>
		}
		else
		{
			*num = counter;
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c54 <handler_keyIN_CheckPIN_NUM+0x12c>)
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	701a      	strb	r2, [r3, #0]
			return NUM_OKE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e04d      	b.n	8000c46 <handler_keyIN_CheckPIN_NUM+0x11e>
		}
	}
	else if(enter_num_pass.signal_enter_pass == PROCESSING && counter != 0)	// Nếu nhấn nút nhập pass, nhập đúng num
 8000baa:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <handler_keyIN_CheckPIN_NUM+0x128>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d13c      	bne.n	8000c2c <handler_keyIN_CheckPIN_NUM+0x104>
 8000bb2:	4b28      	ldr	r3, [pc, #160]	@ (8000c54 <handler_keyIN_CheckPIN_NUM+0x12c>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d038      	beq.n	8000c2c <handler_keyIN_CheckPIN_NUM+0x104>
	{
		enter_num_pass.signal_enter_pass = NOT_DONE;
 8000bba:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <handler_keyIN_CheckPIN_NUM+0x128>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
		if(strstr(num_pin_buffer, jagged_pass[num_ok]) != NULL) 	// Check pass
 8000bc0:	4b25      	ldr	r3, [pc, #148]	@ (8000c58 <handler_keyIN_CheckPIN_NUM+0x130>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <handler_keyIN_CheckPIN_NUM+0x138>)
 8000bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f004 fd58 	bl	8005684 <strstr>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d012      	beq.n	8000c00 <handler_keyIN_CheckPIN_NUM+0xd8>
		{
			/*Reset*/
			for(uint8_t i = 0; i < sizeof(num_pin_buffer); i++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73bb      	strb	r3, [r7, #14]
 8000bde:	e007      	b.n	8000bf0 <handler_keyIN_CheckPIN_NUM+0xc8>
			{
				num_pin_buffer[i] = 0;
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < sizeof(num_pin_buffer); i++)
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	3301      	adds	r3, #1
 8000bee:	73bb      	strb	r3, [r7, #14]
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d9f4      	bls.n	8000be0 <handler_keyIN_CheckPIN_NUM+0xb8>
			}
			/*Nhập ""ĐÚNG"" NUM-PIN: Thực hiện lệnh dưới*/
			Index_mode = INDEX_MODE_OKE_PASS;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <handler_keyIN_CheckPIN_NUM+0x13c>)
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	701a      	strb	r2, [r3, #0]
			return PASS_OKE;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e022      	b.n	8000c46 <handler_keyIN_CheckPIN_NUM+0x11e>
		}
		else
		{
			/*Reset*/
			*num = 0;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < sizeof(num_pin_buffer); i++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	737b      	strb	r3, [r7, #13]
 8000c0a:	e007      	b.n	8000c1c <handler_keyIN_CheckPIN_NUM+0xf4>
			{
				num_pin_buffer[i] = 0;
 8000c0c:	7b7b      	ldrb	r3, [r7, #13]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < sizeof(num_pin_buffer); i++)
 8000c16:	7b7b      	ldrb	r3, [r7, #13]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	737b      	strb	r3, [r7, #13]
 8000c1c:	7b7b      	ldrb	r3, [r7, #13]
 8000c1e:	2b03      	cmp	r3, #3
 8000c20:	d9f4      	bls.n	8000c0c <handler_keyIN_CheckPIN_NUM+0xe4>
			}
			/*Nhập ""SAI"" NUM-PIN: Thực hiện lệnh dưới*/
			Index_mode = INDEX_MODE_NO_OKE_PASS;
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <handler_keyIN_CheckPIN_NUM+0x13c>)
 8000c24:	2204      	movs	r2, #4
 8000c26:	701a      	strb	r2, [r3, #0]
			return PASS_NONE;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	e00c      	b.n	8000c46 <handler_keyIN_CheckPIN_NUM+0x11e>
		}
	}
	else
	{
		*num = 0;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
		enter_num_pass.signal_enter_num = NOT_DONE;
 8000c32:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <handler_keyIN_CheckPIN_NUM+0x128>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	705a      	strb	r2, [r3, #1]
		enter_num_pass.signal_enter_pass = NOT_DONE;
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <handler_keyIN_CheckPIN_NUM+0x128>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
		Index_mode = INDEX_MODE_NO_OKE_PASS;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <handler_keyIN_CheckPIN_NUM+0x13c>)
 8000c40:	2204      	movs	r2, #4
 8000c42:	701a      	strb	r2, [r3, #0]
		return NUM_PASS_NONE;
 8000c44:	2304      	movs	r3, #4
	}
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200000b0 	.word	0x200000b0
 8000c54:	200001c8 	.word	0x200001c8
 8000c58:	200001c7 	.word	0x200001c7
 8000c5c:	2000003c 	.word	0x2000003c
 8000c60:	20000090 	.word	0x20000090
 8000c64:	200001cd 	.word	0x200001cd

08000c68 <lcd_user_display>:
    -STATUS_DISPLAY_TYPEDEF status_display         : STATUS_1 -> STATUS_7
  +) RETURN:
    -void
*/
static void lcd_user_display(CLCD_I2C_Name* LCD_user, STATUS_DISPLAY_TYPEDEF status_display)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
	if(language == ENGLISH)
 8000c74:	4bb3      	ldr	r3, [pc, #716]	@ (8000f44 <lcd_user_display+0x2dc>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	f040 810d 	bne.w	8000e98 <lcd_user_display+0x230>
	{
		if(status_display == STATUS_BEGIN)
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d124      	bne.n	8000cce <lcd_user_display+0x66>
		{
			// dislay hello ! Status_Display=0
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff fb99 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 8000c8e:	49ae      	ldr	r1, [pc, #696]	@ (8000f48 <lcd_user_display+0x2e0>)
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff fc3f 	bl	8000514 <CLCD_I2C_WriteString>

			CLCD_I2C_SetCursor(LCD_user, 4, 1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2104      	movs	r1, #4
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fb90 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"SV-NV-KH");
 8000ca0:	49aa      	ldr	r1, [pc, #680]	@ (8000f4c <lcd_user_display+0x2e4>)
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fc36 	bl	8000514 <CLCD_I2C_WriteString>

			CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000ca8:	2202      	movs	r2, #2
 8000caa:	2104      	movs	r1, #4
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fb87 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 8000cb2:	49a7      	ldr	r1, [pc, #668]	@ (8000f50 <lcd_user_display+0x2e8>)
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff fc2d 	bl	8000514 <CLCD_I2C_WriteString>

			CLCD_I2C_SetCursor(LCD_user, 2, 3);
 8000cba:	2203      	movs	r2, #3
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fb7e 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Press \"Enter\"!");
 8000cc4:	49a3      	ldr	r1, [pc, #652]	@ (8000f54 <lcd_user_display+0x2ec>)
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff fc24 	bl	8000514 <CLCD_I2C_WriteString>

			CLCD_I2C_SetCursor(LCD_user, 0, 3);
			CLCD_I2C_WriteString(LCD_user,"-EXIT");
		}
	}/*END if(language == ENGLISH)*/
}
 8000ccc:	e233      	b.n	8001136 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_MENU)
 8000cce:	78fb      	ldrb	r3, [r7, #3]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d124      	bne.n	8000d1e <lcd_user_display+0xb6>
			CLCD_I2C_SetCursor(LCD_user, 3, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2103      	movs	r1, #3
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff fb71 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"SELECT MODE");
 8000cde:	499e      	ldr	r1, [pc, #632]	@ (8000f58 <lcd_user_display+0x2f0>)
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff fc17 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2100      	movs	r1, #0
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff fb68 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Language");
 8000cf0:	499a      	ldr	r1, [pc, #616]	@ (8000f5c <lcd_user_display+0x2f4>)
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff fc0e 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff fb5f 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Enter password");
 8000d02:	4997      	ldr	r1, [pc, #604]	@ (8000f60 <lcd_user_display+0x2f8>)
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fc05 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff fb56 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Exit");
 8000d14:	4993      	ldr	r1, [pc, #588]	@ (8000f64 <lcd_user_display+0x2fc>)
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fbfc 	bl	8000514 <CLCD_I2C_WriteString>
}
 8000d1c:	e20b      	b.n	8001136 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN)							// PASSWORD
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d152      	bne.n	8000dca <lcd_user_display+0x162>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff fb49 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Information:");
 8000d2e:	498e      	ldr	r1, [pc, #568]	@ (8000f68 <lcd_user_display+0x300>)
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff fbef 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2100      	movs	r1, #0
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fb40 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-NUM:");
 8000d40:	498a      	ldr	r1, [pc, #552]	@ (8000f6c <lcd_user_display+0x304>)
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff fbe6 	bl	8000514 <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000d48:	4b89      	ldr	r3, [pc, #548]	@ (8000f70 <lcd_user_display+0x308>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d109      	bne.n	8000d64 <lcd_user_display+0xfc>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_NUM - 1, 1);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2108      	movs	r1, #8
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff fb33 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*");
 8000d5a:	4986      	ldr	r1, [pc, #536]	@ (8000f74 <lcd_user_display+0x30c>)
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff fbd9 	bl	8000514 <CLCD_I2C_WriteString>
 8000d62:	e008      	b.n	8000d76 <lcd_user_display+0x10e>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_NUM - 1, 1);
 8000d64:	2201      	movs	r2, #1
 8000d66:	2108      	movs	r1, #8
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fb29 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8000d6e:	4982      	ldr	r1, [pc, #520]	@ (8000f78 <lcd_user_display+0x310>)
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fbcf 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000d76:	2202      	movs	r2, #2
 8000d78:	2100      	movs	r1, #0
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff fb20 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-PIN: ");
 8000d80:	497e      	ldr	r1, [pc, #504]	@ (8000f7c <lcd_user_display+0x314>)
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fbc6 	bl	8000514 <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000d88:	4b79      	ldr	r3, [pc, #484]	@ (8000f70 <lcd_user_display+0x308>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d109      	bne.n	8000da4 <lcd_user_display+0x13c>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_PASS - 1, 2);
 8000d90:	2202      	movs	r2, #2
 8000d92:	2108      	movs	r1, #8
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fb13 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*****");
 8000d9a:	4979      	ldr	r1, [pc, #484]	@ (8000f80 <lcd_user_display+0x318>)
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff fbb9 	bl	8000514 <CLCD_I2C_WriteString>
 8000da2:	e008      	b.n	8000db6 <lcd_user_display+0x14e>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_PASS - 1, 2);
 8000da4:	2202      	movs	r2, #2
 8000da6:	2108      	movs	r1, #8
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff fb09 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8000dae:	4972      	ldr	r1, [pc, #456]	@ (8000f78 <lcd_user_display+0x310>)
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff fbaf 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000db6:	2203      	movs	r2, #3
 8000db8:	2100      	movs	r1, #0
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fb00 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Exit");
 8000dc0:	4968      	ldr	r1, [pc, #416]	@ (8000f64 <lcd_user_display+0x2fc>)
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff fba6 	bl	8000514 <CLCD_I2C_WriteString>
}
 8000dc8:	e1b5      	b.n	8001136 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN_OK)
 8000dca:	78fb      	ldrb	r3, [r7, #3]
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d11b      	bne.n	8000e08 <lcd_user_display+0x1a0>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff faf3 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Password OKE!");
 8000dda:	496a      	ldr	r1, [pc, #424]	@ (8000f84 <lcd_user_display+0x31c>)
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fb99 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2100      	movs	r1, #0
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff faea 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Wait few ");
 8000dec:	4966      	ldr	r1, [pc, #408]	@ (8000f88 <lcd_user_display+0x320>)
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff fb90 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 3, 2);
 8000df4:	2202      	movs	r2, #2
 8000df6:	2103      	movs	r1, #3
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fae1 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"minutes...");
 8000dfe:	4963      	ldr	r1, [pc, #396]	@ (8000f8c <lcd_user_display+0x324>)
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff fb87 	bl	8000514 <CLCD_I2C_WriteString>
}
 8000e06:	e196      	b.n	8001136 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN_FAIL)
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	2b05      	cmp	r3, #5
 8000e0c:	d11b      	bne.n	8000e46 <lcd_user_display+0x1de>
		  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fad4 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"Password FAIL!");
 8000e18:	495d      	ldr	r1, [pc, #372]	@ (8000f90 <lcd_user_display+0x328>)
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fb7a 	bl	8000514 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2100      	movs	r1, #0
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff facb 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"\"Enter\" to enter");
 8000e2a:	495a      	ldr	r1, [pc, #360]	@ (8000f94 <lcd_user_display+0x32c>)
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff fb71 	bl	8000514 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000e32:	2202      	movs	r2, #2
 8000e34:	2104      	movs	r1, #4
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff fac2 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"new password :<");
 8000e3c:	4956      	ldr	r1, [pc, #344]	@ (8000f98 <lcd_user_display+0x330>)
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff fb68 	bl	8000514 <CLCD_I2C_WriteString>
}
 8000e44:	e177      	b.n	8001136 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_LANGUAGE)
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	2b06      	cmp	r3, #6
 8000e4a:	f040 8174 	bne.w	8001136 <lcd_user_display+0x4ce>
			CLCD_I2C_SetCursor(LCD_user, 3, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2103      	movs	r1, #3
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff fab4 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Language");
 8000e58:	4950      	ldr	r1, [pc, #320]	@ (8000f9c <lcd_user_display+0x334>)
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fb5a 	bl	8000514 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2100      	movs	r1, #0
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff faab 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 8000e6a:	494d      	ldr	r1, [pc, #308]	@ (8000fa0 <lcd_user_display+0x338>)
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff fb51 	bl	8000514 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000e72:	2202      	movs	r2, #2
 8000e74:	2100      	movs	r1, #0
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff faa2 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"-English");
 8000e7c:	4949      	ldr	r1, [pc, #292]	@ (8000fa4 <lcd_user_display+0x33c>)
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff fb48 	bl	8000514 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000e84:	2203      	movs	r2, #3
 8000e86:	2100      	movs	r1, #0
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fa99 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"-EXIT");
 8000e8e:	4946      	ldr	r1, [pc, #280]	@ (8000fa8 <lcd_user_display+0x340>)
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff fb3f 	bl	8000514 <CLCD_I2C_WriteString>
}
 8000e96:	e14e      	b.n	8001136 <lcd_user_display+0x4ce>
	else if(language == VIETNAMESE)
 8000e98:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <lcd_user_display+0x2dc>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f040 814a 	bne.w	8001136 <lcd_user_display+0x4ce>
		if(status_display == STATUS_BEGIN)
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d124      	bne.n	8000ef2 <lcd_user_display+0x28a>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff fa87 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 8000eb2:	4925      	ldr	r1, [pc, #148]	@ (8000f48 <lcd_user_display+0x2e0>)
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff fb2d 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 4, 1);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fa7e 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"SV-NV-KH");
 8000ec4:	4921      	ldr	r1, [pc, #132]	@ (8000f4c <lcd_user_display+0x2e4>)
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fb24 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000ecc:	2202      	movs	r2, #2
 8000ece:	2104      	movs	r1, #4
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff fa75 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 8000ed6:	491e      	ldr	r1, [pc, #120]	@ (8000f50 <lcd_user_display+0x2e8>)
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff fb1b 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 2, 3);
 8000ede:	2203      	movs	r2, #3
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff fa6c 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Nhan \"Enter\"!");
 8000ee8:	4930      	ldr	r1, [pc, #192]	@ (8000fac <lcd_user_display+0x344>)
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff fb12 	bl	8000514 <CLCD_I2C_WriteString>
}
 8000ef0:	e121      	b.n	8001136 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_MENU)
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d163      	bne.n	8000fc0 <lcd_user_display+0x358>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2100      	movs	r1, #0
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff fa5f 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Lua chon che do:");
 8000f02:	492b      	ldr	r1, [pc, #172]	@ (8000fb0 <lcd_user_display+0x348>)
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff fb05 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fa56 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Ngon ngu");
 8000f14:	4927      	ldr	r1, [pc, #156]	@ (8000fb4 <lcd_user_display+0x34c>)
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fafc 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	2100      	movs	r1, #0
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff fa4d 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Nhap ma pin");
 8000f26:	4924      	ldr	r1, [pc, #144]	@ (8000fb8 <lcd_user_display+0x350>)
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff faf3 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000f2e:	2203      	movs	r2, #3
 8000f30:	2100      	movs	r1, #0
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fa44 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Thoat");
 8000f38:	4920      	ldr	r1, [pc, #128]	@ (8000fbc <lcd_user_display+0x354>)
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff faea 	bl	8000514 <CLCD_I2C_WriteString>
}
 8000f40:	e0f9      	b.n	8001136 <lcd_user_display+0x4ce>
 8000f42:	bf00      	nop
 8000f44:	200001cf 	.word	0x200001cf
 8000f48:	0800676c 	.word	0x0800676c
 8000f4c:	08006780 	.word	0x08006780
 8000f50:	0800678c 	.word	0x0800678c
 8000f54:	08006798 	.word	0x08006798
 8000f58:	080067a8 	.word	0x080067a8
 8000f5c:	080067b4 	.word	0x080067b4
 8000f60:	080067c0 	.word	0x080067c0
 8000f64:	080067d0 	.word	0x080067d0
 8000f68:	080067d8 	.word	0x080067d8
 8000f6c:	080067e8 	.word	0x080067e8
 8000f70:	200001cc 	.word	0x200001cc
 8000f74:	080067f0 	.word	0x080067f0
 8000f78:	080067f4 	.word	0x080067f4
 8000f7c:	080067f8 	.word	0x080067f8
 8000f80:	08006800 	.word	0x08006800
 8000f84:	08006808 	.word	0x08006808
 8000f88:	08006818 	.word	0x08006818
 8000f8c:	08006824 	.word	0x08006824
 8000f90:	08006830 	.word	0x08006830
 8000f94:	08006840 	.word	0x08006840
 8000f98:	08006854 	.word	0x08006854
 8000f9c:	08006864 	.word	0x08006864
 8000fa0:	08006870 	.word	0x08006870
 8000fa4:	0800687c 	.word	0x0800687c
 8000fa8:	08006888 	.word	0x08006888
 8000fac:	08006890 	.word	0x08006890
 8000fb0:	080068a0 	.word	0x080068a0
 8000fb4:	080068b4 	.word	0x080068b4
 8000fb8:	080068c0 	.word	0x080068c0
 8000fbc:	080068d0 	.word	0x080068d0
		else if(status_display == STATUS_PIN)										//PASSWORD
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d152      	bne.n	800106c <lcd_user_display+0x404>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff f9f8 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TT benh nhan:");
 8000fd0:	495b      	ldr	r1, [pc, #364]	@ (8001140 <lcd_user_display+0x4d8>)
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff fa9e 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2100      	movs	r1, #0
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff f9ef 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-STT:");
 8000fe2:	4958      	ldr	r1, [pc, #352]	@ (8001144 <lcd_user_display+0x4dc>)
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff fa95 	bl	8000514 <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000fea:	4b57      	ldr	r3, [pc, #348]	@ (8001148 <lcd_user_display+0x4e0>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d109      	bne.n	8001006 <lcd_user_display+0x39e>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_NUM - 1, 1);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff f9e2 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*");
 8000ffc:	4953      	ldr	r1, [pc, #332]	@ (800114c <lcd_user_display+0x4e4>)
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fa88 	bl	8000514 <CLCD_I2C_WriteString>
 8001004:	e008      	b.n	8001018 <lcd_user_display+0x3b0>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_NUM - 1, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	2108      	movs	r1, #8
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff f9d8 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8001010:	494f      	ldr	r1, [pc, #316]	@ (8001150 <lcd_user_display+0x4e8>)
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fa7e 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8001018:	2202      	movs	r2, #2
 800101a:	2100      	movs	r1, #0
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff f9cf 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-PIN: ");
 8001022:	494c      	ldr	r1, [pc, #304]	@ (8001154 <lcd_user_display+0x4ec>)
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff fa75 	bl	8000514 <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 800102a:	4b47      	ldr	r3, [pc, #284]	@ (8001148 <lcd_user_display+0x4e0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d109      	bne.n	8001046 <lcd_user_display+0x3de>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_PASS - 1, 2);
 8001032:	2202      	movs	r2, #2
 8001034:	2108      	movs	r1, #8
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff f9c2 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*****");
 800103c:	4946      	ldr	r1, [pc, #280]	@ (8001158 <lcd_user_display+0x4f0>)
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fa68 	bl	8000514 <CLCD_I2C_WriteString>
 8001044:	e008      	b.n	8001058 <lcd_user_display+0x3f0>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_PASS - 1, 2);
 8001046:	2202      	movs	r2, #2
 8001048:	2108      	movs	r1, #8
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff f9b8 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8001050:	493f      	ldr	r1, [pc, #252]	@ (8001150 <lcd_user_display+0x4e8>)
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fa5e 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8001058:	2203      	movs	r2, #3
 800105a:	2100      	movs	r1, #0
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff f9af 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Thoat");
 8001062:	493e      	ldr	r1, [pc, #248]	@ (800115c <lcd_user_display+0x4f4>)
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff fa55 	bl	8000514 <CLCD_I2C_WriteString>
}
 800106a:	e064      	b.n	8001136 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN_OK)
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	2b04      	cmp	r3, #4
 8001070:	d11b      	bne.n	80010aa <lcd_user_display+0x442>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff f9a2 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"PIN OKE!");
 800107c:	4938      	ldr	r1, [pc, #224]	@ (8001160 <lcd_user_display+0x4f8>)
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff fa48 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8001084:	2201      	movs	r2, #1
 8001086:	2100      	movs	r1, #0
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff f999 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Cho");
 800108e:	4935      	ldr	r1, [pc, #212]	@ (8001164 <lcd_user_display+0x4fc>)
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff fa3f 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 3, 2);
 8001096:	2202      	movs	r2, #2
 8001098:	2103      	movs	r1, #3
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff f990 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"1 phut...");
 80010a0:	4931      	ldr	r1, [pc, #196]	@ (8001168 <lcd_user_display+0x500>)
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fa36 	bl	8000514 <CLCD_I2C_WriteString>
}
 80010a8:	e045      	b.n	8001136 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN_FAIL)
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d11b      	bne.n	80010e8 <lcd_user_display+0x480>
		  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff f983 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"PIN sai!");
 80010ba:	492c      	ldr	r1, [pc, #176]	@ (800116c <lcd_user_display+0x504>)
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff fa29 	bl	8000514 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2100      	movs	r1, #0
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff f97a 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"\"Nhap\" de nhap");
 80010cc:	4928      	ldr	r1, [pc, #160]	@ (8001170 <lcd_user_display+0x508>)
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fa20 	bl	8000514 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 80010d4:	2202      	movs	r2, #2
 80010d6:	2104      	movs	r1, #4
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff f971 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"PIN moi :<");
 80010de:	4925      	ldr	r1, [pc, #148]	@ (8001174 <lcd_user_display+0x50c>)
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff fa17 	bl	8000514 <CLCD_I2C_WriteString>
}
 80010e6:	e026      	b.n	8001136 <lcd_user_display+0x4ce>
		else if(status_display == STATUS_LANGUAGE)
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d123      	bne.n	8001136 <lcd_user_display+0x4ce>
			CLCD_I2C_SetCursor(LCD_user, 3, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2103      	movs	r1, #3
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff f964 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Ngon ngu");
 80010f8:	491f      	ldr	r1, [pc, #124]	@ (8001178 <lcd_user_display+0x510>)
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fa0a 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8001100:	2201      	movs	r2, #1
 8001102:	2100      	movs	r1, #0
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff f95b 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 800110a:	491c      	ldr	r1, [pc, #112]	@ (800117c <lcd_user_display+0x514>)
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fa01 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8001112:	2202      	movs	r2, #2
 8001114:	2100      	movs	r1, #0
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff f952 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-English");
 800111c:	4918      	ldr	r1, [pc, #96]	@ (8001180 <lcd_user_display+0x518>)
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff f9f8 	bl	8000514 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8001124:	2203      	movs	r2, #3
 8001126:	2100      	movs	r1, #0
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff f949 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-EXIT");
 800112e:	4915      	ldr	r1, [pc, #84]	@ (8001184 <lcd_user_display+0x51c>)
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff f9ef 	bl	8000514 <CLCD_I2C_WriteString>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	080068d8 	.word	0x080068d8
 8001144:	080068e8 	.word	0x080068e8
 8001148:	200001cc 	.word	0x200001cc
 800114c:	080067f0 	.word	0x080067f0
 8001150:	080067f4 	.word	0x080067f4
 8001154:	080067f8 	.word	0x080067f8
 8001158:	08006800 	.word	0x08006800
 800115c:	080068d0 	.word	0x080068d0
 8001160:	080068f0 	.word	0x080068f0
 8001164:	080068fc 	.word	0x080068fc
 8001168:	08006900 	.word	0x08006900
 800116c:	0800690c 	.word	0x0800690c
 8001170:	08006918 	.word	0x08006918
 8001174:	08006928 	.word	0x08006928
 8001178:	08006934 	.word	0x08006934
 800117c:	08006870 	.word	0x08006870
 8001180:	0800687c 	.word	0x0800687c
 8001184:	08006888 	.word	0x08006888

08001188 <lcd_system_handler>:


//************************** High Level Function ****************************************************************//
void lcd_system_handler(CLCD_I2C_Name* LCD_user)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	if(delete)
 8001190:	4b7c      	ldr	r3, [pc, #496]	@ (8001384 <lcd_system_handler+0x1fc>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <lcd_system_handler+0x1c>
	{
		CLCD_I2C_Clear(LCD_user);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff fa21 	bl	80005e0 <CLCD_I2C_Clear>
		delete = 0;
 800119e:	4b79      	ldr	r3, [pc, #484]	@ (8001384 <lcd_system_handler+0x1fc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
	}
	if(Mode == 0)												//Begin
 80011a4:	4b78      	ldr	r3, [pc, #480]	@ (8001388 <lcd_system_handler+0x200>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d112      	bne.n	80011d4 <lcd_system_handler+0x4c>
	{
		Config = CONFIG_ROW0;
 80011ae:	4b77      	ldr	r3, [pc, #476]	@ (800138c <lcd_system_handler+0x204>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
		Enter = 0;
 80011b4:	4b76      	ldr	r3, [pc, #472]	@ (8001390 <lcd_system_handler+0x208>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
		Status_Display = STATUS_BEGIN;
 80011ba:	4b76      	ldr	r3, [pc, #472]	@ (8001394 <lcd_system_handler+0x20c>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
		lcd_user_display(LCD_user, Status_Display);
 80011c0:	4b74      	ldr	r3, [pc, #464]	@ (8001394 <lcd_system_handler+0x20c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fd4e 	bl	8000c68 <lcd_user_display>
		Index_mode = INDEX_MODE_MENU;
 80011cc:	4b72      	ldr	r3, [pc, #456]	@ (8001398 <lcd_system_handler+0x210>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
                Status_Display = STATUS_PIN;
                delete = 1;
            }
		}
	}/*END if(Mode == 1)*/
}
 80011d2:	e18d      	b.n	80014f0 <lcd_system_handler+0x368>
	else if(Mode == 1)
 80011d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001388 <lcd_system_handler+0x200>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	f040 8188 	bne.w	80014f0 <lcd_system_handler+0x368>
		if(Index_mode == INDEX_MODE_MENU)						//  Select modes
 80011e0:	4b6d      	ldr	r3, [pc, #436]	@ (8001398 <lcd_system_handler+0x210>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d165      	bne.n	80012b4 <lcd_system_handler+0x12c>
			if (flag_button)
 80011e8:	4b6c      	ldr	r3, [pc, #432]	@ (800139c <lcd_system_handler+0x214>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <lcd_system_handler+0x76>
				CLCD_I2C_Clear(LCD_user);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff f9f4 	bl	80005e0 <CLCD_I2C_Clear>
				flag_button = 0;
 80011f8:	4b68      	ldr	r3, [pc, #416]	@ (800139c <lcd_system_handler+0x214>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
			Status_Display = STATUS_MENU;
 80011fe:	4b65      	ldr	r3, [pc, #404]	@ (8001394 <lcd_system_handler+0x20c>)
 8001200:	2202      	movs	r2, #2
 8001202:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_ROW0)
 8001204:	4b61      	ldr	r3, [pc, #388]	@ (800138c <lcd_system_handler+0x204>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b25b      	sxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d045      	beq.n	800129a <lcd_system_handler+0x112>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 800120e:	4b5f      	ldr	r3, [pc, #380]	@ (800138c <lcd_system_handler+0x204>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b25b      	sxtb	r3, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	210f      	movs	r1, #15
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff f8d0 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8001220:	495f      	ldr	r1, [pc, #380]	@ (80013a0 <lcd_system_handler+0x218>)
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff f976 	bl	8000514 <CLCD_I2C_WriteString>
				if(Enter)
 8001228:	4b59      	ldr	r3, [pc, #356]	@ (8001390 <lcd_system_handler+0x208>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d039      	beq.n	80012a6 <lcd_system_handler+0x11e>
					Enter = 0;
 8001232:	4b57      	ldr	r3, [pc, #348]	@ (8001390 <lcd_system_handler+0x208>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8001238:	4b54      	ldr	r3, [pc, #336]	@ (800138c <lcd_system_handler+0x204>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b25b      	sxtb	r3, r3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d108      	bne.n	8001254 <lcd_system_handler+0xcc>
                        Index_mode = INDEX_MODE_LANGUAGE;
 8001242:	4b55      	ldr	r3, [pc, #340]	@ (8001398 <lcd_system_handler+0x210>)
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8001248:	4b50      	ldr	r3, [pc, #320]	@ (800138c <lcd_system_handler+0x204>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 800124e:	4b4d      	ldr	r3, [pc, #308]	@ (8001384 <lcd_system_handler+0x1fc>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 8001254:	4b4d      	ldr	r3, [pc, #308]	@ (800138c <lcd_system_handler+0x204>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b25b      	sxtb	r3, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d108      	bne.n	8001270 <lcd_system_handler+0xe8>
                        Index_mode = INDEX_MODE_PIN;
 800125e:	4b4e      	ldr	r3, [pc, #312]	@ (8001398 <lcd_system_handler+0x210>)
 8001260:	2202      	movs	r2, #2
 8001262:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8001264:	4b49      	ldr	r3, [pc, #292]	@ (800138c <lcd_system_handler+0x204>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 800126a:	4b46      	ldr	r3, [pc, #280]	@ (8001384 <lcd_system_handler+0x1fc>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8001270:	4b46      	ldr	r3, [pc, #280]	@ (800138c <lcd_system_handler+0x204>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b25b      	sxtb	r3, r3
 8001276:	2b03      	cmp	r3, #3
 8001278:	d115      	bne.n	80012a6 <lcd_system_handler+0x11e>
                        Index_mode = INDEX_MODE_LANGUAGE;
 800127a:	4b47      	ldr	r3, [pc, #284]	@ (8001398 <lcd_system_handler+0x210>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
                        Mode = 0;
 8001280:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <lcd_system_handler+0x200>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW0;
 8001286:	4b41      	ldr	r3, [pc, #260]	@ (800138c <lcd_system_handler+0x204>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_BEGIN;
 800128c:	4b41      	ldr	r3, [pc, #260]	@ (8001394 <lcd_system_handler+0x20c>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8001292:	4b3c      	ldr	r3, [pc, #240]	@ (8001384 <lcd_system_handler+0x1fc>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	e005      	b.n	80012a6 <lcd_system_handler+0x11e>
				Config = CONFIG_ROW1;
 800129a:	4b3c      	ldr	r3, [pc, #240]	@ (800138c <lcd_system_handler+0x204>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 80012a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <lcd_system_handler+0x208>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 80012a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001394 <lcd_system_handler+0x20c>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fcdb 	bl	8000c68 <lcd_user_display>
}
 80012b2:	e11d      	b.n	80014f0 <lcd_system_handler+0x368>
		else if(INDEX_MODE_LANGUAGE == Index_mode)					// Languge
 80012b4:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <lcd_system_handler+0x210>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d175      	bne.n	80013a8 <lcd_system_handler+0x220>
			Status_Display = STATUS_LANGUAGE;
 80012bc:	4b35      	ldr	r3, [pc, #212]	@ (8001394 <lcd_system_handler+0x20c>)
 80012be:	2206      	movs	r2, #6
 80012c0:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 80012c2:	4b34      	ldr	r3, [pc, #208]	@ (8001394 <lcd_system_handler+0x20c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	4619      	mov	r1, r3
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff fccd 	bl	8000c68 <lcd_user_display>
			if (flag_button)
 80012ce:	4b33      	ldr	r3, [pc, #204]	@ (800139c <lcd_system_handler+0x214>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <lcd_system_handler+0x15c>
				CLCD_I2C_Clear(LCD_user);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff f981 	bl	80005e0 <CLCD_I2C_Clear>
				flag_button = 0;
 80012de:	4b2f      	ldr	r3, [pc, #188]	@ (800139c <lcd_system_handler+0x214>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_ROW0)
 80012e4:	4b29      	ldr	r3, [pc, #164]	@ (800138c <lcd_system_handler+0x204>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d03c      	beq.n	8001368 <lcd_system_handler+0x1e0>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 80012ee:	4b27      	ldr	r3, [pc, #156]	@ (800138c <lcd_system_handler+0x204>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	461a      	mov	r2, r3
 80012f8:	210f      	movs	r1, #15
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff f860 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8001300:	4927      	ldr	r1, [pc, #156]	@ (80013a0 <lcd_system_handler+0x218>)
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff f906 	bl	8000514 <CLCD_I2C_WriteString>
				if(Enter)
 8001308:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <lcd_system_handler+0x208>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d030      	beq.n	8001374 <lcd_system_handler+0x1ec>
					Enter = 0;
 8001312:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <lcd_system_handler+0x208>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8001318:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <lcd_system_handler+0x204>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b25b      	sxtb	r3, r3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d105      	bne.n	800132e <lcd_system_handler+0x1a6>
						language = VIETNAMESE;
 8001322:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <lcd_system_handler+0x21c>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <lcd_system_handler+0x204>)
 800132a:	2203      	movs	r2, #3
 800132c:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <lcd_system_handler+0x204>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b25b      	sxtb	r3, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d105      	bne.n	8001344 <lcd_system_handler+0x1bc>
						language = ENGLISH;
 8001338:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <lcd_system_handler+0x21c>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 800133e:	4b13      	ldr	r3, [pc, #76]	@ (800138c <lcd_system_handler+0x204>)
 8001340:	2203      	movs	r2, #3
 8001342:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <lcd_system_handler+0x204>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b25b      	sxtb	r3, r3
 800134a:	2b03      	cmp	r3, #3
 800134c:	d112      	bne.n	8001374 <lcd_system_handler+0x1ec>
                        Index_mode = INDEX_MODE_MENU;
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <lcd_system_handler+0x210>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW0;
 8001354:	4b0d      	ldr	r3, [pc, #52]	@ (800138c <lcd_system_handler+0x204>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_MENU;
 800135a:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <lcd_system_handler+0x20c>)
 800135c:	2202      	movs	r2, #2
 800135e:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <lcd_system_handler+0x1fc>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	e005      	b.n	8001374 <lcd_system_handler+0x1ec>
				Config = CONFIG_ROW1;
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <lcd_system_handler+0x204>)
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <lcd_system_handler+0x208>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8001374:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <lcd_system_handler+0x20c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fc74 	bl	8000c68 <lcd_user_display>
}
 8001380:	e0b6      	b.n	80014f0 <lcd_system_handler+0x368>
 8001382:	bf00      	nop
 8001384:	200001d0 	.word	0x200001d0
 8001388:	200001c9 	.word	0x200001c9
 800138c:	200000ac 	.word	0x200000ac
 8001390:	200001ca 	.word	0x200001ca
 8001394:	200001ce 	.word	0x200001ce
 8001398:	200001cd 	.word	0x200001cd
 800139c:	200001cb 	.word	0x200001cb
 80013a0:	08006940 	.word	0x08006940
 80013a4:	200001cf 	.word	0x200001cf
		else if(INDEX_MODE_PIN == Index_mode)						// Enter Password
 80013a8:	4b53      	ldr	r3, [pc, #332]	@ (80014f8 <lcd_system_handler+0x370>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d15c      	bne.n	800146a <lcd_system_handler+0x2e2>
			Status_Display = STATUS_PIN;
 80013b0:	4b52      	ldr	r3, [pc, #328]	@ (80014fc <lcd_system_handler+0x374>)
 80013b2:	2203      	movs	r2, #3
 80013b4:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 80013b6:	4b51      	ldr	r3, [pc, #324]	@ (80014fc <lcd_system_handler+0x374>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fc53 	bl	8000c68 <lcd_user_display>
			if (flag_button)
 80013c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001500 <lcd_system_handler+0x378>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <lcd_system_handler+0x250>
				CLCD_I2C_Clear(LCD_user);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff f907 	bl	80005e0 <CLCD_I2C_Clear>
				flag_button = 0;
 80013d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001500 <lcd_system_handler+0x378>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_ROW0)
 80013d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001504 <lcd_system_handler+0x37c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d036      	beq.n	8001450 <lcd_system_handler+0x2c8>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 80013e2:	4b48      	ldr	r3, [pc, #288]	@ (8001504 <lcd_system_handler+0x37c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	461a      	mov	r2, r3
 80013ec:	210f      	movs	r1, #15
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7fe ffe6 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 80013f4:	4944      	ldr	r1, [pc, #272]	@ (8001508 <lcd_system_handler+0x380>)
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff f88c 	bl	8000514 <CLCD_I2C_WriteString>
				if(Enter)
 80013fc:	4b43      	ldr	r3, [pc, #268]	@ (800150c <lcd_system_handler+0x384>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d02a      	beq.n	800145c <lcd_system_handler+0x2d4>
					Enter = 0;
 8001406:	4b41      	ldr	r3, [pc, #260]	@ (800150c <lcd_system_handler+0x384>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)	// Nhap so thu tu
 800140c:	4b3d      	ldr	r3, [pc, #244]	@ (8001504 <lcd_system_handler+0x37c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b25b      	sxtb	r3, r3
 8001412:	2b01      	cmp	r3, #1
 8001414:	d102      	bne.n	800141c <lcd_system_handler+0x294>
						enter_num_pass.signal_enter_num = PROCESSING;
 8001416:	4b3e      	ldr	r3, [pc, #248]	@ (8001510 <lcd_system_handler+0x388>)
 8001418:	2200      	movs	r2, #0
 800141a:	705a      	strb	r2, [r3, #1]
					if(Config == CONFIG_ROW2)	// Nhap pass
 800141c:	4b39      	ldr	r3, [pc, #228]	@ (8001504 <lcd_system_handler+0x37c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b25b      	sxtb	r3, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d102      	bne.n	800142c <lcd_system_handler+0x2a4>
						enter_num_pass.signal_enter_pass = PROCESSING;
 8001426:	4b3a      	ldr	r3, [pc, #232]	@ (8001510 <lcd_system_handler+0x388>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 800142c:	4b35      	ldr	r3, [pc, #212]	@ (8001504 <lcd_system_handler+0x37c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b25b      	sxtb	r3, r3
 8001432:	2b03      	cmp	r3, #3
 8001434:	d112      	bne.n	800145c <lcd_system_handler+0x2d4>
						Index_mode = INDEX_MODE_MENU;
 8001436:	4b30      	ldr	r3, [pc, #192]	@ (80014f8 <lcd_system_handler+0x370>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW0;
 800143c:	4b31      	ldr	r3, [pc, #196]	@ (8001504 <lcd_system_handler+0x37c>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
						Status_Display = STATUS_MENU;
 8001442:	4b2e      	ldr	r3, [pc, #184]	@ (80014fc <lcd_system_handler+0x374>)
 8001444:	2202      	movs	r2, #2
 8001446:	701a      	strb	r2, [r3, #0]
						delete = 1;
 8001448:	4b32      	ldr	r3, [pc, #200]	@ (8001514 <lcd_system_handler+0x38c>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e005      	b.n	800145c <lcd_system_handler+0x2d4>
				Config = CONFIG_ROW1;
 8001450:	4b2c      	ldr	r3, [pc, #176]	@ (8001504 <lcd_system_handler+0x37c>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8001456:	4b2d      	ldr	r3, [pc, #180]	@ (800150c <lcd_system_handler+0x384>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 800145c:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <lcd_system_handler+0x374>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fc00 	bl	8000c68 <lcd_user_display>
}
 8001468:	e042      	b.n	80014f0 <lcd_system_handler+0x368>
		else if(INDEX_MODE_OKE_PASS == Index_mode)					// Pass oke
 800146a:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <lcd_system_handler+0x370>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d11d      	bne.n	80014ae <lcd_system_handler+0x326>
			Status_Display = STATUS_PIN_OK;
 8001472:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <lcd_system_handler+0x374>)
 8001474:	2204      	movs	r2, #4
 8001476:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8001478:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <lcd_system_handler+0x374>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fbf2 	bl	8000c68 <lcd_user_display>
			if(Enter)
 8001484:	4b21      	ldr	r3, [pc, #132]	@ (800150c <lcd_system_handler+0x384>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d030      	beq.n	80014f0 <lcd_system_handler+0x368>
				Enter = 0;
 800148e:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <lcd_system_handler+0x384>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
                Index_mode = INDEX_MODE_MENU;
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <lcd_system_handler+0x370>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
                Config = CONFIG_ROW0;
 800149a:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <lcd_system_handler+0x37c>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
                Status_Display = STATUS_MENU;
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <lcd_system_handler+0x374>)
 80014a2:	2202      	movs	r2, #2
 80014a4:	701a      	strb	r2, [r3, #0]
                delete = 1;
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <lcd_system_handler+0x38c>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
}
 80014ac:	e020      	b.n	80014f0 <lcd_system_handler+0x368>
		else if(INDEX_MODE_NO_OKE_PASS == Index_mode)				// Pass fail
 80014ae:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <lcd_system_handler+0x370>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d11c      	bne.n	80014f0 <lcd_system_handler+0x368>
			Status_Display = STATUS_PIN_FAIL;
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <lcd_system_handler+0x374>)
 80014b8:	2205      	movs	r2, #5
 80014ba:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <lcd_system_handler+0x374>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff fbd0 	bl	8000c68 <lcd_user_display>
			if(Enter)
 80014c8:	4b10      	ldr	r3, [pc, #64]	@ (800150c <lcd_system_handler+0x384>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00e      	beq.n	80014f0 <lcd_system_handler+0x368>
				Enter = 0;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <lcd_system_handler+0x384>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
                Index_mode = INDEX_MODE_PIN;
 80014d8:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <lcd_system_handler+0x370>)
 80014da:	2202      	movs	r2, #2
 80014dc:	701a      	strb	r2, [r3, #0]
                Config = CONFIG_ROW0;
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <lcd_system_handler+0x37c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
                Status_Display = STATUS_PIN;
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <lcd_system_handler+0x374>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	701a      	strb	r2, [r3, #0]
                delete = 1;
 80014ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <lcd_system_handler+0x38c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200001cd 	.word	0x200001cd
 80014fc:	200001ce 	.word	0x200001ce
 8001500:	200001cb 	.word	0x200001cb
 8001504:	200000ac 	.word	0x200000ac
 8001508:	08006940 	.word	0x08006940
 800150c:	200001ca 	.word	0x200001ca
 8001510:	200000b0 	.word	0x200000b0
 8001514:	200001d0 	.word	0x200001d0

08001518 <response>:
    -uint8_t * string								: chu truyen di (OKE, FAIL dai loai)
  +) RETURN:
    -
*/
static void response(char *string)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&Lib_uart, (uint8_t *) string, strlen(string), 1000);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7fe fe13 	bl	800014c <strlen>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4803      	ldr	r0, [pc, #12]	@ (8001540 <response+0x28>)
 8001532:	f003 f8f5 	bl	8004720 <HAL_UART_Transmit>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200001d4 	.word	0x200001d4

08001544 <UART_Check_string>:
  +) RETURN:
    -bool											: true
    												  false
*/
static uint8_t UART_Check_string(uint8_t * rxBuffer)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	if(strstr((char*)rxBuffer, confirm_NUM_PIN) != NULL)
 800154c:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <UART_Check_string+0x5c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f004 f896 	bl	8005684 <strstr>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <UART_Check_string+0x1e>
	{
		return 0;
 800155e:	2300      	movs	r3, #0
 8001560:	e01a      	b.n	8001598 <UART_Check_string+0x54>
	}
	else if (strstr((char*)rxBuffer, confirm_RELAY) != NULL)
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <UART_Check_string+0x60>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4619      	mov	r1, r3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f004 f88b 	bl	8005684 <strstr>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d010      	beq.n	8001596 <UART_Check_string+0x52>
	{
		char *token = NULL;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
		token = strtok((char*)rxBuffer, ":"); //MOTOR
 8001578:	490b      	ldr	r1, [pc, #44]	@ (80015a8 <UART_Check_string+0x64>)
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f004 f826 	bl	80055cc <strtok>
 8001580:	60f8      	str	r0, [r7, #12]
		token = strtok(NULL, ","); //x
 8001582:	490a      	ldr	r1, [pc, #40]	@ (80015ac <UART_Check_string+0x68>)
 8001584:	2000      	movs	r0, #0
 8001586:	f004 f821 	bl	80055cc <strtok>
 800158a:	60f8      	str	r0, [r7, #12]
		return *token - 47;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3b2f      	subs	r3, #47	@ 0x2f
 8001592:	b2db      	uxtb	r3, r3
 8001594:	e000      	b.n	8001598 <UART_Check_string+0x54>
	}
	else
	{
		return 10;	// Gui chuoi khong xac dinh
 8001596:	230a      	movs	r3, #10
	}
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200000b4 	.word	0x200000b4
 80015a4:	200000b8 	.word	0x200000b8
 80015a8:	08006958 	.word	0x08006958
 80015ac:	0800695c 	.word	0x0800695c

080015b0 <UART_SetNUM_PIN>:
    -uint8_t * rxBuffer								: value frome EXTI uart
  +) RETURN:
    -void
*/
static void UART_SetNUM_PIN(uint8_t * rxBuffer)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	char response_string[20] = {0};
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
   /* Kiểm tra độ dài của command "*NUM-PIN:x,abcde\n\r"*/
   if(strlen((char*)rxBuffer) == 17)
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7fe fdbe 	bl	800014c <strlen>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b11      	cmp	r3, #17
 80015d4:	d130      	bne.n	8001638 <UART_SetNUM_PIN+0x88>
   {
      /*Tách NUM thiết bị */
      char *token = NULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
      token = strtok((char*)rxBuffer, ":"); //*NUM-PIN:
 80015da:	491b      	ldr	r1, [pc, #108]	@ (8001648 <UART_SetNUM_PIN+0x98>)
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f003 fff5 	bl	80055cc <strtok>
 80015e2:	61f8      	str	r0, [r7, #28]
      token = strtok(NULL, ","); //x
 80015e4:	4919      	ldr	r1, [pc, #100]	@ (800164c <UART_SetNUM_PIN+0x9c>)
 80015e6:	2000      	movs	r0, #0
 80015e8:	f003 fff0 	bl	80055cc <strtok>
 80015ec:	61f8      	str	r0, [r7, #28]
      num = *token - 48; //num = x
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	3b30      	subs	r3, #48	@ 0x30
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <UART_SetNUM_PIN+0xa0>)
 80015f8:	701a      	strb	r2, [r3, #0]


      /*Tách PIN thiết bị */
      token = strtok(NULL, "\n"); //abcde
 80015fa:	4916      	ldr	r1, [pc, #88]	@ (8001654 <UART_SetNUM_PIN+0xa4>)
 80015fc:	2000      	movs	r0, #0
 80015fe:	f003 ffe5 	bl	80055cc <strtok>
 8001602:	61f8      	str	r0, [r7, #28]
      memcpy(pin, token, 5); //pin = "abcde";
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <UART_SetNUM_PIN+0xa8>)
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	6810      	ldr	r0, [r2, #0]
 800160a:	6018      	str	r0, [r3, #0]
 800160c:	7912      	ldrb	r2, [r2, #4]
 800160e:	711a      	strb	r2, [r3, #4]

      token = NULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]

//      sprintf(response_string, "num: %d, pin: %c%c%c%c%c", num, pin[0], pin[1], pin[2], pin[3], pin[4]);
      sprintf(response_string, "num: %d, pin: %s", num, pin);
 8001614:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <UART_SetNUM_PIN+0xa0>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	f107 0008 	add.w	r0, r7, #8
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <UART_SetNUM_PIN+0xa8>)
 8001620:	490e      	ldr	r1, [pc, #56]	@ (800165c <UART_SetNUM_PIN+0xac>)
 8001622:	f003 ff67 	bl	80054f4 <siprintf>
      response(response_string);
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff74 	bl	8001518 <response>
      response("\r\n+OK\r\n ");
 8001630:	480b      	ldr	r0, [pc, #44]	@ (8001660 <UART_SetNUM_PIN+0xb0>)
 8001632:	f7ff ff71 	bl	8001518 <response>
   }
   else
   {
      response("\r\n+ERROR:error command\r\n");
   }
}
 8001636:	e002      	b.n	800163e <UART_SetNUM_PIN+0x8e>
      response("\r\n+ERROR:error command\r\n");
 8001638:	480a      	ldr	r0, [pc, #40]	@ (8001664 <UART_SetNUM_PIN+0xb4>)
 800163a:	f7ff ff6d 	bl	8001518 <response>
}
 800163e:	bf00      	nop
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	08006958 	.word	0x08006958
 800164c:	0800695c 	.word	0x0800695c
 8001650:	2000021c 	.word	0x2000021c
 8001654:	08006960 	.word	0x08006960
 8001658:	20000220 	.word	0x20000220
 800165c:	08006964 	.word	0x08006964
 8001660:	08006978 	.word	0x08006978
 8001664:	08006984 	.word	0x08006984

08001668 <UART_Assign_password>:
    -uint8_t * rxBuffer								: value frome EXTI uart
  +) RETURN:
    -void
*/
static void UART_Assign_password()
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i <= sizeof(jagged_pass[num - 1]); i++)
 800166e:	2300      	movs	r3, #0
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	e00e      	b.n	8001692 <UART_Assign_password+0x2a>
	{
		*(jagged_pass[num - 1] + i) = pin[i];
 8001674:	79fa      	ldrb	r2, [r7, #7]
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <UART_Assign_password+0x3c>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	3b01      	subs	r3, #1
 800167c:	490a      	ldr	r1, [pc, #40]	@ (80016a8 <UART_Assign_password+0x40>)
 800167e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	440b      	add	r3, r1
 8001686:	4909      	ldr	r1, [pc, #36]	@ (80016ac <UART_Assign_password+0x44>)
 8001688:	5c8a      	ldrb	r2, [r1, r2]
 800168a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i <= sizeof(jagged_pass[num - 1]); i++)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	3301      	adds	r3, #1
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b04      	cmp	r3, #4
 8001696:	d9ed      	bls.n	8001674 <UART_Assign_password+0xc>
	}
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	2000021c 	.word	0x2000021c
 80016a8:	20000090 	.word	0x20000090
 80016ac:	20000220 	.word	0x20000220

080016b0 <UART_Init_UART>:


//************************** High Level Function ****************************************************************//

void UART_Init_UART(UART_HandleTypeDef *huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	Lib_uart = *huart;
 80016b8:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <UART_Init_UART+0x20>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	2348      	movs	r3, #72	@ 0x48
 80016c2:	461a      	mov	r2, r3
 80016c4:	f004 f867 	bl	8005796 <memcpy>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200001d4 	.word	0x200001d4

080016d4 <UART_handler>:



STATE_TX_PIN UART_handler(uint8_t * rxBuffer, uint8_t* relayx, char* NUM, char* PIN)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
	uint8_t state = UART_Check_string(rxBuffer);
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f7ff ff2e 	bl	8001544 <UART_Check_string>
 80016e8:	4603      	mov	r3, r0
 80016ea:	75bb      	strb	r3, [r7, #22]
	if(state == 0)	// Kiem tra chuoi
 80016ec:	7dbb      	ldrb	r3, [r7, #22]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d11a      	bne.n	8001728 <UART_handler+0x54>
	{
		UART_SetNUM_PIN(rxBuffer);			// Gan vao val "pin" voi num tuong ung
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f7ff ff5c 	bl	80015b0 <UART_SetNUM_PIN>

		UART_Assign_password();				// Gan vao Array extern ben handler_keyIN.h
 80016f8:	f7ff ffb6 	bl	8001668 <UART_Assign_password>

		//Lay lai gia tri num va pin
		*NUM = num;
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <UART_handler+0x70>)
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i <= sizeof(PIN); i++)
 8001704:	2300      	movs	r3, #0
 8001706:	75fb      	strb	r3, [r7, #23]
 8001708:	e009      	b.n	800171e <UART_handler+0x4a>
		{
			PIN[i] = pin[i];
 800170a:	7dfa      	ldrb	r2, [r7, #23]
 800170c:	7dfb      	ldrb	r3, [r7, #23]
 800170e:	6839      	ldr	r1, [r7, #0]
 8001710:	440b      	add	r3, r1
 8001712:	490d      	ldr	r1, [pc, #52]	@ (8001748 <UART_handler+0x74>)
 8001714:	5c8a      	ldrb	r2, [r1, r2]
 8001716:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i <= sizeof(PIN); i++)
 8001718:	7dfb      	ldrb	r3, [r7, #23]
 800171a:	3301      	adds	r3, #1
 800171c:	75fb      	strb	r3, [r7, #23]
 800171e:	7dfb      	ldrb	r3, [r7, #23]
 8001720:	2b04      	cmp	r3, #4
 8001722:	d9f2      	bls.n	800170a <UART_handler+0x36>
		}

		return UART_HANDLER_OKE;
 8001724:	2300      	movs	r3, #0
 8001726:	e008      	b.n	800173a <UART_handler+0x66>
	}
	else if(state <= 7)
 8001728:	7dbb      	ldrb	r3, [r7, #22]
 800172a:	2b07      	cmp	r3, #7
 800172c:	d804      	bhi.n	8001738 <UART_handler+0x64>
	{
		*relayx = state;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	7dba      	ldrb	r2, [r7, #22]
 8001732:	701a      	strb	r2, [r3, #0]
		return UART_HANDLER_OKE;
 8001734:	2300      	movs	r3, #0
 8001736:	e000      	b.n	800173a <UART_handler+0x66>
	}
	else
	{
		return UART_HANDLER_ERROR;
 8001738:	2301      	movs	r3, #1
	}
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2000021c 	.word	0x2000021c
 8001748:	20000220 	.word	0x20000220

0800174c <HAL_GPIO_EXTI_Callback>:
uint8_t rxBuffer[20]={0};
volatile uint8_t rxBufferIndex = 0;
volatile uint8_t flag_rx_done = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
	static uint32_t TimeBegin = 0;
	static uint32_t TimeNow = 0;
/*CODE ISR*/
	/*flag keypad*/
	if(((R1_IN_Pin == GPIO_Pin) | (R2_IN_Pin == GPIO_Pin) | (R3_IN_Pin == GPIO_Pin) | (R4_IN_Pin == GPIO_Pin)) && (state_button == KEYPAD))
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800175c:	bf0c      	ite	eq
 800175e:	2301      	moveq	r3, #1
 8001760:	2300      	movne	r3, #0
 8001762:	b2da      	uxtb	r2, r3
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800176a:	bf0c      	ite	eq
 800176c:	2301      	moveq	r3, #1
 800176e:	2300      	movne	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	4313      	orrs	r3, r2
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800177e:	bf0c      	ite	eq
 8001780:	2301      	moveq	r3, #1
 8001782:	2300      	movne	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	88fa      	ldrh	r2, [r7, #6]
 800178a:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800178e:	bf0c      	ite	eq
 8001790:	2201      	moveq	r2, #1
 8001792:	2200      	movne	r2, #0
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	4313      	orrs	r3, r2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00e      	beq.n	80017ba <HAL_GPIO_EXTI_Callback+0x6e>
 800179c:	4b56      	ldr	r3, [pc, #344]	@ (80018f8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10a      	bne.n	80017ba <HAL_GPIO_EXTI_Callback+0x6e>
	{
		flag_keypad = 1;
 80017a4:	4b55      	ldr	r3, [pc, #340]	@ (80018fc <HAL_GPIO_EXTI_Callback+0x1b0>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
		key = KEYPAD_Handler(&COL_KEY_PAD_main, &ROW_KEY_PAD_main);
 80017aa:	4955      	ldr	r1, [pc, #340]	@ (8001900 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80017ac:	4855      	ldr	r0, [pc, #340]	@ (8001904 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80017ae:	f7ff f873 	bl	8000898 <KEYPAD_Handler>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b54      	ldr	r3, [pc, #336]	@ (8001908 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80017b8:	701a      	strb	r2, [r3, #0]
	}
	/*flag lcd*/
	if(state_button == BUTTON)
 80017ba:	4b4f      	ldr	r3, [pc, #316]	@ (80018f8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d141      	bne.n	8001846 <HAL_GPIO_EXTI_Callback+0xfa>
	{
		if(UP_EXTI_3_Pin == GPIO_Pin)
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d114      	bne.n	80017f2 <HAL_GPIO_EXTI_Callback+0xa6>
		{
			flag_button = 1;
 80017c8:	4b50      	ldr	r3, [pc, #320]	@ (800190c <HAL_GPIO_EXTI_Callback+0x1c0>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
			Config++;
 80017ce:	4b50      	ldr	r3, [pc, #320]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3301      	adds	r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	b25a      	sxtb	r2, r3
 80017dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80017de:	701a      	strb	r2, [r3, #0]
			if(Config > CONFIG_ROW3) Config = CONFIG_ROW1;
 80017e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	dd2d      	ble.n	8001846 <HAL_GPIO_EXTI_Callback+0xfa>
 80017ea:	4b49      	ldr	r3, [pc, #292]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e029      	b.n	8001846 <HAL_GPIO_EXTI_Callback+0xfa>
		}
		else if(DOWN_EXTI_4_Pin == GPIO_Pin)
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d114      	bne.n	8001822 <HAL_GPIO_EXTI_Callback+0xd6>
		{
			flag_button = 1;
 80017f8:	4b44      	ldr	r3, [pc, #272]	@ (800190c <HAL_GPIO_EXTI_Callback+0x1c0>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
			Config--;
 80017fe:	4b44      	ldr	r3, [pc, #272]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b25b      	sxtb	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	3b01      	subs	r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	b25a      	sxtb	r2, r3
 800180c:	4b40      	ldr	r3, [pc, #256]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800180e:	701a      	strb	r2, [r3, #0]
			if(Config < CONFIG_ROW1) Config = CONFIG_ROW3;
 8001810:	4b3f      	ldr	r3, [pc, #252]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b25b      	sxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	dc15      	bgt.n	8001846 <HAL_GPIO_EXTI_Callback+0xfa>
 800181a:	4b3d      	ldr	r3, [pc, #244]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800181c:	2203      	movs	r2, #3
 800181e:	701a      	strb	r2, [r3, #0]
 8001820:	e011      	b.n	8001846 <HAL_GPIO_EXTI_Callback+0xfa>
		}
		else if(ENTER_EXTI_5_Pin == GPIO_Pin)
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	2b20      	cmp	r3, #32
 8001826:	d10e      	bne.n	8001846 <HAL_GPIO_EXTI_Callback+0xfa>
		{
			flag_button = 1;
 8001828:	4b38      	ldr	r3, [pc, #224]	@ (800190c <HAL_GPIO_EXTI_Callback+0x1c0>)
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
			if(1 == Mode)
 800182e:	4b39      	ldr	r3, [pc, #228]	@ (8001914 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b01      	cmp	r3, #1
 8001836:	d103      	bne.n	8001840 <HAL_GPIO_EXTI_Callback+0xf4>
			{
				Enter = 1;
 8001838:	4b37      	ldr	r3, [pc, #220]	@ (8001918 <HAL_GPIO_EXTI_Callback+0x1cc>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	e002      	b.n	8001846 <HAL_GPIO_EXTI_Callback+0xfa>
			}
			else
			{
				Mode = 1;
 8001840:	4b34      	ldr	r3, [pc, #208]	@ (8001914 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	/*END CODE ISR*/

	HAL_Delay(20);
 8001846:	2014      	movs	r0, #20
 8001848:	f000 fdca 	bl	80023e0 <HAL_Delay>
	TimeBegin = HAL_GetTick();
 800184c:	f000 fdbe 	bl	80023cc <HAL_GetTick>
 8001850:	4603      	mov	r3, r0
 8001852:	4a32      	ldr	r2, [pc, #200]	@ (800191c <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001854:	6013      	str	r3, [r2, #0]
	while(		HAL_GPIO_ReadPin(GPIOB, UP_EXTI_3_Pin) == GPIO_PIN_RESET		\
 8001856:	e00d      	b.n	8001874 <HAL_GPIO_EXTI_Callback+0x128>
			|| 	HAL_GPIO_ReadPin(R1_IN_GPIO_Port, R1_IN_Pin) == GPIO_PIN_RESET		\
			|| 	HAL_GPIO_ReadPin(R2_IN_GPIO_Port, R2_IN_Pin) == GPIO_PIN_RESET 		\
			|| 	HAL_GPIO_ReadPin(R3_IN_GPIO_Port, R3_IN_Pin) == GPIO_PIN_RESET		\
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
	{
		TimeNow = HAL_GetTick();
 8001858:	f000 fdb8 	bl	80023cc <HAL_GetTick>
 800185c:	4603      	mov	r3, r0
 800185e:	4a30      	ldr	r2, [pc, #192]	@ (8001920 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001860:	6013      	str	r3, [r2, #0]
		if(TimeNow - TimeBegin == 5000)
 8001862:	4b2f      	ldr	r3, [pc, #188]	@ (8001920 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b2d      	ldr	r3, [pc, #180]	@ (800191c <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001870:	4293      	cmp	r3, r2
 8001872:	d035      	beq.n	80018e0 <HAL_GPIO_EXTI_Callback+0x194>
	while(		HAL_GPIO_ReadPin(GPIOB, UP_EXTI_3_Pin) == GPIO_PIN_RESET		\
 8001874:	2108      	movs	r1, #8
 8001876:	482b      	ldr	r0, [pc, #172]	@ (8001924 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8001878:	f001 f91a 	bl	8002ab0 <HAL_GPIO_ReadPin>
 800187c:	4603      	mov	r3, r0
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0ea      	beq.n	8001858 <HAL_GPIO_EXTI_Callback+0x10c>
			|| 	HAL_GPIO_ReadPin(GPIOB, DOWN_EXTI_4_Pin) == GPIO_PIN_RESET 		\
 8001882:	2110      	movs	r1, #16
 8001884:	4827      	ldr	r0, [pc, #156]	@ (8001924 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8001886:	f001 f913 	bl	8002ab0 <HAL_GPIO_ReadPin>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0e3      	beq.n	8001858 <HAL_GPIO_EXTI_Callback+0x10c>
			|| 	HAL_GPIO_ReadPin(GPIOB, ENTER_EXTI_5_Pin) == GPIO_PIN_RESET		\
 8001890:	2120      	movs	r1, #32
 8001892:	4824      	ldr	r0, [pc, #144]	@ (8001924 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8001894:	f001 f90c 	bl	8002ab0 <HAL_GPIO_ReadPin>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0dc      	beq.n	8001858 <HAL_GPIO_EXTI_Callback+0x10c>
			|| 	HAL_GPIO_ReadPin(R1_IN_GPIO_Port, R1_IN_Pin) == GPIO_PIN_RESET		\
 800189e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018a2:	4820      	ldr	r0, [pc, #128]	@ (8001924 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80018a4:	f001 f904 	bl	8002ab0 <HAL_GPIO_ReadPin>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0d4      	beq.n	8001858 <HAL_GPIO_EXTI_Callback+0x10c>
			|| 	HAL_GPIO_ReadPin(R2_IN_GPIO_Port, R2_IN_Pin) == GPIO_PIN_RESET 		\
 80018ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018b2:	481c      	ldr	r0, [pc, #112]	@ (8001924 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80018b4:	f001 f8fc 	bl	8002ab0 <HAL_GPIO_ReadPin>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0cc      	beq.n	8001858 <HAL_GPIO_EXTI_Callback+0x10c>
			|| 	HAL_GPIO_ReadPin(R3_IN_GPIO_Port, R3_IN_Pin) == GPIO_PIN_RESET		\
 80018be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018c2:	4818      	ldr	r0, [pc, #96]	@ (8001924 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80018c4:	f001 f8f4 	bl	8002ab0 <HAL_GPIO_ReadPin>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0c4      	beq.n	8001858 <HAL_GPIO_EXTI_Callback+0x10c>
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
 80018ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018d2:	4814      	ldr	r0, [pc, #80]	@ (8001924 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80018d4:	f001 f8ec 	bl	8002ab0 <HAL_GPIO_ReadPin>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0bc      	beq.n	8001858 <HAL_GPIO_EXTI_Callback+0x10c>
 80018de:	e000      	b.n	80018e2 <HAL_GPIO_EXTI_Callback+0x196>
		{
//			ButtonError = 1;
			break;
 80018e0:	bf00      	nop
		}
	}
	HAL_Delay(20);
 80018e2:	2014      	movs	r0, #20
 80018e4:	f000 fd7c 	bl	80023e0 <HAL_Delay>
	EXTI->PR = ENTER_EXTI_5_Pin | DOWN_EXTI_4_Pin | UP_EXTI_3_Pin \
 80018e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80018ea:	f24f 0238 	movw	r2, #61496	@ 0xf038
 80018ee:	615a      	str	r2, [r3, #20]
			| R1_IN_Pin | R2_IN_Pin |R3_IN_Pin | R4_IN_Pin;
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200000bc 	.word	0x200000bc
 80018fc:	200001b0 	.word	0x200001b0
 8001900:	200002dc 	.word	0x200002dc
 8001904:	200002c4 	.word	0x200002c4
 8001908:	200002f4 	.word	0x200002f4
 800190c:	200001cb 	.word	0x200001cb
 8001910:	200000ac 	.word	0x200000ac
 8001914:	200001c9 	.word	0x200001c9
 8001918:	200001ca 	.word	0x200001ca
 800191c:	2000033c 	.word	0x2000033c
 8001920:	20000340 	.word	0x20000340
 8001924:	40010c00 	.word	0x40010c00
 8001928:	40010400 	.word	0x40010400

0800192c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	if(rxByte == '\r')
 8001934:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <HAL_UART_RxCpltCallback+0x5c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b0d      	cmp	r3, #13
 800193c:	d103      	bne.n	8001946 <HAL_UART_RxCpltCallback+0x1a>
	{
		flag_rx_done = 1;
 800193e:	4b13      	ldr	r3, [pc, #76]	@ (800198c <HAL_UART_RxCpltCallback+0x60>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	e00f      	b.n	8001966 <HAL_UART_RxCpltCallback+0x3a>
	}
	else
	{
		rxBuffer[rxBufferIndex] = rxByte;
 8001946:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_UART_RxCpltCallback+0x64>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <HAL_UART_RxCpltCallback+0x5c>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	b2d9      	uxtb	r1, r3
 8001954:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <HAL_UART_RxCpltCallback+0x68>)
 8001956:	5499      	strb	r1, [r3, r2]
		rxBufferIndex++;
 8001958:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <HAL_UART_RxCpltCallback+0x64>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	3301      	adds	r3, #1
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_UART_RxCpltCallback+0x64>)
 8001964:	701a      	strb	r2, [r3, #0]
	}
	if(rxBufferIndex >= 20)
 8001966:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <HAL_UART_RxCpltCallback+0x64>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b13      	cmp	r3, #19
 800196e:	d902      	bls.n	8001976 <HAL_UART_RxCpltCallback+0x4a>
	{
		rxBufferIndex = 0;
 8001970:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <HAL_UART_RxCpltCallback+0x64>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxByte, 1);
 8001976:	2201      	movs	r2, #1
 8001978:	4903      	ldr	r1, [pc, #12]	@ (8001988 <HAL_UART_RxCpltCallback+0x5c>)
 800197a:	4807      	ldr	r0, [pc, #28]	@ (8001998 <HAL_UART_RxCpltCallback+0x6c>)
 800197c:	f002 ff53 	bl	8004826 <HAL_UART_Receive_IT>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000322 	.word	0x20000322
 800198c:	20000339 	.word	0x20000339
 8001990:	20000338 	.word	0x20000338
 8001994:	20000324 	.word	0x20000324
 8001998:	2000027c 	.word	0x2000027c

0800199c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b097      	sub	sp, #92	@ 0x5c
 80019a0:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019a2:	f000 fcbb 	bl	800231c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019a6:	f000 f949 	bl	8001c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019aa:	f000 f9db 	bl	8001d64 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019ae:	f000 f981 	bl	8001cb4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80019b2:	f000 f9ad 	bl	8001d10 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // INIT HAL lib
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxByte, 1);
 80019b6:	2201      	movs	r2, #1
 80019b8:	4987      	ldr	r1, [pc, #540]	@ (8001bd8 <main+0x23c>)
 80019ba:	4888      	ldr	r0, [pc, #544]	@ (8001bdc <main+0x240>)
 80019bc:	f002 ff33 	bl	8004826 <HAL_UART_Receive_IT>

  // INIT user
  KeyPad_Init(		// Cpl pin + port
 80019c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c4:	930d      	str	r3, [sp, #52]	@ 0x34
 80019c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80019cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80019d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80019d8:	4b81      	ldr	r3, [pc, #516]	@ (8001be0 <main+0x244>)
 80019da:	9309      	str	r3, [sp, #36]	@ 0x24
 80019dc:	4b80      	ldr	r3, [pc, #512]	@ (8001be0 <main+0x244>)
 80019de:	9308      	str	r3, [sp, #32]
 80019e0:	4b7f      	ldr	r3, [pc, #508]	@ (8001be0 <main+0x244>)
 80019e2:	9307      	str	r3, [sp, #28]
 80019e4:	4b7e      	ldr	r3, [pc, #504]	@ (8001be0 <main+0x244>)
 80019e6:	9306      	str	r3, [sp, #24]
 80019e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019ec:	9305      	str	r3, [sp, #20]
 80019ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019f2:	9304      	str	r3, [sp, #16]
 80019f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019f8:	9303      	str	r3, [sp, #12]
 80019fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019fe:	9302      	str	r3, [sp, #8]
 8001a00:	4b78      	ldr	r3, [pc, #480]	@ (8001be4 <main+0x248>)
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	4b77      	ldr	r3, [pc, #476]	@ (8001be4 <main+0x248>)
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4b76      	ldr	r3, [pc, #472]	@ (8001be4 <main+0x248>)
 8001a0a:	4a76      	ldr	r2, [pc, #472]	@ (8001be4 <main+0x248>)
 8001a0c:	4976      	ldr	r1, [pc, #472]	@ (8001be8 <main+0x24c>)
 8001a0e:	4877      	ldr	r0, [pc, #476]	@ (8001bec <main+0x250>)
 8001a10:	f7fe ff02 	bl	8000818 <KeyPad_Init>
					C1_OUT_Pin, C2_OUT_Pin, C3_OUT_Pin, C4_OUT_Pin,										\
					// Row pin + port
					R1_IN_GPIO_Port, R2_IN_GPIO_Port, R3_IN_GPIO_Port, R4_IN_GPIO_Port,					\
					R1_IN_Pin, R2_IN_Pin, R3_IN_Pin, R4_IN_Pin
			  );
  CLCD_I2C_Init(&LCD1, &hi2c1, (0x27 << 1), 20, 4);
 8001a14:	4638      	mov	r0, r7
 8001a16:	2304      	movs	r3, #4
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2314      	movs	r3, #20
 8001a1c:	224e      	movs	r2, #78	@ 0x4e
 8001a1e:	4974      	ldr	r1, [pc, #464]	@ (8001bf0 <main+0x254>)
 8001a20:	f7fe fc5e 	bl	80002e0 <CLCD_I2C_Init>

  at24_I2C_Init(hi2c1);
 8001a24:	4c72      	ldr	r4, [pc, #456]	@ (8001bf0 <main+0x254>)
 8001a26:	4668      	mov	r0, sp
 8001a28:	f104 0310 	add.w	r3, r4, #16
 8001a2c:	2244      	movs	r2, #68	@ 0x44
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f003 feb1 	bl	8005796 <memcpy>
 8001a34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a38:	f7fe fb90 	bl	800015c <at24_I2C_Init>

  UART_Init_UART(&huart3);
 8001a3c:	4867      	ldr	r0, [pc, #412]	@ (8001bdc <main+0x240>)
 8001a3e:	f7ff fe37 	bl	80016b0 <UART_Init_UART>

  FET_74HC595_Init(DATA_595_GPIO_Port, CLK_595_GPIO_Port, LAT_595_GPIO_Port, DATA_595_Pin, CLK_595_Pin, LAT_595_Pin);
 8001a42:	2302      	movs	r3, #2
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	2301      	movs	r3, #1
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2380      	movs	r3, #128	@ 0x80
 8001a4c:	4a64      	ldr	r2, [pc, #400]	@ (8001be0 <main+0x244>)
 8001a4e:	4964      	ldr	r1, [pc, #400]	@ (8001be0 <main+0x244>)
 8001a50:	4864      	ldr	r0, [pc, #400]	@ (8001be4 <main+0x248>)
 8001a52:	f7fe ff51 	bl	80008f8 <FET_74HC595_Init>

  if(at24_isConnected())
 8001a56:	f7fe fb99 	bl	800018c <at24_isConnected>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00c      	beq.n	8001a7a <main+0xde>
  {
	  readStatus = at24_read(MEM_ADDR,rData, 15, 100);
 8001a60:	2364      	movs	r3, #100	@ 0x64
 8001a62:	220f      	movs	r2, #15
 8001a64:	4963      	ldr	r1, [pc, #396]	@ (8001bf4 <main+0x258>)
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7fe fba2 	bl	80001b0 <at24_read>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b61      	ldr	r3, [pc, #388]	@ (8001bf8 <main+0x25c>)
 8001a72:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(10);
 8001a74:	200a      	movs	r0, #10
 8001a76:	f000 fcb3 	bl	80023e0 <HAL_Delay>
  }

  HAL_GPIO_WritePin(LED_KEY_GPIO_Port, LED_KEY_Pin, GPIO_PIN_SET);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2110      	movs	r1, #16
 8001a7e:	4859      	ldr	r0, [pc, #356]	@ (8001be4 <main+0x248>)
 8001a80:	f001 f82d 	bl	8002ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_BUTTON_GPIO_Port, LED_BUTTON_Pin, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a8a:	485c      	ldr	r0, [pc, #368]	@ (8001bfc <main+0x260>)
 8001a8c:	f001 f827 	bl	8002ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RESULT_GPIO_Port, LED_RESULT_Pin, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	2120      	movs	r1, #32
 8001a94:	4853      	ldr	r0, [pc, #332]	@ (8001be4 <main+0x248>)
 8001a96:	f001 f822 	bl	8002ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_STATE_GPIO_Port, LED_STATE_Pin, GPIO_PIN_SET);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2108      	movs	r1, #8
 8001a9e:	4851      	ldr	r0, [pc, #324]	@ (8001be4 <main+0x248>)
 8001aa0:	f001 f81d 	bl	8002ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2140      	movs	r1, #64	@ 0x40
 8001aa8:	484e      	ldr	r0, [pc, #312]	@ (8001be4 <main+0x248>)
 8001aaa:	f001 f818 	bl	8002ade <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*Debug key*/
	  if(flag_keypad == 1)
 8001aae:	4b54      	ldr	r3, [pc, #336]	@ (8001c00 <main+0x264>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d107      	bne.n	8001ac8 <main+0x12c>
	  {
		  flag_keypad = 0;
 8001ab8:	4b51      	ldr	r3, [pc, #324]	@ (8001c00 <main+0x264>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED_KEY_GPIO_Port, LED_KEY_Pin);
 8001abe:	2110      	movs	r1, #16
 8001ac0:	4848      	ldr	r0, [pc, #288]	@ (8001be4 <main+0x248>)
 8001ac2:	f001 f824 	bl	8002b0e <HAL_GPIO_TogglePin>
 8001ac6:	e009      	b.n	8001adc <main+0x140>
	  }
	  else if(flag_button == 1)
 8001ac8:	4b4e      	ldr	r3, [pc, #312]	@ (8001c04 <main+0x268>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d104      	bne.n	8001adc <main+0x140>
	  {
		  //flag_button = 0;
		  HAL_GPIO_TogglePin(LED_BUTTON_GPIO_Port, LED_BUTTON_Pin);
 8001ad2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ad6:	4849      	ldr	r0, [pc, #292]	@ (8001bfc <main+0x260>)
 8001ad8:	f001 f819 	bl	8002b0e <HAL_GPIO_TogglePin>
	  }

	  /*UART handler after uart rx is exexecuted*/
	  if(flag_rx_done == 1)
 8001adc:	4b4a      	ldr	r3, [pc, #296]	@ (8001c08 <main+0x26c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d11c      	bne.n	8001b20 <main+0x184>
	  {
		  flag_rx_done = 0;
 8001ae6:	4b48      	ldr	r3, [pc, #288]	@ (8001c08 <main+0x26c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED_RESULT_GPIO_Port, LED_RESULT_Pin);
 8001aec:	2120      	movs	r1, #32
 8001aee:	483d      	ldr	r0, [pc, #244]	@ (8001be4 <main+0x248>)
 8001af0:	f001 f80d 	bl	8002b0e <HAL_GPIO_TogglePin>
		  /*function handler uart*/
		  if(UART_handler(rxBuffer, &relay_uartCont, &num_IN_UART, pin_IN_UART) == UART_HANDLER_OKE);
 8001af4:	4b45      	ldr	r3, [pc, #276]	@ (8001c0c <main+0x270>)
 8001af6:	4a46      	ldr	r2, [pc, #280]	@ (8001c10 <main+0x274>)
 8001af8:	4946      	ldr	r1, [pc, #280]	@ (8001c14 <main+0x278>)
 8001afa:	4847      	ldr	r0, [pc, #284]	@ (8001c18 <main+0x27c>)
 8001afc:	f7ff fdea 	bl	80016d4 <UART_handler>
		  /*Reset arr rx*/
		  for(uint8_t i =0; i < sizeof(rxBuffer); i++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e009      	b.n	8001b1a <main+0x17e>
		  {
			  rxBuffer[i] = 0;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	4a43      	ldr	r2, [pc, #268]	@ (8001c18 <main+0x27c>)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	54d1      	strb	r1, [r2, r3]
		  	  rxBufferIndex = 0;
 8001b0e:	4b43      	ldr	r3, [pc, #268]	@ (8001c1c <main+0x280>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i =0; i < sizeof(rxBuffer); i++)
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	3301      	adds	r3, #1
 8001b18:	73fb      	strb	r3, [r7, #15]
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	2b13      	cmp	r3, #19
 8001b1e:	d9f2      	bls.n	8001b06 <main+0x16a>
		  }
	  }

	  /*Enter key and display on LCD pass/num*/
	  if(handler_keyIN_enterKey_DisplayLCD(&LCD1, state_button, &key, pin_IN) == KEY_OK)
 8001b20:	4b3f      	ldr	r3, [pc, #252]	@ (8001c20 <main+0x284>)
 8001b22:	7819      	ldrb	r1, [r3, #0]
 8001b24:	4638      	mov	r0, r7
 8001b26:	4b3f      	ldr	r3, [pc, #252]	@ (8001c24 <main+0x288>)
 8001b28:	4a3f      	ldr	r2, [pc, #252]	@ (8001c28 <main+0x28c>)
 8001b2a:	f7fe ff77 	bl	8000a1c <handler_keyIN_enterKey_DisplayLCD>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d11f      	bne.n	8001b74 <main+0x1d8>
	  {
		  state_hand = handler_keyIN_CheckPIN_NUM(pin_IN, &num_set_fet);
 8001b34:	493d      	ldr	r1, [pc, #244]	@ (8001c2c <main+0x290>)
 8001b36:	483b      	ldr	r0, [pc, #236]	@ (8001c24 <main+0x288>)
 8001b38:	f7fe fff6 	bl	8000b28 <handler_keyIN_CheckPIN_NUM>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b3b      	ldr	r3, [pc, #236]	@ (8001c30 <main+0x294>)
 8001b42:	701a      	strb	r2, [r3, #0]
		  if(state_hand == PASS_OKE && num_set_fet != 0)
 8001b44:	4b3a      	ldr	r3, [pc, #232]	@ (8001c30 <main+0x294>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d113      	bne.n	8001b74 <main+0x1d8>
 8001b4c:	4b37      	ldr	r3, [pc, #220]	@ (8001c2c <main+0x290>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00f      	beq.n	8001b74 <main+0x1d8>
		  {
			  FET_74HC595_Set_Reset(0x01 << (num_set_fet));
 8001b54:	4b35      	ldr	r3, [pc, #212]	@ (8001c2c <main+0x290>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	4093      	lsls	r3, r2
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fef3 	bl	800094c <FET_74HC595_Set_Reset>
			  HAL_Delay(1000);
 8001b66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b6a:	f000 fc39 	bl	80023e0 <HAL_Delay>
			  FET_74HC595_Set_Reset(RESET_ALL_FET);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7fe feec 	bl	800094c <FET_74HC595_Set_Reset>
		  }
	  }
	  if(relay_uartCont > 0 && relay_uartCont <= 7)
 8001b74:	4b27      	ldr	r3, [pc, #156]	@ (8001c14 <main+0x278>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d016      	beq.n	8001baa <main+0x20e>
 8001b7c:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <main+0x278>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b07      	cmp	r3, #7
 8001b82:	d812      	bhi.n	8001baa <main+0x20e>
	  {
		  FET_74HC595_Set_Reset(0x01 << (relay_uartCont));
 8001b84:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <main+0x278>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	4093      	lsls	r3, r2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fedb 	bl	800094c <FET_74HC595_Set_Reset>
		  HAL_Delay(1000);
 8001b96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b9a:	f000 fc21 	bl	80023e0 <HAL_Delay>
		  FET_74HC595_Set_Reset(RESET_ALL_FET+1);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f7fe fed4 	bl	800094c <FET_74HC595_Set_Reset>
		  relay_uartCont = 0;
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <main+0x278>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
	  }

	  /*Chuyển đổi chế độ ch�?n kiểu nút nhấn thao tác màng hình*/
	  if((enter_num_pass.signal_enter_pass == PROCESSING) || (enter_num_pass.signal_enter_num == PROCESSING))
 8001baa:	4b22      	ldr	r3, [pc, #136]	@ (8001c34 <main+0x298>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <main+0x21e>
 8001bb2:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <main+0x298>)
 8001bb4:	785b      	ldrb	r3, [r3, #1]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <main+0x22c>
	  {
		  state_star_pass = NONE_STAR;
 8001bba:	4b1f      	ldr	r3, [pc, #124]	@ (8001c38 <main+0x29c>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
		  state_button = KEYPAD;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <main+0x284>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e002      	b.n	8001bce <main+0x232>
	  }
	  else
	  {
		  state_button = BUTTON;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <main+0x284>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
	  }
	  lcd_system_handler(&LCD1);
 8001bce:	463b      	mov	r3, r7
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fad9 	bl	8001188 <lcd_system_handler>
	  if(flag_keypad == 1)
 8001bd6:	e76a      	b.n	8001aae <main+0x112>
 8001bd8:	20000322 	.word	0x20000322
 8001bdc:	2000027c 	.word	0x2000027c
 8001be0:	40010c00 	.word	0x40010c00
 8001be4:	40010800 	.word	0x40010800
 8001be8:	200002dc 	.word	0x200002dc
 8001bec:	200002c4 	.word	0x200002c4
 8001bf0:	20000228 	.word	0x20000228
 8001bf4:	20000308 	.word	0x20000308
 8001bf8:	20000306 	.word	0x20000306
 8001bfc:	40011000 	.word	0x40011000
 8001c00:	200001b0 	.word	0x200001b0
 8001c04:	200001cb 	.word	0x200001cb
 8001c08:	20000339 	.word	0x20000339
 8001c0c:	20000300 	.word	0x20000300
 8001c10:	20000305 	.word	0x20000305
 8001c14:	20000321 	.word	0x20000321
 8001c18:	20000324 	.word	0x20000324
 8001c1c:	20000338 	.word	0x20000338
 8001c20:	200000bc 	.word	0x200000bc
 8001c24:	200002f8 	.word	0x200002f8
 8001c28:	200002f4 	.word	0x200002f4
 8001c2c:	200001c6 	.word	0x200001c6
 8001c30:	20000000 	.word	0x20000000
 8001c34:	200000b0 	.word	0x200000b0
 8001c38:	200001cc 	.word	0x200001cc

08001c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b090      	sub	sp, #64	@ 0x40
 8001c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c42:	f107 0318 	add.w	r3, r7, #24
 8001c46:	2228      	movs	r2, #40	@ 0x28
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fcb5 	bl	80055ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c62:	2301      	movs	r3, #1
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c66:	2310      	movs	r3, #16
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c6e:	f107 0318 	add.w	r3, r7, #24
 8001c72:	4618      	mov	r0, r3
 8001c74:	f002 f8f4 	bl	8003e60 <HAL_RCC_OscConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001c7e:	f000 f935 	bl	8001eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c82:	230f      	movs	r3, #15
 8001c84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 fb62 	bl	8004364 <HAL_RCC_ClockConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001ca6:	f000 f921 	bl	8001eec <Error_Handler>
  }
}
 8001caa:	bf00      	nop
 8001cac:	3740      	adds	r7, #64	@ 0x40
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <MX_I2C1_Init+0x50>)
 8001cba:	4a13      	ldr	r2, [pc, #76]	@ (8001d08 <MX_I2C1_Init+0x54>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <MX_I2C1_Init+0x50>)
 8001cc0:	4a12      	ldr	r2, [pc, #72]	@ (8001d0c <MX_I2C1_Init+0x58>)
 8001cc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <MX_I2C1_Init+0x50>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <MX_I2C1_Init+0x50>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d04 <MX_I2C1_Init+0x50>)
 8001cd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <MX_I2C1_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <MX_I2C1_Init+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ce4:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <MX_I2C1_Init+0x50>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <MX_I2C1_Init+0x50>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cf0:	4804      	ldr	r0, [pc, #16]	@ (8001d04 <MX_I2C1_Init+0x50>)
 8001cf2:	f000 ff3d 	bl	8002b70 <HAL_I2C_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cfc:	f000 f8f6 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000228 	.word	0x20000228
 8001d08:	40005400 	.word	0x40005400
 8001d0c:	000186a0 	.word	0x000186a0

08001d10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <MX_USART3_UART_Init+0x4c>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <MX_USART3_UART_Init+0x50>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <MX_USART3_UART_Init+0x4c>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <MX_USART3_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <MX_USART3_UART_Init+0x4c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <MX_USART3_UART_Init+0x4c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <MX_USART3_UART_Init+0x4c>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <MX_USART3_UART_Init+0x4c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <MX_USART3_UART_Init+0x4c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d46:	4805      	ldr	r0, [pc, #20]	@ (8001d5c <MX_USART3_UART_Init+0x4c>)
 8001d48:	f002 fc9a 	bl	8004680 <HAL_UART_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d52:	f000 f8cb 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000027c 	.word	0x2000027c
 8001d60:	40004800 	.word	0x40004800

08001d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6a:	f107 0310 	add.w	r3, r7, #16
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d78:	4b57      	ldr	r3, [pc, #348]	@ (8001ed8 <MX_GPIO_Init+0x174>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a56      	ldr	r2, [pc, #344]	@ (8001ed8 <MX_GPIO_Init+0x174>)
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b54      	ldr	r3, [pc, #336]	@ (8001ed8 <MX_GPIO_Init+0x174>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	4b51      	ldr	r3, [pc, #324]	@ (8001ed8 <MX_GPIO_Init+0x174>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a50      	ldr	r2, [pc, #320]	@ (8001ed8 <MX_GPIO_Init+0x174>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ed8 <MX_GPIO_Init+0x174>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ed8 <MX_GPIO_Init+0x174>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a4a      	ldr	r2, [pc, #296]	@ (8001ed8 <MX_GPIO_Init+0x174>)
 8001dae:	f043 0308 	orr.w	r3, r3, #8
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b48      	ldr	r3, [pc, #288]	@ (8001ed8 <MX_GPIO_Init+0x174>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUTTON_GPIO_Port, LED_BUTTON_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dc6:	4845      	ldr	r0, [pc, #276]	@ (8001edc <MX_GPIO_Init+0x178>)
 8001dc8:	f000 fe89 	bl	8002ade <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATE_Pin|LED_KEY_Pin|LED_RESULT_Pin|LED_USER_Pin
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f640 71f8 	movw	r1, #4088	@ 0xff8
 8001dd2:	4843      	ldr	r0, [pc, #268]	@ (8001ee0 <MX_GPIO_Init+0x17c>)
 8001dd4:	f000 fe83 	bl	8002ade <HAL_GPIO_WritePin>
                          |DATA_595_Pin|C4_OUT_Pin|C3_OUT_Pin|C2_OUT_Pin
                          |C1_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_595_Pin|LAT_595_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f240 1103 	movw	r1, #259	@ 0x103
 8001dde:	4841      	ldr	r0, [pc, #260]	@ (8001ee4 <MX_GPIO_Init+0x180>)
 8001de0:	f000 fe7d 	bl	8002ade <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUTTON_Pin */
  GPIO_InitStruct.Pin = LED_BUTTON_Pin;
 8001de4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001df6:	f107 0310 	add.w	r3, r7, #16
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4837      	ldr	r0, [pc, #220]	@ (8001edc <MX_GPIO_Init+0x178>)
 8001dfe:	f000 fcd3 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATE_Pin LED_KEY_Pin LED_RESULT_Pin LED_USER_Pin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|LED_KEY_Pin|LED_RESULT_Pin|LED_USER_Pin;
 8001e02:	2378      	movs	r3, #120	@ 0x78
 8001e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 0310 	add.w	r3, r7, #16
 8001e16:	4619      	mov	r1, r3
 8001e18:	4831      	ldr	r0, [pc, #196]	@ (8001ee0 <MX_GPIO_Init+0x17c>)
 8001e1a:	f000 fcc5 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_595_Pin */
  GPIO_InitStruct.Pin = DATA_595_Pin;
 8001e1e:	2380      	movs	r3, #128	@ 0x80
 8001e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_595_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	f107 0310 	add.w	r3, r7, #16
 8001e32:	4619      	mov	r1, r3
 8001e34:	482a      	ldr	r0, [pc, #168]	@ (8001ee0 <MX_GPIO_Init+0x17c>)
 8001e36:	f000 fcb7 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_595_Pin LAT_595_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = CLK_595_Pin|LAT_595_Pin|BUZZER_Pin;
 8001e3a:	f240 1303 	movw	r3, #259	@ 0x103
 8001e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	4619      	mov	r1, r3
 8001e52:	4824      	ldr	r0, [pc, #144]	@ (8001ee4 <MX_GPIO_Init+0x180>)
 8001e54:	f000 fca8 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_IN_Pin R3_IN_Pin R2_IN_Pin R1_IN_Pin
                           UP_EXTI_3_Pin DOWN_EXTI_4_Pin ENTER_EXTI_5_Pin */
  GPIO_InitStruct.Pin = R4_IN_Pin|R3_IN_Pin|R2_IN_Pin|R1_IN_Pin
 8001e58:	f24f 0338 	movw	r3, #61496	@ 0xf038
 8001e5c:	613b      	str	r3, [r7, #16]
                          |UP_EXTI_3_Pin|DOWN_EXTI_4_Pin|ENTER_EXTI_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <MX_GPIO_Init+0x184>)
 8001e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e62:	2301      	movs	r3, #1
 8001e64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	481d      	ldr	r0, [pc, #116]	@ (8001ee4 <MX_GPIO_Init+0x180>)
 8001e6e:	f000 fc9b 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_OUT_Pin C3_OUT_Pin C2_OUT_Pin C1_OUT_Pin */
  GPIO_InitStruct.Pin = C4_OUT_Pin|C3_OUT_Pin|C2_OUT_Pin|C1_OUT_Pin;
 8001e72:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 0310 	add.w	r3, r7, #16
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4815      	ldr	r0, [pc, #84]	@ (8001ee0 <MX_GPIO_Init+0x17c>)
 8001e8c:	f000 fc8c 	bl	80027a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2105      	movs	r1, #5
 8001e94:	2009      	movs	r0, #9
 8001e96:	f000 fb9e 	bl	80025d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e9a:	2009      	movs	r0, #9
 8001e9c:	f000 fbb7 	bl	800260e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2105      	movs	r1, #5
 8001ea4:	200a      	movs	r0, #10
 8001ea6:	f000 fb96 	bl	80025d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001eaa:	200a      	movs	r0, #10
 8001eac:	f000 fbaf 	bl	800260e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2105      	movs	r1, #5
 8001eb4:	2017      	movs	r0, #23
 8001eb6:	f000 fb8e 	bl	80025d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001eba:	2017      	movs	r0, #23
 8001ebc:	f000 fba7 	bl	800260e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2105      	movs	r1, #5
 8001ec4:	2028      	movs	r0, #40	@ 0x28
 8001ec6:	f000 fb86 	bl	80025d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001eca:	2028      	movs	r0, #40	@ 0x28
 8001ecc:	f000 fb9f 	bl	800260e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ed0:	bf00      	nop
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40011000 	.word	0x40011000
 8001ee0:	40010800 	.word	0x40010800
 8001ee4:	40010c00 	.word	0x40010c00
 8001ee8:	10210000 	.word	0x10210000

08001eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef0:	b672      	cpsid	i
}
 8001ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <Error_Handler+0x8>

08001ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <HAL_MspInit+0x5c>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	4a14      	ldr	r2, [pc, #80]	@ (8001f54 <HAL_MspInit+0x5c>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6193      	str	r3, [r2, #24]
 8001f0a:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_MspInit+0x5c>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <HAL_MspInit+0x5c>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f54 <HAL_MspInit+0x5c>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	61d3      	str	r3, [r2, #28]
 8001f22:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <HAL_MspInit+0x5c>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_MspInit+0x60>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <HAL_MspInit+0x60>)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40010000 	.word	0x40010000

08001f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a15      	ldr	r2, [pc, #84]	@ (8001fcc <HAL_I2C_MspInit+0x70>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d123      	bne.n	8001fc4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7c:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <HAL_I2C_MspInit+0x74>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a13      	ldr	r2, [pc, #76]	@ (8001fd0 <HAL_I2C_MspInit+0x74>)
 8001f82:	f043 0308 	orr.w	r3, r3, #8
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <HAL_I2C_MspInit+0x74>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f94:	23c0      	movs	r3, #192	@ 0xc0
 8001f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f98:	2312      	movs	r3, #18
 8001f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480b      	ldr	r0, [pc, #44]	@ (8001fd4 <HAL_I2C_MspInit+0x78>)
 8001fa8:	f000 fbfe 	bl	80027a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <HAL_I2C_MspInit+0x74>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	@ (8001fd0 <HAL_I2C_MspInit+0x74>)
 8001fb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fb6:	61d3      	str	r3, [r2, #28]
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_I2C_MspInit+0x74>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fc4:	bf00      	nop
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40005400 	.word	0x40005400
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010c00 	.word	0x40010c00

08001fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0310 	add.w	r3, r7, #16
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a20      	ldr	r2, [pc, #128]	@ (8002074 <HAL_UART_MspInit+0x9c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d139      	bne.n	800206c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8002078 <HAL_UART_MspInit+0xa0>)
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8002078 <HAL_UART_MspInit+0xa0>)
 8001ffe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002002:	61d3      	str	r3, [r2, #28]
 8002004:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <HAL_UART_MspInit+0xa0>)
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002010:	4b19      	ldr	r3, [pc, #100]	@ (8002078 <HAL_UART_MspInit+0xa0>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	4a18      	ldr	r2, [pc, #96]	@ (8002078 <HAL_UART_MspInit+0xa0>)
 8002016:	f043 0308 	orr.w	r3, r3, #8
 800201a:	6193      	str	r3, [r2, #24]
 800201c:	4b16      	ldr	r3, [pc, #88]	@ (8002078 <HAL_UART_MspInit+0xa0>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002028:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800202c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002032:	2303      	movs	r3, #3
 8002034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	4619      	mov	r1, r3
 800203c:	480f      	ldr	r0, [pc, #60]	@ (800207c <HAL_UART_MspInit+0xa4>)
 800203e:	f000 fbb3 	bl	80027a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002042:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002046:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	4619      	mov	r1, r3
 8002056:	4809      	ldr	r0, [pc, #36]	@ (800207c <HAL_UART_MspInit+0xa4>)
 8002058:	f000 fba6 	bl	80027a8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	2100      	movs	r1, #0
 8002060:	2027      	movs	r0, #39	@ 0x27
 8002062:	f000 fab8 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002066:	2027      	movs	r0, #39	@ 0x27
 8002068:	f000 fad1 	bl	800260e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800206c:	bf00      	nop
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40004800 	.word	0x40004800
 8002078:	40021000 	.word	0x40021000
 800207c:	40010c00 	.word	0x40010c00

08002080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <NMI_Handler+0x4>

08002088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <HardFault_Handler+0x4>

08002090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <MemManage_Handler+0x4>

08002098 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <BusFault_Handler+0x4>

080020a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <UsageFault_Handler+0x4>

080020a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d0:	f000 f96a 	bl	80023a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_EXTI_3_Pin);
 80020dc:	2008      	movs	r0, #8
 80020de:	f000 fd2f 	bl	8002b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_EXTI_4_Pin);
 80020ea:	2010      	movs	r0, #16
 80020ec:	f000 fd28 	bl	8002b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENTER_EXTI_5_Pin);
 80020f8:	2020      	movs	r0, #32
 80020fa:	f000 fd21 	bl	8002b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002108:	4802      	ldr	r0, [pc, #8]	@ (8002114 <USART3_IRQHandler+0x10>)
 800210a:	f002 fbb1 	bl	8004870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	2000027c 	.word	0x2000027c

08002118 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R4_IN_Pin);
 800211c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002120:	f000 fd0e 	bl	8002b40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R3_IN_Pin);
 8002124:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002128:	f000 fd0a 	bl	8002b40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R2_IN_Pin);
 800212c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002130:	f000 fd06 	bl	8002b40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R1_IN_Pin);
 8002134:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002138:	f000 fd02 	bl	8002b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}

08002140 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return 1;
 8002144:	2301      	movs	r3, #1
}
 8002146:	4618      	mov	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <_kill>:

int _kill(int pid, int sig)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002158:	f003 faf0 	bl	800573c <__errno>
 800215c:	4603      	mov	r3, r0
 800215e:	2216      	movs	r2, #22
 8002160:	601a      	str	r2, [r3, #0]
  return -1;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_exit>:

void _exit (int status)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002176:	f04f 31ff 	mov.w	r1, #4294967295
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ffe7 	bl	800214e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <_exit+0x12>

08002184 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	e00a      	b.n	80021ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002196:	f3af 8000 	nop.w
 800219a:	4601      	mov	r1, r0
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	60ba      	str	r2, [r7, #8]
 80021a2:	b2ca      	uxtb	r2, r1
 80021a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	dbf0      	blt.n	8002196 <_read+0x12>
  }

  return len;
 80021b4:	687b      	ldr	r3, [r7, #4]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e009      	b.n	80021e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	60ba      	str	r2, [r7, #8]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	3301      	adds	r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	dbf1      	blt.n	80021d0 <_write+0x12>
  }
  return len;
 80021ec:	687b      	ldr	r3, [r7, #4]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <_close>:

int _close(int file)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800221c:	605a      	str	r2, [r3, #4]
  return 0;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <_isatty>:

int _isatty(int file)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
	...

08002258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002260:	4a14      	ldr	r2, [pc, #80]	@ (80022b4 <_sbrk+0x5c>)
 8002262:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <_sbrk+0x60>)
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800226c:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <_sbrk+0x64>)
 8002276:	4a12      	ldr	r2, [pc, #72]	@ (80022c0 <_sbrk+0x68>)
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d207      	bcs.n	8002298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002288:	f003 fa58 	bl	800573c <__errno>
 800228c:	4603      	mov	r3, r0
 800228e:	220c      	movs	r2, #12
 8002290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	e009      	b.n	80022ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002298:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229e:	4b07      	ldr	r3, [pc, #28]	@ (80022bc <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a05      	ldr	r2, [pc, #20]	@ (80022bc <_sbrk+0x64>)
 80022a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20005000 	.word	0x20005000
 80022b8:	00000400 	.word	0x00000400
 80022bc:	20000344 	.word	0x20000344
 80022c0:	20000498 	.word	0x20000498

080022c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d0:	f7ff fff8 	bl	80022c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d4:	480b      	ldr	r0, [pc, #44]	@ (8002304 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022d6:	490c      	ldr	r1, [pc, #48]	@ (8002308 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022d8:	4a0c      	ldr	r2, [pc, #48]	@ (800230c <LoopFillZerobss+0x16>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022dc:	e002      	b.n	80022e4 <LoopCopyDataInit>

080022de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e2:	3304      	adds	r3, #4

080022e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e8:	d3f9      	bcc.n	80022de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ea:	4a09      	ldr	r2, [pc, #36]	@ (8002310 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022ec:	4c09      	ldr	r4, [pc, #36]	@ (8002314 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f0:	e001      	b.n	80022f6 <LoopFillZerobss>

080022f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f4:	3204      	adds	r2, #4

080022f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f8:	d3fb      	bcc.n	80022f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022fa:	f003 fa25 	bl	8005748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022fe:	f7ff fb4d 	bl	800199c <main>
  bx lr
 8002302:	4770      	bx	lr
  ldr r0, =_sdata
 8002304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002308:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 800230c:	08006acc 	.word	0x08006acc
  ldr r2, =_sbss
 8002310:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8002314:	20000498 	.word	0x20000498

08002318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002318:	e7fe      	b.n	8002318 <ADC1_2_IRQHandler>
	...

0800231c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002320:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <HAL_Init+0x28>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a07      	ldr	r2, [pc, #28]	@ (8002344 <HAL_Init+0x28>)
 8002326:	f043 0310 	orr.w	r3, r3, #16
 800232a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232c:	2003      	movs	r0, #3
 800232e:	f000 f947 	bl	80025c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002332:	2004      	movs	r0, #4
 8002334:	f000 f808 	bl	8002348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002338:	f7ff fdde 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40022000 	.word	0x40022000

08002348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002350:	4b12      	ldr	r3, [pc, #72]	@ (800239c <HAL_InitTick+0x54>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <HAL_InitTick+0x58>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800235e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f95f 	bl	800262a <HAL_SYSTICK_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e00e      	b.n	8002394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d80a      	bhi.n	8002392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237c:	2200      	movs	r2, #0
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f000 f927 	bl	80025d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002388:	4a06      	ldr	r2, [pc, #24]	@ (80023a4 <HAL_InitTick+0x5c>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e000      	b.n	8002394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	200000c0 	.word	0x200000c0
 80023a0:	200000c8 	.word	0x200000c8
 80023a4:	200000c4 	.word	0x200000c4

080023a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ac:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_IncTick+0x1c>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <HAL_IncTick+0x20>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	4a03      	ldr	r2, [pc, #12]	@ (80023c8 <HAL_IncTick+0x20>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	200000c8 	.word	0x200000c8
 80023c8:	20000348 	.word	0x20000348

080023cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return uwTick;
 80023d0:	4b02      	ldr	r3, [pc, #8]	@ (80023dc <HAL_GetTick+0x10>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	20000348 	.word	0x20000348

080023e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff fff0 	bl	80023cc <HAL_GetTick>
 80023ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d005      	beq.n	8002406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <HAL_Delay+0x44>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002406:	bf00      	nop
 8002408:	f7ff ffe0 	bl	80023cc <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	429a      	cmp	r2, r3
 8002416:	d8f7      	bhi.n	8002408 <HAL_Delay+0x28>
  {
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200000c8 	.word	0x200000c8

08002428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002438:	4b0c      	ldr	r3, [pc, #48]	@ (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002444:	4013      	ands	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245a:	4a04      	ldr	r2, [pc, #16]	@ (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	60d3      	str	r3, [r2, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002474:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <__NVIC_GetPriorityGrouping+0x18>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0307 	and.w	r3, r3, #7
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0b      	blt.n	80024b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4906      	ldr	r1, [pc, #24]	@ (80024c0 <__NVIC_EnableIRQ+0x34>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100

080024c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	6039      	str	r1, [r7, #0]
 80024ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	db0a      	blt.n	80024ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	490c      	ldr	r1, [pc, #48]	@ (8002510 <__NVIC_SetPriority+0x4c>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	0112      	lsls	r2, r2, #4
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	440b      	add	r3, r1
 80024e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ec:	e00a      	b.n	8002504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4908      	ldr	r1, [pc, #32]	@ (8002514 <__NVIC_SetPriority+0x50>)
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	3b04      	subs	r3, #4
 80024fc:	0112      	lsls	r2, r2, #4
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	440b      	add	r3, r1
 8002502:	761a      	strb	r2, [r3, #24]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000e100 	.word	0xe000e100
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	@ 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f1c3 0307 	rsb	r3, r3, #7
 8002532:	2b04      	cmp	r3, #4
 8002534:	bf28      	it	cs
 8002536:	2304      	movcs	r3, #4
 8002538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3304      	adds	r3, #4
 800253e:	2b06      	cmp	r3, #6
 8002540:	d902      	bls.n	8002548 <NVIC_EncodePriority+0x30>
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3b03      	subs	r3, #3
 8002546:	e000      	b.n	800254a <NVIC_EncodePriority+0x32>
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	f04f 32ff 	mov.w	r2, #4294967295
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43da      	mvns	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	401a      	ands	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002560:	f04f 31ff 	mov.w	r1, #4294967295
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	43d9      	mvns	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002570:	4313      	orrs	r3, r2
         );
}
 8002572:	4618      	mov	r0, r3
 8002574:	3724      	adds	r7, #36	@ 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800258c:	d301      	bcc.n	8002592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258e:	2301      	movs	r3, #1
 8002590:	e00f      	b.n	80025b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002592:	4a0a      	ldr	r2, [pc, #40]	@ (80025bc <SysTick_Config+0x40>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259a:	210f      	movs	r1, #15
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	f7ff ff90 	bl	80024c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a4:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <SysTick_Config+0x40>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025aa:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <SysTick_Config+0x40>)
 80025ac:	2207      	movs	r2, #7
 80025ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	e000e010 	.word	0xe000e010

080025c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff2d 	bl	8002428 <__NVIC_SetPriorityGrouping>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e8:	f7ff ff42 	bl	8002470 <__NVIC_GetPriorityGrouping>
 80025ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	6978      	ldr	r0, [r7, #20]
 80025f4:	f7ff ff90 	bl	8002518 <NVIC_EncodePriority>
 80025f8:	4602      	mov	r2, r0
 80025fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff5f 	bl	80024c4 <__NVIC_SetPriority>
}
 8002606:	bf00      	nop
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff35 	bl	800248c <__NVIC_EnableIRQ>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ffa2 	bl	800257c <SysTick_Config>
 8002638:	4603      	mov	r3, r0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002642:	b480      	push	{r7}
 8002644:	b085      	sub	sp, #20
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d008      	beq.n	800266c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2204      	movs	r2, #4
 800265e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e020      	b.n	80026ae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 020e 	bic.w	r2, r2, #14
 800267a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d005      	beq.n	80026dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2204      	movs	r2, #4
 80026d4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	e051      	b.n	8002780 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 020e 	bic.w	r2, r2, #14
 80026ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a22      	ldr	r2, [pc, #136]	@ (800278c <HAL_DMA_Abort_IT+0xd4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d029      	beq.n	800275a <HAL_DMA_Abort_IT+0xa2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a21      	ldr	r2, [pc, #132]	@ (8002790 <HAL_DMA_Abort_IT+0xd8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d022      	beq.n	8002756 <HAL_DMA_Abort_IT+0x9e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1f      	ldr	r2, [pc, #124]	@ (8002794 <HAL_DMA_Abort_IT+0xdc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01a      	beq.n	8002750 <HAL_DMA_Abort_IT+0x98>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1e      	ldr	r2, [pc, #120]	@ (8002798 <HAL_DMA_Abort_IT+0xe0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d012      	beq.n	800274a <HAL_DMA_Abort_IT+0x92>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1c      	ldr	r2, [pc, #112]	@ (800279c <HAL_DMA_Abort_IT+0xe4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00a      	beq.n	8002744 <HAL_DMA_Abort_IT+0x8c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a1b      	ldr	r2, [pc, #108]	@ (80027a0 <HAL_DMA_Abort_IT+0xe8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d102      	bne.n	800273e <HAL_DMA_Abort_IT+0x86>
 8002738:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800273c:	e00e      	b.n	800275c <HAL_DMA_Abort_IT+0xa4>
 800273e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002742:	e00b      	b.n	800275c <HAL_DMA_Abort_IT+0xa4>
 8002744:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002748:	e008      	b.n	800275c <HAL_DMA_Abort_IT+0xa4>
 800274a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800274e:	e005      	b.n	800275c <HAL_DMA_Abort_IT+0xa4>
 8002750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002754:	e002      	b.n	800275c <HAL_DMA_Abort_IT+0xa4>
 8002756:	2310      	movs	r3, #16
 8002758:	e000      	b.n	800275c <HAL_DMA_Abort_IT+0xa4>
 800275a:	2301      	movs	r3, #1
 800275c:	4a11      	ldr	r2, [pc, #68]	@ (80027a4 <HAL_DMA_Abort_IT+0xec>)
 800275e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
    } 
  }
  return status;
 8002780:	7bfb      	ldrb	r3, [r7, #15]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40020008 	.word	0x40020008
 8002790:	4002001c 	.word	0x4002001c
 8002794:	40020030 	.word	0x40020030
 8002798:	40020044 	.word	0x40020044
 800279c:	40020058 	.word	0x40020058
 80027a0:	4002006c 	.word	0x4002006c
 80027a4:	40020000 	.word	0x40020000

080027a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b08b      	sub	sp, #44	@ 0x2c
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ba:	e169      	b.n	8002a90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027bc:	2201      	movs	r2, #1
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	f040 8158 	bne.w	8002a8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a9a      	ldr	r2, [pc, #616]	@ (8002a48 <HAL_GPIO_Init+0x2a0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d05e      	beq.n	80028a2 <HAL_GPIO_Init+0xfa>
 80027e4:	4a98      	ldr	r2, [pc, #608]	@ (8002a48 <HAL_GPIO_Init+0x2a0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d875      	bhi.n	80028d6 <HAL_GPIO_Init+0x12e>
 80027ea:	4a98      	ldr	r2, [pc, #608]	@ (8002a4c <HAL_GPIO_Init+0x2a4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d058      	beq.n	80028a2 <HAL_GPIO_Init+0xfa>
 80027f0:	4a96      	ldr	r2, [pc, #600]	@ (8002a4c <HAL_GPIO_Init+0x2a4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d86f      	bhi.n	80028d6 <HAL_GPIO_Init+0x12e>
 80027f6:	4a96      	ldr	r2, [pc, #600]	@ (8002a50 <HAL_GPIO_Init+0x2a8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d052      	beq.n	80028a2 <HAL_GPIO_Init+0xfa>
 80027fc:	4a94      	ldr	r2, [pc, #592]	@ (8002a50 <HAL_GPIO_Init+0x2a8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d869      	bhi.n	80028d6 <HAL_GPIO_Init+0x12e>
 8002802:	4a94      	ldr	r2, [pc, #592]	@ (8002a54 <HAL_GPIO_Init+0x2ac>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d04c      	beq.n	80028a2 <HAL_GPIO_Init+0xfa>
 8002808:	4a92      	ldr	r2, [pc, #584]	@ (8002a54 <HAL_GPIO_Init+0x2ac>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d863      	bhi.n	80028d6 <HAL_GPIO_Init+0x12e>
 800280e:	4a92      	ldr	r2, [pc, #584]	@ (8002a58 <HAL_GPIO_Init+0x2b0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d046      	beq.n	80028a2 <HAL_GPIO_Init+0xfa>
 8002814:	4a90      	ldr	r2, [pc, #576]	@ (8002a58 <HAL_GPIO_Init+0x2b0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d85d      	bhi.n	80028d6 <HAL_GPIO_Init+0x12e>
 800281a:	2b12      	cmp	r3, #18
 800281c:	d82a      	bhi.n	8002874 <HAL_GPIO_Init+0xcc>
 800281e:	2b12      	cmp	r3, #18
 8002820:	d859      	bhi.n	80028d6 <HAL_GPIO_Init+0x12e>
 8002822:	a201      	add	r2, pc, #4	@ (adr r2, 8002828 <HAL_GPIO_Init+0x80>)
 8002824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002828:	080028a3 	.word	0x080028a3
 800282c:	0800287d 	.word	0x0800287d
 8002830:	0800288f 	.word	0x0800288f
 8002834:	080028d1 	.word	0x080028d1
 8002838:	080028d7 	.word	0x080028d7
 800283c:	080028d7 	.word	0x080028d7
 8002840:	080028d7 	.word	0x080028d7
 8002844:	080028d7 	.word	0x080028d7
 8002848:	080028d7 	.word	0x080028d7
 800284c:	080028d7 	.word	0x080028d7
 8002850:	080028d7 	.word	0x080028d7
 8002854:	080028d7 	.word	0x080028d7
 8002858:	080028d7 	.word	0x080028d7
 800285c:	080028d7 	.word	0x080028d7
 8002860:	080028d7 	.word	0x080028d7
 8002864:	080028d7 	.word	0x080028d7
 8002868:	080028d7 	.word	0x080028d7
 800286c:	08002885 	.word	0x08002885
 8002870:	08002899 	.word	0x08002899
 8002874:	4a79      	ldr	r2, [pc, #484]	@ (8002a5c <HAL_GPIO_Init+0x2b4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800287a:	e02c      	b.n	80028d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	623b      	str	r3, [r7, #32]
          break;
 8002882:	e029      	b.n	80028d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	3304      	adds	r3, #4
 800288a:	623b      	str	r3, [r7, #32]
          break;
 800288c:	e024      	b.n	80028d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	3308      	adds	r3, #8
 8002894:	623b      	str	r3, [r7, #32]
          break;
 8002896:	e01f      	b.n	80028d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	330c      	adds	r3, #12
 800289e:	623b      	str	r3, [r7, #32]
          break;
 80028a0:	e01a      	b.n	80028d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d102      	bne.n	80028b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028aa:	2304      	movs	r3, #4
 80028ac:	623b      	str	r3, [r7, #32]
          break;
 80028ae:	e013      	b.n	80028d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028b8:	2308      	movs	r3, #8
 80028ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	611a      	str	r2, [r3, #16]
          break;
 80028c2:	e009      	b.n	80028d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028c4:	2308      	movs	r3, #8
 80028c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	615a      	str	r2, [r3, #20]
          break;
 80028ce:	e003      	b.n	80028d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028d0:	2300      	movs	r3, #0
 80028d2:	623b      	str	r3, [r7, #32]
          break;
 80028d4:	e000      	b.n	80028d8 <HAL_GPIO_Init+0x130>
          break;
 80028d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2bff      	cmp	r3, #255	@ 0xff
 80028dc:	d801      	bhi.n	80028e2 <HAL_GPIO_Init+0x13a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	e001      	b.n	80028e6 <HAL_GPIO_Init+0x13e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3304      	adds	r3, #4
 80028e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2bff      	cmp	r3, #255	@ 0xff
 80028ec:	d802      	bhi.n	80028f4 <HAL_GPIO_Init+0x14c>
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	e002      	b.n	80028fa <HAL_GPIO_Init+0x152>
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	3b08      	subs	r3, #8
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	210f      	movs	r1, #15
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	401a      	ands	r2, r3
 800290c:	6a39      	ldr	r1, [r7, #32]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	fa01 f303 	lsl.w	r3, r1, r3
 8002914:	431a      	orrs	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80b1 	beq.w	8002a8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002928:	4b4d      	ldr	r3, [pc, #308]	@ (8002a60 <HAL_GPIO_Init+0x2b8>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4a4c      	ldr	r2, [pc, #304]	@ (8002a60 <HAL_GPIO_Init+0x2b8>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6193      	str	r3, [r2, #24]
 8002934:	4b4a      	ldr	r3, [pc, #296]	@ (8002a60 <HAL_GPIO_Init+0x2b8>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002940:	4a48      	ldr	r2, [pc, #288]	@ (8002a64 <HAL_GPIO_Init+0x2bc>)
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	3302      	adds	r3, #2
 8002948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	220f      	movs	r2, #15
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4013      	ands	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a40      	ldr	r2, [pc, #256]	@ (8002a68 <HAL_GPIO_Init+0x2c0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d013      	beq.n	8002994 <HAL_GPIO_Init+0x1ec>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a6c <HAL_GPIO_Init+0x2c4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00d      	beq.n	8002990 <HAL_GPIO_Init+0x1e8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a3e      	ldr	r2, [pc, #248]	@ (8002a70 <HAL_GPIO_Init+0x2c8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d007      	beq.n	800298c <HAL_GPIO_Init+0x1e4>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a74 <HAL_GPIO_Init+0x2cc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d101      	bne.n	8002988 <HAL_GPIO_Init+0x1e0>
 8002984:	2303      	movs	r3, #3
 8002986:	e006      	b.n	8002996 <HAL_GPIO_Init+0x1ee>
 8002988:	2304      	movs	r3, #4
 800298a:	e004      	b.n	8002996 <HAL_GPIO_Init+0x1ee>
 800298c:	2302      	movs	r3, #2
 800298e:	e002      	b.n	8002996 <HAL_GPIO_Init+0x1ee>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <HAL_GPIO_Init+0x1ee>
 8002994:	2300      	movs	r3, #0
 8002996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002998:	f002 0203 	and.w	r2, r2, #3
 800299c:	0092      	lsls	r2, r2, #2
 800299e:	4093      	lsls	r3, r2
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029a6:	492f      	ldr	r1, [pc, #188]	@ (8002a64 <HAL_GPIO_Init+0x2bc>)
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d006      	beq.n	80029ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a78 <HAL_GPIO_Init+0x2d0>)
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	492c      	ldr	r1, [pc, #176]	@ (8002a78 <HAL_GPIO_Init+0x2d0>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]
 80029cc:	e006      	b.n	80029dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002a78 <HAL_GPIO_Init+0x2d0>)
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	4928      	ldr	r1, [pc, #160]	@ (8002a78 <HAL_GPIO_Init+0x2d0>)
 80029d8:	4013      	ands	r3, r2
 80029da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d006      	beq.n	80029f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029e8:	4b23      	ldr	r3, [pc, #140]	@ (8002a78 <HAL_GPIO_Init+0x2d0>)
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	4922      	ldr	r1, [pc, #136]	@ (8002a78 <HAL_GPIO_Init+0x2d0>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60cb      	str	r3, [r1, #12]
 80029f4:	e006      	b.n	8002a04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029f6:	4b20      	ldr	r3, [pc, #128]	@ (8002a78 <HAL_GPIO_Init+0x2d0>)
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	491e      	ldr	r1, [pc, #120]	@ (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d006      	beq.n	8002a1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a10:	4b19      	ldr	r3, [pc, #100]	@ (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	4918      	ldr	r1, [pc, #96]	@ (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a1e:	4b16      	ldr	r3, [pc, #88]	@ (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	4914      	ldr	r1, [pc, #80]	@ (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d021      	beq.n	8002a7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a38:	4b0f      	ldr	r3, [pc, #60]	@ (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	490e      	ldr	r1, [pc, #56]	@ (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]
 8002a44:	e021      	b.n	8002a8a <HAL_GPIO_Init+0x2e2>
 8002a46:	bf00      	nop
 8002a48:	10320000 	.word	0x10320000
 8002a4c:	10310000 	.word	0x10310000
 8002a50:	10220000 	.word	0x10220000
 8002a54:	10210000 	.word	0x10210000
 8002a58:	10120000 	.word	0x10120000
 8002a5c:	10110000 	.word	0x10110000
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40010800 	.word	0x40010800
 8002a6c:	40010c00 	.word	0x40010c00
 8002a70:	40011000 	.word	0x40011000
 8002a74:	40011400 	.word	0x40011400
 8002a78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_GPIO_Init+0x304>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	4909      	ldr	r1, [pc, #36]	@ (8002aac <HAL_GPIO_Init+0x304>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f47f ae8e 	bne.w	80027bc <HAL_GPIO_Init+0x14>
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	372c      	adds	r7, #44	@ 0x2c
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	40010400 	.word	0x40010400

08002ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
 8002acc:	e001      	b.n	8002ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	807b      	strh	r3, [r7, #2]
 8002aea:	4613      	mov	r3, r2
 8002aec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aee:	787b      	ldrb	r3, [r7, #1]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002af4:	887a      	ldrh	r2, [r7, #2]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002afa:	e003      	b.n	8002b04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002afc:	887b      	ldrh	r3, [r7, #2]
 8002afe:	041a      	lsls	r2, r3, #16
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	611a      	str	r2, [r3, #16]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b20:	887a      	ldrh	r2, [r7, #2]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4013      	ands	r3, r2
 8002b26:	041a      	lsls	r2, r3, #16
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	43d9      	mvns	r1, r3
 8002b2c:	887b      	ldrh	r3, [r7, #2]
 8002b2e:	400b      	ands	r3, r1
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	611a      	str	r2, [r3, #16]
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b4a:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d006      	beq.n	8002b64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b56:	4a05      	ldr	r2, [pc, #20]	@ (8002b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe fdf4 	bl	800174c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40010400 	.word	0x40010400

08002b70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e12b      	b.n	8002dda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff f9e0 	bl	8001f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2224      	movs	r2, #36	@ 0x24
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0201 	bic.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bd4:	f001 fd0e 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 8002bd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4a81      	ldr	r2, [pc, #516]	@ (8002de4 <HAL_I2C_Init+0x274>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d807      	bhi.n	8002bf4 <HAL_I2C_Init+0x84>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a80      	ldr	r2, [pc, #512]	@ (8002de8 <HAL_I2C_Init+0x278>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	bf94      	ite	ls
 8002bec:	2301      	movls	r3, #1
 8002bee:	2300      	movhi	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	e006      	b.n	8002c02 <HAL_I2C_Init+0x92>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4a7d      	ldr	r2, [pc, #500]	@ (8002dec <HAL_I2C_Init+0x27c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	bf94      	ite	ls
 8002bfc:	2301      	movls	r3, #1
 8002bfe:	2300      	movhi	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0e7      	b.n	8002dda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4a78      	ldr	r2, [pc, #480]	@ (8002df0 <HAL_I2C_Init+0x280>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	0c9b      	lsrs	r3, r3, #18
 8002c14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a6a      	ldr	r2, [pc, #424]	@ (8002de4 <HAL_I2C_Init+0x274>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d802      	bhi.n	8002c44 <HAL_I2C_Init+0xd4>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	3301      	adds	r3, #1
 8002c42:	e009      	b.n	8002c58 <HAL_I2C_Init+0xe8>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	4a69      	ldr	r2, [pc, #420]	@ (8002df4 <HAL_I2C_Init+0x284>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	099b      	lsrs	r3, r3, #6
 8002c56:	3301      	adds	r3, #1
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	495c      	ldr	r1, [pc, #368]	@ (8002de4 <HAL_I2C_Init+0x274>)
 8002c74:	428b      	cmp	r3, r1
 8002c76:	d819      	bhi.n	8002cac <HAL_I2C_Init+0x13c>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1e59      	subs	r1, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c86:	1c59      	adds	r1, r3, #1
 8002c88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c8c:	400b      	ands	r3, r1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_I2C_Init+0x138>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1e59      	subs	r1, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca6:	e051      	b.n	8002d4c <HAL_I2C_Init+0x1dc>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	e04f      	b.n	8002d4c <HAL_I2C_Init+0x1dc>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d111      	bne.n	8002cd8 <HAL_I2C_Init+0x168>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1e58      	subs	r0, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6859      	ldr	r1, [r3, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	440b      	add	r3, r1
 8002cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e012      	b.n	8002cfe <HAL_I2C_Init+0x18e>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1e58      	subs	r0, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	0099      	lsls	r1, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Init+0x196>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e022      	b.n	8002d4c <HAL_I2C_Init+0x1dc>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10e      	bne.n	8002d2c <HAL_I2C_Init+0x1bc>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1e58      	subs	r0, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	440b      	add	r3, r1
 8002d1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d2a:	e00f      	b.n	8002d4c <HAL_I2C_Init+0x1dc>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1e58      	subs	r0, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	0099      	lsls	r1, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	6809      	ldr	r1, [r1, #0]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6911      	ldr	r1, [r2, #16]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68d2      	ldr	r2, [r2, #12]
 8002d86:	4311      	orrs	r1, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	000186a0 	.word	0x000186a0
 8002de8:	001e847f 	.word	0x001e847f
 8002dec:	003d08ff 	.word	0x003d08ff
 8002df0:	431bde83 	.word	0x431bde83
 8002df4:	10624dd3 	.word	0x10624dd3

08002df8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	461a      	mov	r2, r3
 8002e04:	460b      	mov	r3, r1
 8002e06:	817b      	strh	r3, [r7, #10]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e0c:	f7ff fade 	bl	80023cc <HAL_GetTick>
 8002e10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	f040 80e0 	bne.w	8002fe0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	2319      	movs	r3, #25
 8002e26:	2201      	movs	r2, #1
 8002e28:	4970      	ldr	r1, [pc, #448]	@ (8002fec <HAL_I2C_Master_Transmit+0x1f4>)
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fde2 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e36:	2302      	movs	r3, #2
 8002e38:	e0d3      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_I2C_Master_Transmit+0x50>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e0cc      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ea>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d007      	beq.n	8002e6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0201 	orr.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2221      	movs	r2, #33	@ 0x21
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2210      	movs	r2, #16
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	893a      	ldrh	r2, [r7, #8]
 8002e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a50      	ldr	r2, [pc, #320]	@ (8002ff0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002eae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002eb0:	8979      	ldrh	r1, [r7, #10]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	6a3a      	ldr	r2, [r7, #32]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fc32 	bl	8003720 <I2C_MasterRequestWrite>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e08d      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002edc:	e066      	b.n	8002fac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	6a39      	ldr	r1, [r7, #32]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fea0 	bl	8003c28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00d      	beq.n	8002f0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d107      	bne.n	8002f06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e06b      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	781a      	ldrb	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d11b      	bne.n	8002f80 <HAL_I2C_Master_Transmit+0x188>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d017      	beq.n	8002f80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	781a      	ldrb	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	6a39      	ldr	r1, [r7, #32]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fe97 	bl	8003cb8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00d      	beq.n	8002fac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d107      	bne.n	8002fa8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fa6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e01a      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d194      	bne.n	8002ede <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	00100002 	.word	0x00100002
 8002ff0:	ffff0000 	.word	0xffff0000

08002ff4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08c      	sub	sp, #48	@ 0x30
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	461a      	mov	r2, r3
 8003002:	4603      	mov	r3, r0
 8003004:	817b      	strh	r3, [r7, #10]
 8003006:	460b      	mov	r3, r1
 8003008:	813b      	strh	r3, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003012:	f7ff f9db 	bl	80023cc <HAL_GetTick>
 8003016:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b20      	cmp	r3, #32
 8003022:	f040 8244 	bne.w	80034ae <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	2319      	movs	r3, #25
 800302c:	2201      	movs	r2, #1
 800302e:	4982      	ldr	r1, [pc, #520]	@ (8003238 <HAL_I2C_Mem_Read+0x244>)
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fcdf 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
 800303e:	e237      	b.n	80034b0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_I2C_Mem_Read+0x5a>
 800304a:	2302      	movs	r3, #2
 800304c:	e230      	b.n	80034b0 <HAL_I2C_Mem_Read+0x4bc>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d007      	beq.n	8003074 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003082:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2222      	movs	r2, #34	@ 0x22
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2240      	movs	r2, #64	@ 0x40
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800309e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80030a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4a62      	ldr	r2, [pc, #392]	@ (800323c <HAL_I2C_Mem_Read+0x248>)
 80030b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030b6:	88f8      	ldrh	r0, [r7, #6]
 80030b8:	893a      	ldrh	r2, [r7, #8]
 80030ba:	8979      	ldrh	r1, [r7, #10]
 80030bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	4603      	mov	r3, r0
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fbac 	bl	8003824 <I2C_RequestMemoryRead>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e1ec      	b.n	80034b0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d113      	bne.n	8003106 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	e1c0      	b.n	8003488 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310a:	2b01      	cmp	r3, #1
 800310c:	d11e      	bne.n	800314c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800311c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800311e:	b672      	cpsid	i
}
 8003120:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003122:	2300      	movs	r3, #0
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003146:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003148:	b662      	cpsie	i
}
 800314a:	e035      	b.n	80031b8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003150:	2b02      	cmp	r3, #2
 8003152:	d11e      	bne.n	8003192 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003162:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003164:	b672      	cpsid	i
}
 8003166:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800318c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800318e:	b662      	cpsie	i
}
 8003190:	e012      	b.n	80031b8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031a0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80031b8:	e166      	b.n	8003488 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	2b03      	cmp	r3, #3
 80031c0:	f200 811f 	bhi.w	8003402 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d123      	bne.n	8003214 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 fdb9 	bl	8003d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e167      	b.n	80034b0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003212:	e139      	b.n	8003488 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003218:	2b02      	cmp	r3, #2
 800321a:	d152      	bne.n	80032c2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800321c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003222:	2200      	movs	r2, #0
 8003224:	4906      	ldr	r1, [pc, #24]	@ (8003240 <HAL_I2C_Mem_Read+0x24c>)
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fbe4 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e13c      	b.n	80034b0 <HAL_I2C_Mem_Read+0x4bc>
 8003236:	bf00      	nop
 8003238:	00100002 	.word	0x00100002
 800323c:	ffff0000 	.word	0xffff0000
 8003240:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003244:	b672      	cpsid	i
}
 8003246:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003256:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800328a:	b662      	cpsie	i
}
 800328c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032c0:	e0e2      	b.n	8003488 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c8:	2200      	movs	r2, #0
 80032ca:	497b      	ldr	r1, [pc, #492]	@ (80034b8 <HAL_I2C_Mem_Read+0x4c4>)
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fb91 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0e9      	b.n	80034b0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032ec:	b672      	cpsid	i
}
 80032ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003322:	4b66      	ldr	r3, [pc, #408]	@ (80034bc <HAL_I2C_Mem_Read+0x4c8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	08db      	lsrs	r3, r3, #3
 8003328:	4a65      	ldr	r2, [pc, #404]	@ (80034c0 <HAL_I2C_Mem_Read+0x4cc>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	0a1a      	lsrs	r2, r3, #8
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	00da      	lsls	r2, r3, #3
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	3b01      	subs	r3, #1
 8003340:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d118      	bne.n	800337a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800336a:	b662      	cpsie	i
}
 800336c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e09a      	b.n	80034b0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b04      	cmp	r3, #4
 8003386:	d1d9      	bne.n	800333c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033ca:	b662      	cpsie	i
}
 80033cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003400:	e042      	b.n	8003488 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003404:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 fc9e 	bl	8003d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e04c      	b.n	80034b0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b04      	cmp	r3, #4
 8003454:	d118      	bne.n	8003488 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348c:	2b00      	cmp	r3, #0
 800348e:	f47f ae94 	bne.w	80031ba <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e000      	b.n	80034b0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80034ae:	2302      	movs	r3, #2
  }
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3728      	adds	r7, #40	@ 0x28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	00010004 	.word	0x00010004
 80034bc:	200000c0 	.word	0x200000c0
 80034c0:	14f8b589 	.word	0x14f8b589

080034c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	@ 0x28
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	460b      	mov	r3, r1
 80034d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80034d4:	f7fe ff7a 	bl	80023cc <HAL_GetTick>
 80034d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	f040 8111 	bne.w	800370e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	2319      	movs	r3, #25
 80034f2:	2201      	movs	r2, #1
 80034f4:	4988      	ldr	r1, [pc, #544]	@ (8003718 <HAL_I2C_IsDeviceReady+0x254>)
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fa7c 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003502:	2302      	movs	r3, #2
 8003504:	e104      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_I2C_IsDeviceReady+0x50>
 8003510:	2302      	movs	r3, #2
 8003512:	e0fd      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x24c>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d007      	beq.n	800353a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003548:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2224      	movs	r2, #36	@ 0x24
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4a70      	ldr	r2, [pc, #448]	@ (800371c <HAL_I2C_IsDeviceReady+0x258>)
 800355c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800356c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2200      	movs	r2, #0
 8003576:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fa3a 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003594:	d103      	bne.n	800359e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800359c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0b6      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035a2:	897b      	ldrh	r3, [r7, #10]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80035b2:	f7fe ff0b 	bl	80023cc <HAL_GetTick>
 80035b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035e6:	e025      	b.n	8003634 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035e8:	f7fe fef0 	bl	80023cc <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d302      	bcc.n	80035fe <HAL_I2C_IsDeviceReady+0x13a>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d103      	bne.n	8003606 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	22a0      	movs	r2, #160	@ 0xa0
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b02      	cmp	r3, #2
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2ba0      	cmp	r3, #160	@ 0xa0
 800363e:	d005      	beq.n	800364c <HAL_I2C_IsDeviceReady+0x188>
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <HAL_I2C_IsDeviceReady+0x188>
 8003646:	7dbb      	ldrb	r3, [r7, #22]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0cd      	beq.n	80035e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b02      	cmp	r3, #2
 8003660:	d129      	bne.n	80036b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003670:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2319      	movs	r3, #25
 800368e:	2201      	movs	r2, #1
 8003690:	4921      	ldr	r1, [pc, #132]	@ (8003718 <HAL_I2C_IsDeviceReady+0x254>)
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f9ae 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e036      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e02c      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2319      	movs	r3, #25
 80036d6:	2201      	movs	r2, #1
 80036d8:	490f      	ldr	r1, [pc, #60]	@ (8003718 <HAL_I2C_IsDeviceReady+0x254>)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f98a 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e012      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	f4ff af32 	bcc.w	800355e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800370e:	2302      	movs	r3, #2
  }
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	00100002 	.word	0x00100002
 800371c:	ffff0000 	.word	0xffff0000

08003720 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	460b      	mov	r3, r1
 800372e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003734:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d006      	beq.n	800374a <I2C_MasterRequestWrite+0x2a>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d003      	beq.n	800374a <I2C_MasterRequestWrite+0x2a>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003748:	d108      	bne.n	800375c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e00b      	b.n	8003774 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003760:	2b12      	cmp	r3, #18
 8003762:	d107      	bne.n	8003774 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003772:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f937 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00d      	beq.n	80037a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800379a:	d103      	bne.n	80037a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e035      	b.n	8003814 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037b0:	d108      	bne.n	80037c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037b2:	897b      	ldrh	r3, [r7, #10]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037c0:	611a      	str	r2, [r3, #16]
 80037c2:	e01b      	b.n	80037fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037c4:	897b      	ldrh	r3, [r7, #10]
 80037c6:	11db      	asrs	r3, r3, #7
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	f003 0306 	and.w	r3, r3, #6
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f063 030f 	orn	r3, r3, #15
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	490e      	ldr	r1, [pc, #56]	@ (800381c <I2C_MasterRequestWrite+0xfc>)
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f980 	bl	8003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e010      	b.n	8003814 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037f2:	897b      	ldrh	r3, [r7, #10]
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4907      	ldr	r1, [pc, #28]	@ (8003820 <I2C_MasterRequestWrite+0x100>)
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f970 	bl	8003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	00010008 	.word	0x00010008
 8003820:	00010002 	.word	0x00010002

08003824 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	4608      	mov	r0, r1
 800382e:	4611      	mov	r1, r2
 8003830:	461a      	mov	r2, r3
 8003832:	4603      	mov	r3, r0
 8003834:	817b      	strh	r3, [r7, #10]
 8003836:	460b      	mov	r3, r1
 8003838:	813b      	strh	r3, [r7, #8]
 800383a:	4613      	mov	r3, r2
 800383c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800384c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800385c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	2200      	movs	r2, #0
 8003866:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f8c2 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003884:	d103      	bne.n	800388e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800388c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0aa      	b.n	80039e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003892:	897b      	ldrh	r3, [r7, #10]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	6a3a      	ldr	r2, [r7, #32]
 80038a6:	4952      	ldr	r1, [pc, #328]	@ (80039f0 <I2C_RequestMemoryRead+0x1cc>)
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f91d 	bl	8003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e097      	b.n	80039e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d0:	6a39      	ldr	r1, [r7, #32]
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f9a8 	bl	8003c28 <I2C_WaitOnTXEFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00d      	beq.n	80038fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d107      	bne.n	80038f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e076      	b.n	80039e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d105      	bne.n	800390c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003900:	893b      	ldrh	r3, [r7, #8]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	611a      	str	r2, [r3, #16]
 800390a:	e021      	b.n	8003950 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800390c:	893b      	ldrh	r3, [r7, #8]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	b29b      	uxth	r3, r3
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800391a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800391c:	6a39      	ldr	r1, [r7, #32]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f982 	bl	8003c28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00d      	beq.n	8003946 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	2b04      	cmp	r3, #4
 8003930:	d107      	bne.n	8003942 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003940:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e050      	b.n	80039e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003946:	893b      	ldrh	r3, [r7, #8]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003952:	6a39      	ldr	r1, [r7, #32]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f967 	bl	8003c28 <I2C_WaitOnTXEFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	2b04      	cmp	r3, #4
 8003966:	d107      	bne.n	8003978 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003976:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e035      	b.n	80039e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800398a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	2200      	movs	r2, #0
 8003994:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f82b 	bl	80039f4 <I2C_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00d      	beq.n	80039c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039b2:	d103      	bne.n	80039bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e013      	b.n	80039e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039c0:	897b      	ldrh	r3, [r7, #10]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	6a3a      	ldr	r2, [r7, #32]
 80039d4:	4906      	ldr	r1, [pc, #24]	@ (80039f0 <I2C_RequestMemoryRead+0x1cc>)
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f886 	bl	8003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	00010002 	.word	0x00010002

080039f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a04:	e048      	b.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d044      	beq.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0e:	f7fe fcdd 	bl	80023cc <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d302      	bcc.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d139      	bne.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d10d      	bne.n	8003a4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	43da      	mvns	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf0c      	ite	eq
 8003a40:	2301      	moveq	r3, #1
 8003a42:	2300      	movne	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	e00c      	b.n	8003a64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	43da      	mvns	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4013      	ands	r3, r2
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d116      	bne.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	f043 0220 	orr.w	r2, r3, #32
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e023      	b.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	0c1b      	lsrs	r3, r3, #16
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d10d      	bne.n	8003abe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	43da      	mvns	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4013      	ands	r3, r2
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	e00c      	b.n	8003ad8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	43da      	mvns	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d093      	beq.n	8003a06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003af6:	e071      	b.n	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b06:	d123      	bne.n	8003b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	f043 0204 	orr.w	r2, r3, #4
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e067      	b.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d041      	beq.n	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b58:	f7fe fc38 	bl	80023cc <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d302      	bcc.n	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d136      	bne.n	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	0c1b      	lsrs	r3, r3, #16
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d10c      	bne.n	8003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4013      	ands	r3, r2
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bf14      	ite	ne
 8003b8a:	2301      	movne	r3, #1
 8003b8c:	2300      	moveq	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	e00b      	b.n	8003baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	43da      	mvns	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf14      	ite	ne
 8003ba4:	2301      	movne	r3, #1
 8003ba6:	2300      	moveq	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d016      	beq.n	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc8:	f043 0220 	orr.w	r2, r3, #32
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e021      	b.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	0c1b      	lsrs	r3, r3, #16
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d10c      	bne.n	8003c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	43da      	mvns	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf14      	ite	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	e00b      	b.n	8003c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	43da      	mvns	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	bf14      	ite	ne
 8003c12:	2301      	movne	r3, #1
 8003c14:	2300      	moveq	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f47f af6d 	bne.w	8003af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c34:	e034      	b.n	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f8e3 	bl	8003e02 <I2C_IsAcknowledgeFailed>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e034      	b.n	8003cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d028      	beq.n	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4e:	f7fe fbbd 	bl	80023cc <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d302      	bcc.n	8003c64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d11d      	bne.n	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6e:	2b80      	cmp	r3, #128	@ 0x80
 8003c70:	d016      	beq.n	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e007      	b.n	8003cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003caa:	2b80      	cmp	r3, #128	@ 0x80
 8003cac:	d1c3      	bne.n	8003c36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cc4:	e034      	b.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f89b 	bl	8003e02 <I2C_IsAcknowledgeFailed>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e034      	b.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d028      	beq.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cde:	f7fe fb75 	bl	80023cc <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d302      	bcc.n	8003cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d11d      	bne.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d016      	beq.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	f043 0220 	orr.w	r2, r3, #32
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e007      	b.n	8003d40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d1c3      	bne.n	8003cc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d54:	e049      	b.n	8003dea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d119      	bne.n	8003d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0210 	mvn.w	r2, #16
 8003d6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e030      	b.n	8003dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d98:	f7fe fb18 	bl	80023cc <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d302      	bcc.n	8003dae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d11d      	bne.n	8003dea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db8:	2b40      	cmp	r3, #64	@ 0x40
 8003dba:	d016      	beq.n	8003dea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	f043 0220 	orr.w	r2, r3, #32
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e007      	b.n	8003dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df4:	2b40      	cmp	r3, #64	@ 0x40
 8003df6:	d1ae      	bne.n	8003d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e18:	d11b      	bne.n	8003e52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	f043 0204 	orr.w	r2, r3, #4
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e272      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 8087 	beq.w	8003f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e80:	4b92      	ldr	r3, [pc, #584]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d00c      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e8c:	4b8f      	ldr	r3, [pc, #572]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d112      	bne.n	8003ebe <HAL_RCC_OscConfig+0x5e>
 8003e98:	4b8c      	ldr	r3, [pc, #560]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea4:	d10b      	bne.n	8003ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea6:	4b89      	ldr	r3, [pc, #548]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d06c      	beq.n	8003f8c <HAL_RCC_OscConfig+0x12c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d168      	bne.n	8003f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e24c      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec6:	d106      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x76>
 8003ec8:	4b80      	ldr	r3, [pc, #512]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a7f      	ldr	r2, [pc, #508]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	e02e      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x98>
 8003ede:	4b7b      	ldr	r3, [pc, #492]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7a      	ldr	r2, [pc, #488]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b78      	ldr	r3, [pc, #480]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a77      	ldr	r2, [pc, #476]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e01d      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCC_OscConfig+0xbc>
 8003f02:	4b72      	ldr	r3, [pc, #456]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a71      	ldr	r2, [pc, #452]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a6e      	ldr	r2, [pc, #440]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003f1c:	4b6b      	ldr	r3, [pc, #428]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a6a      	ldr	r2, [pc, #424]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	4b68      	ldr	r3, [pc, #416]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a67      	ldr	r2, [pc, #412]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d013      	beq.n	8003f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fe fa46 	bl	80023cc <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fe fa42 	bl	80023cc <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	@ 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e200      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	4b5d      	ldr	r3, [pc, #372]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0xe4>
 8003f62:	e014      	b.n	8003f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fe fa32 	bl	80023cc <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7fe fa2e 	bl	80023cc <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	@ 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e1ec      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7e:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x10c>
 8003f8a:	e000      	b.n	8003f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d063      	beq.n	8004062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fa6:	4b49      	ldr	r3, [pc, #292]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d11c      	bne.n	8003fec <HAL_RCC_OscConfig+0x18c>
 8003fb2:	4b46      	ldr	r3, [pc, #280]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d116      	bne.n	8003fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	4b43      	ldr	r3, [pc, #268]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x176>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e1c0      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4939      	ldr	r1, [pc, #228]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fea:	e03a      	b.n	8004062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	4b36      	ldr	r3, [pc, #216]	@ (80040d0 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffa:	f7fe f9e7 	bl	80023cc <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004002:	f7fe f9e3 	bl	80023cc <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e1a1      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	4b2d      	ldr	r3, [pc, #180]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4b2a      	ldr	r3, [pc, #168]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4927      	ldr	r1, [pc, #156]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
 8004034:	e015      	b.n	8004062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004036:	4b26      	ldr	r3, [pc, #152]	@ (80040d0 <HAL_RCC_OscConfig+0x270>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fe f9c6 	bl	80023cc <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004044:	f7fe f9c2 	bl	80023cc <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e180      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	4b1d      	ldr	r3, [pc, #116]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d03a      	beq.n	80040e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d019      	beq.n	80040aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004076:	4b17      	ldr	r3, [pc, #92]	@ (80040d4 <HAL_RCC_OscConfig+0x274>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407c:	f7fe f9a6 	bl	80023cc <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004084:	f7fe f9a2 	bl	80023cc <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e160      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	4b0d      	ldr	r3, [pc, #52]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040a2:	2001      	movs	r0, #1
 80040a4:	f000 face 	bl	8004644 <RCC_Delay>
 80040a8:	e01c      	b.n	80040e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040aa:	4b0a      	ldr	r3, [pc, #40]	@ (80040d4 <HAL_RCC_OscConfig+0x274>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b0:	f7fe f98c 	bl	80023cc <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b6:	e00f      	b.n	80040d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b8:	f7fe f988 	bl	80023cc <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d908      	bls.n	80040d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e146      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	42420000 	.word	0x42420000
 80040d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	4b92      	ldr	r3, [pc, #584]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e9      	bne.n	80040b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80a6 	beq.w	800423e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f6:	4b8b      	ldr	r3, [pc, #556]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10d      	bne.n	800411e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	4b88      	ldr	r3, [pc, #544]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4a87      	ldr	r2, [pc, #540]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800410c:	61d3      	str	r3, [r2, #28]
 800410e:	4b85      	ldr	r3, [pc, #532]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	4b82      	ldr	r3, [pc, #520]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d118      	bne.n	800415c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412a:	4b7f      	ldr	r3, [pc, #508]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7e      	ldr	r2, [pc, #504]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7fe f949 	bl	80023cc <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413e:	f7fe f945 	bl	80023cc <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	@ 0x64
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e103      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	4b75      	ldr	r3, [pc, #468]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d106      	bne.n	8004172 <HAL_RCC_OscConfig+0x312>
 8004164:	4b6f      	ldr	r3, [pc, #444]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	4a6e      	ldr	r2, [pc, #440]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6213      	str	r3, [r2, #32]
 8004170:	e02d      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0x334>
 800417a:	4b6a      	ldr	r3, [pc, #424]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	4a69      	ldr	r2, [pc, #420]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	6213      	str	r3, [r2, #32]
 8004186:	4b67      	ldr	r3, [pc, #412]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	4a66      	ldr	r2, [pc, #408]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	6213      	str	r3, [r2, #32]
 8004192:	e01c      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b05      	cmp	r3, #5
 800419a:	d10c      	bne.n	80041b6 <HAL_RCC_OscConfig+0x356>
 800419c:	4b61      	ldr	r3, [pc, #388]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	4a60      	ldr	r2, [pc, #384]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	6213      	str	r3, [r2, #32]
 80041a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	4a5d      	ldr	r2, [pc, #372]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6213      	str	r3, [r2, #32]
 80041b4:	e00b      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 80041b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	4a5a      	ldr	r2, [pc, #360]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	6213      	str	r3, [r2, #32]
 80041c2:	4b58      	ldr	r3, [pc, #352]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	4a57      	ldr	r2, [pc, #348]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	f023 0304 	bic.w	r3, r3, #4
 80041cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d015      	beq.n	8004202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d6:	f7fe f8f9 	bl	80023cc <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fe f8f5 	bl	80023cc <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e0b1      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ee      	beq.n	80041de <HAL_RCC_OscConfig+0x37e>
 8004200:	e014      	b.n	800422c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004202:	f7fe f8e3 	bl	80023cc <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004208:	e00a      	b.n	8004220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7fe f8df 	bl	80023cc <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e09b      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004220:	4b40      	ldr	r3, [pc, #256]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ee      	bne.n	800420a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004232:	4b3c      	ldr	r3, [pc, #240]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	4a3b      	ldr	r2, [pc, #236]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800423c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8087 	beq.w	8004356 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004248:	4b36      	ldr	r3, [pc, #216]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d061      	beq.n	8004318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d146      	bne.n	80042ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425c:	4b33      	ldr	r3, [pc, #204]	@ (800432c <HAL_RCC_OscConfig+0x4cc>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004262:	f7fe f8b3 	bl	80023cc <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426a:	f7fe f8af 	bl	80023cc <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e06d      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800427c:	4b29      	ldr	r3, [pc, #164]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f0      	bne.n	800426a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004290:	d108      	bne.n	80042a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004292:	4b24      	ldr	r3, [pc, #144]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4921      	ldr	r1, [pc, #132]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a19      	ldr	r1, [r3, #32]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	430b      	orrs	r3, r1
 80042b6:	491b      	ldr	r1, [pc, #108]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042bc:	4b1b      	ldr	r3, [pc, #108]	@ (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c2:	f7fe f883 	bl	80023cc <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ca:	f7fe f87f 	bl	80023cc <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e03d      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042dc:	4b11      	ldr	r3, [pc, #68]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x46a>
 80042e8:	e035      	b.n	8004356 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ea:	4b10      	ldr	r3, [pc, #64]	@ (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fe f86c 	bl	80023cc <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f8:	f7fe f868 	bl	80023cc <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e026      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800430a:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x498>
 8004316:	e01e      	b.n	8004356 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d107      	bne.n	8004330 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e019      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
 8004324:	40021000 	.word	0x40021000
 8004328:	40007000 	.word	0x40007000
 800432c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004330:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <HAL_RCC_OscConfig+0x500>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	429a      	cmp	r2, r3
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d001      	beq.n	8004356 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000

08004364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0d0      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004378:	4b6a      	ldr	r3, [pc, #424]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d910      	bls.n	80043a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b67      	ldr	r3, [pc, #412]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 0207 	bic.w	r2, r3, #7
 800438e:	4965      	ldr	r1, [pc, #404]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b63      	ldr	r3, [pc, #396]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0b8      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c0:	4b59      	ldr	r3, [pc, #356]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4a58      	ldr	r2, [pc, #352]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043d8:	4b53      	ldr	r3, [pc, #332]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a52      	ldr	r2, [pc, #328]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80043e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e4:	4b50      	ldr	r3, [pc, #320]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	494d      	ldr	r1, [pc, #308]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d040      	beq.n	8004484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d107      	bne.n	800441a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	4b47      	ldr	r3, [pc, #284]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d115      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e07f      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004422:	4b41      	ldr	r3, [pc, #260]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e073      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004432:	4b3d      	ldr	r3, [pc, #244]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e06b      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004442:	4b39      	ldr	r3, [pc, #228]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4936      	ldr	r1, [pc, #216]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004454:	f7fd ffba 	bl	80023cc <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	e00a      	b.n	8004472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445c:	f7fd ffb6 	bl	80023cc <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e053      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	4b2d      	ldr	r3, [pc, #180]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 020c 	and.w	r2, r3, #12
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	429a      	cmp	r2, r3
 8004482:	d1eb      	bne.n	800445c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004484:	4b27      	ldr	r3, [pc, #156]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d210      	bcs.n	80044b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b24      	ldr	r3, [pc, #144]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 0207 	bic.w	r2, r3, #7
 800449a:	4922      	ldr	r1, [pc, #136]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a2:	4b20      	ldr	r3, [pc, #128]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e032      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c0:	4b19      	ldr	r3, [pc, #100]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4916      	ldr	r1, [pc, #88]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044de:	4b12      	ldr	r3, [pc, #72]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	490e      	ldr	r1, [pc, #56]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044f2:	f000 f821 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80044f6:	4602      	mov	r2, r0
 80044f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	490a      	ldr	r1, [pc, #40]	@ (800452c <HAL_RCC_ClockConfig+0x1c8>)
 8004504:	5ccb      	ldrb	r3, [r1, r3]
 8004506:	fa22 f303 	lsr.w	r3, r2, r3
 800450a:	4a09      	ldr	r2, [pc, #36]	@ (8004530 <HAL_RCC_ClockConfig+0x1cc>)
 800450c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800450e:	4b09      	ldr	r3, [pc, #36]	@ (8004534 <HAL_RCC_ClockConfig+0x1d0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fd ff18 	bl	8002348 <HAL_InitTick>

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40022000 	.word	0x40022000
 8004528:	40021000 	.word	0x40021000
 800452c:	080069b0 	.word	0x080069b0
 8004530:	200000c0 	.word	0x200000c0
 8004534:	200000c4 	.word	0x200000c4

08004538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	2300      	movs	r3, #0
 800454c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004552:	4b1e      	ldr	r3, [pc, #120]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b04      	cmp	r3, #4
 8004560:	d002      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x30>
 8004562:	2b08      	cmp	r3, #8
 8004564:	d003      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x36>
 8004566:	e027      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004568:	4b19      	ldr	r3, [pc, #100]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800456a:	613b      	str	r3, [r7, #16]
      break;
 800456c:	e027      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	0c9b      	lsrs	r3, r3, #18
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	4a17      	ldr	r2, [pc, #92]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004578:	5cd3      	ldrb	r3, [r2, r3]
 800457a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d010      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004586:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	0c5b      	lsrs	r3, r3, #17
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	4a11      	ldr	r2, [pc, #68]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004592:	5cd3      	ldrb	r3, [r2, r3]
 8004594:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a0d      	ldr	r2, [pc, #52]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800459a:	fb03 f202 	mul.w	r2, r3, r2
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	e004      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a0c      	ldr	r2, [pc, #48]	@ (80045dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80045ac:	fb02 f303 	mul.w	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	613b      	str	r3, [r7, #16]
      break;
 80045b6:	e002      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045b8:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80045ba:	613b      	str	r3, [r7, #16]
      break;
 80045bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045be:	693b      	ldr	r3, [r7, #16]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000
 80045d0:	007a1200 	.word	0x007a1200
 80045d4:	080069c8 	.word	0x080069c8
 80045d8:	080069d8 	.word	0x080069d8
 80045dc:	003d0900 	.word	0x003d0900

080045e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e4:	4b02      	ldr	r3, [pc, #8]	@ (80045f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	200000c0 	.word	0x200000c0

080045f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045f8:	f7ff fff2 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	4903      	ldr	r1, [pc, #12]	@ (8004618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40021000 	.word	0x40021000
 8004618:	080069c0 	.word	0x080069c0

0800461c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004620:	f7ff ffde 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 8004624:	4602      	mov	r2, r0
 8004626:	4b05      	ldr	r3, [pc, #20]	@ (800463c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	0adb      	lsrs	r3, r3, #11
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	4903      	ldr	r1, [pc, #12]	@ (8004640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40021000 	.word	0x40021000
 8004640:	080069c0 	.word	0x080069c0

08004644 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800464c:	4b0a      	ldr	r3, [pc, #40]	@ (8004678 <RCC_Delay+0x34>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0a      	ldr	r2, [pc, #40]	@ (800467c <RCC_Delay+0x38>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	0a5b      	lsrs	r3, r3, #9
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004660:	bf00      	nop
  }
  while (Delay --);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1e5a      	subs	r2, r3, #1
 8004666:	60fa      	str	r2, [r7, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f9      	bne.n	8004660 <RCC_Delay+0x1c>
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	200000c0 	.word	0x200000c0
 800467c:	10624dd3 	.word	0x10624dd3

08004680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e042      	b.n	8004718 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fd fc96 	bl	8001fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2224      	movs	r2, #36	@ 0x24
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fdc5 	bl	8005254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695a      	ldr	r2, [r3, #20]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	@ 0x28
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b20      	cmp	r3, #32
 800473e:	d16d      	bne.n	800481c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_UART_Transmit+0x2c>
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e066      	b.n	800481e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2221      	movs	r2, #33	@ 0x21
 800475a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800475e:	f7fd fe35 	bl	80023cc <HAL_GetTick>
 8004762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	88fa      	ldrh	r2, [r7, #6]
 8004768:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	88fa      	ldrh	r2, [r7, #6]
 800476e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004778:	d108      	bne.n	800478c <HAL_UART_Transmit+0x6c>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d104      	bne.n	800478c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	e003      	b.n	8004794 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004794:	e02a      	b.n	80047ec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	2180      	movs	r1, #128	@ 0x80
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fb14 	bl	8004dce <UART_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e036      	b.n	800481e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	3302      	adds	r3, #2
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	e007      	b.n	80047de <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	3301      	adds	r3, #1
 80047dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1cf      	bne.n	8004796 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2200      	movs	r2, #0
 80047fe:	2140      	movs	r1, #64	@ 0x40
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fae4 	bl	8004dce <UART_WaitOnFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e006      	b.n	800481e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	e000      	b.n	800481e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800481c:	2302      	movs	r3, #2
  }
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	4613      	mov	r3, r2
 8004832:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b20      	cmp	r3, #32
 800483e:	d112      	bne.n	8004866 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_UART_Receive_IT+0x26>
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e00b      	b.n	8004868 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	461a      	mov	r2, r3
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 fb24 	bl	8004eaa <UART_Start_Receive_IT>
 8004862:	4603      	mov	r3, r0
 8004864:	e000      	b.n	8004868 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
  }
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b0ba      	sub	sp, #232	@ 0xe8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004896:	2300      	movs	r3, #0
 8004898:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800489c:	2300      	movs	r3, #0
 800489e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80048ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <HAL_UART_IRQHandler+0x66>
 80048c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fc01 	bl	80050d6 <UART_Receive_IT>
      return;
 80048d4:	e25b      	b.n	8004d8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 80de 	beq.w	8004a9c <HAL_UART_IRQHandler+0x22c>
 80048e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d106      	bne.n	80048fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80d1 	beq.w	8004a9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00b      	beq.n	800491e <HAL_UART_IRQHandler+0xae>
 8004906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800490a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004916:	f043 0201 	orr.w	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800491e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <HAL_UART_IRQHandler+0xd2>
 800492a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493a:	f043 0202 	orr.w	r2, r3, #2
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_UART_IRQHandler+0xf6>
 800494e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495e:	f043 0204 	orr.w	r2, r3, #4
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d011      	beq.n	8004996 <HAL_UART_IRQHandler+0x126>
 8004972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	d105      	bne.n	800498a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800497e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	f043 0208 	orr.w	r2, r3, #8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 81f2 	beq.w	8004d84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_UART_IRQHandler+0x14e>
 80049ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049b0:	f003 0320 	and.w	r3, r3, #32
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fb8c 	bl	80050d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <HAL_UART_IRQHandler+0x17a>
 80049e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d04f      	beq.n	8004a8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa96 	bl	8004f1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d041      	beq.n	8004a82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3314      	adds	r3, #20
 8004a04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3314      	adds	r3, #20
 8004a26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1d9      	bne.n	80049fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d013      	beq.n	8004a7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a56:	4a7e      	ldr	r2, [pc, #504]	@ (8004c50 <HAL_UART_IRQHandler+0x3e0>)
 8004a58:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fd fe2a 	bl	80026b8 <HAL_DMA_Abort_IT>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d016      	beq.n	8004a98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a74:	4610      	mov	r0, r2
 8004a76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	e00e      	b.n	8004a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f993 	bl	8004da6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a80:	e00a      	b.n	8004a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f98f 	bl	8004da6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a88:	e006      	b.n	8004a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f98b 	bl	8004da6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a96:	e175      	b.n	8004d84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a98:	bf00      	nop
    return;
 8004a9a:	e173      	b.n	8004d84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	f040 814f 	bne.w	8004d44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aaa:	f003 0310 	and.w	r3, r3, #16
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 8148 	beq.w	8004d44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8141 	beq.w	8004d44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80b6 	beq.w	8004c54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004af4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8145 	beq.w	8004d88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b06:	429a      	cmp	r2, r3
 8004b08:	f080 813e 	bcs.w	8004d88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	f000 8088 	beq.w	8004c30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	330c      	adds	r3, #12
 8004b26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004b4c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b58:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1d9      	bne.n	8004b20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3314      	adds	r3, #20
 8004b72:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b7e:	f023 0301 	bic.w	r3, r3, #1
 8004b82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3314      	adds	r3, #20
 8004b8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e1      	bne.n	8004b6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3314      	adds	r3, #20
 8004bae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004bb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3314      	adds	r3, #20
 8004bc8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bcc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004bd2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e3      	bne.n	8004ba8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c00:	f023 0310 	bic.w	r3, r3, #16
 8004c04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004c12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c14:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e3      	bne.n	8004bee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fd fd09 	bl	8002642 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	4619      	mov	r1, r3
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f8b6 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c4c:	e09c      	b.n	8004d88 <HAL_UART_IRQHandler+0x518>
 8004c4e:	bf00      	nop
 8004c50:	08004fe1 	.word	0x08004fe1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 808e 	beq.w	8004d8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8089 	beq.w	8004d8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	330c      	adds	r3, #12
 8004c80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ca0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ca4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e3      	bne.n	8004c7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3314      	adds	r3, #20
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	623b      	str	r3, [r7, #32]
   return(result);
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f023 0301 	bic.w	r3, r3, #1
 8004cc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004cd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1e3      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0310 	bic.w	r3, r3, #16
 8004d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004d1c:	61fa      	str	r2, [r7, #28]
 8004d1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	69b9      	ldr	r1, [r7, #24]
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	617b      	str	r3, [r7, #20]
   return(result);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e3      	bne.n	8004cf8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f83b 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d42:	e023      	b.n	8004d8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <HAL_UART_IRQHandler+0x4f4>
 8004d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f953 	bl	8005008 <UART_Transmit_IT>
    return;
 8004d62:	e014      	b.n	8004d8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00e      	beq.n	8004d8e <HAL_UART_IRQHandler+0x51e>
 8004d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d008      	beq.n	8004d8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f992 	bl	80050a6 <UART_EndTransmit_IT>
    return;
 8004d82:	e004      	b.n	8004d8e <HAL_UART_IRQHandler+0x51e>
    return;
 8004d84:	bf00      	nop
 8004d86:	e002      	b.n	8004d8e <HAL_UART_IRQHandler+0x51e>
      return;
 8004d88:	bf00      	nop
 8004d8a:	e000      	b.n	8004d8e <HAL_UART_IRQHandler+0x51e>
      return;
 8004d8c:	bf00      	nop
  }
}
 8004d8e:	37e8      	adds	r7, #232	@ 0xe8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr

08004da6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr

08004db8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr

08004dce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b090      	sub	sp, #64	@ 0x40
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dde:	e050      	b.n	8004e82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d04c      	beq.n	8004e82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x30>
 8004dee:	f7fd faed 	bl	80023cc <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d241      	bcs.n	8004e82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e1e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004e20:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e5      	bne.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3314      	adds	r3, #20
 8004e38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	613b      	str	r3, [r7, #16]
   return(result);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3314      	adds	r3, #20
 8004e50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e52:	623a      	str	r2, [r7, #32]
 8004e54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	69f9      	ldr	r1, [r7, #28]
 8004e58:	6a3a      	ldr	r2, [r7, #32]
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e5      	bne.n	8004e32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e00f      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	bf0c      	ite	eq
 8004e92:	2301      	moveq	r3, #1
 8004e94:	2300      	movne	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d09f      	beq.n	8004de0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3740      	adds	r7, #64	@ 0x40
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b085      	sub	sp, #20
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2222      	movs	r2, #34	@ 0x22
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0220 	orr.w	r2, r2, #32
 8004f0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr

08004f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b095      	sub	sp, #84	@ 0x54
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f44:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e5      	bne.n	8004f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f023 0301 	bic.w	r3, r3, #1
 8004f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3314      	adds	r3, #20
 8004f76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e5      	bne.n	8004f58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d119      	bne.n	8004fc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	e853 3f00 	ldrex	r3, [r3]
 8004fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f023 0310 	bic.w	r3, r3, #16
 8004faa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fb4:	61ba      	str	r2, [r7, #24]
 8004fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	6979      	ldr	r1, [r7, #20]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e5      	bne.n	8004f94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004fd6:	bf00      	nop
 8004fd8:	3754      	adds	r7, #84	@ 0x54
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff fed3 	bl	8004da6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b21      	cmp	r3, #33	@ 0x21
 800501a:	d13e      	bne.n	800509a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005024:	d114      	bne.n	8005050 <UART_Transmit_IT+0x48>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d110      	bne.n	8005050 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005042:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	1c9a      	adds	r2, r3, #2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	621a      	str	r2, [r3, #32]
 800504e:	e008      	b.n	8005062 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	1c59      	adds	r1, r3, #1
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6211      	str	r1, [r2, #32]
 800505a:	781a      	ldrb	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29b      	uxth	r3, r3
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	4619      	mov	r1, r3
 8005070:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10f      	bne.n	8005096 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005084:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005094:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	e000      	b.n	800509c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800509a:	2302      	movs	r3, #2
  }
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff fe64 	bl	8004d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b08c      	sub	sp, #48	@ 0x30
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b22      	cmp	r3, #34	@ 0x22
 80050e8:	f040 80ae 	bne.w	8005248 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f4:	d117      	bne.n	8005126 <UART_Receive_IT+0x50>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d113      	bne.n	8005126 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005106:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	b29b      	uxth	r3, r3
 8005110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005114:	b29a      	uxth	r2, r3
 8005116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005118:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511e:	1c9a      	adds	r2, r3, #2
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	629a      	str	r2, [r3, #40]	@ 0x28
 8005124:	e026      	b.n	8005174 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005138:	d007      	beq.n	800514a <UART_Receive_IT+0x74>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <UART_Receive_IT+0x82>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	b2da      	uxtb	r2, r3
 8005152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	e008      	b.n	800516a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005164:	b2da      	uxtb	r2, r3
 8005166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005168:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29b      	uxth	r3, r3
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	4619      	mov	r1, r3
 8005182:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005184:	2b00      	cmp	r3, #0
 8005186:	d15d      	bne.n	8005244 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0220 	bic.w	r2, r2, #32
 8005196:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d135      	bne.n	800523a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	613b      	str	r3, [r7, #16]
   return(result);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f023 0310 	bic.w	r3, r3, #16
 80051ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f4:	623a      	str	r2, [r7, #32]
 80051f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	69f9      	ldr	r1, [r7, #28]
 80051fa:	6a3a      	ldr	r2, [r7, #32]
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	61bb      	str	r3, [r7, #24]
   return(result);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e5      	bne.n	80051d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0310 	and.w	r3, r3, #16
 8005212:	2b10      	cmp	r3, #16
 8005214:	d10a      	bne.n	800522c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fdc0 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
 8005238:	e002      	b.n	8005240 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fc fb76 	bl	800192c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	e002      	b.n	800524a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3730      	adds	r7, #48	@ 0x30
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800528e:	f023 030c 	bic.w	r3, r3, #12
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	430b      	orrs	r3, r1
 800529a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005368 <UART_SetConfig+0x114>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d103      	bne.n	80052c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052bc:	f7ff f9ae 	bl	800461c <HAL_RCC_GetPCLK2Freq>
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	e002      	b.n	80052ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052c4:	f7ff f996 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 80052c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009a      	lsls	r2, r3, #2
 80052d4:	441a      	add	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e0:	4a22      	ldr	r2, [pc, #136]	@ (800536c <UART_SetConfig+0x118>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	0119      	lsls	r1, r3, #4
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	009a      	lsls	r2, r3, #2
 80052f4:	441a      	add	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005300:	4b1a      	ldr	r3, [pc, #104]	@ (800536c <UART_SetConfig+0x118>)
 8005302:	fba3 0302 	umull	r0, r3, r3, r2
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	2064      	movs	r0, #100	@ 0x64
 800530a:	fb00 f303 	mul.w	r3, r0, r3
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	3332      	adds	r3, #50	@ 0x32
 8005314:	4a15      	ldr	r2, [pc, #84]	@ (800536c <UART_SetConfig+0x118>)
 8005316:	fba2 2303 	umull	r2, r3, r2, r3
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005320:	4419      	add	r1, r3
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	009a      	lsls	r2, r3, #2
 800532c:	441a      	add	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	fbb2 f2f3 	udiv	r2, r2, r3
 8005338:	4b0c      	ldr	r3, [pc, #48]	@ (800536c <UART_SetConfig+0x118>)
 800533a:	fba3 0302 	umull	r0, r3, r3, r2
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	2064      	movs	r0, #100	@ 0x64
 8005342:	fb00 f303 	mul.w	r3, r0, r3
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	3332      	adds	r3, #50	@ 0x32
 800534c:	4a07      	ldr	r2, [pc, #28]	@ (800536c <UART_SetConfig+0x118>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	f003 020f 	and.w	r2, r3, #15
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	440a      	add	r2, r1
 800535e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40013800 	.word	0x40013800
 800536c:	51eb851f 	.word	0x51eb851f

08005370 <std>:
 8005370:	2300      	movs	r3, #0
 8005372:	b510      	push	{r4, lr}
 8005374:	4604      	mov	r4, r0
 8005376:	e9c0 3300 	strd	r3, r3, [r0]
 800537a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800537e:	6083      	str	r3, [r0, #8]
 8005380:	8181      	strh	r1, [r0, #12]
 8005382:	6643      	str	r3, [r0, #100]	@ 0x64
 8005384:	81c2      	strh	r2, [r0, #14]
 8005386:	6183      	str	r3, [r0, #24]
 8005388:	4619      	mov	r1, r3
 800538a:	2208      	movs	r2, #8
 800538c:	305c      	adds	r0, #92	@ 0x5c
 800538e:	f000 f914 	bl	80055ba <memset>
 8005392:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <std+0x58>)
 8005394:	6224      	str	r4, [r4, #32]
 8005396:	6263      	str	r3, [r4, #36]	@ 0x24
 8005398:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <std+0x5c>)
 800539a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800539c:	4b0c      	ldr	r3, [pc, #48]	@ (80053d0 <std+0x60>)
 800539e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80053a0:	4b0c      	ldr	r3, [pc, #48]	@ (80053d4 <std+0x64>)
 80053a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80053a4:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <std+0x68>)
 80053a6:	429c      	cmp	r4, r3
 80053a8:	d006      	beq.n	80053b8 <std+0x48>
 80053aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053ae:	4294      	cmp	r4, r2
 80053b0:	d002      	beq.n	80053b8 <std+0x48>
 80053b2:	33d0      	adds	r3, #208	@ 0xd0
 80053b4:	429c      	cmp	r4, r3
 80053b6:	d105      	bne.n	80053c4 <std+0x54>
 80053b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c0:	f000 b9e6 	b.w	8005790 <__retarget_lock_init_recursive>
 80053c4:	bd10      	pop	{r4, pc}
 80053c6:	bf00      	nop
 80053c8:	08005535 	.word	0x08005535
 80053cc:	08005557 	.word	0x08005557
 80053d0:	0800558f 	.word	0x0800558f
 80053d4:	080055b3 	.word	0x080055b3
 80053d8:	2000034c 	.word	0x2000034c

080053dc <stdio_exit_handler>:
 80053dc:	4a02      	ldr	r2, [pc, #8]	@ (80053e8 <stdio_exit_handler+0xc>)
 80053de:	4903      	ldr	r1, [pc, #12]	@ (80053ec <stdio_exit_handler+0x10>)
 80053e0:	4803      	ldr	r0, [pc, #12]	@ (80053f0 <stdio_exit_handler+0x14>)
 80053e2:	f000 b869 	b.w	80054b8 <_fwalk_sglue>
 80053e6:	bf00      	nop
 80053e8:	200000cc 	.word	0x200000cc
 80053ec:	080060c1 	.word	0x080060c1
 80053f0:	200000dc 	.word	0x200000dc

080053f4 <cleanup_stdio>:
 80053f4:	6841      	ldr	r1, [r0, #4]
 80053f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <cleanup_stdio+0x34>)
 80053f8:	b510      	push	{r4, lr}
 80053fa:	4299      	cmp	r1, r3
 80053fc:	4604      	mov	r4, r0
 80053fe:	d001      	beq.n	8005404 <cleanup_stdio+0x10>
 8005400:	f000 fe5e 	bl	80060c0 <_fflush_r>
 8005404:	68a1      	ldr	r1, [r4, #8]
 8005406:	4b09      	ldr	r3, [pc, #36]	@ (800542c <cleanup_stdio+0x38>)
 8005408:	4299      	cmp	r1, r3
 800540a:	d002      	beq.n	8005412 <cleanup_stdio+0x1e>
 800540c:	4620      	mov	r0, r4
 800540e:	f000 fe57 	bl	80060c0 <_fflush_r>
 8005412:	68e1      	ldr	r1, [r4, #12]
 8005414:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <cleanup_stdio+0x3c>)
 8005416:	4299      	cmp	r1, r3
 8005418:	d004      	beq.n	8005424 <cleanup_stdio+0x30>
 800541a:	4620      	mov	r0, r4
 800541c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005420:	f000 be4e 	b.w	80060c0 <_fflush_r>
 8005424:	bd10      	pop	{r4, pc}
 8005426:	bf00      	nop
 8005428:	2000034c 	.word	0x2000034c
 800542c:	200003b4 	.word	0x200003b4
 8005430:	2000041c 	.word	0x2000041c

08005434 <global_stdio_init.part.0>:
 8005434:	b510      	push	{r4, lr}
 8005436:	4b0b      	ldr	r3, [pc, #44]	@ (8005464 <global_stdio_init.part.0+0x30>)
 8005438:	4c0b      	ldr	r4, [pc, #44]	@ (8005468 <global_stdio_init.part.0+0x34>)
 800543a:	4a0c      	ldr	r2, [pc, #48]	@ (800546c <global_stdio_init.part.0+0x38>)
 800543c:	4620      	mov	r0, r4
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	2104      	movs	r1, #4
 8005442:	2200      	movs	r2, #0
 8005444:	f7ff ff94 	bl	8005370 <std>
 8005448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800544c:	2201      	movs	r2, #1
 800544e:	2109      	movs	r1, #9
 8005450:	f7ff ff8e 	bl	8005370 <std>
 8005454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005458:	2202      	movs	r2, #2
 800545a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800545e:	2112      	movs	r1, #18
 8005460:	f7ff bf86 	b.w	8005370 <std>
 8005464:	20000484 	.word	0x20000484
 8005468:	2000034c 	.word	0x2000034c
 800546c:	080053dd 	.word	0x080053dd

08005470 <__sfp_lock_acquire>:
 8005470:	4801      	ldr	r0, [pc, #4]	@ (8005478 <__sfp_lock_acquire+0x8>)
 8005472:	f000 b98e 	b.w	8005792 <__retarget_lock_acquire_recursive>
 8005476:	bf00      	nop
 8005478:	2000048d 	.word	0x2000048d

0800547c <__sfp_lock_release>:
 800547c:	4801      	ldr	r0, [pc, #4]	@ (8005484 <__sfp_lock_release+0x8>)
 800547e:	f000 b989 	b.w	8005794 <__retarget_lock_release_recursive>
 8005482:	bf00      	nop
 8005484:	2000048d 	.word	0x2000048d

08005488 <__sinit>:
 8005488:	b510      	push	{r4, lr}
 800548a:	4604      	mov	r4, r0
 800548c:	f7ff fff0 	bl	8005470 <__sfp_lock_acquire>
 8005490:	6a23      	ldr	r3, [r4, #32]
 8005492:	b11b      	cbz	r3, 800549c <__sinit+0x14>
 8005494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005498:	f7ff bff0 	b.w	800547c <__sfp_lock_release>
 800549c:	4b04      	ldr	r3, [pc, #16]	@ (80054b0 <__sinit+0x28>)
 800549e:	6223      	str	r3, [r4, #32]
 80054a0:	4b04      	ldr	r3, [pc, #16]	@ (80054b4 <__sinit+0x2c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1f5      	bne.n	8005494 <__sinit+0xc>
 80054a8:	f7ff ffc4 	bl	8005434 <global_stdio_init.part.0>
 80054ac:	e7f2      	b.n	8005494 <__sinit+0xc>
 80054ae:	bf00      	nop
 80054b0:	080053f5 	.word	0x080053f5
 80054b4:	20000484 	.word	0x20000484

080054b8 <_fwalk_sglue>:
 80054b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054bc:	4607      	mov	r7, r0
 80054be:	4688      	mov	r8, r1
 80054c0:	4614      	mov	r4, r2
 80054c2:	2600      	movs	r6, #0
 80054c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054c8:	f1b9 0901 	subs.w	r9, r9, #1
 80054cc:	d505      	bpl.n	80054da <_fwalk_sglue+0x22>
 80054ce:	6824      	ldr	r4, [r4, #0]
 80054d0:	2c00      	cmp	r4, #0
 80054d2:	d1f7      	bne.n	80054c4 <_fwalk_sglue+0xc>
 80054d4:	4630      	mov	r0, r6
 80054d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054da:	89ab      	ldrh	r3, [r5, #12]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d907      	bls.n	80054f0 <_fwalk_sglue+0x38>
 80054e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054e4:	3301      	adds	r3, #1
 80054e6:	d003      	beq.n	80054f0 <_fwalk_sglue+0x38>
 80054e8:	4629      	mov	r1, r5
 80054ea:	4638      	mov	r0, r7
 80054ec:	47c0      	blx	r8
 80054ee:	4306      	orrs	r6, r0
 80054f0:	3568      	adds	r5, #104	@ 0x68
 80054f2:	e7e9      	b.n	80054c8 <_fwalk_sglue+0x10>

080054f4 <siprintf>:
 80054f4:	b40e      	push	{r1, r2, r3}
 80054f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054fa:	b500      	push	{lr}
 80054fc:	b09c      	sub	sp, #112	@ 0x70
 80054fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8005500:	9002      	str	r0, [sp, #8]
 8005502:	9006      	str	r0, [sp, #24]
 8005504:	9107      	str	r1, [sp, #28]
 8005506:	9104      	str	r1, [sp, #16]
 8005508:	4808      	ldr	r0, [pc, #32]	@ (800552c <siprintf+0x38>)
 800550a:	4909      	ldr	r1, [pc, #36]	@ (8005530 <siprintf+0x3c>)
 800550c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005510:	9105      	str	r1, [sp, #20]
 8005512:	6800      	ldr	r0, [r0, #0]
 8005514:	a902      	add	r1, sp, #8
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	f000 fac4 	bl	8005aa4 <_svfiprintf_r>
 800551c:	2200      	movs	r2, #0
 800551e:	9b02      	ldr	r3, [sp, #8]
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	b01c      	add	sp, #112	@ 0x70
 8005524:	f85d eb04 	ldr.w	lr, [sp], #4
 8005528:	b003      	add	sp, #12
 800552a:	4770      	bx	lr
 800552c:	200000d8 	.word	0x200000d8
 8005530:	ffff0208 	.word	0xffff0208

08005534 <__sread>:
 8005534:	b510      	push	{r4, lr}
 8005536:	460c      	mov	r4, r1
 8005538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800553c:	f000 f8da 	bl	80056f4 <_read_r>
 8005540:	2800      	cmp	r0, #0
 8005542:	bfab      	itete	ge
 8005544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005546:	89a3      	ldrhlt	r3, [r4, #12]
 8005548:	181b      	addge	r3, r3, r0
 800554a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800554e:	bfac      	ite	ge
 8005550:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005552:	81a3      	strhlt	r3, [r4, #12]
 8005554:	bd10      	pop	{r4, pc}

08005556 <__swrite>:
 8005556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800555a:	461f      	mov	r7, r3
 800555c:	898b      	ldrh	r3, [r1, #12]
 800555e:	4605      	mov	r5, r0
 8005560:	05db      	lsls	r3, r3, #23
 8005562:	460c      	mov	r4, r1
 8005564:	4616      	mov	r6, r2
 8005566:	d505      	bpl.n	8005574 <__swrite+0x1e>
 8005568:	2302      	movs	r3, #2
 800556a:	2200      	movs	r2, #0
 800556c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005570:	f000 f8ae 	bl	80056d0 <_lseek_r>
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	4632      	mov	r2, r6
 8005578:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800557c:	81a3      	strh	r3, [r4, #12]
 800557e:	4628      	mov	r0, r5
 8005580:	463b      	mov	r3, r7
 8005582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800558a:	f000 b8c5 	b.w	8005718 <_write_r>

0800558e <__sseek>:
 800558e:	b510      	push	{r4, lr}
 8005590:	460c      	mov	r4, r1
 8005592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005596:	f000 f89b 	bl	80056d0 <_lseek_r>
 800559a:	1c43      	adds	r3, r0, #1
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	bf15      	itete	ne
 80055a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055aa:	81a3      	strheq	r3, [r4, #12]
 80055ac:	bf18      	it	ne
 80055ae:	81a3      	strhne	r3, [r4, #12]
 80055b0:	bd10      	pop	{r4, pc}

080055b2 <__sclose>:
 80055b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b6:	f000 b87b 	b.w	80056b0 <_close_r>

080055ba <memset>:
 80055ba:	4603      	mov	r3, r0
 80055bc:	4402      	add	r2, r0
 80055be:	4293      	cmp	r3, r2
 80055c0:	d100      	bne.n	80055c4 <memset+0xa>
 80055c2:	4770      	bx	lr
 80055c4:	f803 1b01 	strb.w	r1, [r3], #1
 80055c8:	e7f9      	b.n	80055be <memset+0x4>
	...

080055cc <strtok>:
 80055cc:	4b16      	ldr	r3, [pc, #88]	@ (8005628 <strtok+0x5c>)
 80055ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d2:	681f      	ldr	r7, [r3, #0]
 80055d4:	4605      	mov	r5, r0
 80055d6:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80055d8:	460e      	mov	r6, r1
 80055da:	b9ec      	cbnz	r4, 8005618 <strtok+0x4c>
 80055dc:	2050      	movs	r0, #80	@ 0x50
 80055de:	f000 f94f 	bl	8005880 <malloc>
 80055e2:	4602      	mov	r2, r0
 80055e4:	6478      	str	r0, [r7, #68]	@ 0x44
 80055e6:	b920      	cbnz	r0, 80055f2 <strtok+0x26>
 80055e8:	215b      	movs	r1, #91	@ 0x5b
 80055ea:	4b10      	ldr	r3, [pc, #64]	@ (800562c <strtok+0x60>)
 80055ec:	4810      	ldr	r0, [pc, #64]	@ (8005630 <strtok+0x64>)
 80055ee:	f000 f8e1 	bl	80057b4 <__assert_func>
 80055f2:	e9c0 4400 	strd	r4, r4, [r0]
 80055f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80055fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80055fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005602:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005606:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800560a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800560e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005612:	6184      	str	r4, [r0, #24]
 8005614:	7704      	strb	r4, [r0, #28]
 8005616:	6244      	str	r4, [r0, #36]	@ 0x24
 8005618:	4631      	mov	r1, r6
 800561a:	4628      	mov	r0, r5
 800561c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800561e:	2301      	movs	r3, #1
 8005620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005624:	f000 b806 	b.w	8005634 <__strtok_r>
 8005628:	200000d8 	.word	0x200000d8
 800562c:	080069da 	.word	0x080069da
 8005630:	080069f1 	.word	0x080069f1

08005634 <__strtok_r>:
 8005634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005636:	4604      	mov	r4, r0
 8005638:	b908      	cbnz	r0, 800563e <__strtok_r+0xa>
 800563a:	6814      	ldr	r4, [r2, #0]
 800563c:	b144      	cbz	r4, 8005650 <__strtok_r+0x1c>
 800563e:	460f      	mov	r7, r1
 8005640:	4620      	mov	r0, r4
 8005642:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005646:	f817 6b01 	ldrb.w	r6, [r7], #1
 800564a:	b91e      	cbnz	r6, 8005654 <__strtok_r+0x20>
 800564c:	b965      	cbnz	r5, 8005668 <__strtok_r+0x34>
 800564e:	6015      	str	r5, [r2, #0]
 8005650:	2000      	movs	r0, #0
 8005652:	e005      	b.n	8005660 <__strtok_r+0x2c>
 8005654:	42b5      	cmp	r5, r6
 8005656:	d1f6      	bne.n	8005646 <__strtok_r+0x12>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f0      	bne.n	800563e <__strtok_r+0xa>
 800565c:	6014      	str	r4, [r2, #0]
 800565e:	7003      	strb	r3, [r0, #0]
 8005660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005662:	461c      	mov	r4, r3
 8005664:	e00c      	b.n	8005680 <__strtok_r+0x4c>
 8005666:	b915      	cbnz	r5, 800566e <__strtok_r+0x3a>
 8005668:	460e      	mov	r6, r1
 800566a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800566e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005672:	42ab      	cmp	r3, r5
 8005674:	d1f7      	bne.n	8005666 <__strtok_r+0x32>
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f3      	beq.n	8005662 <__strtok_r+0x2e>
 800567a:	2300      	movs	r3, #0
 800567c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005680:	6014      	str	r4, [r2, #0]
 8005682:	e7ed      	b.n	8005660 <__strtok_r+0x2c>

08005684 <strstr>:
 8005684:	780a      	ldrb	r2, [r1, #0]
 8005686:	b570      	push	{r4, r5, r6, lr}
 8005688:	b96a      	cbnz	r2, 80056a6 <strstr+0x22>
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	429a      	cmp	r2, r3
 800568e:	d109      	bne.n	80056a4 <strstr+0x20>
 8005690:	460c      	mov	r4, r1
 8005692:	4605      	mov	r5, r0
 8005694:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f6      	beq.n	800568a <strstr+0x6>
 800569c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80056a0:	429e      	cmp	r6, r3
 80056a2:	d0f7      	beq.n	8005694 <strstr+0x10>
 80056a4:	3001      	adds	r0, #1
 80056a6:	7803      	ldrb	r3, [r0, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1ef      	bne.n	800568c <strstr+0x8>
 80056ac:	4618      	mov	r0, r3
 80056ae:	e7ec      	b.n	800568a <strstr+0x6>

080056b0 <_close_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	2300      	movs	r3, #0
 80056b4:	4d05      	ldr	r5, [pc, #20]	@ (80056cc <_close_r+0x1c>)
 80056b6:	4604      	mov	r4, r0
 80056b8:	4608      	mov	r0, r1
 80056ba:	602b      	str	r3, [r5, #0]
 80056bc:	f7fc fd9b 	bl	80021f6 <_close>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d102      	bne.n	80056ca <_close_r+0x1a>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	b103      	cbz	r3, 80056ca <_close_r+0x1a>
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
 80056cc:	20000488 	.word	0x20000488

080056d0 <_lseek_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4604      	mov	r4, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	2200      	movs	r2, #0
 80056da:	4d05      	ldr	r5, [pc, #20]	@ (80056f0 <_lseek_r+0x20>)
 80056dc:	602a      	str	r2, [r5, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	f7fc fdad 	bl	800223e <_lseek>
 80056e4:	1c43      	adds	r3, r0, #1
 80056e6:	d102      	bne.n	80056ee <_lseek_r+0x1e>
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	b103      	cbz	r3, 80056ee <_lseek_r+0x1e>
 80056ec:	6023      	str	r3, [r4, #0]
 80056ee:	bd38      	pop	{r3, r4, r5, pc}
 80056f0:	20000488 	.word	0x20000488

080056f4 <_read_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4604      	mov	r4, r0
 80056f8:	4608      	mov	r0, r1
 80056fa:	4611      	mov	r1, r2
 80056fc:	2200      	movs	r2, #0
 80056fe:	4d05      	ldr	r5, [pc, #20]	@ (8005714 <_read_r+0x20>)
 8005700:	602a      	str	r2, [r5, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	f7fc fd3e 	bl	8002184 <_read>
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d102      	bne.n	8005712 <_read_r+0x1e>
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	b103      	cbz	r3, 8005712 <_read_r+0x1e>
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	bd38      	pop	{r3, r4, r5, pc}
 8005714:	20000488 	.word	0x20000488

08005718 <_write_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4604      	mov	r4, r0
 800571c:	4608      	mov	r0, r1
 800571e:	4611      	mov	r1, r2
 8005720:	2200      	movs	r2, #0
 8005722:	4d05      	ldr	r5, [pc, #20]	@ (8005738 <_write_r+0x20>)
 8005724:	602a      	str	r2, [r5, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	f7fc fd49 	bl	80021be <_write>
 800572c:	1c43      	adds	r3, r0, #1
 800572e:	d102      	bne.n	8005736 <_write_r+0x1e>
 8005730:	682b      	ldr	r3, [r5, #0]
 8005732:	b103      	cbz	r3, 8005736 <_write_r+0x1e>
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	bd38      	pop	{r3, r4, r5, pc}
 8005738:	20000488 	.word	0x20000488

0800573c <__errno>:
 800573c:	4b01      	ldr	r3, [pc, #4]	@ (8005744 <__errno+0x8>)
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	200000d8 	.word	0x200000d8

08005748 <__libc_init_array>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	2600      	movs	r6, #0
 800574c:	4d0c      	ldr	r5, [pc, #48]	@ (8005780 <__libc_init_array+0x38>)
 800574e:	4c0d      	ldr	r4, [pc, #52]	@ (8005784 <__libc_init_array+0x3c>)
 8005750:	1b64      	subs	r4, r4, r5
 8005752:	10a4      	asrs	r4, r4, #2
 8005754:	42a6      	cmp	r6, r4
 8005756:	d109      	bne.n	800576c <__libc_init_array+0x24>
 8005758:	f000 fffc 	bl	8006754 <_init>
 800575c:	2600      	movs	r6, #0
 800575e:	4d0a      	ldr	r5, [pc, #40]	@ (8005788 <__libc_init_array+0x40>)
 8005760:	4c0a      	ldr	r4, [pc, #40]	@ (800578c <__libc_init_array+0x44>)
 8005762:	1b64      	subs	r4, r4, r5
 8005764:	10a4      	asrs	r4, r4, #2
 8005766:	42a6      	cmp	r6, r4
 8005768:	d105      	bne.n	8005776 <__libc_init_array+0x2e>
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005770:	4798      	blx	r3
 8005772:	3601      	adds	r6, #1
 8005774:	e7ee      	b.n	8005754 <__libc_init_array+0xc>
 8005776:	f855 3b04 	ldr.w	r3, [r5], #4
 800577a:	4798      	blx	r3
 800577c:	3601      	adds	r6, #1
 800577e:	e7f2      	b.n	8005766 <__libc_init_array+0x1e>
 8005780:	08006ac4 	.word	0x08006ac4
 8005784:	08006ac4 	.word	0x08006ac4
 8005788:	08006ac4 	.word	0x08006ac4
 800578c:	08006ac8 	.word	0x08006ac8

08005790 <__retarget_lock_init_recursive>:
 8005790:	4770      	bx	lr

08005792 <__retarget_lock_acquire_recursive>:
 8005792:	4770      	bx	lr

08005794 <__retarget_lock_release_recursive>:
 8005794:	4770      	bx	lr

08005796 <memcpy>:
 8005796:	440a      	add	r2, r1
 8005798:	4291      	cmp	r1, r2
 800579a:	f100 33ff 	add.w	r3, r0, #4294967295
 800579e:	d100      	bne.n	80057a2 <memcpy+0xc>
 80057a0:	4770      	bx	lr
 80057a2:	b510      	push	{r4, lr}
 80057a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057a8:	4291      	cmp	r1, r2
 80057aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057ae:	d1f9      	bne.n	80057a4 <memcpy+0xe>
 80057b0:	bd10      	pop	{r4, pc}
	...

080057b4 <__assert_func>:
 80057b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057b6:	4614      	mov	r4, r2
 80057b8:	461a      	mov	r2, r3
 80057ba:	4b09      	ldr	r3, [pc, #36]	@ (80057e0 <__assert_func+0x2c>)
 80057bc:	4605      	mov	r5, r0
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68d8      	ldr	r0, [r3, #12]
 80057c2:	b954      	cbnz	r4, 80057da <__assert_func+0x26>
 80057c4:	4b07      	ldr	r3, [pc, #28]	@ (80057e4 <__assert_func+0x30>)
 80057c6:	461c      	mov	r4, r3
 80057c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057cc:	9100      	str	r1, [sp, #0]
 80057ce:	462b      	mov	r3, r5
 80057d0:	4905      	ldr	r1, [pc, #20]	@ (80057e8 <__assert_func+0x34>)
 80057d2:	f000 fc9d 	bl	8006110 <fiprintf>
 80057d6:	f000 fce5 	bl	80061a4 <abort>
 80057da:	4b04      	ldr	r3, [pc, #16]	@ (80057ec <__assert_func+0x38>)
 80057dc:	e7f4      	b.n	80057c8 <__assert_func+0x14>
 80057de:	bf00      	nop
 80057e0:	200000d8 	.word	0x200000d8
 80057e4:	08006a86 	.word	0x08006a86
 80057e8:	08006a58 	.word	0x08006a58
 80057ec:	08006a4b 	.word	0x08006a4b

080057f0 <_free_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4605      	mov	r5, r0
 80057f4:	2900      	cmp	r1, #0
 80057f6:	d040      	beq.n	800587a <_free_r+0x8a>
 80057f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057fc:	1f0c      	subs	r4, r1, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	bfb8      	it	lt
 8005802:	18e4      	addlt	r4, r4, r3
 8005804:	f000 f8e6 	bl	80059d4 <__malloc_lock>
 8005808:	4a1c      	ldr	r2, [pc, #112]	@ (800587c <_free_r+0x8c>)
 800580a:	6813      	ldr	r3, [r2, #0]
 800580c:	b933      	cbnz	r3, 800581c <_free_r+0x2c>
 800580e:	6063      	str	r3, [r4, #4]
 8005810:	6014      	str	r4, [r2, #0]
 8005812:	4628      	mov	r0, r5
 8005814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005818:	f000 b8e2 	b.w	80059e0 <__malloc_unlock>
 800581c:	42a3      	cmp	r3, r4
 800581e:	d908      	bls.n	8005832 <_free_r+0x42>
 8005820:	6820      	ldr	r0, [r4, #0]
 8005822:	1821      	adds	r1, r4, r0
 8005824:	428b      	cmp	r3, r1
 8005826:	bf01      	itttt	eq
 8005828:	6819      	ldreq	r1, [r3, #0]
 800582a:	685b      	ldreq	r3, [r3, #4]
 800582c:	1809      	addeq	r1, r1, r0
 800582e:	6021      	streq	r1, [r4, #0]
 8005830:	e7ed      	b.n	800580e <_free_r+0x1e>
 8005832:	461a      	mov	r2, r3
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	b10b      	cbz	r3, 800583c <_free_r+0x4c>
 8005838:	42a3      	cmp	r3, r4
 800583a:	d9fa      	bls.n	8005832 <_free_r+0x42>
 800583c:	6811      	ldr	r1, [r2, #0]
 800583e:	1850      	adds	r0, r2, r1
 8005840:	42a0      	cmp	r0, r4
 8005842:	d10b      	bne.n	800585c <_free_r+0x6c>
 8005844:	6820      	ldr	r0, [r4, #0]
 8005846:	4401      	add	r1, r0
 8005848:	1850      	adds	r0, r2, r1
 800584a:	4283      	cmp	r3, r0
 800584c:	6011      	str	r1, [r2, #0]
 800584e:	d1e0      	bne.n	8005812 <_free_r+0x22>
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	4408      	add	r0, r1
 8005856:	6010      	str	r0, [r2, #0]
 8005858:	6053      	str	r3, [r2, #4]
 800585a:	e7da      	b.n	8005812 <_free_r+0x22>
 800585c:	d902      	bls.n	8005864 <_free_r+0x74>
 800585e:	230c      	movs	r3, #12
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	e7d6      	b.n	8005812 <_free_r+0x22>
 8005864:	6820      	ldr	r0, [r4, #0]
 8005866:	1821      	adds	r1, r4, r0
 8005868:	428b      	cmp	r3, r1
 800586a:	bf01      	itttt	eq
 800586c:	6819      	ldreq	r1, [r3, #0]
 800586e:	685b      	ldreq	r3, [r3, #4]
 8005870:	1809      	addeq	r1, r1, r0
 8005872:	6021      	streq	r1, [r4, #0]
 8005874:	6063      	str	r3, [r4, #4]
 8005876:	6054      	str	r4, [r2, #4]
 8005878:	e7cb      	b.n	8005812 <_free_r+0x22>
 800587a:	bd38      	pop	{r3, r4, r5, pc}
 800587c:	20000494 	.word	0x20000494

08005880 <malloc>:
 8005880:	4b02      	ldr	r3, [pc, #8]	@ (800588c <malloc+0xc>)
 8005882:	4601      	mov	r1, r0
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	f000 b825 	b.w	80058d4 <_malloc_r>
 800588a:	bf00      	nop
 800588c:	200000d8 	.word	0x200000d8

08005890 <sbrk_aligned>:
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	4e0f      	ldr	r6, [pc, #60]	@ (80058d0 <sbrk_aligned+0x40>)
 8005894:	460c      	mov	r4, r1
 8005896:	6831      	ldr	r1, [r6, #0]
 8005898:	4605      	mov	r5, r0
 800589a:	b911      	cbnz	r1, 80058a2 <sbrk_aligned+0x12>
 800589c:	f000 fc64 	bl	8006168 <_sbrk_r>
 80058a0:	6030      	str	r0, [r6, #0]
 80058a2:	4621      	mov	r1, r4
 80058a4:	4628      	mov	r0, r5
 80058a6:	f000 fc5f 	bl	8006168 <_sbrk_r>
 80058aa:	1c43      	adds	r3, r0, #1
 80058ac:	d103      	bne.n	80058b6 <sbrk_aligned+0x26>
 80058ae:	f04f 34ff 	mov.w	r4, #4294967295
 80058b2:	4620      	mov	r0, r4
 80058b4:	bd70      	pop	{r4, r5, r6, pc}
 80058b6:	1cc4      	adds	r4, r0, #3
 80058b8:	f024 0403 	bic.w	r4, r4, #3
 80058bc:	42a0      	cmp	r0, r4
 80058be:	d0f8      	beq.n	80058b2 <sbrk_aligned+0x22>
 80058c0:	1a21      	subs	r1, r4, r0
 80058c2:	4628      	mov	r0, r5
 80058c4:	f000 fc50 	bl	8006168 <_sbrk_r>
 80058c8:	3001      	adds	r0, #1
 80058ca:	d1f2      	bne.n	80058b2 <sbrk_aligned+0x22>
 80058cc:	e7ef      	b.n	80058ae <sbrk_aligned+0x1e>
 80058ce:	bf00      	nop
 80058d0:	20000490 	.word	0x20000490

080058d4 <_malloc_r>:
 80058d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d8:	1ccd      	adds	r5, r1, #3
 80058da:	f025 0503 	bic.w	r5, r5, #3
 80058de:	3508      	adds	r5, #8
 80058e0:	2d0c      	cmp	r5, #12
 80058e2:	bf38      	it	cc
 80058e4:	250c      	movcc	r5, #12
 80058e6:	2d00      	cmp	r5, #0
 80058e8:	4606      	mov	r6, r0
 80058ea:	db01      	blt.n	80058f0 <_malloc_r+0x1c>
 80058ec:	42a9      	cmp	r1, r5
 80058ee:	d904      	bls.n	80058fa <_malloc_r+0x26>
 80058f0:	230c      	movs	r3, #12
 80058f2:	6033      	str	r3, [r6, #0]
 80058f4:	2000      	movs	r0, #0
 80058f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059d0 <_malloc_r+0xfc>
 80058fe:	f000 f869 	bl	80059d4 <__malloc_lock>
 8005902:	f8d8 3000 	ldr.w	r3, [r8]
 8005906:	461c      	mov	r4, r3
 8005908:	bb44      	cbnz	r4, 800595c <_malloc_r+0x88>
 800590a:	4629      	mov	r1, r5
 800590c:	4630      	mov	r0, r6
 800590e:	f7ff ffbf 	bl	8005890 <sbrk_aligned>
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	4604      	mov	r4, r0
 8005916:	d158      	bne.n	80059ca <_malloc_r+0xf6>
 8005918:	f8d8 4000 	ldr.w	r4, [r8]
 800591c:	4627      	mov	r7, r4
 800591e:	2f00      	cmp	r7, #0
 8005920:	d143      	bne.n	80059aa <_malloc_r+0xd6>
 8005922:	2c00      	cmp	r4, #0
 8005924:	d04b      	beq.n	80059be <_malloc_r+0xea>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	4639      	mov	r1, r7
 800592a:	4630      	mov	r0, r6
 800592c:	eb04 0903 	add.w	r9, r4, r3
 8005930:	f000 fc1a 	bl	8006168 <_sbrk_r>
 8005934:	4581      	cmp	r9, r0
 8005936:	d142      	bne.n	80059be <_malloc_r+0xea>
 8005938:	6821      	ldr	r1, [r4, #0]
 800593a:	4630      	mov	r0, r6
 800593c:	1a6d      	subs	r5, r5, r1
 800593e:	4629      	mov	r1, r5
 8005940:	f7ff ffa6 	bl	8005890 <sbrk_aligned>
 8005944:	3001      	adds	r0, #1
 8005946:	d03a      	beq.n	80059be <_malloc_r+0xea>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	442b      	add	r3, r5
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	f8d8 3000 	ldr.w	r3, [r8]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	bb62      	cbnz	r2, 80059b0 <_malloc_r+0xdc>
 8005956:	f8c8 7000 	str.w	r7, [r8]
 800595a:	e00f      	b.n	800597c <_malloc_r+0xa8>
 800595c:	6822      	ldr	r2, [r4, #0]
 800595e:	1b52      	subs	r2, r2, r5
 8005960:	d420      	bmi.n	80059a4 <_malloc_r+0xd0>
 8005962:	2a0b      	cmp	r2, #11
 8005964:	d917      	bls.n	8005996 <_malloc_r+0xc2>
 8005966:	1961      	adds	r1, r4, r5
 8005968:	42a3      	cmp	r3, r4
 800596a:	6025      	str	r5, [r4, #0]
 800596c:	bf18      	it	ne
 800596e:	6059      	strne	r1, [r3, #4]
 8005970:	6863      	ldr	r3, [r4, #4]
 8005972:	bf08      	it	eq
 8005974:	f8c8 1000 	streq.w	r1, [r8]
 8005978:	5162      	str	r2, [r4, r5]
 800597a:	604b      	str	r3, [r1, #4]
 800597c:	4630      	mov	r0, r6
 800597e:	f000 f82f 	bl	80059e0 <__malloc_unlock>
 8005982:	f104 000b 	add.w	r0, r4, #11
 8005986:	1d23      	adds	r3, r4, #4
 8005988:	f020 0007 	bic.w	r0, r0, #7
 800598c:	1ac2      	subs	r2, r0, r3
 800598e:	bf1c      	itt	ne
 8005990:	1a1b      	subne	r3, r3, r0
 8005992:	50a3      	strne	r3, [r4, r2]
 8005994:	e7af      	b.n	80058f6 <_malloc_r+0x22>
 8005996:	6862      	ldr	r2, [r4, #4]
 8005998:	42a3      	cmp	r3, r4
 800599a:	bf0c      	ite	eq
 800599c:	f8c8 2000 	streq.w	r2, [r8]
 80059a0:	605a      	strne	r2, [r3, #4]
 80059a2:	e7eb      	b.n	800597c <_malloc_r+0xa8>
 80059a4:	4623      	mov	r3, r4
 80059a6:	6864      	ldr	r4, [r4, #4]
 80059a8:	e7ae      	b.n	8005908 <_malloc_r+0x34>
 80059aa:	463c      	mov	r4, r7
 80059ac:	687f      	ldr	r7, [r7, #4]
 80059ae:	e7b6      	b.n	800591e <_malloc_r+0x4a>
 80059b0:	461a      	mov	r2, r3
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	42a3      	cmp	r3, r4
 80059b6:	d1fb      	bne.n	80059b0 <_malloc_r+0xdc>
 80059b8:	2300      	movs	r3, #0
 80059ba:	6053      	str	r3, [r2, #4]
 80059bc:	e7de      	b.n	800597c <_malloc_r+0xa8>
 80059be:	230c      	movs	r3, #12
 80059c0:	4630      	mov	r0, r6
 80059c2:	6033      	str	r3, [r6, #0]
 80059c4:	f000 f80c 	bl	80059e0 <__malloc_unlock>
 80059c8:	e794      	b.n	80058f4 <_malloc_r+0x20>
 80059ca:	6005      	str	r5, [r0, #0]
 80059cc:	e7d6      	b.n	800597c <_malloc_r+0xa8>
 80059ce:	bf00      	nop
 80059d0:	20000494 	.word	0x20000494

080059d4 <__malloc_lock>:
 80059d4:	4801      	ldr	r0, [pc, #4]	@ (80059dc <__malloc_lock+0x8>)
 80059d6:	f7ff bedc 	b.w	8005792 <__retarget_lock_acquire_recursive>
 80059da:	bf00      	nop
 80059dc:	2000048c 	.word	0x2000048c

080059e0 <__malloc_unlock>:
 80059e0:	4801      	ldr	r0, [pc, #4]	@ (80059e8 <__malloc_unlock+0x8>)
 80059e2:	f7ff bed7 	b.w	8005794 <__retarget_lock_release_recursive>
 80059e6:	bf00      	nop
 80059e8:	2000048c 	.word	0x2000048c

080059ec <__ssputs_r>:
 80059ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f0:	461f      	mov	r7, r3
 80059f2:	688e      	ldr	r6, [r1, #8]
 80059f4:	4682      	mov	sl, r0
 80059f6:	42be      	cmp	r6, r7
 80059f8:	460c      	mov	r4, r1
 80059fa:	4690      	mov	r8, r2
 80059fc:	680b      	ldr	r3, [r1, #0]
 80059fe:	d82d      	bhi.n	8005a5c <__ssputs_r+0x70>
 8005a00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a08:	d026      	beq.n	8005a58 <__ssputs_r+0x6c>
 8005a0a:	6965      	ldr	r5, [r4, #20]
 8005a0c:	6909      	ldr	r1, [r1, #16]
 8005a0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a12:	eba3 0901 	sub.w	r9, r3, r1
 8005a16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a1a:	1c7b      	adds	r3, r7, #1
 8005a1c:	444b      	add	r3, r9
 8005a1e:	106d      	asrs	r5, r5, #1
 8005a20:	429d      	cmp	r5, r3
 8005a22:	bf38      	it	cc
 8005a24:	461d      	movcc	r5, r3
 8005a26:	0553      	lsls	r3, r2, #21
 8005a28:	d527      	bpl.n	8005a7a <__ssputs_r+0x8e>
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	f7ff ff52 	bl	80058d4 <_malloc_r>
 8005a30:	4606      	mov	r6, r0
 8005a32:	b360      	cbz	r0, 8005a8e <__ssputs_r+0xa2>
 8005a34:	464a      	mov	r2, r9
 8005a36:	6921      	ldr	r1, [r4, #16]
 8005a38:	f7ff fead 	bl	8005796 <memcpy>
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a46:	81a3      	strh	r3, [r4, #12]
 8005a48:	6126      	str	r6, [r4, #16]
 8005a4a:	444e      	add	r6, r9
 8005a4c:	6026      	str	r6, [r4, #0]
 8005a4e:	463e      	mov	r6, r7
 8005a50:	6165      	str	r5, [r4, #20]
 8005a52:	eba5 0509 	sub.w	r5, r5, r9
 8005a56:	60a5      	str	r5, [r4, #8]
 8005a58:	42be      	cmp	r6, r7
 8005a5a:	d900      	bls.n	8005a5e <__ssputs_r+0x72>
 8005a5c:	463e      	mov	r6, r7
 8005a5e:	4632      	mov	r2, r6
 8005a60:	4641      	mov	r1, r8
 8005a62:	6820      	ldr	r0, [r4, #0]
 8005a64:	f000 fb66 	bl	8006134 <memmove>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	68a3      	ldr	r3, [r4, #8]
 8005a6c:	1b9b      	subs	r3, r3, r6
 8005a6e:	60a3      	str	r3, [r4, #8]
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	4433      	add	r3, r6
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7a:	462a      	mov	r2, r5
 8005a7c:	f000 fb99 	bl	80061b2 <_realloc_r>
 8005a80:	4606      	mov	r6, r0
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d1e0      	bne.n	8005a48 <__ssputs_r+0x5c>
 8005a86:	4650      	mov	r0, sl
 8005a88:	6921      	ldr	r1, [r4, #16]
 8005a8a:	f7ff feb1 	bl	80057f0 <_free_r>
 8005a8e:	230c      	movs	r3, #12
 8005a90:	f8ca 3000 	str.w	r3, [sl]
 8005a94:	89a3      	ldrh	r3, [r4, #12]
 8005a96:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a9e:	81a3      	strh	r3, [r4, #12]
 8005aa0:	e7e9      	b.n	8005a76 <__ssputs_r+0x8a>
	...

08005aa4 <_svfiprintf_r>:
 8005aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa8:	4698      	mov	r8, r3
 8005aaa:	898b      	ldrh	r3, [r1, #12]
 8005aac:	4607      	mov	r7, r0
 8005aae:	061b      	lsls	r3, r3, #24
 8005ab0:	460d      	mov	r5, r1
 8005ab2:	4614      	mov	r4, r2
 8005ab4:	b09d      	sub	sp, #116	@ 0x74
 8005ab6:	d510      	bpl.n	8005ada <_svfiprintf_r+0x36>
 8005ab8:	690b      	ldr	r3, [r1, #16]
 8005aba:	b973      	cbnz	r3, 8005ada <_svfiprintf_r+0x36>
 8005abc:	2140      	movs	r1, #64	@ 0x40
 8005abe:	f7ff ff09 	bl	80058d4 <_malloc_r>
 8005ac2:	6028      	str	r0, [r5, #0]
 8005ac4:	6128      	str	r0, [r5, #16]
 8005ac6:	b930      	cbnz	r0, 8005ad6 <_svfiprintf_r+0x32>
 8005ac8:	230c      	movs	r3, #12
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad0:	b01d      	add	sp, #116	@ 0x74
 8005ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad6:	2340      	movs	r3, #64	@ 0x40
 8005ad8:	616b      	str	r3, [r5, #20]
 8005ada:	2300      	movs	r3, #0
 8005adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ade:	2320      	movs	r3, #32
 8005ae0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ae4:	2330      	movs	r3, #48	@ 0x30
 8005ae6:	f04f 0901 	mov.w	r9, #1
 8005aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005c88 <_svfiprintf_r+0x1e4>
 8005af2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005af6:	4623      	mov	r3, r4
 8005af8:	469a      	mov	sl, r3
 8005afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005afe:	b10a      	cbz	r2, 8005b04 <_svfiprintf_r+0x60>
 8005b00:	2a25      	cmp	r2, #37	@ 0x25
 8005b02:	d1f9      	bne.n	8005af8 <_svfiprintf_r+0x54>
 8005b04:	ebba 0b04 	subs.w	fp, sl, r4
 8005b08:	d00b      	beq.n	8005b22 <_svfiprintf_r+0x7e>
 8005b0a:	465b      	mov	r3, fp
 8005b0c:	4622      	mov	r2, r4
 8005b0e:	4629      	mov	r1, r5
 8005b10:	4638      	mov	r0, r7
 8005b12:	f7ff ff6b 	bl	80059ec <__ssputs_r>
 8005b16:	3001      	adds	r0, #1
 8005b18:	f000 80a7 	beq.w	8005c6a <_svfiprintf_r+0x1c6>
 8005b1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b1e:	445a      	add	r2, fp
 8005b20:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b22:	f89a 3000 	ldrb.w	r3, [sl]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 809f 	beq.w	8005c6a <_svfiprintf_r+0x1c6>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b36:	f10a 0a01 	add.w	sl, sl, #1
 8005b3a:	9304      	str	r3, [sp, #16]
 8005b3c:	9307      	str	r3, [sp, #28]
 8005b3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b42:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b44:	4654      	mov	r4, sl
 8005b46:	2205      	movs	r2, #5
 8005b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b4c:	484e      	ldr	r0, [pc, #312]	@ (8005c88 <_svfiprintf_r+0x1e4>)
 8005b4e:	f000 fb1b 	bl	8006188 <memchr>
 8005b52:	9a04      	ldr	r2, [sp, #16]
 8005b54:	b9d8      	cbnz	r0, 8005b8e <_svfiprintf_r+0xea>
 8005b56:	06d0      	lsls	r0, r2, #27
 8005b58:	bf44      	itt	mi
 8005b5a:	2320      	movmi	r3, #32
 8005b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b60:	0711      	lsls	r1, r2, #28
 8005b62:	bf44      	itt	mi
 8005b64:	232b      	movmi	r3, #43	@ 0x2b
 8005b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b70:	d015      	beq.n	8005b9e <_svfiprintf_r+0xfa>
 8005b72:	4654      	mov	r4, sl
 8005b74:	2000      	movs	r0, #0
 8005b76:	f04f 0c0a 	mov.w	ip, #10
 8005b7a:	9a07      	ldr	r2, [sp, #28]
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b82:	3b30      	subs	r3, #48	@ 0x30
 8005b84:	2b09      	cmp	r3, #9
 8005b86:	d94b      	bls.n	8005c20 <_svfiprintf_r+0x17c>
 8005b88:	b1b0      	cbz	r0, 8005bb8 <_svfiprintf_r+0x114>
 8005b8a:	9207      	str	r2, [sp, #28]
 8005b8c:	e014      	b.n	8005bb8 <_svfiprintf_r+0x114>
 8005b8e:	eba0 0308 	sub.w	r3, r0, r8
 8005b92:	fa09 f303 	lsl.w	r3, r9, r3
 8005b96:	4313      	orrs	r3, r2
 8005b98:	46a2      	mov	sl, r4
 8005b9a:	9304      	str	r3, [sp, #16]
 8005b9c:	e7d2      	b.n	8005b44 <_svfiprintf_r+0xa0>
 8005b9e:	9b03      	ldr	r3, [sp, #12]
 8005ba0:	1d19      	adds	r1, r3, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	9103      	str	r1, [sp, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bfbb      	ittet	lt
 8005baa:	425b      	neglt	r3, r3
 8005bac:	f042 0202 	orrlt.w	r2, r2, #2
 8005bb0:	9307      	strge	r3, [sp, #28]
 8005bb2:	9307      	strlt	r3, [sp, #28]
 8005bb4:	bfb8      	it	lt
 8005bb6:	9204      	strlt	r2, [sp, #16]
 8005bb8:	7823      	ldrb	r3, [r4, #0]
 8005bba:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bbc:	d10a      	bne.n	8005bd4 <_svfiprintf_r+0x130>
 8005bbe:	7863      	ldrb	r3, [r4, #1]
 8005bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bc2:	d132      	bne.n	8005c2a <_svfiprintf_r+0x186>
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	3402      	adds	r4, #2
 8005bc8:	1d1a      	adds	r2, r3, #4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	9203      	str	r2, [sp, #12]
 8005bce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bd2:	9305      	str	r3, [sp, #20]
 8005bd4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005c8c <_svfiprintf_r+0x1e8>
 8005bd8:	2203      	movs	r2, #3
 8005bda:	4650      	mov	r0, sl
 8005bdc:	7821      	ldrb	r1, [r4, #0]
 8005bde:	f000 fad3 	bl	8006188 <memchr>
 8005be2:	b138      	cbz	r0, 8005bf4 <_svfiprintf_r+0x150>
 8005be4:	2240      	movs	r2, #64	@ 0x40
 8005be6:	9b04      	ldr	r3, [sp, #16]
 8005be8:	eba0 000a 	sub.w	r0, r0, sl
 8005bec:	4082      	lsls	r2, r0
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	3401      	adds	r4, #1
 8005bf2:	9304      	str	r3, [sp, #16]
 8005bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf8:	2206      	movs	r2, #6
 8005bfa:	4825      	ldr	r0, [pc, #148]	@ (8005c90 <_svfiprintf_r+0x1ec>)
 8005bfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c00:	f000 fac2 	bl	8006188 <memchr>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d036      	beq.n	8005c76 <_svfiprintf_r+0x1d2>
 8005c08:	4b22      	ldr	r3, [pc, #136]	@ (8005c94 <_svfiprintf_r+0x1f0>)
 8005c0a:	bb1b      	cbnz	r3, 8005c54 <_svfiprintf_r+0x1b0>
 8005c0c:	9b03      	ldr	r3, [sp, #12]
 8005c0e:	3307      	adds	r3, #7
 8005c10:	f023 0307 	bic.w	r3, r3, #7
 8005c14:	3308      	adds	r3, #8
 8005c16:	9303      	str	r3, [sp, #12]
 8005c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c1a:	4433      	add	r3, r6
 8005c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c1e:	e76a      	b.n	8005af6 <_svfiprintf_r+0x52>
 8005c20:	460c      	mov	r4, r1
 8005c22:	2001      	movs	r0, #1
 8005c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c28:	e7a8      	b.n	8005b7c <_svfiprintf_r+0xd8>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f04f 0c0a 	mov.w	ip, #10
 8005c30:	4619      	mov	r1, r3
 8005c32:	3401      	adds	r4, #1
 8005c34:	9305      	str	r3, [sp, #20]
 8005c36:	4620      	mov	r0, r4
 8005c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c3c:	3a30      	subs	r2, #48	@ 0x30
 8005c3e:	2a09      	cmp	r2, #9
 8005c40:	d903      	bls.n	8005c4a <_svfiprintf_r+0x1a6>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0c6      	beq.n	8005bd4 <_svfiprintf_r+0x130>
 8005c46:	9105      	str	r1, [sp, #20]
 8005c48:	e7c4      	b.n	8005bd4 <_svfiprintf_r+0x130>
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c52:	e7f0      	b.n	8005c36 <_svfiprintf_r+0x192>
 8005c54:	ab03      	add	r3, sp, #12
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	462a      	mov	r2, r5
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8005c98 <_svfiprintf_r+0x1f4>)
 8005c5e:	a904      	add	r1, sp, #16
 8005c60:	f3af 8000 	nop.w
 8005c64:	1c42      	adds	r2, r0, #1
 8005c66:	4606      	mov	r6, r0
 8005c68:	d1d6      	bne.n	8005c18 <_svfiprintf_r+0x174>
 8005c6a:	89ab      	ldrh	r3, [r5, #12]
 8005c6c:	065b      	lsls	r3, r3, #25
 8005c6e:	f53f af2d 	bmi.w	8005acc <_svfiprintf_r+0x28>
 8005c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c74:	e72c      	b.n	8005ad0 <_svfiprintf_r+0x2c>
 8005c76:	ab03      	add	r3, sp, #12
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	462a      	mov	r2, r5
 8005c7c:	4638      	mov	r0, r7
 8005c7e:	4b06      	ldr	r3, [pc, #24]	@ (8005c98 <_svfiprintf_r+0x1f4>)
 8005c80:	a904      	add	r1, sp, #16
 8005c82:	f000 f87d 	bl	8005d80 <_printf_i>
 8005c86:	e7ed      	b.n	8005c64 <_svfiprintf_r+0x1c0>
 8005c88:	08006a87 	.word	0x08006a87
 8005c8c:	08006a8d 	.word	0x08006a8d
 8005c90:	08006a91 	.word	0x08006a91
 8005c94:	00000000 	.word	0x00000000
 8005c98:	080059ed 	.word	0x080059ed

08005c9c <_printf_common>:
 8005c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca0:	4616      	mov	r6, r2
 8005ca2:	4698      	mov	r8, r3
 8005ca4:	688a      	ldr	r2, [r1, #8]
 8005ca6:	690b      	ldr	r3, [r1, #16]
 8005ca8:	4607      	mov	r7, r0
 8005caa:	4293      	cmp	r3, r2
 8005cac:	bfb8      	it	lt
 8005cae:	4613      	movlt	r3, r2
 8005cb0:	6033      	str	r3, [r6, #0]
 8005cb2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cbc:	b10a      	cbz	r2, 8005cc2 <_printf_common+0x26>
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	6033      	str	r3, [r6, #0]
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	0699      	lsls	r1, r3, #26
 8005cc6:	bf42      	ittt	mi
 8005cc8:	6833      	ldrmi	r3, [r6, #0]
 8005cca:	3302      	addmi	r3, #2
 8005ccc:	6033      	strmi	r3, [r6, #0]
 8005cce:	6825      	ldr	r5, [r4, #0]
 8005cd0:	f015 0506 	ands.w	r5, r5, #6
 8005cd4:	d106      	bne.n	8005ce4 <_printf_common+0x48>
 8005cd6:	f104 0a19 	add.w	sl, r4, #25
 8005cda:	68e3      	ldr	r3, [r4, #12]
 8005cdc:	6832      	ldr	r2, [r6, #0]
 8005cde:	1a9b      	subs	r3, r3, r2
 8005ce0:	42ab      	cmp	r3, r5
 8005ce2:	dc2b      	bgt.n	8005d3c <_printf_common+0xa0>
 8005ce4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ce8:	6822      	ldr	r2, [r4, #0]
 8005cea:	3b00      	subs	r3, #0
 8005cec:	bf18      	it	ne
 8005cee:	2301      	movne	r3, #1
 8005cf0:	0692      	lsls	r2, r2, #26
 8005cf2:	d430      	bmi.n	8005d56 <_printf_common+0xba>
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cfc:	47c8      	blx	r9
 8005cfe:	3001      	adds	r0, #1
 8005d00:	d023      	beq.n	8005d4a <_printf_common+0xae>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	6922      	ldr	r2, [r4, #16]
 8005d06:	f003 0306 	and.w	r3, r3, #6
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	bf14      	ite	ne
 8005d0e:	2500      	movne	r5, #0
 8005d10:	6833      	ldreq	r3, [r6, #0]
 8005d12:	f04f 0600 	mov.w	r6, #0
 8005d16:	bf08      	it	eq
 8005d18:	68e5      	ldreq	r5, [r4, #12]
 8005d1a:	f104 041a 	add.w	r4, r4, #26
 8005d1e:	bf08      	it	eq
 8005d20:	1aed      	subeq	r5, r5, r3
 8005d22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d26:	bf08      	it	eq
 8005d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	bfc4      	itt	gt
 8005d30:	1a9b      	subgt	r3, r3, r2
 8005d32:	18ed      	addgt	r5, r5, r3
 8005d34:	42b5      	cmp	r5, r6
 8005d36:	d11a      	bne.n	8005d6e <_printf_common+0xd2>
 8005d38:	2000      	movs	r0, #0
 8005d3a:	e008      	b.n	8005d4e <_printf_common+0xb2>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	4652      	mov	r2, sl
 8005d40:	4641      	mov	r1, r8
 8005d42:	4638      	mov	r0, r7
 8005d44:	47c8      	blx	r9
 8005d46:	3001      	adds	r0, #1
 8005d48:	d103      	bne.n	8005d52 <_printf_common+0xb6>
 8005d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d52:	3501      	adds	r5, #1
 8005d54:	e7c1      	b.n	8005cda <_printf_common+0x3e>
 8005d56:	2030      	movs	r0, #48	@ 0x30
 8005d58:	18e1      	adds	r1, r4, r3
 8005d5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d64:	4422      	add	r2, r4
 8005d66:	3302      	adds	r3, #2
 8005d68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d6c:	e7c2      	b.n	8005cf4 <_printf_common+0x58>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4622      	mov	r2, r4
 8005d72:	4641      	mov	r1, r8
 8005d74:	4638      	mov	r0, r7
 8005d76:	47c8      	blx	r9
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d0e6      	beq.n	8005d4a <_printf_common+0xae>
 8005d7c:	3601      	adds	r6, #1
 8005d7e:	e7d9      	b.n	8005d34 <_printf_common+0x98>

08005d80 <_printf_i>:
 8005d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d84:	7e0f      	ldrb	r7, [r1, #24]
 8005d86:	4691      	mov	r9, r2
 8005d88:	2f78      	cmp	r7, #120	@ 0x78
 8005d8a:	4680      	mov	r8, r0
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	469a      	mov	sl, r3
 8005d90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d96:	d807      	bhi.n	8005da8 <_printf_i+0x28>
 8005d98:	2f62      	cmp	r7, #98	@ 0x62
 8005d9a:	d80a      	bhi.n	8005db2 <_printf_i+0x32>
 8005d9c:	2f00      	cmp	r7, #0
 8005d9e:	f000 80d3 	beq.w	8005f48 <_printf_i+0x1c8>
 8005da2:	2f58      	cmp	r7, #88	@ 0x58
 8005da4:	f000 80ba 	beq.w	8005f1c <_printf_i+0x19c>
 8005da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005db0:	e03a      	b.n	8005e28 <_printf_i+0xa8>
 8005db2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005db6:	2b15      	cmp	r3, #21
 8005db8:	d8f6      	bhi.n	8005da8 <_printf_i+0x28>
 8005dba:	a101      	add	r1, pc, #4	@ (adr r1, 8005dc0 <_printf_i+0x40>)
 8005dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dc0:	08005e19 	.word	0x08005e19
 8005dc4:	08005e2d 	.word	0x08005e2d
 8005dc8:	08005da9 	.word	0x08005da9
 8005dcc:	08005da9 	.word	0x08005da9
 8005dd0:	08005da9 	.word	0x08005da9
 8005dd4:	08005da9 	.word	0x08005da9
 8005dd8:	08005e2d 	.word	0x08005e2d
 8005ddc:	08005da9 	.word	0x08005da9
 8005de0:	08005da9 	.word	0x08005da9
 8005de4:	08005da9 	.word	0x08005da9
 8005de8:	08005da9 	.word	0x08005da9
 8005dec:	08005f2f 	.word	0x08005f2f
 8005df0:	08005e57 	.word	0x08005e57
 8005df4:	08005ee9 	.word	0x08005ee9
 8005df8:	08005da9 	.word	0x08005da9
 8005dfc:	08005da9 	.word	0x08005da9
 8005e00:	08005f51 	.word	0x08005f51
 8005e04:	08005da9 	.word	0x08005da9
 8005e08:	08005e57 	.word	0x08005e57
 8005e0c:	08005da9 	.word	0x08005da9
 8005e10:	08005da9 	.word	0x08005da9
 8005e14:	08005ef1 	.word	0x08005ef1
 8005e18:	6833      	ldr	r3, [r6, #0]
 8005e1a:	1d1a      	adds	r2, r3, #4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6032      	str	r2, [r6, #0]
 8005e20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e09e      	b.n	8005f6a <_printf_i+0x1ea>
 8005e2c:	6833      	ldr	r3, [r6, #0]
 8005e2e:	6820      	ldr	r0, [r4, #0]
 8005e30:	1d19      	adds	r1, r3, #4
 8005e32:	6031      	str	r1, [r6, #0]
 8005e34:	0606      	lsls	r6, r0, #24
 8005e36:	d501      	bpl.n	8005e3c <_printf_i+0xbc>
 8005e38:	681d      	ldr	r5, [r3, #0]
 8005e3a:	e003      	b.n	8005e44 <_printf_i+0xc4>
 8005e3c:	0645      	lsls	r5, r0, #25
 8005e3e:	d5fb      	bpl.n	8005e38 <_printf_i+0xb8>
 8005e40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e44:	2d00      	cmp	r5, #0
 8005e46:	da03      	bge.n	8005e50 <_printf_i+0xd0>
 8005e48:	232d      	movs	r3, #45	@ 0x2d
 8005e4a:	426d      	negs	r5, r5
 8005e4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e50:	230a      	movs	r3, #10
 8005e52:	4859      	ldr	r0, [pc, #356]	@ (8005fb8 <_printf_i+0x238>)
 8005e54:	e011      	b.n	8005e7a <_printf_i+0xfa>
 8005e56:	6821      	ldr	r1, [r4, #0]
 8005e58:	6833      	ldr	r3, [r6, #0]
 8005e5a:	0608      	lsls	r0, r1, #24
 8005e5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e60:	d402      	bmi.n	8005e68 <_printf_i+0xe8>
 8005e62:	0649      	lsls	r1, r1, #25
 8005e64:	bf48      	it	mi
 8005e66:	b2ad      	uxthmi	r5, r5
 8005e68:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e6a:	6033      	str	r3, [r6, #0]
 8005e6c:	bf14      	ite	ne
 8005e6e:	230a      	movne	r3, #10
 8005e70:	2308      	moveq	r3, #8
 8005e72:	4851      	ldr	r0, [pc, #324]	@ (8005fb8 <_printf_i+0x238>)
 8005e74:	2100      	movs	r1, #0
 8005e76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e7a:	6866      	ldr	r6, [r4, #4]
 8005e7c:	2e00      	cmp	r6, #0
 8005e7e:	bfa8      	it	ge
 8005e80:	6821      	ldrge	r1, [r4, #0]
 8005e82:	60a6      	str	r6, [r4, #8]
 8005e84:	bfa4      	itt	ge
 8005e86:	f021 0104 	bicge.w	r1, r1, #4
 8005e8a:	6021      	strge	r1, [r4, #0]
 8005e8c:	b90d      	cbnz	r5, 8005e92 <_printf_i+0x112>
 8005e8e:	2e00      	cmp	r6, #0
 8005e90:	d04b      	beq.n	8005f2a <_printf_i+0x1aa>
 8005e92:	4616      	mov	r6, r2
 8005e94:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e98:	fb03 5711 	mls	r7, r3, r1, r5
 8005e9c:	5dc7      	ldrb	r7, [r0, r7]
 8005e9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ea2:	462f      	mov	r7, r5
 8005ea4:	42bb      	cmp	r3, r7
 8005ea6:	460d      	mov	r5, r1
 8005ea8:	d9f4      	bls.n	8005e94 <_printf_i+0x114>
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d10b      	bne.n	8005ec6 <_printf_i+0x146>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	07df      	lsls	r7, r3, #31
 8005eb2:	d508      	bpl.n	8005ec6 <_printf_i+0x146>
 8005eb4:	6923      	ldr	r3, [r4, #16]
 8005eb6:	6861      	ldr	r1, [r4, #4]
 8005eb8:	4299      	cmp	r1, r3
 8005eba:	bfde      	ittt	le
 8005ebc:	2330      	movle	r3, #48	@ 0x30
 8005ebe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ec2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ec6:	1b92      	subs	r2, r2, r6
 8005ec8:	6122      	str	r2, [r4, #16]
 8005eca:	464b      	mov	r3, r9
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4640      	mov	r0, r8
 8005ed0:	f8cd a000 	str.w	sl, [sp]
 8005ed4:	aa03      	add	r2, sp, #12
 8005ed6:	f7ff fee1 	bl	8005c9c <_printf_common>
 8005eda:	3001      	adds	r0, #1
 8005edc:	d14a      	bne.n	8005f74 <_printf_i+0x1f4>
 8005ede:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee2:	b004      	add	sp, #16
 8005ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	f043 0320 	orr.w	r3, r3, #32
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	2778      	movs	r7, #120	@ 0x78
 8005ef2:	4832      	ldr	r0, [pc, #200]	@ (8005fbc <_printf_i+0x23c>)
 8005ef4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	6831      	ldr	r1, [r6, #0]
 8005efc:	061f      	lsls	r7, r3, #24
 8005efe:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f02:	d402      	bmi.n	8005f0a <_printf_i+0x18a>
 8005f04:	065f      	lsls	r7, r3, #25
 8005f06:	bf48      	it	mi
 8005f08:	b2ad      	uxthmi	r5, r5
 8005f0a:	6031      	str	r1, [r6, #0]
 8005f0c:	07d9      	lsls	r1, r3, #31
 8005f0e:	bf44      	itt	mi
 8005f10:	f043 0320 	orrmi.w	r3, r3, #32
 8005f14:	6023      	strmi	r3, [r4, #0]
 8005f16:	b11d      	cbz	r5, 8005f20 <_printf_i+0x1a0>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	e7ab      	b.n	8005e74 <_printf_i+0xf4>
 8005f1c:	4826      	ldr	r0, [pc, #152]	@ (8005fb8 <_printf_i+0x238>)
 8005f1e:	e7e9      	b.n	8005ef4 <_printf_i+0x174>
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	f023 0320 	bic.w	r3, r3, #32
 8005f26:	6023      	str	r3, [r4, #0]
 8005f28:	e7f6      	b.n	8005f18 <_printf_i+0x198>
 8005f2a:	4616      	mov	r6, r2
 8005f2c:	e7bd      	b.n	8005eaa <_printf_i+0x12a>
 8005f2e:	6833      	ldr	r3, [r6, #0]
 8005f30:	6825      	ldr	r5, [r4, #0]
 8005f32:	1d18      	adds	r0, r3, #4
 8005f34:	6961      	ldr	r1, [r4, #20]
 8005f36:	6030      	str	r0, [r6, #0]
 8005f38:	062e      	lsls	r6, r5, #24
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	d501      	bpl.n	8005f42 <_printf_i+0x1c2>
 8005f3e:	6019      	str	r1, [r3, #0]
 8005f40:	e002      	b.n	8005f48 <_printf_i+0x1c8>
 8005f42:	0668      	lsls	r0, r5, #25
 8005f44:	d5fb      	bpl.n	8005f3e <_printf_i+0x1be>
 8005f46:	8019      	strh	r1, [r3, #0]
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4616      	mov	r6, r2
 8005f4c:	6123      	str	r3, [r4, #16]
 8005f4e:	e7bc      	b.n	8005eca <_printf_i+0x14a>
 8005f50:	6833      	ldr	r3, [r6, #0]
 8005f52:	2100      	movs	r1, #0
 8005f54:	1d1a      	adds	r2, r3, #4
 8005f56:	6032      	str	r2, [r6, #0]
 8005f58:	681e      	ldr	r6, [r3, #0]
 8005f5a:	6862      	ldr	r2, [r4, #4]
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f000 f913 	bl	8006188 <memchr>
 8005f62:	b108      	cbz	r0, 8005f68 <_printf_i+0x1e8>
 8005f64:	1b80      	subs	r0, r0, r6
 8005f66:	6060      	str	r0, [r4, #4]
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	6123      	str	r3, [r4, #16]
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f72:	e7aa      	b.n	8005eca <_printf_i+0x14a>
 8005f74:	4632      	mov	r2, r6
 8005f76:	4649      	mov	r1, r9
 8005f78:	4640      	mov	r0, r8
 8005f7a:	6923      	ldr	r3, [r4, #16]
 8005f7c:	47d0      	blx	sl
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d0ad      	beq.n	8005ede <_printf_i+0x15e>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	079b      	lsls	r3, r3, #30
 8005f86:	d413      	bmi.n	8005fb0 <_printf_i+0x230>
 8005f88:	68e0      	ldr	r0, [r4, #12]
 8005f8a:	9b03      	ldr	r3, [sp, #12]
 8005f8c:	4298      	cmp	r0, r3
 8005f8e:	bfb8      	it	lt
 8005f90:	4618      	movlt	r0, r3
 8005f92:	e7a6      	b.n	8005ee2 <_printf_i+0x162>
 8005f94:	2301      	movs	r3, #1
 8005f96:	4632      	mov	r2, r6
 8005f98:	4649      	mov	r1, r9
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	47d0      	blx	sl
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d09d      	beq.n	8005ede <_printf_i+0x15e>
 8005fa2:	3501      	adds	r5, #1
 8005fa4:	68e3      	ldr	r3, [r4, #12]
 8005fa6:	9903      	ldr	r1, [sp, #12]
 8005fa8:	1a5b      	subs	r3, r3, r1
 8005faa:	42ab      	cmp	r3, r5
 8005fac:	dcf2      	bgt.n	8005f94 <_printf_i+0x214>
 8005fae:	e7eb      	b.n	8005f88 <_printf_i+0x208>
 8005fb0:	2500      	movs	r5, #0
 8005fb2:	f104 0619 	add.w	r6, r4, #25
 8005fb6:	e7f5      	b.n	8005fa4 <_printf_i+0x224>
 8005fb8:	08006a98 	.word	0x08006a98
 8005fbc:	08006aa9 	.word	0x08006aa9

08005fc0 <__sflush_r>:
 8005fc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc6:	0716      	lsls	r6, r2, #28
 8005fc8:	4605      	mov	r5, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	d454      	bmi.n	8006078 <__sflush_r+0xb8>
 8005fce:	684b      	ldr	r3, [r1, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	dc02      	bgt.n	8005fda <__sflush_r+0x1a>
 8005fd4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	dd48      	ble.n	800606c <__sflush_r+0xac>
 8005fda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fdc:	2e00      	cmp	r6, #0
 8005fde:	d045      	beq.n	800606c <__sflush_r+0xac>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fe6:	682f      	ldr	r7, [r5, #0]
 8005fe8:	6a21      	ldr	r1, [r4, #32]
 8005fea:	602b      	str	r3, [r5, #0]
 8005fec:	d030      	beq.n	8006050 <__sflush_r+0x90>
 8005fee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	0759      	lsls	r1, r3, #29
 8005ff4:	d505      	bpl.n	8006002 <__sflush_r+0x42>
 8005ff6:	6863      	ldr	r3, [r4, #4]
 8005ff8:	1ad2      	subs	r2, r2, r3
 8005ffa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ffc:	b10b      	cbz	r3, 8006002 <__sflush_r+0x42>
 8005ffe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006000:	1ad2      	subs	r2, r2, r3
 8006002:	2300      	movs	r3, #0
 8006004:	4628      	mov	r0, r5
 8006006:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006008:	6a21      	ldr	r1, [r4, #32]
 800600a:	47b0      	blx	r6
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	d106      	bne.n	8006020 <__sflush_r+0x60>
 8006012:	6829      	ldr	r1, [r5, #0]
 8006014:	291d      	cmp	r1, #29
 8006016:	d82b      	bhi.n	8006070 <__sflush_r+0xb0>
 8006018:	4a28      	ldr	r2, [pc, #160]	@ (80060bc <__sflush_r+0xfc>)
 800601a:	410a      	asrs	r2, r1
 800601c:	07d6      	lsls	r6, r2, #31
 800601e:	d427      	bmi.n	8006070 <__sflush_r+0xb0>
 8006020:	2200      	movs	r2, #0
 8006022:	6062      	str	r2, [r4, #4]
 8006024:	6922      	ldr	r2, [r4, #16]
 8006026:	04d9      	lsls	r1, r3, #19
 8006028:	6022      	str	r2, [r4, #0]
 800602a:	d504      	bpl.n	8006036 <__sflush_r+0x76>
 800602c:	1c42      	adds	r2, r0, #1
 800602e:	d101      	bne.n	8006034 <__sflush_r+0x74>
 8006030:	682b      	ldr	r3, [r5, #0]
 8006032:	b903      	cbnz	r3, 8006036 <__sflush_r+0x76>
 8006034:	6560      	str	r0, [r4, #84]	@ 0x54
 8006036:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006038:	602f      	str	r7, [r5, #0]
 800603a:	b1b9      	cbz	r1, 800606c <__sflush_r+0xac>
 800603c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006040:	4299      	cmp	r1, r3
 8006042:	d002      	beq.n	800604a <__sflush_r+0x8a>
 8006044:	4628      	mov	r0, r5
 8006046:	f7ff fbd3 	bl	80057f0 <_free_r>
 800604a:	2300      	movs	r3, #0
 800604c:	6363      	str	r3, [r4, #52]	@ 0x34
 800604e:	e00d      	b.n	800606c <__sflush_r+0xac>
 8006050:	2301      	movs	r3, #1
 8006052:	4628      	mov	r0, r5
 8006054:	47b0      	blx	r6
 8006056:	4602      	mov	r2, r0
 8006058:	1c50      	adds	r0, r2, #1
 800605a:	d1c9      	bne.n	8005ff0 <__sflush_r+0x30>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0c6      	beq.n	8005ff0 <__sflush_r+0x30>
 8006062:	2b1d      	cmp	r3, #29
 8006064:	d001      	beq.n	800606a <__sflush_r+0xaa>
 8006066:	2b16      	cmp	r3, #22
 8006068:	d11d      	bne.n	80060a6 <__sflush_r+0xe6>
 800606a:	602f      	str	r7, [r5, #0]
 800606c:	2000      	movs	r0, #0
 800606e:	e021      	b.n	80060b4 <__sflush_r+0xf4>
 8006070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006074:	b21b      	sxth	r3, r3
 8006076:	e01a      	b.n	80060ae <__sflush_r+0xee>
 8006078:	690f      	ldr	r7, [r1, #16]
 800607a:	2f00      	cmp	r7, #0
 800607c:	d0f6      	beq.n	800606c <__sflush_r+0xac>
 800607e:	0793      	lsls	r3, r2, #30
 8006080:	bf18      	it	ne
 8006082:	2300      	movne	r3, #0
 8006084:	680e      	ldr	r6, [r1, #0]
 8006086:	bf08      	it	eq
 8006088:	694b      	ldreq	r3, [r1, #20]
 800608a:	1bf6      	subs	r6, r6, r7
 800608c:	600f      	str	r7, [r1, #0]
 800608e:	608b      	str	r3, [r1, #8]
 8006090:	2e00      	cmp	r6, #0
 8006092:	ddeb      	ble.n	800606c <__sflush_r+0xac>
 8006094:	4633      	mov	r3, r6
 8006096:	463a      	mov	r2, r7
 8006098:	4628      	mov	r0, r5
 800609a:	6a21      	ldr	r1, [r4, #32]
 800609c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80060a0:	47e0      	blx	ip
 80060a2:	2800      	cmp	r0, #0
 80060a4:	dc07      	bgt.n	80060b6 <__sflush_r+0xf6>
 80060a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060ae:	f04f 30ff 	mov.w	r0, #4294967295
 80060b2:	81a3      	strh	r3, [r4, #12]
 80060b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060b6:	4407      	add	r7, r0
 80060b8:	1a36      	subs	r6, r6, r0
 80060ba:	e7e9      	b.n	8006090 <__sflush_r+0xd0>
 80060bc:	dfbffffe 	.word	0xdfbffffe

080060c0 <_fflush_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	690b      	ldr	r3, [r1, #16]
 80060c4:	4605      	mov	r5, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	b913      	cbnz	r3, 80060d0 <_fflush_r+0x10>
 80060ca:	2500      	movs	r5, #0
 80060cc:	4628      	mov	r0, r5
 80060ce:	bd38      	pop	{r3, r4, r5, pc}
 80060d0:	b118      	cbz	r0, 80060da <_fflush_r+0x1a>
 80060d2:	6a03      	ldr	r3, [r0, #32]
 80060d4:	b90b      	cbnz	r3, 80060da <_fflush_r+0x1a>
 80060d6:	f7ff f9d7 	bl	8005488 <__sinit>
 80060da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f3      	beq.n	80060ca <_fflush_r+0xa>
 80060e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060e4:	07d0      	lsls	r0, r2, #31
 80060e6:	d404      	bmi.n	80060f2 <_fflush_r+0x32>
 80060e8:	0599      	lsls	r1, r3, #22
 80060ea:	d402      	bmi.n	80060f2 <_fflush_r+0x32>
 80060ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ee:	f7ff fb50 	bl	8005792 <__retarget_lock_acquire_recursive>
 80060f2:	4628      	mov	r0, r5
 80060f4:	4621      	mov	r1, r4
 80060f6:	f7ff ff63 	bl	8005fc0 <__sflush_r>
 80060fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060fc:	4605      	mov	r5, r0
 80060fe:	07da      	lsls	r2, r3, #31
 8006100:	d4e4      	bmi.n	80060cc <_fflush_r+0xc>
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	059b      	lsls	r3, r3, #22
 8006106:	d4e1      	bmi.n	80060cc <_fflush_r+0xc>
 8006108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800610a:	f7ff fb43 	bl	8005794 <__retarget_lock_release_recursive>
 800610e:	e7dd      	b.n	80060cc <_fflush_r+0xc>

08006110 <fiprintf>:
 8006110:	b40e      	push	{r1, r2, r3}
 8006112:	b503      	push	{r0, r1, lr}
 8006114:	4601      	mov	r1, r0
 8006116:	ab03      	add	r3, sp, #12
 8006118:	4805      	ldr	r0, [pc, #20]	@ (8006130 <fiprintf+0x20>)
 800611a:	f853 2b04 	ldr.w	r2, [r3], #4
 800611e:	6800      	ldr	r0, [r0, #0]
 8006120:	9301      	str	r3, [sp, #4]
 8006122:	f000 f89b 	bl	800625c <_vfiprintf_r>
 8006126:	b002      	add	sp, #8
 8006128:	f85d eb04 	ldr.w	lr, [sp], #4
 800612c:	b003      	add	sp, #12
 800612e:	4770      	bx	lr
 8006130:	200000d8 	.word	0x200000d8

08006134 <memmove>:
 8006134:	4288      	cmp	r0, r1
 8006136:	b510      	push	{r4, lr}
 8006138:	eb01 0402 	add.w	r4, r1, r2
 800613c:	d902      	bls.n	8006144 <memmove+0x10>
 800613e:	4284      	cmp	r4, r0
 8006140:	4623      	mov	r3, r4
 8006142:	d807      	bhi.n	8006154 <memmove+0x20>
 8006144:	1e43      	subs	r3, r0, #1
 8006146:	42a1      	cmp	r1, r4
 8006148:	d008      	beq.n	800615c <memmove+0x28>
 800614a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800614e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006152:	e7f8      	b.n	8006146 <memmove+0x12>
 8006154:	4601      	mov	r1, r0
 8006156:	4402      	add	r2, r0
 8006158:	428a      	cmp	r2, r1
 800615a:	d100      	bne.n	800615e <memmove+0x2a>
 800615c:	bd10      	pop	{r4, pc}
 800615e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006166:	e7f7      	b.n	8006158 <memmove+0x24>

08006168 <_sbrk_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	2300      	movs	r3, #0
 800616c:	4d05      	ldr	r5, [pc, #20]	@ (8006184 <_sbrk_r+0x1c>)
 800616e:	4604      	mov	r4, r0
 8006170:	4608      	mov	r0, r1
 8006172:	602b      	str	r3, [r5, #0]
 8006174:	f7fc f870 	bl	8002258 <_sbrk>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d102      	bne.n	8006182 <_sbrk_r+0x1a>
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	b103      	cbz	r3, 8006182 <_sbrk_r+0x1a>
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	20000488 	.word	0x20000488

08006188 <memchr>:
 8006188:	4603      	mov	r3, r0
 800618a:	b510      	push	{r4, lr}
 800618c:	b2c9      	uxtb	r1, r1
 800618e:	4402      	add	r2, r0
 8006190:	4293      	cmp	r3, r2
 8006192:	4618      	mov	r0, r3
 8006194:	d101      	bne.n	800619a <memchr+0x12>
 8006196:	2000      	movs	r0, #0
 8006198:	e003      	b.n	80061a2 <memchr+0x1a>
 800619a:	7804      	ldrb	r4, [r0, #0]
 800619c:	3301      	adds	r3, #1
 800619e:	428c      	cmp	r4, r1
 80061a0:	d1f6      	bne.n	8006190 <memchr+0x8>
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <abort>:
 80061a4:	2006      	movs	r0, #6
 80061a6:	b508      	push	{r3, lr}
 80061a8:	f000 fa2c 	bl	8006604 <raise>
 80061ac:	2001      	movs	r0, #1
 80061ae:	f7fb ffde 	bl	800216e <_exit>

080061b2 <_realloc_r>:
 80061b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b6:	4680      	mov	r8, r0
 80061b8:	4615      	mov	r5, r2
 80061ba:	460c      	mov	r4, r1
 80061bc:	b921      	cbnz	r1, 80061c8 <_realloc_r+0x16>
 80061be:	4611      	mov	r1, r2
 80061c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061c4:	f7ff bb86 	b.w	80058d4 <_malloc_r>
 80061c8:	b92a      	cbnz	r2, 80061d6 <_realloc_r+0x24>
 80061ca:	f7ff fb11 	bl	80057f0 <_free_r>
 80061ce:	2400      	movs	r4, #0
 80061d0:	4620      	mov	r0, r4
 80061d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d6:	f000 fa31 	bl	800663c <_malloc_usable_size_r>
 80061da:	4285      	cmp	r5, r0
 80061dc:	4606      	mov	r6, r0
 80061de:	d802      	bhi.n	80061e6 <_realloc_r+0x34>
 80061e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80061e4:	d8f4      	bhi.n	80061d0 <_realloc_r+0x1e>
 80061e6:	4629      	mov	r1, r5
 80061e8:	4640      	mov	r0, r8
 80061ea:	f7ff fb73 	bl	80058d4 <_malloc_r>
 80061ee:	4607      	mov	r7, r0
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d0ec      	beq.n	80061ce <_realloc_r+0x1c>
 80061f4:	42b5      	cmp	r5, r6
 80061f6:	462a      	mov	r2, r5
 80061f8:	4621      	mov	r1, r4
 80061fa:	bf28      	it	cs
 80061fc:	4632      	movcs	r2, r6
 80061fe:	f7ff faca 	bl	8005796 <memcpy>
 8006202:	4621      	mov	r1, r4
 8006204:	4640      	mov	r0, r8
 8006206:	f7ff faf3 	bl	80057f0 <_free_r>
 800620a:	463c      	mov	r4, r7
 800620c:	e7e0      	b.n	80061d0 <_realloc_r+0x1e>

0800620e <__sfputc_r>:
 800620e:	6893      	ldr	r3, [r2, #8]
 8006210:	b410      	push	{r4}
 8006212:	3b01      	subs	r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	6093      	str	r3, [r2, #8]
 8006218:	da07      	bge.n	800622a <__sfputc_r+0x1c>
 800621a:	6994      	ldr	r4, [r2, #24]
 800621c:	42a3      	cmp	r3, r4
 800621e:	db01      	blt.n	8006224 <__sfputc_r+0x16>
 8006220:	290a      	cmp	r1, #10
 8006222:	d102      	bne.n	800622a <__sfputc_r+0x1c>
 8006224:	bc10      	pop	{r4}
 8006226:	f000 b931 	b.w	800648c <__swbuf_r>
 800622a:	6813      	ldr	r3, [r2, #0]
 800622c:	1c58      	adds	r0, r3, #1
 800622e:	6010      	str	r0, [r2, #0]
 8006230:	7019      	strb	r1, [r3, #0]
 8006232:	4608      	mov	r0, r1
 8006234:	bc10      	pop	{r4}
 8006236:	4770      	bx	lr

08006238 <__sfputs_r>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	4606      	mov	r6, r0
 800623c:	460f      	mov	r7, r1
 800623e:	4614      	mov	r4, r2
 8006240:	18d5      	adds	r5, r2, r3
 8006242:	42ac      	cmp	r4, r5
 8006244:	d101      	bne.n	800624a <__sfputs_r+0x12>
 8006246:	2000      	movs	r0, #0
 8006248:	e007      	b.n	800625a <__sfputs_r+0x22>
 800624a:	463a      	mov	r2, r7
 800624c:	4630      	mov	r0, r6
 800624e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006252:	f7ff ffdc 	bl	800620e <__sfputc_r>
 8006256:	1c43      	adds	r3, r0, #1
 8006258:	d1f3      	bne.n	8006242 <__sfputs_r+0xa>
 800625a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800625c <_vfiprintf_r>:
 800625c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006260:	460d      	mov	r5, r1
 8006262:	4614      	mov	r4, r2
 8006264:	4698      	mov	r8, r3
 8006266:	4606      	mov	r6, r0
 8006268:	b09d      	sub	sp, #116	@ 0x74
 800626a:	b118      	cbz	r0, 8006274 <_vfiprintf_r+0x18>
 800626c:	6a03      	ldr	r3, [r0, #32]
 800626e:	b90b      	cbnz	r3, 8006274 <_vfiprintf_r+0x18>
 8006270:	f7ff f90a 	bl	8005488 <__sinit>
 8006274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006276:	07d9      	lsls	r1, r3, #31
 8006278:	d405      	bmi.n	8006286 <_vfiprintf_r+0x2a>
 800627a:	89ab      	ldrh	r3, [r5, #12]
 800627c:	059a      	lsls	r2, r3, #22
 800627e:	d402      	bmi.n	8006286 <_vfiprintf_r+0x2a>
 8006280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006282:	f7ff fa86 	bl	8005792 <__retarget_lock_acquire_recursive>
 8006286:	89ab      	ldrh	r3, [r5, #12]
 8006288:	071b      	lsls	r3, r3, #28
 800628a:	d501      	bpl.n	8006290 <_vfiprintf_r+0x34>
 800628c:	692b      	ldr	r3, [r5, #16]
 800628e:	b99b      	cbnz	r3, 80062b8 <_vfiprintf_r+0x5c>
 8006290:	4629      	mov	r1, r5
 8006292:	4630      	mov	r0, r6
 8006294:	f000 f938 	bl	8006508 <__swsetup_r>
 8006298:	b170      	cbz	r0, 80062b8 <_vfiprintf_r+0x5c>
 800629a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800629c:	07dc      	lsls	r4, r3, #31
 800629e:	d504      	bpl.n	80062aa <_vfiprintf_r+0x4e>
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	b01d      	add	sp, #116	@ 0x74
 80062a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062aa:	89ab      	ldrh	r3, [r5, #12]
 80062ac:	0598      	lsls	r0, r3, #22
 80062ae:	d4f7      	bmi.n	80062a0 <_vfiprintf_r+0x44>
 80062b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062b2:	f7ff fa6f 	bl	8005794 <__retarget_lock_release_recursive>
 80062b6:	e7f3      	b.n	80062a0 <_vfiprintf_r+0x44>
 80062b8:	2300      	movs	r3, #0
 80062ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80062bc:	2320      	movs	r3, #32
 80062be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062c2:	2330      	movs	r3, #48	@ 0x30
 80062c4:	f04f 0901 	mov.w	r9, #1
 80062c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80062cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006478 <_vfiprintf_r+0x21c>
 80062d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062d4:	4623      	mov	r3, r4
 80062d6:	469a      	mov	sl, r3
 80062d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062dc:	b10a      	cbz	r2, 80062e2 <_vfiprintf_r+0x86>
 80062de:	2a25      	cmp	r2, #37	@ 0x25
 80062e0:	d1f9      	bne.n	80062d6 <_vfiprintf_r+0x7a>
 80062e2:	ebba 0b04 	subs.w	fp, sl, r4
 80062e6:	d00b      	beq.n	8006300 <_vfiprintf_r+0xa4>
 80062e8:	465b      	mov	r3, fp
 80062ea:	4622      	mov	r2, r4
 80062ec:	4629      	mov	r1, r5
 80062ee:	4630      	mov	r0, r6
 80062f0:	f7ff ffa2 	bl	8006238 <__sfputs_r>
 80062f4:	3001      	adds	r0, #1
 80062f6:	f000 80a7 	beq.w	8006448 <_vfiprintf_r+0x1ec>
 80062fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062fc:	445a      	add	r2, fp
 80062fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8006300:	f89a 3000 	ldrb.w	r3, [sl]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 809f 	beq.w	8006448 <_vfiprintf_r+0x1ec>
 800630a:	2300      	movs	r3, #0
 800630c:	f04f 32ff 	mov.w	r2, #4294967295
 8006310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006314:	f10a 0a01 	add.w	sl, sl, #1
 8006318:	9304      	str	r3, [sp, #16]
 800631a:	9307      	str	r3, [sp, #28]
 800631c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006320:	931a      	str	r3, [sp, #104]	@ 0x68
 8006322:	4654      	mov	r4, sl
 8006324:	2205      	movs	r2, #5
 8006326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800632a:	4853      	ldr	r0, [pc, #332]	@ (8006478 <_vfiprintf_r+0x21c>)
 800632c:	f7ff ff2c 	bl	8006188 <memchr>
 8006330:	9a04      	ldr	r2, [sp, #16]
 8006332:	b9d8      	cbnz	r0, 800636c <_vfiprintf_r+0x110>
 8006334:	06d1      	lsls	r1, r2, #27
 8006336:	bf44      	itt	mi
 8006338:	2320      	movmi	r3, #32
 800633a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800633e:	0713      	lsls	r3, r2, #28
 8006340:	bf44      	itt	mi
 8006342:	232b      	movmi	r3, #43	@ 0x2b
 8006344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006348:	f89a 3000 	ldrb.w	r3, [sl]
 800634c:	2b2a      	cmp	r3, #42	@ 0x2a
 800634e:	d015      	beq.n	800637c <_vfiprintf_r+0x120>
 8006350:	4654      	mov	r4, sl
 8006352:	2000      	movs	r0, #0
 8006354:	f04f 0c0a 	mov.w	ip, #10
 8006358:	9a07      	ldr	r2, [sp, #28]
 800635a:	4621      	mov	r1, r4
 800635c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006360:	3b30      	subs	r3, #48	@ 0x30
 8006362:	2b09      	cmp	r3, #9
 8006364:	d94b      	bls.n	80063fe <_vfiprintf_r+0x1a2>
 8006366:	b1b0      	cbz	r0, 8006396 <_vfiprintf_r+0x13a>
 8006368:	9207      	str	r2, [sp, #28]
 800636a:	e014      	b.n	8006396 <_vfiprintf_r+0x13a>
 800636c:	eba0 0308 	sub.w	r3, r0, r8
 8006370:	fa09 f303 	lsl.w	r3, r9, r3
 8006374:	4313      	orrs	r3, r2
 8006376:	46a2      	mov	sl, r4
 8006378:	9304      	str	r3, [sp, #16]
 800637a:	e7d2      	b.n	8006322 <_vfiprintf_r+0xc6>
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	1d19      	adds	r1, r3, #4
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	9103      	str	r1, [sp, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	bfbb      	ittet	lt
 8006388:	425b      	neglt	r3, r3
 800638a:	f042 0202 	orrlt.w	r2, r2, #2
 800638e:	9307      	strge	r3, [sp, #28]
 8006390:	9307      	strlt	r3, [sp, #28]
 8006392:	bfb8      	it	lt
 8006394:	9204      	strlt	r2, [sp, #16]
 8006396:	7823      	ldrb	r3, [r4, #0]
 8006398:	2b2e      	cmp	r3, #46	@ 0x2e
 800639a:	d10a      	bne.n	80063b2 <_vfiprintf_r+0x156>
 800639c:	7863      	ldrb	r3, [r4, #1]
 800639e:	2b2a      	cmp	r3, #42	@ 0x2a
 80063a0:	d132      	bne.n	8006408 <_vfiprintf_r+0x1ac>
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	3402      	adds	r4, #2
 80063a6:	1d1a      	adds	r2, r3, #4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	9203      	str	r2, [sp, #12]
 80063ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063b0:	9305      	str	r3, [sp, #20]
 80063b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800647c <_vfiprintf_r+0x220>
 80063b6:	2203      	movs	r2, #3
 80063b8:	4650      	mov	r0, sl
 80063ba:	7821      	ldrb	r1, [r4, #0]
 80063bc:	f7ff fee4 	bl	8006188 <memchr>
 80063c0:	b138      	cbz	r0, 80063d2 <_vfiprintf_r+0x176>
 80063c2:	2240      	movs	r2, #64	@ 0x40
 80063c4:	9b04      	ldr	r3, [sp, #16]
 80063c6:	eba0 000a 	sub.w	r0, r0, sl
 80063ca:	4082      	lsls	r2, r0
 80063cc:	4313      	orrs	r3, r2
 80063ce:	3401      	adds	r4, #1
 80063d0:	9304      	str	r3, [sp, #16]
 80063d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d6:	2206      	movs	r2, #6
 80063d8:	4829      	ldr	r0, [pc, #164]	@ (8006480 <_vfiprintf_r+0x224>)
 80063da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063de:	f7ff fed3 	bl	8006188 <memchr>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d03f      	beq.n	8006466 <_vfiprintf_r+0x20a>
 80063e6:	4b27      	ldr	r3, [pc, #156]	@ (8006484 <_vfiprintf_r+0x228>)
 80063e8:	bb1b      	cbnz	r3, 8006432 <_vfiprintf_r+0x1d6>
 80063ea:	9b03      	ldr	r3, [sp, #12]
 80063ec:	3307      	adds	r3, #7
 80063ee:	f023 0307 	bic.w	r3, r3, #7
 80063f2:	3308      	adds	r3, #8
 80063f4:	9303      	str	r3, [sp, #12]
 80063f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063f8:	443b      	add	r3, r7
 80063fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80063fc:	e76a      	b.n	80062d4 <_vfiprintf_r+0x78>
 80063fe:	460c      	mov	r4, r1
 8006400:	2001      	movs	r0, #1
 8006402:	fb0c 3202 	mla	r2, ip, r2, r3
 8006406:	e7a8      	b.n	800635a <_vfiprintf_r+0xfe>
 8006408:	2300      	movs	r3, #0
 800640a:	f04f 0c0a 	mov.w	ip, #10
 800640e:	4619      	mov	r1, r3
 8006410:	3401      	adds	r4, #1
 8006412:	9305      	str	r3, [sp, #20]
 8006414:	4620      	mov	r0, r4
 8006416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800641a:	3a30      	subs	r2, #48	@ 0x30
 800641c:	2a09      	cmp	r2, #9
 800641e:	d903      	bls.n	8006428 <_vfiprintf_r+0x1cc>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0c6      	beq.n	80063b2 <_vfiprintf_r+0x156>
 8006424:	9105      	str	r1, [sp, #20]
 8006426:	e7c4      	b.n	80063b2 <_vfiprintf_r+0x156>
 8006428:	4604      	mov	r4, r0
 800642a:	2301      	movs	r3, #1
 800642c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006430:	e7f0      	b.n	8006414 <_vfiprintf_r+0x1b8>
 8006432:	ab03      	add	r3, sp, #12
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	462a      	mov	r2, r5
 8006438:	4630      	mov	r0, r6
 800643a:	4b13      	ldr	r3, [pc, #76]	@ (8006488 <_vfiprintf_r+0x22c>)
 800643c:	a904      	add	r1, sp, #16
 800643e:	f3af 8000 	nop.w
 8006442:	4607      	mov	r7, r0
 8006444:	1c78      	adds	r0, r7, #1
 8006446:	d1d6      	bne.n	80063f6 <_vfiprintf_r+0x19a>
 8006448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800644a:	07d9      	lsls	r1, r3, #31
 800644c:	d405      	bmi.n	800645a <_vfiprintf_r+0x1fe>
 800644e:	89ab      	ldrh	r3, [r5, #12]
 8006450:	059a      	lsls	r2, r3, #22
 8006452:	d402      	bmi.n	800645a <_vfiprintf_r+0x1fe>
 8006454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006456:	f7ff f99d 	bl	8005794 <__retarget_lock_release_recursive>
 800645a:	89ab      	ldrh	r3, [r5, #12]
 800645c:	065b      	lsls	r3, r3, #25
 800645e:	f53f af1f 	bmi.w	80062a0 <_vfiprintf_r+0x44>
 8006462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006464:	e71e      	b.n	80062a4 <_vfiprintf_r+0x48>
 8006466:	ab03      	add	r3, sp, #12
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	462a      	mov	r2, r5
 800646c:	4630      	mov	r0, r6
 800646e:	4b06      	ldr	r3, [pc, #24]	@ (8006488 <_vfiprintf_r+0x22c>)
 8006470:	a904      	add	r1, sp, #16
 8006472:	f7ff fc85 	bl	8005d80 <_printf_i>
 8006476:	e7e4      	b.n	8006442 <_vfiprintf_r+0x1e6>
 8006478:	08006a87 	.word	0x08006a87
 800647c:	08006a8d 	.word	0x08006a8d
 8006480:	08006a91 	.word	0x08006a91
 8006484:	00000000 	.word	0x00000000
 8006488:	08006239 	.word	0x08006239

0800648c <__swbuf_r>:
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648e:	460e      	mov	r6, r1
 8006490:	4614      	mov	r4, r2
 8006492:	4605      	mov	r5, r0
 8006494:	b118      	cbz	r0, 800649e <__swbuf_r+0x12>
 8006496:	6a03      	ldr	r3, [r0, #32]
 8006498:	b90b      	cbnz	r3, 800649e <__swbuf_r+0x12>
 800649a:	f7fe fff5 	bl	8005488 <__sinit>
 800649e:	69a3      	ldr	r3, [r4, #24]
 80064a0:	60a3      	str	r3, [r4, #8]
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	071a      	lsls	r2, r3, #28
 80064a6:	d501      	bpl.n	80064ac <__swbuf_r+0x20>
 80064a8:	6923      	ldr	r3, [r4, #16]
 80064aa:	b943      	cbnz	r3, 80064be <__swbuf_r+0x32>
 80064ac:	4621      	mov	r1, r4
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 f82a 	bl	8006508 <__swsetup_r>
 80064b4:	b118      	cbz	r0, 80064be <__swbuf_r+0x32>
 80064b6:	f04f 37ff 	mov.w	r7, #4294967295
 80064ba:	4638      	mov	r0, r7
 80064bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	6922      	ldr	r2, [r4, #16]
 80064c2:	b2f6      	uxtb	r6, r6
 80064c4:	1a98      	subs	r0, r3, r2
 80064c6:	6963      	ldr	r3, [r4, #20]
 80064c8:	4637      	mov	r7, r6
 80064ca:	4283      	cmp	r3, r0
 80064cc:	dc05      	bgt.n	80064da <__swbuf_r+0x4e>
 80064ce:	4621      	mov	r1, r4
 80064d0:	4628      	mov	r0, r5
 80064d2:	f7ff fdf5 	bl	80060c0 <_fflush_r>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d1ed      	bne.n	80064b6 <__swbuf_r+0x2a>
 80064da:	68a3      	ldr	r3, [r4, #8]
 80064dc:	3b01      	subs	r3, #1
 80064de:	60a3      	str	r3, [r4, #8]
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	6022      	str	r2, [r4, #0]
 80064e6:	701e      	strb	r6, [r3, #0]
 80064e8:	6962      	ldr	r2, [r4, #20]
 80064ea:	1c43      	adds	r3, r0, #1
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d004      	beq.n	80064fa <__swbuf_r+0x6e>
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	07db      	lsls	r3, r3, #31
 80064f4:	d5e1      	bpl.n	80064ba <__swbuf_r+0x2e>
 80064f6:	2e0a      	cmp	r6, #10
 80064f8:	d1df      	bne.n	80064ba <__swbuf_r+0x2e>
 80064fa:	4621      	mov	r1, r4
 80064fc:	4628      	mov	r0, r5
 80064fe:	f7ff fddf 	bl	80060c0 <_fflush_r>
 8006502:	2800      	cmp	r0, #0
 8006504:	d0d9      	beq.n	80064ba <__swbuf_r+0x2e>
 8006506:	e7d6      	b.n	80064b6 <__swbuf_r+0x2a>

08006508 <__swsetup_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4b29      	ldr	r3, [pc, #164]	@ (80065b0 <__swsetup_r+0xa8>)
 800650c:	4605      	mov	r5, r0
 800650e:	6818      	ldr	r0, [r3, #0]
 8006510:	460c      	mov	r4, r1
 8006512:	b118      	cbz	r0, 800651c <__swsetup_r+0x14>
 8006514:	6a03      	ldr	r3, [r0, #32]
 8006516:	b90b      	cbnz	r3, 800651c <__swsetup_r+0x14>
 8006518:	f7fe ffb6 	bl	8005488 <__sinit>
 800651c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006520:	0719      	lsls	r1, r3, #28
 8006522:	d422      	bmi.n	800656a <__swsetup_r+0x62>
 8006524:	06da      	lsls	r2, r3, #27
 8006526:	d407      	bmi.n	8006538 <__swsetup_r+0x30>
 8006528:	2209      	movs	r2, #9
 800652a:	602a      	str	r2, [r5, #0]
 800652c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006530:	f04f 30ff 	mov.w	r0, #4294967295
 8006534:	81a3      	strh	r3, [r4, #12]
 8006536:	e033      	b.n	80065a0 <__swsetup_r+0x98>
 8006538:	0758      	lsls	r0, r3, #29
 800653a:	d512      	bpl.n	8006562 <__swsetup_r+0x5a>
 800653c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800653e:	b141      	cbz	r1, 8006552 <__swsetup_r+0x4a>
 8006540:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006544:	4299      	cmp	r1, r3
 8006546:	d002      	beq.n	800654e <__swsetup_r+0x46>
 8006548:	4628      	mov	r0, r5
 800654a:	f7ff f951 	bl	80057f0 <_free_r>
 800654e:	2300      	movs	r3, #0
 8006550:	6363      	str	r3, [r4, #52]	@ 0x34
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006558:	81a3      	strh	r3, [r4, #12]
 800655a:	2300      	movs	r3, #0
 800655c:	6063      	str	r3, [r4, #4]
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	f043 0308 	orr.w	r3, r3, #8
 8006568:	81a3      	strh	r3, [r4, #12]
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	b94b      	cbnz	r3, 8006582 <__swsetup_r+0x7a>
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006578:	d003      	beq.n	8006582 <__swsetup_r+0x7a>
 800657a:	4621      	mov	r1, r4
 800657c:	4628      	mov	r0, r5
 800657e:	f000 f88a 	bl	8006696 <__smakebuf_r>
 8006582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006586:	f013 0201 	ands.w	r2, r3, #1
 800658a:	d00a      	beq.n	80065a2 <__swsetup_r+0x9a>
 800658c:	2200      	movs	r2, #0
 800658e:	60a2      	str	r2, [r4, #8]
 8006590:	6962      	ldr	r2, [r4, #20]
 8006592:	4252      	negs	r2, r2
 8006594:	61a2      	str	r2, [r4, #24]
 8006596:	6922      	ldr	r2, [r4, #16]
 8006598:	b942      	cbnz	r2, 80065ac <__swsetup_r+0xa4>
 800659a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800659e:	d1c5      	bne.n	800652c <__swsetup_r+0x24>
 80065a0:	bd38      	pop	{r3, r4, r5, pc}
 80065a2:	0799      	lsls	r1, r3, #30
 80065a4:	bf58      	it	pl
 80065a6:	6962      	ldrpl	r2, [r4, #20]
 80065a8:	60a2      	str	r2, [r4, #8]
 80065aa:	e7f4      	b.n	8006596 <__swsetup_r+0x8e>
 80065ac:	2000      	movs	r0, #0
 80065ae:	e7f7      	b.n	80065a0 <__swsetup_r+0x98>
 80065b0:	200000d8 	.word	0x200000d8

080065b4 <_raise_r>:
 80065b4:	291f      	cmp	r1, #31
 80065b6:	b538      	push	{r3, r4, r5, lr}
 80065b8:	4605      	mov	r5, r0
 80065ba:	460c      	mov	r4, r1
 80065bc:	d904      	bls.n	80065c8 <_raise_r+0x14>
 80065be:	2316      	movs	r3, #22
 80065c0:	6003      	str	r3, [r0, #0]
 80065c2:	f04f 30ff 	mov.w	r0, #4294967295
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80065ca:	b112      	cbz	r2, 80065d2 <_raise_r+0x1e>
 80065cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065d0:	b94b      	cbnz	r3, 80065e6 <_raise_r+0x32>
 80065d2:	4628      	mov	r0, r5
 80065d4:	f000 f830 	bl	8006638 <_getpid_r>
 80065d8:	4622      	mov	r2, r4
 80065da:	4601      	mov	r1, r0
 80065dc:	4628      	mov	r0, r5
 80065de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065e2:	f000 b817 	b.w	8006614 <_kill_r>
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d00a      	beq.n	8006600 <_raise_r+0x4c>
 80065ea:	1c59      	adds	r1, r3, #1
 80065ec:	d103      	bne.n	80065f6 <_raise_r+0x42>
 80065ee:	2316      	movs	r3, #22
 80065f0:	6003      	str	r3, [r0, #0]
 80065f2:	2001      	movs	r0, #1
 80065f4:	e7e7      	b.n	80065c6 <_raise_r+0x12>
 80065f6:	2100      	movs	r1, #0
 80065f8:	4620      	mov	r0, r4
 80065fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80065fe:	4798      	blx	r3
 8006600:	2000      	movs	r0, #0
 8006602:	e7e0      	b.n	80065c6 <_raise_r+0x12>

08006604 <raise>:
 8006604:	4b02      	ldr	r3, [pc, #8]	@ (8006610 <raise+0xc>)
 8006606:	4601      	mov	r1, r0
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	f7ff bfd3 	b.w	80065b4 <_raise_r>
 800660e:	bf00      	nop
 8006610:	200000d8 	.word	0x200000d8

08006614 <_kill_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	2300      	movs	r3, #0
 8006618:	4d06      	ldr	r5, [pc, #24]	@ (8006634 <_kill_r+0x20>)
 800661a:	4604      	mov	r4, r0
 800661c:	4608      	mov	r0, r1
 800661e:	4611      	mov	r1, r2
 8006620:	602b      	str	r3, [r5, #0]
 8006622:	f7fb fd94 	bl	800214e <_kill>
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	d102      	bne.n	8006630 <_kill_r+0x1c>
 800662a:	682b      	ldr	r3, [r5, #0]
 800662c:	b103      	cbz	r3, 8006630 <_kill_r+0x1c>
 800662e:	6023      	str	r3, [r4, #0]
 8006630:	bd38      	pop	{r3, r4, r5, pc}
 8006632:	bf00      	nop
 8006634:	20000488 	.word	0x20000488

08006638 <_getpid_r>:
 8006638:	f7fb bd82 	b.w	8002140 <_getpid>

0800663c <_malloc_usable_size_r>:
 800663c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006640:	1f18      	subs	r0, r3, #4
 8006642:	2b00      	cmp	r3, #0
 8006644:	bfbc      	itt	lt
 8006646:	580b      	ldrlt	r3, [r1, r0]
 8006648:	18c0      	addlt	r0, r0, r3
 800664a:	4770      	bx	lr

0800664c <__swhatbuf_r>:
 800664c:	b570      	push	{r4, r5, r6, lr}
 800664e:	460c      	mov	r4, r1
 8006650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006654:	4615      	mov	r5, r2
 8006656:	2900      	cmp	r1, #0
 8006658:	461e      	mov	r6, r3
 800665a:	b096      	sub	sp, #88	@ 0x58
 800665c:	da0c      	bge.n	8006678 <__swhatbuf_r+0x2c>
 800665e:	89a3      	ldrh	r3, [r4, #12]
 8006660:	2100      	movs	r1, #0
 8006662:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006666:	bf14      	ite	ne
 8006668:	2340      	movne	r3, #64	@ 0x40
 800666a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800666e:	2000      	movs	r0, #0
 8006670:	6031      	str	r1, [r6, #0]
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	b016      	add	sp, #88	@ 0x58
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	466a      	mov	r2, sp
 800667a:	f000 f849 	bl	8006710 <_fstat_r>
 800667e:	2800      	cmp	r0, #0
 8006680:	dbed      	blt.n	800665e <__swhatbuf_r+0x12>
 8006682:	9901      	ldr	r1, [sp, #4]
 8006684:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006688:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800668c:	4259      	negs	r1, r3
 800668e:	4159      	adcs	r1, r3
 8006690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006694:	e7eb      	b.n	800666e <__swhatbuf_r+0x22>

08006696 <__smakebuf_r>:
 8006696:	898b      	ldrh	r3, [r1, #12]
 8006698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800669a:	079d      	lsls	r5, r3, #30
 800669c:	4606      	mov	r6, r0
 800669e:	460c      	mov	r4, r1
 80066a0:	d507      	bpl.n	80066b2 <__smakebuf_r+0x1c>
 80066a2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80066a6:	6023      	str	r3, [r4, #0]
 80066a8:	6123      	str	r3, [r4, #16]
 80066aa:	2301      	movs	r3, #1
 80066ac:	6163      	str	r3, [r4, #20]
 80066ae:	b003      	add	sp, #12
 80066b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b2:	466a      	mov	r2, sp
 80066b4:	ab01      	add	r3, sp, #4
 80066b6:	f7ff ffc9 	bl	800664c <__swhatbuf_r>
 80066ba:	9f00      	ldr	r7, [sp, #0]
 80066bc:	4605      	mov	r5, r0
 80066be:	4639      	mov	r1, r7
 80066c0:	4630      	mov	r0, r6
 80066c2:	f7ff f907 	bl	80058d4 <_malloc_r>
 80066c6:	b948      	cbnz	r0, 80066dc <__smakebuf_r+0x46>
 80066c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066cc:	059a      	lsls	r2, r3, #22
 80066ce:	d4ee      	bmi.n	80066ae <__smakebuf_r+0x18>
 80066d0:	f023 0303 	bic.w	r3, r3, #3
 80066d4:	f043 0302 	orr.w	r3, r3, #2
 80066d8:	81a3      	strh	r3, [r4, #12]
 80066da:	e7e2      	b.n	80066a2 <__smakebuf_r+0xc>
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e6:	81a3      	strh	r3, [r4, #12]
 80066e8:	9b01      	ldr	r3, [sp, #4]
 80066ea:	6020      	str	r0, [r4, #0]
 80066ec:	b15b      	cbz	r3, 8006706 <__smakebuf_r+0x70>
 80066ee:	4630      	mov	r0, r6
 80066f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066f4:	f000 f81e 	bl	8006734 <_isatty_r>
 80066f8:	b128      	cbz	r0, 8006706 <__smakebuf_r+0x70>
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	f023 0303 	bic.w	r3, r3, #3
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	431d      	orrs	r5, r3
 800670a:	81a5      	strh	r5, [r4, #12]
 800670c:	e7cf      	b.n	80066ae <__smakebuf_r+0x18>
	...

08006710 <_fstat_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	2300      	movs	r3, #0
 8006714:	4d06      	ldr	r5, [pc, #24]	@ (8006730 <_fstat_r+0x20>)
 8006716:	4604      	mov	r4, r0
 8006718:	4608      	mov	r0, r1
 800671a:	4611      	mov	r1, r2
 800671c:	602b      	str	r3, [r5, #0]
 800671e:	f7fb fd75 	bl	800220c <_fstat>
 8006722:	1c43      	adds	r3, r0, #1
 8006724:	d102      	bne.n	800672c <_fstat_r+0x1c>
 8006726:	682b      	ldr	r3, [r5, #0]
 8006728:	b103      	cbz	r3, 800672c <_fstat_r+0x1c>
 800672a:	6023      	str	r3, [r4, #0]
 800672c:	bd38      	pop	{r3, r4, r5, pc}
 800672e:	bf00      	nop
 8006730:	20000488 	.word	0x20000488

08006734 <_isatty_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	2300      	movs	r3, #0
 8006738:	4d05      	ldr	r5, [pc, #20]	@ (8006750 <_isatty_r+0x1c>)
 800673a:	4604      	mov	r4, r0
 800673c:	4608      	mov	r0, r1
 800673e:	602b      	str	r3, [r5, #0]
 8006740:	f7fb fd73 	bl	800222a <_isatty>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d102      	bne.n	800674e <_isatty_r+0x1a>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	b103      	cbz	r3, 800674e <_isatty_r+0x1a>
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	20000488 	.word	0x20000488

08006754 <_init>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	bf00      	nop
 8006758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675a:	bc08      	pop	{r3}
 800675c:	469e      	mov	lr, r3
 800675e:	4770      	bx	lr

08006760 <_fini>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	bf00      	nop
 8006764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006766:	bc08      	pop	{r3}
 8006768:	469e      	mov	lr, r3
 800676a:	4770      	bx	lr
