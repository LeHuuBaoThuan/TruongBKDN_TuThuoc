
TuThuoc_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000306c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a0  080033a0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080033a0  080033a0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033a0  080033a0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080033a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000018  080033c0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080033c0  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f7f  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001780  00000000  00000000  00027fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  00029740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  00029ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e27  00000000  00000000  0002a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a679  00000000  00000000  000413e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f8c  00000000  00000000  0004ba60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd9ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d90  00000000  00000000  000cda3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08003160 	.word	0x08003160

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08003160 	.word	0x08003160

0800014c <CLCD_Delay>:
//************************** Low Level Function ****************************************************************//
uint8_t currentline;
uint8_t Xcursor,Ycursor,countWriteChar,CurrentWriteChar;
CLCD_I2C_Name LCD1;
static void CLCD_Delay(uint16_t Time)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	4618      	mov	r0, r3
 800015a:	f001 fc27 	bl	80019ac <HAL_Delay>
}
 800015e:	bf00      	nop
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}

08000166 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b086      	sub	sp, #24
 800016a:	af02      	add	r7, sp, #8
 800016c:	6078      	str	r0, [r7, #4]
 800016e:	460b      	mov	r3, r1
 8000170:	70fb      	strb	r3, [r7, #3]
 8000172:	4613      	mov	r3, r2
 8000174:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000176:	78fb      	ldrb	r3, [r7, #3]
 8000178:	f023 030f 	bic.w	r3, r3, #15
 800017c:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 800017e:	78fb      	ldrb	r3, [r7, #3]
 8000180:	011b      	lsls	r3, r3, #4
 8000182:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	7adb      	ldrb	r3, [r3, #11]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d007      	beq.n	800019c <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	f043 0308 	orr.w	r3, r3, #8
 8000192:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8000194:	7bbb      	ldrb	r3, [r7, #14]
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 800019c:	78bb      	ldrb	r3, [r7, #2]
 800019e:	2b01      	cmp	r3, #1
 80001a0:	d108      	bne.n	80001b4 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001a2:	7bfb      	ldrb	r3, [r7, #15]
 80001a4:	f043 0301 	orr.w	r3, r3, #1
 80001a8:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001aa:	7bbb      	ldrb	r3, [r7, #14]
 80001ac:	f043 0301 	orr.w	r3, r3, #1
 80001b0:	73bb      	strb	r3, [r7, #14]
 80001b2:	e00a      	b.n	80001ca <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001b4:	78bb      	ldrb	r3, [r7, #2]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d107      	bne.n	80001ca <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	f023 0301 	bic.w	r3, r3, #1
 80001c0:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001c2:	7bbb      	ldrb	r3, [r7, #14]
 80001c4:	f023 0301 	bic.w	r3, r3, #1
 80001c8:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f043 0304 	orr.w	r3, r3, #4
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f7ff ffb9 	bl	800014c <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001da:	7bfb      	ldrb	r3, [r7, #15]
 80001dc:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001de:	7bbb      	ldrb	r3, [r7, #14]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffaf 	bl	800014c <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	6818      	ldr	r0, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	791b      	ldrb	r3, [r3, #4]
 80001fa:	b299      	uxth	r1, r3
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2304      	movs	r3, #4
 8000208:	f002 f82a 	bl	8002260 <HAL_I2C_Master_Transmit>

}
 800020c:	bf00      	nop
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <CLCD_I2C_Init>:
//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	4611      	mov	r1, r2
 8000220:	461a      	mov	r2, r3
 8000222:	460b      	mov	r3, r1
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	4613      	mov	r3, r2
 8000228:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	68ba      	ldr	r2, [r7, #8]
 800022e:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	79fa      	ldrb	r2, [r7, #7]
 8000234:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	79ba      	ldrb	r2, [r7, #6]
 800023a:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	7e3a      	ldrb	r2, [r7, #24]
 8000240:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2228      	movs	r2, #40	; 0x28
 8000246:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2206      	movs	r2, #6
 800024c:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	220c      	movs	r2, #12
 8000252:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	2214      	movs	r2, #20
 8000258:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	2208      	movs	r2, #8
 800025e:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000260:	2032      	movs	r0, #50	; 0x32
 8000262:	f7ff ff73 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000266:	2200      	movs	r2, #0
 8000268:	2133      	movs	r1, #51	; 0x33
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f7ff ff7b 	bl	8000166 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000270:	2200      	movs	r2, #0
 8000272:	2133      	movs	r1, #51	; 0x33
 8000274:	68f8      	ldr	r0, [r7, #12]
 8000276:	f7ff ff76 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800027a:	2005      	movs	r0, #5
 800027c:	f7ff ff66 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000280:	2200      	movs	r2, #0
 8000282:	2132      	movs	r1, #50	; 0x32
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	f7ff ff6e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028a:	2005      	movs	r0, #5
 800028c:	f7ff ff5e 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8000290:	2200      	movs	r2, #0
 8000292:	2120      	movs	r1, #32
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f7ff ff66 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029a:	2005      	movs	r0, #5
 800029c:	f7ff ff56 	bl	800014c <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	79db      	ldrb	r3, [r3, #7]
 80002a4:	2200      	movs	r2, #0
 80002a6:	4619      	mov	r1, r3
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff5c 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	7a1b      	ldrb	r3, [r3, #8]
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f7ff ff55 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	7a5b      	ldrb	r3, [r3, #9]
 80002c0:	2200      	movs	r2, #0
 80002c2:	4619      	mov	r1, r3
 80002c4:	68f8      	ldr	r0, [r7, #12]
 80002c6:	f7ff ff4e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	7a9b      	ldrb	r3, [r3, #10]
 80002ce:	2200      	movs	r2, #0
 80002d0:	4619      	mov	r1, r3
 80002d2:	68f8      	ldr	r0, [r7, #12]
 80002d4:	f7ff ff47 	bl	8000166 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002d8:	2200      	movs	r2, #0
 80002da:	2101      	movs	r1, #1
 80002dc:	68f8      	ldr	r0, [r7, #12]
 80002de:	f7ff ff42 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2102      	movs	r1, #2
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff3d 	bl	8000166 <CLCD_WriteI2C>
}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
 8000300:	4613      	mov	r3, r2
 8000302:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000304:	2300      	movs	r3, #0
 8000306:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	78fa      	ldrb	r2, [r7, #3]
 800030e:	429a      	cmp	r2, r3
 8000310:	d303      	bcc.n	800031a <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	795b      	ldrb	r3, [r3, #5]
 8000316:	3b01      	subs	r3, #1
 8000318:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	799b      	ldrb	r3, [r3, #6]
 800031e:	78ba      	ldrb	r2, [r7, #2]
 8000320:	429a      	cmp	r2, r3
 8000322:	d303      	bcc.n	800032c <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	799b      	ldrb	r3, [r3, #6]
 8000328:	3b01      	subs	r3, #1
 800032a:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 800032c:	78bb      	ldrb	r3, [r7, #2]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d102      	bne.n	8000338 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	e013      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000338:	78bb      	ldrb	r3, [r7, #2]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d103      	bne.n	8000346 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800033e:	78fb      	ldrb	r3, [r7, #3]
 8000340:	3340      	adds	r3, #64	; 0x40
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	e00c      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8000346:	78bb      	ldrb	r3, [r7, #2]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d103      	bne.n	8000354 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x10 + Xpos;
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	3310      	adds	r3, #16
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	e005      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000354:	78bb      	ldrb	r3, [r7, #2]
 8000356:	2b03      	cmp	r3, #3
 8000358:	d102      	bne.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x50 + Xpos;
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	3350      	adds	r3, #80	; 0x50
 800035e:	73fb      	strb	r3, [r7, #15]
	}
	Xcursor = Xpos;
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <CLCD_I2C_SetCursor+0xa4>)
 8000362:	78fb      	ldrb	r3, [r7, #3]
 8000364:	7013      	strb	r3, [r2, #0]

	Ycursor = Ypos;
 8000366:	4a0d      	ldr	r2, [pc, #52]	; (800039c <CLCD_I2C_SetCursor+0xa8>)
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	7013      	strb	r3, [r2, #0]
	currentline = Ycursor;
 800036c:	4b0b      	ldr	r3, [pc, #44]	; (800039c <CLCD_I2C_SetCursor+0xa8>)
 800036e:	781a      	ldrb	r2, [r3, #0]
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <CLCD_I2C_SetCursor+0xac>)
 8000372:	701a      	strb	r2, [r3, #0]
	countWriteChar = Xcursor;
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <CLCD_I2C_SetCursor+0xa4>)
 8000376:	781a      	ldrb	r2, [r3, #0]
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <CLCD_I2C_SetCursor+0xb0>)
 800037a:	701a      	strb	r2, [r3, #0]
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2200      	movs	r2, #0
 8000386:	4619      	mov	r1, r3
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff feec 	bl	8000166 <CLCD_WriteI2C>
}
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000035 	.word	0x20000035
 800039c:	20000036 	.word	0x20000036
 80003a0:	20000034 	.word	0x20000034
 80003a4:	20000037 	.word	0x20000037

080003a8 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2201      	movs	r2, #1
 80003b8:	4619      	mov	r1, r3
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f7ff fed3 	bl	8000166 <CLCD_WriteI2C>
	countWriteChar++;
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003ca:	701a      	strb	r2, [r3, #0]
	if (CurrentWriteChar)
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <CLCD_I2C_WriteChar+0x98>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d02b      	beq.n	800042c <CLCD_I2C_WriteChar+0x84>
	{
	if (countWriteChar ==20)
 80003d4:	4b19      	ldr	r3, [pc, #100]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b14      	cmp	r3, #20
 80003da:	d127      	bne.n	800042c <CLCD_I2C_WriteChar+0x84>
	{
	switch(currentline)
 80003dc:	4b19      	ldr	r3, [pc, #100]	; (8000444 <CLCD_I2C_WriteChar+0x9c>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d825      	bhi.n	8000430 <CLCD_I2C_WriteChar+0x88>
 80003e4:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <CLCD_I2C_WriteChar+0x44>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	080003fd 	.word	0x080003fd
 80003f0:	08000409 	.word	0x08000409
 80003f4:	08000415 	.word	0x08000415
 80003f8:	08000421 	.word	0x08000421
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2100      	movs	r1, #0
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 8000402:	f7ff ff77 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 8000406:	e014      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8000408:	2202      	movs	r2, #2
 800040a:	2100      	movs	r1, #0
 800040c:	480e      	ldr	r0, [pc, #56]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 800040e:	f7ff ff71 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 8000412:	e00e      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 8000414:	2203      	movs	r2, #3
 8000416:	2100      	movs	r1, #0
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 800041a:	f7ff ff6b 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 800041e:	e008      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	2100      	movs	r1, #0
 8000424:	4808      	ldr	r0, [pc, #32]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 8000426:	f7ff ff65 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 800042a:	e002      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				default:
								break;
			}
		}
 800042c:	bf00      	nop
 800042e:	e000      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
								break;
 8000430:	bf00      	nop
	}
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000037 	.word	0x20000037
 8000440:	20000038 	.word	0x20000038
 8000444:	20000034 	.word	0x20000034
 8000448:	2000003c 	.word	0x2000003c

0800044c <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
	while (*String)
 8000456:	e04a      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
	{
	CurrentWriteChar=0;
 8000458:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <CLCD_I2C_WriteString+0xbc>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	e00e      	b.n	8000482 <CLCD_I2C_WriteString+0x36>
		{
			if (*String)
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d012      	beq.n	8000492 <CLCD_I2C_WriteString+0x46>
			{
				CLCD_I2C_WriteChar(LCD, *String++);
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	1c5a      	adds	r2, r3, #1
 8000470:	603a      	str	r2, [r7, #0]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4619      	mov	r1, r3
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f7ff ff96 	bl	80003a8 <CLCD_I2C_WriteChar>
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	3301      	adds	r3, #1
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	7bfa      	ldrb	r2, [r7, #15]
 8000484:	4b21      	ldr	r3, [pc, #132]	; (800050c <CLCD_I2C_WriteString+0xc0>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f1c3 0314 	rsb	r3, r3, #20
 800048c:	429a      	cmp	r2, r3
 800048e:	dbe9      	blt.n	8000464 <CLCD_I2C_WriteString+0x18>
 8000490:	e000      	b.n	8000494 <CLCD_I2C_WriteString+0x48>
			}
			else break;
 8000492:	bf00      	nop
		}
		if (*String)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d02d      	beq.n	80004f8 <CLCD_I2C_WriteString+0xac>
		{
			switch(currentline)
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <CLCD_I2C_WriteString+0xc4>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d823      	bhi.n	80004ec <CLCD_I2C_WriteString+0xa0>
 80004a4:	a201      	add	r2, pc, #4	; (adr r2, 80004ac <CLCD_I2C_WriteString+0x60>)
 80004a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004aa:	bf00      	nop
 80004ac:	080004bd 	.word	0x080004bd
 80004b0:	080004c9 	.word	0x080004c9
 80004b4:	080004d5 	.word	0x080004d5
 80004b8:	080004e1 	.word	0x080004e1
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2100      	movs	r1, #0
 80004c0:	4814      	ldr	r0, [pc, #80]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004c2:	f7ff ff17 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004c6:	e012      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 80004c8:	2202      	movs	r2, #2
 80004ca:	2100      	movs	r1, #0
 80004cc:	4811      	ldr	r0, [pc, #68]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004ce:	f7ff ff11 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004d2:	e00c      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 80004d4:	2203      	movs	r2, #3
 80004d6:	2100      	movs	r1, #0
 80004d8:	480e      	ldr	r0, [pc, #56]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004da:	f7ff ff0b 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004de:	e006      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2100      	movs	r1, #0
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004e6:	f7ff ff05 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004ea:	e000      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				default:
								break;
 80004ec:	bf00      	nop
	while (*String)
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d1b0      	bne.n	8000458 <CLCD_I2C_WriteString+0xc>
 80004f6:	e000      	b.n	80004fa <CLCD_I2C_WriteString+0xae>
			}
		}
		else break;
 80004f8:	bf00      	nop

		}
	CurrentWriteChar=1;
 80004fa:	4b03      	ldr	r3, [pc, #12]	; (8000508 <CLCD_I2C_WriteString+0xbc>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000038 	.word	0x20000038
 800050c:	20000035 	.word	0x20000035
 8000510:	20000034 	.word	0x20000034
 8000514:	2000003c 	.word	0x2000003c

08000518 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000520:	2200      	movs	r2, #0
 8000522:	2101      	movs	r1, #1
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff fe1e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800052a:	2005      	movs	r0, #5
 800052c:	f7ff fe0e 	bl	800014c <CLCD_Delay>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <KeyPad_Init>:
void KeyPad_Init(	GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD,
					GPIO_TypeDef* C_port0, GPIO_TypeDef* C_port1, GPIO_TypeDef* C_port2, GPIO_TypeDef* C_port3,\
					uint16_t C_pin0, uint16_t C_pin1, uint16_t C_pin2, uint16_t C_pin3,\
					GPIO_TypeDef* R_port0, GPIO_TypeDef* R_port1, GPIO_TypeDef* R_port2, GPIO_TypeDef* R_port3,\
					uint16_t R_pin0, uint16_t R_pin1, uint16_t R_pin2, uint16_t R_pin3)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	603b      	str	r3, [r7, #0]
	//OUTPUT
  COL_KEY_PAD->PORT.GPIO0 = C_port0;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
  COL_KEY_PAD->PORT.GPIO1 = C_port1;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	683a      	ldr	r2, [r7, #0]
 8000550:	605a      	str	r2, [r3, #4]
  COL_KEY_PAD->PORT.GPIO2 = C_port2;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	69ba      	ldr	r2, [r7, #24]
 8000556:	609a      	str	r2, [r3, #8]
  COL_KEY_PAD->PORT.GPIO3 = C_port3;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	69fa      	ldr	r2, [r7, #28]
 800055c:	60da      	str	r2, [r3, #12]

  COL_KEY_PAD->PIN.GPIO_PIN_A = C_pin0;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	8c3a      	ldrh	r2, [r7, #32]
 8000562:	821a      	strh	r2, [r3, #16]
  COL_KEY_PAD->PIN.GPIO_PIN_B = C_pin1;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000568:	825a      	strh	r2, [r3, #18]
  COL_KEY_PAD->PIN.GPIO_PIN_C = C_pin2;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800056e:	829a      	strh	r2, [r3, #20]
  COL_KEY_PAD->PIN.GPIO_PIN_D = C_pin3;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000574:	82da      	strh	r2, [r3, #22]
  //INPUT
  ROW_KEY_PAD->PORT.GPIO0 = R_port0;
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800057a:	601a      	str	r2, [r3, #0]
  ROW_KEY_PAD->PORT.GPIO1 = R_port1;
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000580:	605a      	str	r2, [r3, #4]
  ROW_KEY_PAD->PORT.GPIO2 = R_port2;
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000586:	609a      	str	r2, [r3, #8]
  ROW_KEY_PAD->PORT.GPIO3 = R_port3;
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800058c:	60da      	str	r2, [r3, #12]

  ROW_KEY_PAD->PIN.GPIO_PIN_A = R_pin0;
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000594:	821a      	strh	r2, [r3, #16]
  ROW_KEY_PAD->PIN.GPIO_PIN_B = R_pin1;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800059c:	825a      	strh	r2, [r3, #18]
  ROW_KEY_PAD->PIN.GPIO_PIN_C = R_pin2;
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80005a4:	829a      	strh	r2, [r3, #20]
  ROW_KEY_PAD->PIN.GPIO_PIN_D = R_pin3;
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80005ac:	82da      	strh	r2, [r3, #22]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <Check_Keypad_Column>:
  +) RETURN:
    -Keypad_Button_Values[Row-x][x+1]   : Keypad_Button_Values
    -KEYPAD_NOT_PRESSED                 : "\0" (Không ấn nút)
*/
static char Check_Keypad_Column(GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main, uint8_t Row)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	70fb      	strb	r3, [r7, #3]
	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO0, ROW_KEY_PAD_main->PIN.GPIO_PIN_A)) //If ROW_1 is LOW
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	8a1b      	ldrh	r3, [r3, #16]
 80005cc:	4619      	mov	r1, r3
 80005ce:	4610      	mov	r0, r2
 80005d0:	f001 fca2 	bl	8001f18 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d105      	bne.n	80005e6 <Check_Keypad_Column+0x2e>
	{
		return Keypad_Button_Values[Row-1][0];
 80005da:	78fb      	ldrb	r3, [r7, #3]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a1f      	ldr	r2, [pc, #124]	; (800065c <Check_Keypad_Column+0xa4>)
 80005e0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80005e4:	e036      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO1, ROW_KEY_PAD_main->PIN.GPIO_PIN_B)) //If ROW_2 is LOW
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	8a5b      	ldrh	r3, [r3, #18]
 80005ee:	4619      	mov	r1, r3
 80005f0:	4610      	mov	r0, r2
 80005f2:	f001 fc91 	bl	8001f18 <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d106      	bne.n	800060a <Check_Keypad_Column+0x52>
	{
		return Keypad_Button_Values[Row-1][1];
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	3b01      	subs	r3, #1
 8000600:	4a16      	ldr	r2, [pc, #88]	; (800065c <Check_Keypad_Column+0xa4>)
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	785b      	ldrb	r3, [r3, #1]
 8000608:	e024      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}

    if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO2, ROW_KEY_PAD_main->PIN.GPIO_PIN_C)) //If ROW_3 is LOW
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689a      	ldr	r2, [r3, #8]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	8a9b      	ldrh	r3, [r3, #20]
 8000612:	4619      	mov	r1, r3
 8000614:	4610      	mov	r0, r2
 8000616:	f001 fc7f 	bl	8001f18 <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d106      	bne.n	800062e <Check_Keypad_Column+0x76>
	{
		return Keypad_Button_Values[Row-1][2];
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	3b01      	subs	r3, #1
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <Check_Keypad_Column+0xa4>)
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	4413      	add	r3, r2
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	e012      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO3, ROW_KEY_PAD_main->PIN.GPIO_PIN_D)) //If ROW_4 is LOW
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	68da      	ldr	r2, [r3, #12]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	8adb      	ldrh	r3, [r3, #22]
 8000636:	4619      	mov	r1, r3
 8000638:	4610      	mov	r0, r2
 800063a:	f001 fc6d 	bl	8001f18 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d106      	bne.n	8000652 <Check_Keypad_Column+0x9a>
	{
		return Keypad_Button_Values[Row-1][3];
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <Check_Keypad_Column+0xa4>)
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	78db      	ldrb	r3, [r3, #3]
 8000650:	e000      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}
	return KEYPAD_NOT_PRESSED;                   //If NO Key is pressed
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	08003364 	.word	0x08003364

08000660 <KEYPAD_Read>:
  +) RETURN:
    -char check                                  	: const char Keypad_Button_Values[x][y]
    -KEYPAD_NOT_PRESSED                     		: '\0' {reason of failed)
*/
static char KEYPAD_Read(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
    char check = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]
    /*Set COL_1 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_RESET);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	8a1b      	ldrh	r3, [r3, #16]
 8000676:	2200      	movs	r2, #0
 8000678:	4619      	mov	r1, r3
 800067a:	f001 fc64 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6858      	ldr	r0, [r3, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	8a5b      	ldrh	r3, [r3, #18]
 8000686:	2201      	movs	r2, #1
 8000688:	4619      	mov	r1, r3
 800068a:	f001 fc5c 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6898      	ldr	r0, [r3, #8]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	8a9b      	ldrh	r3, [r3, #20]
 8000696:	2201      	movs	r2, #1
 8000698:	4619      	mov	r1, r3
 800069a:	f001 fc54 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	68d8      	ldr	r0, [r3, #12]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	8adb      	ldrh	r3, [r3, #22]
 80006a6:	2201      	movs	r2, #1
 80006a8:	4619      	mov	r1, r3
 80006aa:	f001 fc4c 	bl	8001f46 <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 1);
 80006ae:	2101      	movs	r1, #1
 80006b0:	6838      	ldr	r0, [r7, #0]
 80006b2:	f7ff ff81 	bl	80005b8 <Check_Keypad_Column>
 80006b6:	4603      	mov	r3, r0
 80006b8:	73fb      	strb	r3, [r7, #15]
    if(check)
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <KEYPAD_Read+0x64>
    {
    	return check;
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	e081      	b.n	80007c8 <KEYPAD_Read+0x168>
    }
    /*Set COL_2 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	8a1b      	ldrh	r3, [r3, #16]
 80006cc:	2201      	movs	r2, #1
 80006ce:	4619      	mov	r1, r3
 80006d0:	f001 fc39 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_RESET);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6858      	ldr	r0, [r3, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	8a5b      	ldrh	r3, [r3, #18]
 80006dc:	2200      	movs	r2, #0
 80006de:	4619      	mov	r1, r3
 80006e0:	f001 fc31 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6898      	ldr	r0, [r3, #8]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	8a9b      	ldrh	r3, [r3, #20]
 80006ec:	2201      	movs	r2, #1
 80006ee:	4619      	mov	r1, r3
 80006f0:	f001 fc29 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	68d8      	ldr	r0, [r3, #12]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	8adb      	ldrh	r3, [r3, #22]
 80006fc:	2201      	movs	r2, #1
 80006fe:	4619      	mov	r1, r3
 8000700:	f001 fc21 	bl	8001f46 <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 2);
 8000704:	2102      	movs	r1, #2
 8000706:	6838      	ldr	r0, [r7, #0]
 8000708:	f7ff ff56 	bl	80005b8 <Check_Keypad_Column>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
    if(check)
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <KEYPAD_Read+0xba>
    {
    	return check;
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	e056      	b.n	80007c8 <KEYPAD_Read+0x168>
    }
    /*Set COL_3 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	8a1b      	ldrh	r3, [r3, #16]
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	f001 fc0e 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6858      	ldr	r0, [r3, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	8a5b      	ldrh	r3, [r3, #18]
 8000732:	2201      	movs	r2, #1
 8000734:	4619      	mov	r1, r3
 8000736:	f001 fc06 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_RESET);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6898      	ldr	r0, [r3, #8]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	8a9b      	ldrh	r3, [r3, #20]
 8000742:	2200      	movs	r2, #0
 8000744:	4619      	mov	r1, r3
 8000746:	f001 fbfe 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	68d8      	ldr	r0, [r3, #12]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	8adb      	ldrh	r3, [r3, #22]
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	f001 fbf6 	bl	8001f46 <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 3);
 800075a:	2103      	movs	r1, #3
 800075c:	6838      	ldr	r0, [r7, #0]
 800075e:	f7ff ff2b 	bl	80005b8 <Check_Keypad_Column>
 8000762:	4603      	mov	r3, r0
 8000764:	73fb      	strb	r3, [r7, #15]
    if(check)
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <KEYPAD_Read+0x110>
    {
    	return check;
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	e02b      	b.n	80007c8 <KEYPAD_Read+0x168>
    }
    /*Set COL_4 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	8a1b      	ldrh	r3, [r3, #16]
 8000778:	2201      	movs	r2, #1
 800077a:	4619      	mov	r1, r3
 800077c:	f001 fbe3 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6858      	ldr	r0, [r3, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	8a5b      	ldrh	r3, [r3, #18]
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	f001 fbdb 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6898      	ldr	r0, [r3, #8]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	8a9b      	ldrh	r3, [r3, #20]
 8000798:	2201      	movs	r2, #1
 800079a:	4619      	mov	r1, r3
 800079c:	f001 fbd3 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_RESET);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68d8      	ldr	r0, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	8adb      	ldrh	r3, [r3, #22]
 80007a8:	2200      	movs	r2, #0
 80007aa:	4619      	mov	r1, r3
 80007ac:	f001 fbcb 	bl	8001f46 <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 4);
 80007b0:	2104      	movs	r1, #4
 80007b2:	6838      	ldr	r0, [r7, #0]
 80007b4:	f7ff ff00 	bl	80005b8 <Check_Keypad_Column>
 80007b8:	4603      	mov	r3, r0
 80007ba:	73fb      	strb	r3, [r7, #15]
    if(check)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <KEYPAD_Read+0x166>
    {
    	return check;
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	e000      	b.n	80007c8 <KEYPAD_Read+0x168>
    }
    /*Key not pressed */
    return KEYPAD_NOT_PRESSED;
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <KEYPAD_Handler>:
  +) RETURN:
    -char check                                  	: const char Keypad_Button_Values[x][y]
    -KEYPAD_NOT_PRESSED                     		: '\0' {reason of failed)
*/
char KEYPAD_Handler(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	char key = KEYPAD_Read(COL_KEY_PAD, ROW_KEY_PAD_main);;
 80007da:	6839      	ldr	r1, [r7, #0]
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff3f 	bl	8000660 <KEYPAD_Read>
 80007e2:	4603      	mov	r3, r0
 80007e4:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_RESET);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	8a1b      	ldrh	r3, [r3, #16]
 80007ee:	2200      	movs	r2, #0
 80007f0:	4619      	mov	r1, r3
 80007f2:	f001 fba8 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_RESET);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6858      	ldr	r0, [r3, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	8a5b      	ldrh	r3, [r3, #18]
 80007fe:	2200      	movs	r2, #0
 8000800:	4619      	mov	r1, r3
 8000802:	f001 fba0 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_RESET);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6898      	ldr	r0, [r3, #8]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	8a9b      	ldrh	r3, [r3, #20]
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	f001 fb98 	bl	8001f46 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_RESET);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	68d8      	ldr	r0, [r3, #12]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	8adb      	ldrh	r3, [r3, #22]
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	f001 fb90 	bl	8001f46 <HAL_GPIO_WritePin>
    return key;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <lcd_user_display>:
    -STATUS_DISPLAY_TYPEDEF status_display         : STATUS_1 -> STATUS_7
  +) RETURN:
    -void
*/
void lcd_user_display(CLCD_I2C_Name* LCD_user, STATUS_DISPLAY_TYPEDEF status_display)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	70fb      	strb	r3, [r7, #3]
	if(language == ENGLISH)
 800083c:	4baf      	ldr	r3, [pc, #700]	; (8000afc <lcd_user_display+0x2cc>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	f040 8106 	bne.w	8000a52 <lcd_user_display+0x222>
	{
		if(status_display == STATUS_1)
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d124      	bne.n	8000896 <lcd_user_display+0x66>
			{
				// dislay hello ! Status_Display=0
				CLCD_I2C_SetCursor(LCD_user, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff fd4f 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 8000856:	49aa      	ldr	r1, [pc, #680]	; (8000b00 <lcd_user_display+0x2d0>)
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff fdf7 	bl	800044c <CLCD_I2C_WriteString>

				CLCD_I2C_SetCursor(LCD_user, 3, 1);
 800085e:	2201      	movs	r2, #1
 8000860:	2103      	movs	r1, #3
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff fd46 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"KHOA CO KHI");
 8000868:	49a6      	ldr	r1, [pc, #664]	; (8000b04 <lcd_user_display+0x2d4>)
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff fdee 	bl	800044c <CLCD_I2C_WriteString>

				CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000870:	2202      	movs	r2, #2
 8000872:	2104      	movs	r1, #4
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff fd3d 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 800087a:	49a3      	ldr	r1, [pc, #652]	; (8000b08 <lcd_user_display+0x2d8>)
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff fde5 	bl	800044c <CLCD_I2C_WriteString>

				CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000882:	2203      	movs	r2, #3
 8000884:	2100      	movs	r1, #0
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff fd34 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Please Set Mode!");
 800088c:	499f      	ldr	r1, [pc, #636]	; (8000b0c <lcd_user_display+0x2dc>)
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff fddc 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
			CLCD_I2C_WriteString(LCD_user,"-EXIT");
		}
	}/*END if(language == ENGLISH)*/

}
 8000894:	e222      	b.n	8000cdc <lcd_user_display+0x4ac>
			else if(status_display == STATUS_2)
 8000896:	78fb      	ldrb	r3, [r7, #3]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d124      	bne.n	80008e6 <lcd_user_display+0xb6>
				CLCD_I2C_SetCursor(LCD_user, 3, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2103      	movs	r1, #3
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff fd27 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"SELECT MODE");
 80008a6:	499a      	ldr	r1, [pc, #616]	; (8000b10 <lcd_user_display+0x2e0>)
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff fdcf 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2100      	movs	r1, #0
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff fd1e 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"-Language");
 80008b8:	4996      	ldr	r1, [pc, #600]	; (8000b14 <lcd_user_display+0x2e4>)
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fdc6 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 2);
 80008c0:	2202      	movs	r2, #2
 80008c2:	2100      	movs	r1, #0
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff fd15 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"-Enter password");
 80008ca:	4993      	ldr	r1, [pc, #588]	; (8000b18 <lcd_user_display+0x2e8>)
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff fdbd 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 3);
 80008d2:	2203      	movs	r2, #3
 80008d4:	2100      	movs	r1, #0
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff fd0c 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"-Exit");
 80008dc:	498f      	ldr	r1, [pc, #572]	; (8000b1c <lcd_user_display+0x2ec>)
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff fdb4 	bl	800044c <CLCD_I2C_WriteString>
}
 80008e4:	e1fa      	b.n	8000cdc <lcd_user_display+0x4ac>
			else if(status_display == STATUS_3)
 80008e6:	78fb      	ldrb	r3, [r7, #3]
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d14b      	bne.n	8000984 <lcd_user_display+0x154>
				CLCD_I2C_SetCursor(LCD_user, 0, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff fcff 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Enter ur number:");
 80008f6:	498a      	ldr	r1, [pc, #552]	; (8000b20 <lcd_user_display+0x2f0>)
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff fda7 	bl	800044c <CLCD_I2C_WriteString>
				if(state_star_pass == STAR)
 80008fe:	4b89      	ldr	r3, [pc, #548]	; (8000b24 <lcd_user_display+0x2f4>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d109      	bne.n	800091c <lcd_user_display+0xec>
					CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000908:	2201      	movs	r2, #1
 800090a:	2100      	movs	r1, #0
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff fcf1 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(LCD_user,">***");
 8000912:	4985      	ldr	r1, [pc, #532]	; (8000b28 <lcd_user_display+0x2f8>)
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fd99 	bl	800044c <CLCD_I2C_WriteString>
 800091a:	e008      	b.n	800092e <lcd_user_display+0xfe>
					CLCD_I2C_SetCursor(LCD_user, 0, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	2100      	movs	r1, #0
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff fce7 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(LCD_user,">");
 8000926:	4981      	ldr	r1, [pc, #516]	; (8000b2c <lcd_user_display+0x2fc>)
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fd8f 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 2);
 800092e:	2202      	movs	r2, #2
 8000930:	2100      	movs	r1, #0
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fcde 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Password: ");
 8000938:	497d      	ldr	r1, [pc, #500]	; (8000b30 <lcd_user_display+0x300>)
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fd86 	bl	800044c <CLCD_I2C_WriteString>
				if(state_star_pass == STAR)
 8000940:	4b78      	ldr	r3, [pc, #480]	; (8000b24 <lcd_user_display+0x2f4>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d109      	bne.n	800095e <lcd_user_display+0x12e>
					CLCD_I2C_SetCursor(LCD_user, 6, 2);
 800094a:	2202      	movs	r2, #2
 800094c:	2106      	movs	r1, #6
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fcd0 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(LCD_user,">*****");
 8000954:	4977      	ldr	r1, [pc, #476]	; (8000b34 <lcd_user_display+0x304>)
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff fd78 	bl	800044c <CLCD_I2C_WriteString>
 800095c:	e008      	b.n	8000970 <lcd_user_display+0x140>
					CLCD_I2C_SetCursor(LCD_user, 6, 2);
 800095e:	2202      	movs	r2, #2
 8000960:	2106      	movs	r1, #6
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fcc6 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(LCD_user,">");
 8000968:	4970      	ldr	r1, [pc, #448]	; (8000b2c <lcd_user_display+0x2fc>)
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff fd6e 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000970:	2203      	movs	r2, #3
 8000972:	2100      	movs	r1, #0
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff fcbd 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Exit");
 800097a:	496f      	ldr	r1, [pc, #444]	; (8000b38 <lcd_user_display+0x308>)
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fd65 	bl	800044c <CLCD_I2C_WriteString>
}
 8000982:	e1ab      	b.n	8000cdc <lcd_user_display+0x4ac>
			else if(status_display == STATUS_4)
 8000984:	78fb      	ldrb	r3, [r7, #3]
 8000986:	2b04      	cmp	r3, #4
 8000988:	d11b      	bne.n	80009c2 <lcd_user_display+0x192>
				CLCD_I2C_SetCursor(LCD_user, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff fcb0 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Password OKE!");
 8000994:	4969      	ldr	r1, [pc, #420]	; (8000b3c <lcd_user_display+0x30c>)
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fd58 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 1);
 800099c:	2201      	movs	r2, #1
 800099e:	2100      	movs	r1, #0
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff fca7 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Wait few ");
 80009a6:	4966      	ldr	r1, [pc, #408]	; (8000b40 <lcd_user_display+0x310>)
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fd4f 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 3, 2);
 80009ae:	2202      	movs	r2, #2
 80009b0:	2103      	movs	r1, #3
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fc9e 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"minutes...");
 80009b8:	4962      	ldr	r1, [pc, #392]	; (8000b44 <lcd_user_display+0x314>)
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff fd46 	bl	800044c <CLCD_I2C_WriteString>
}
 80009c0:	e18c      	b.n	8000cdc <lcd_user_display+0x4ac>
			else if(status_display == STATUS_5)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2b05      	cmp	r3, #5
 80009c6:	d11b      	bne.n	8000a00 <lcd_user_display+0x1d0>
			  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff fc91 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"Password FAIL!");
 80009d2:	495d      	ldr	r1, [pc, #372]	; (8000b48 <lcd_user_display+0x318>)
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff fd39 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80009da:	2201      	movs	r2, #1
 80009dc:	2100      	movs	r1, #0
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff fc88 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"\"Enter\" to enter");
 80009e4:	4959      	ldr	r1, [pc, #356]	; (8000b4c <lcd_user_display+0x31c>)
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fd30 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 80009ec:	2202      	movs	r2, #2
 80009ee:	2104      	movs	r1, #4
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fc7f 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"new password :<");
 80009f6:	4956      	ldr	r1, [pc, #344]	; (8000b50 <lcd_user_display+0x320>)
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fd27 	bl	800044c <CLCD_I2C_WriteString>
}
 80009fe:	e16d      	b.n	8000cdc <lcd_user_display+0x4ac>
			else if(status_display == STATUS_6)
 8000a00:	78fb      	ldrb	r3, [r7, #3]
 8000a02:	2b06      	cmp	r3, #6
 8000a04:	f040 816a 	bne.w	8000cdc <lcd_user_display+0x4ac>
				CLCD_I2C_SetCursor(LCD_user, 3, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2103      	movs	r1, #3
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff fc71 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Language");
 8000a12:	4950      	ldr	r1, [pc, #320]	; (8000b54 <lcd_user_display+0x324>)
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff fd19 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fc68 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 8000a24:	494c      	ldr	r1, [pc, #304]	; (8000b58 <lcd_user_display+0x328>)
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff fd10 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	2100      	movs	r1, #0
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff fc5f 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"-English");
 8000a36:	4949      	ldr	r1, [pc, #292]	; (8000b5c <lcd_user_display+0x32c>)
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff fd07 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000a3e:	2203      	movs	r2, #3
 8000a40:	2100      	movs	r1, #0
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fc56 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"-EXIT");
 8000a48:	4945      	ldr	r1, [pc, #276]	; (8000b60 <lcd_user_display+0x330>)
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fcfe 	bl	800044c <CLCD_I2C_WriteString>
}
 8000a50:	e144      	b.n	8000cdc <lcd_user_display+0x4ac>
	else if(language == VIETNAMESE)
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <lcd_user_display+0x2cc>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f040 8140 	bne.w	8000cdc <lcd_user_display+0x4ac>
		if(status_display == STATUS_1)
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d124      	bne.n	8000aac <lcd_user_display+0x27c>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff fc44 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 8000a6c:	4924      	ldr	r1, [pc, #144]	; (8000b00 <lcd_user_display+0x2d0>)
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff fcec 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 3, 1);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2103      	movs	r1, #3
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff fc3b 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"KHOA CO KHI");
 8000a7e:	4921      	ldr	r1, [pc, #132]	; (8000b04 <lcd_user_display+0x2d4>)
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff fce3 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000a86:	2202      	movs	r2, #2
 8000a88:	2104      	movs	r1, #4
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff fc32 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 8000a90:	491d      	ldr	r1, [pc, #116]	; (8000b08 <lcd_user_display+0x2d8>)
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fcda 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000a98:	2203      	movs	r2, #3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff fc29 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Please Set Mode!");
 8000aa2:	491a      	ldr	r1, [pc, #104]	; (8000b0c <lcd_user_display+0x2dc>)
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff fcd1 	bl	800044c <CLCD_I2C_WriteString>
}
 8000aaa:	e117      	b.n	8000cdc <lcd_user_display+0x4ac>
		else if(status_display == STATUS_2)
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d160      	bne.n	8000b74 <lcd_user_display+0x344>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fc1c 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Lua chon che do:");
 8000abc:	4929      	ldr	r1, [pc, #164]	; (8000b64 <lcd_user_display+0x334>)
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff fcc4 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff fc13 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Ngon ngu");
 8000ace:	4926      	ldr	r1, [pc, #152]	; (8000b68 <lcd_user_display+0x338>)
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fcbb 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	2100      	movs	r1, #0
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff fc0a 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Nhap ma pin");
 8000ae0:	4922      	ldr	r1, [pc, #136]	; (8000b6c <lcd_user_display+0x33c>)
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fcb2 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000ae8:	2203      	movs	r2, #3
 8000aea:	2100      	movs	r1, #0
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fc01 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Thoat");
 8000af2:	491f      	ldr	r1, [pc, #124]	; (8000b70 <lcd_user_display+0x340>)
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff fca9 	bl	800044c <CLCD_I2C_WriteString>
}
 8000afa:	e0ef      	b.n	8000cdc <lcd_user_display+0x4ac>
 8000afc:	2000004f 	.word	0x2000004f
 8000b00:	08003178 	.word	0x08003178
 8000b04:	0800318c 	.word	0x0800318c
 8000b08:	08003198 	.word	0x08003198
 8000b0c:	080031a4 	.word	0x080031a4
 8000b10:	080031b8 	.word	0x080031b8
 8000b14:	080031c4 	.word	0x080031c4
 8000b18:	080031d0 	.word	0x080031d0
 8000b1c:	080031e0 	.word	0x080031e0
 8000b20:	080031e8 	.word	0x080031e8
 8000b24:	2000004c 	.word	0x2000004c
 8000b28:	080031fc 	.word	0x080031fc
 8000b2c:	08003204 	.word	0x08003204
 8000b30:	08003208 	.word	0x08003208
 8000b34:	08003214 	.word	0x08003214
 8000b38:	0800321c 	.word	0x0800321c
 8000b3c:	08003224 	.word	0x08003224
 8000b40:	08003234 	.word	0x08003234
 8000b44:	08003240 	.word	0x08003240
 8000b48:	0800324c 	.word	0x0800324c
 8000b4c:	0800325c 	.word	0x0800325c
 8000b50:	08003270 	.word	0x08003270
 8000b54:	08003280 	.word	0x08003280
 8000b58:	0800328c 	.word	0x0800328c
 8000b5c:	08003298 	.word	0x08003298
 8000b60:	080032a4 	.word	0x080032a4
 8000b64:	080032ac 	.word	0x080032ac
 8000b68:	080032c0 	.word	0x080032c0
 8000b6c:	080032cc 	.word	0x080032cc
 8000b70:	080032dc 	.word	0x080032dc
		else if(status_display == STATUS_3)
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	d14b      	bne.n	8000c12 <lcd_user_display+0x3e2>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff fbb8 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Nhap stt cua ban");
 8000b84:	4957      	ldr	r1, [pc, #348]	; (8000ce4 <lcd_user_display+0x4b4>)
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff fc60 	bl	800044c <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000b8c:	4b56      	ldr	r3, [pc, #344]	; (8000ce8 <lcd_user_display+0x4b8>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d109      	bne.n	8000baa <lcd_user_display+0x37a>
				CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2100      	movs	r1, #0
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fbaa 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">***");
 8000ba0:	4952      	ldr	r1, [pc, #328]	; (8000cec <lcd_user_display+0x4bc>)
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fc52 	bl	800044c <CLCD_I2C_WriteString>
 8000ba8:	e008      	b.n	8000bbc <lcd_user_display+0x38c>
				CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000baa:	2201      	movs	r2, #1
 8000bac:	2100      	movs	r1, #0
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff fba0 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8000bb4:	494e      	ldr	r1, [pc, #312]	; (8000cf0 <lcd_user_display+0x4c0>)
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff fc48 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fb97 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"PIN: ");
 8000bc6:	494b      	ldr	r1, [pc, #300]	; (8000cf4 <lcd_user_display+0x4c4>)
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff fc3f 	bl	800044c <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000bce:	4b46      	ldr	r3, [pc, #280]	; (8000ce8 <lcd_user_display+0x4b8>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d109      	bne.n	8000bec <lcd_user_display+0x3bc>
				CLCD_I2C_SetCursor(LCD_user, 6, 2);
 8000bd8:	2202      	movs	r2, #2
 8000bda:	2106      	movs	r1, #6
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff fb89 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*****");
 8000be2:	4945      	ldr	r1, [pc, #276]	; (8000cf8 <lcd_user_display+0x4c8>)
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fc31 	bl	800044c <CLCD_I2C_WriteString>
 8000bea:	e008      	b.n	8000bfe <lcd_user_display+0x3ce>
				CLCD_I2C_SetCursor(LCD_user, 6, 2);
 8000bec:	2202      	movs	r2, #2
 8000bee:	2106      	movs	r1, #6
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fb7f 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8000bf6:	493e      	ldr	r1, [pc, #248]	; (8000cf0 <lcd_user_display+0x4c0>)
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fc27 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000bfe:	2203      	movs	r2, #3
 8000c00:	2100      	movs	r1, #0
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff fb76 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Thoat");
 8000c08:	493c      	ldr	r1, [pc, #240]	; (8000cfc <lcd_user_display+0x4cc>)
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fc1e 	bl	800044c <CLCD_I2C_WriteString>
}
 8000c10:	e064      	b.n	8000cdc <lcd_user_display+0x4ac>
		else if(status_display == STATUS_4)
 8000c12:	78fb      	ldrb	r3, [r7, #3]
 8000c14:	2b04      	cmp	r3, #4
 8000c16:	d11b      	bne.n	8000c50 <lcd_user_display+0x420>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fb69 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"PIN OKE!");
 8000c22:	4937      	ldr	r1, [pc, #220]	; (8000d00 <lcd_user_display+0x4d0>)
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff fc11 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff fb60 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Cho");
 8000c34:	4933      	ldr	r1, [pc, #204]	; (8000d04 <lcd_user_display+0x4d4>)
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fc08 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 3, 2);
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	2103      	movs	r1, #3
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fb57 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"1 phut...");
 8000c46:	4930      	ldr	r1, [pc, #192]	; (8000d08 <lcd_user_display+0x4d8>)
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff fbff 	bl	800044c <CLCD_I2C_WriteString>
}
 8000c4e:	e045      	b.n	8000cdc <lcd_user_display+0x4ac>
		else if(status_display == STATUS_5)
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b05      	cmp	r3, #5
 8000c54:	d11b      	bne.n	8000c8e <lcd_user_display+0x45e>
		  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff fb4a 	bl	80002f4 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"PIN sai!");
 8000c60:	492a      	ldr	r1, [pc, #168]	; (8000d0c <lcd_user_display+0x4dc>)
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff fbf2 	bl	800044c <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff fb41 	bl	80002f4 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"\"Nhap\" de nhap");
 8000c72:	4927      	ldr	r1, [pc, #156]	; (8000d10 <lcd_user_display+0x4e0>)
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff fbe9 	bl	800044c <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fb38 	bl	80002f4 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"PIN moi :<");
 8000c84:	4923      	ldr	r1, [pc, #140]	; (8000d14 <lcd_user_display+0x4e4>)
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff fbe0 	bl	800044c <CLCD_I2C_WriteString>
}
 8000c8c:	e026      	b.n	8000cdc <lcd_user_display+0x4ac>
		else if(status_display == STATUS_6)
 8000c8e:	78fb      	ldrb	r3, [r7, #3]
 8000c90:	2b06      	cmp	r3, #6
 8000c92:	d123      	bne.n	8000cdc <lcd_user_display+0x4ac>
			CLCD_I2C_SetCursor(LCD_user, 3, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2103      	movs	r1, #3
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff fb2b 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Ngon ngu");
 8000c9e:	491e      	ldr	r1, [pc, #120]	; (8000d18 <lcd_user_display+0x4e8>)
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff fbd3 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2100      	movs	r1, #0
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fb22 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 8000cb0:	491a      	ldr	r1, [pc, #104]	; (8000d1c <lcd_user_display+0x4ec>)
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff fbca 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000cb8:	2202      	movs	r2, #2
 8000cba:	2100      	movs	r1, #0
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff fb19 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-English");
 8000cc2:	4917      	ldr	r1, [pc, #92]	; (8000d20 <lcd_user_display+0x4f0>)
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff fbc1 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000cca:	2203      	movs	r2, #3
 8000ccc:	2100      	movs	r1, #0
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff fb10 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-EXIT");
 8000cd4:	4913      	ldr	r1, [pc, #76]	; (8000d24 <lcd_user_display+0x4f4>)
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fbb8 	bl	800044c <CLCD_I2C_WriteString>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	080032e4 	.word	0x080032e4
 8000ce8:	2000004c 	.word	0x2000004c
 8000cec:	080031fc 	.word	0x080031fc
 8000cf0:	08003204 	.word	0x08003204
 8000cf4:	080032f8 	.word	0x080032f8
 8000cf8:	08003214 	.word	0x08003214
 8000cfc:	08003300 	.word	0x08003300
 8000d00:	08003308 	.word	0x08003308
 8000d04:	08003314 	.word	0x08003314
 8000d08:	08003318 	.word	0x08003318
 8000d0c:	08003324 	.word	0x08003324
 8000d10:	08003330 	.word	0x08003330
 8000d14:	08003340 	.word	0x08003340
 8000d18:	0800334c 	.word	0x0800334c
 8000d1c:	0800328c 	.word	0x0800328c
 8000d20:	08003298 	.word	0x08003298
 8000d24:	080032a4 	.word	0x080032a4

08000d28 <lcd_system_handler>:
    -CLCD_I2C_Name* LCD_user            : pointer lcd
  +) RETURN:
    -void
*/
void lcd_system_handler(CLCD_I2C_Name* LCD_user)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	if(delete)
 8000d30:	4ba4      	ldr	r3, [pc, #656]	; (8000fc4 <lcd_system_handler+0x29c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <lcd_system_handler+0x1c>
	{
		CLCD_I2C_Clear(LCD_user);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff fbed 	bl	8000518 <CLCD_I2C_Clear>
		delete = 0;
 8000d3e:	4ba1      	ldr	r3, [pc, #644]	; (8000fc4 <lcd_system_handler+0x29c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
	}
	if(Mode == 0)
 8000d44:	4ba0      	ldr	r3, [pc, #640]	; (8000fc8 <lcd_system_handler+0x2a0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d112      	bne.n	8000d74 <lcd_system_handler+0x4c>
	{
		Config = CONFIG_NONE;
 8000d4e:	4b9f      	ldr	r3, [pc, #636]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
		Enter = 0;
 8000d54:	4b9e      	ldr	r3, [pc, #632]	; (8000fd0 <lcd_system_handler+0x2a8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
		Status_Display = STATUS_1;
 8000d5a:	4b9e      	ldr	r3, [pc, #632]	; (8000fd4 <lcd_system_handler+0x2ac>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
		lcd_user_display(LCD_user, Status_Display);
 8000d60:	4b9c      	ldr	r3, [pc, #624]	; (8000fd4 <lcd_system_handler+0x2ac>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fd62 	bl	8000830 <lcd_user_display>
		Index_mode = INDEX_MODE_NONE;
 8000d6c:	4b9a      	ldr	r3, [pc, #616]	; (8000fd8 <lcd_system_handler+0x2b0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
				Enter = 0;
			}
			lcd_user_display(LCD_user, Status_Display);
		} /*END if(Index_mode == INDEX_MODE2)*/
	}/*END if(Mode == 1)*/
}
 8000d72:	e147      	b.n	8001004 <lcd_system_handler+0x2dc>
	else if(Mode == 1)
 8000d74:	4b94      	ldr	r3, [pc, #592]	; (8000fc8 <lcd_system_handler+0x2a0>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	f040 8142 	bne.w	8001004 <lcd_system_handler+0x2dc>
		if(Index_mode == INDEX_MODE_NONE)
 8000d80:	4b95      	ldr	r3, [pc, #596]	; (8000fd8 <lcd_system_handler+0x2b0>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d164      	bne.n	8000e52 <lcd_system_handler+0x12a>
			if (flag_button)
 8000d88:	4b94      	ldr	r3, [pc, #592]	; (8000fdc <lcd_system_handler+0x2b4>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d005      	beq.n	8000d9e <lcd_system_handler+0x76>
				CLCD_I2C_Clear(LCD_user);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff fbc0 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8000d98:	4b90      	ldr	r3, [pc, #576]	; (8000fdc <lcd_system_handler+0x2b4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
			Status_Display = STATUS_2;
 8000d9e:	4b8d      	ldr	r3, [pc, #564]	; (8000fd4 <lcd_system_handler+0x2ac>)
 8000da0:	2202      	movs	r2, #2
 8000da2:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000da4:	4b89      	ldr	r3, [pc, #548]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d044      	beq.n	8000e38 <lcd_system_handler+0x110>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8000dae:	4b87      	ldr	r3, [pc, #540]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	210f      	movs	r1, #15
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff fa9b 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8000dbe:	4988      	ldr	r1, [pc, #544]	; (8000fe0 <lcd_system_handler+0x2b8>)
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff fb43 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000dc6:	4b82      	ldr	r3, [pc, #520]	; (8000fd0 <lcd_system_handler+0x2a8>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d039      	beq.n	8000e44 <lcd_system_handler+0x11c>
					Enter = 0;
 8000dd0:	4b7f      	ldr	r3, [pc, #508]	; (8000fd0 <lcd_system_handler+0x2a8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8000dd6:	4b7d      	ldr	r3, [pc, #500]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d108      	bne.n	8000df2 <lcd_system_handler+0xca>
                        Index_mode = INDEX_MODE1;
 8000de0:	4b7d      	ldr	r3, [pc, #500]	; (8000fd8 <lcd_system_handler+0x2b0>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8000de6:	4b79      	ldr	r3, [pc, #484]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000dec:	4b75      	ldr	r3, [pc, #468]	; (8000fc4 <lcd_system_handler+0x29c>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 8000df2:	4b76      	ldr	r3, [pc, #472]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d108      	bne.n	8000e0e <lcd_system_handler+0xe6>
                        Index_mode = INDEX_MODE2;
 8000dfc:	4b76      	ldr	r3, [pc, #472]	; (8000fd8 <lcd_system_handler+0x2b0>)
 8000dfe:	2202      	movs	r2, #2
 8000e00:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8000e02:	4b72      	ldr	r3, [pc, #456]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000e08:	4b6e      	ldr	r3, [pc, #440]	; (8000fc4 <lcd_system_handler+0x29c>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000e0e:	4b6f      	ldr	r3, [pc, #444]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d115      	bne.n	8000e44 <lcd_system_handler+0x11c>
                        Index_mode = INDEX_MODE1;
 8000e18:	4b6f      	ldr	r3, [pc, #444]	; (8000fd8 <lcd_system_handler+0x2b0>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
                        Mode = 0;
 8000e1e:	4b6a      	ldr	r3, [pc, #424]	; (8000fc8 <lcd_system_handler+0x2a0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000e24:	4b69      	ldr	r3, [pc, #420]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_1;
 8000e2a:	4b6a      	ldr	r3, [pc, #424]	; (8000fd4 <lcd_system_handler+0x2ac>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000e30:	4b64      	ldr	r3, [pc, #400]	; (8000fc4 <lcd_system_handler+0x29c>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	e005      	b.n	8000e44 <lcd_system_handler+0x11c>
				Config = CONFIG_ROW1;
 8000e38:	4b64      	ldr	r3, [pc, #400]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8000e3e:	4b64      	ldr	r3, [pc, #400]	; (8000fd0 <lcd_system_handler+0x2a8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000e44:	4b63      	ldr	r3, [pc, #396]	; (8000fd4 <lcd_system_handler+0x2ac>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff fcf0 	bl	8000830 <lcd_user_display>
}
 8000e50:	e0d8      	b.n	8001004 <lcd_system_handler+0x2dc>
		else if(INDEX_MODE1 == Index_mode)	// Languge
 8000e52:	4b61      	ldr	r3, [pc, #388]	; (8000fd8 <lcd_system_handler+0x2b0>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d161      	bne.n	8000f1e <lcd_system_handler+0x1f6>
			Status_Display = STATUS_6;
 8000e5a:	4b5e      	ldr	r3, [pc, #376]	; (8000fd4 <lcd_system_handler+0x2ac>)
 8000e5c:	2206      	movs	r2, #6
 8000e5e:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000e60:	4b5c      	ldr	r3, [pc, #368]	; (8000fd4 <lcd_system_handler+0x2ac>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff fce2 	bl	8000830 <lcd_user_display>
			if (flag_button)
 8000e6c:	4b5b      	ldr	r3, [pc, #364]	; (8000fdc <lcd_system_handler+0x2b4>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d005      	beq.n	8000e82 <lcd_system_handler+0x15a>
				CLCD_I2C_Clear(LCD_user);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fb4e 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8000e7c:	4b57      	ldr	r3, [pc, #348]	; (8000fdc <lcd_system_handler+0x2b4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000e82:	4b52      	ldr	r3, [pc, #328]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d03b      	beq.n	8000f04 <lcd_system_handler+0x1dc>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8000e8c:	4b4f      	ldr	r3, [pc, #316]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	210f      	movs	r1, #15
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff fa2c 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8000e9c:	4950      	ldr	r1, [pc, #320]	; (8000fe0 <lcd_system_handler+0x2b8>)
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff fad4 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000ea4:	4b4a      	ldr	r3, [pc, #296]	; (8000fd0 <lcd_system_handler+0x2a8>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d030      	beq.n	8000f10 <lcd_system_handler+0x1e8>
					Enter = 0;
 8000eae:	4b48      	ldr	r3, [pc, #288]	; (8000fd0 <lcd_system_handler+0x2a8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8000eb4:	4b45      	ldr	r3, [pc, #276]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d105      	bne.n	8000eca <lcd_system_handler+0x1a2>
						language = VIETNAMESE;
 8000ebe:	4b49      	ldr	r3, [pc, #292]	; (8000fe4 <lcd_system_handler+0x2bc>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 8000ec4:	4b41      	ldr	r3, [pc, #260]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 8000eca:	4b40      	ldr	r3, [pc, #256]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d105      	bne.n	8000ee0 <lcd_system_handler+0x1b8>
						language = ENGLISH;
 8000ed4:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <lcd_system_handler+0x2bc>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 8000eda:	4b3c      	ldr	r3, [pc, #240]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000edc:	2203      	movs	r2, #3
 8000ede:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000ee0:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d112      	bne.n	8000f10 <lcd_system_handler+0x1e8>
                        Index_mode = INDEX_MODE_NONE;
 8000eea:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <lcd_system_handler+0x2b0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000ef0:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_2;
 8000ef6:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <lcd_system_handler+0x2ac>)
 8000ef8:	2202      	movs	r2, #2
 8000efa:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000efc:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <lcd_system_handler+0x29c>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
 8000f02:	e005      	b.n	8000f10 <lcd_system_handler+0x1e8>
				Config = CONFIG_ROW1;
 8000f04:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <lcd_system_handler+0x2a8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <lcd_system_handler+0x2ac>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fc8a 	bl	8000830 <lcd_user_display>
}
 8000f1c:	e072      	b.n	8001004 <lcd_system_handler+0x2dc>
		else if(INDEX_MODE2 == Index_mode)	// Enter Password
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <lcd_system_handler+0x2b0>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d16e      	bne.n	8001004 <lcd_system_handler+0x2dc>
			Status_Display = STATUS_3;
 8000f26:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <lcd_system_handler+0x2ac>)
 8000f28:	2203      	movs	r2, #3
 8000f2a:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000f2c:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <lcd_system_handler+0x2ac>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fc7c 	bl	8000830 <lcd_user_display>
			if (flag_button)
 8000f38:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <lcd_system_handler+0x2b4>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <lcd_system_handler+0x226>
				CLCD_I2C_Clear(LCD_user);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff fae8 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8000f48:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <lcd_system_handler+0x2b4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d049      	beq.n	8000fec <lcd_system_handler+0x2c4>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	210f      	movs	r1, #15
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff f9c6 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8000f68:	491d      	ldr	r1, [pc, #116]	; (8000fe0 <lcd_system_handler+0x2b8>)
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff fa6e 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <lcd_system_handler+0x2a8>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d03e      	beq.n	8000ff8 <lcd_system_handler+0x2d0>
					Enter = 0;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <lcd_system_handler+0x2a8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)	// Nhap so thu tu
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d102      	bne.n	8000f90 <lcd_system_handler+0x268>
						enter_num_pass.signal_enter_num = PROCESSING;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <lcd_system_handler+0x2c0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	705a      	strb	r2, [r3, #1]
					if(Config == CONFIG_ROW2)	// Nhap pass
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d102      	bne.n	8000fa0 <lcd_system_handler+0x278>
						enter_num_pass.signal_enter_pass = PROCESSING;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <lcd_system_handler+0x2c0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d126      	bne.n	8000ff8 <lcd_system_handler+0x2d0>
                        Index_mode = INDEX_MODE_NONE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <lcd_system_handler+0x2b0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <lcd_system_handler+0x2a4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_2;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <lcd_system_handler+0x2ac>)
 8000fb8:	2202      	movs	r2, #2
 8000fba:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000fbc:	4b01      	ldr	r3, [pc, #4]	; (8000fc4 <lcd_system_handler+0x29c>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	e019      	b.n	8000ff8 <lcd_system_handler+0x2d0>
 8000fc4:	20000048 	.word	0x20000048
 8000fc8:	20000049 	.word	0x20000049
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	2000004a 	.word	0x2000004a
 8000fd4:	2000004e 	.word	0x2000004e
 8000fd8:	2000004d 	.word	0x2000004d
 8000fdc:	2000004b 	.word	0x2000004b
 8000fe0:	08003358 	.word	0x08003358
 8000fe4:	2000004f 	.word	0x2000004f
 8000fe8:	20000004 	.word	0x20000004
				Config = CONFIG_ROW1;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <lcd_system_handler+0x2e4>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <lcd_system_handler+0x2e8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <lcd_system_handler+0x2ec>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fc16 	bl	8000830 <lcd_user_display>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000000 	.word	0x20000000
 8001010:	2000004a 	.word	0x2000004a
 8001014:	2000004e 	.word	0x2000004e

08001018 <HAL_GPIO_EXTI_Callback>:
uint8_t size_row_pass = 5;
uint8_t password[5] = {0};
volatile uint8_t flag_keypad = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
	static uint32_t TimeBegin = 0;
	static uint32_t TimeNow = 0;
	/*CODE ISR*/
	/*flag keypad*/
	if(((R1_IN_Pin == GPIO_Pin) | (R2_IN_Pin == GPIO_Pin) | (R3_IN_Pin == GPIO_Pin) | (R4_IN_Pin == GPIO_Pin)) && (state_button == KEYPAD))
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001028:	bf0c      	ite	eq
 800102a:	2301      	moveq	r3, #1
 800102c:	2300      	movne	r3, #0
 800102e:	b2da      	uxtb	r2, r3
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001036:	bf0c      	ite	eq
 8001038:	2301      	moveq	r3, #1
 800103a:	2300      	movne	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b2db      	uxtb	r3, r3
 8001042:	461a      	mov	r2, r3
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800104a:	bf0c      	ite	eq
 800104c:	2301      	moveq	r3, #1
 800104e:	2300      	movne	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	88fa      	ldrh	r2, [r7, #6]
 8001056:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800105a:	bf0c      	ite	eq
 800105c:	2201      	moveq	r2, #1
 800105e:	2200      	movne	r2, #0
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	4313      	orrs	r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00e      	beq.n	8001086 <HAL_GPIO_EXTI_Callback+0x6e>
 8001068:	4b51      	ldr	r3, [pc, #324]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x198>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10a      	bne.n	8001086 <HAL_GPIO_EXTI_Callback+0x6e>
	{
		flag_keypad = 1;
 8001070:	4b50      	ldr	r3, [pc, #320]	; (80011b4 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
		key = KEYPAD_Handler(&COL_KEY_PAD_main, &ROW_KEY_PAD_main);
 8001076:	4950      	ldr	r1, [pc, #320]	; (80011b8 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001078:	4850      	ldr	r0, [pc, #320]	; (80011bc <HAL_GPIO_EXTI_Callback+0x1a4>)
 800107a:	f7ff fba9 	bl	80007d0 <KEYPAD_Handler>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b4f      	ldr	r3, [pc, #316]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001084:	701a      	strb	r2, [r3, #0]
	}
	/*flag lcd*/
	if(state_button == BUTTON)
 8001086:	4b4a      	ldr	r3, [pc, #296]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x198>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d137      	bne.n	80010fe <HAL_GPIO_EXTI_Callback+0xe6>
	{
		flag_button = 1;
 800108e:	4b4d      	ldr	r3, [pc, #308]	; (80011c4 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
		if(UP_EXTI_3_Pin == GPIO_Pin)
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	2b08      	cmp	r3, #8
 8001098:	d10f      	bne.n	80010ba <HAL_GPIO_EXTI_Callback+0xa2>
		{
			Config++;
 800109a:	4b4b      	ldr	r3, [pc, #300]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80010a6:	701a      	strb	r2, [r3, #0]
			if(Config > CONFIG_ROW3) Config = CONFIG_ROW1;
 80010a8:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d925      	bls.n	80010fe <HAL_GPIO_EXTI_Callback+0xe6>
 80010b2:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	e021      	b.n	80010fe <HAL_GPIO_EXTI_Callback+0xe6>
		}
		else if(DOWN_EXTI_4_Pin == GPIO_Pin)
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	2b10      	cmp	r3, #16
 80010be:	d10f      	bne.n	80010e0 <HAL_GPIO_EXTI_Callback+0xc8>
		{
			Config--;
 80010c0:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	3b01      	subs	r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80010cc:	701a      	strb	r2, [r3, #0]
			if(Config < CONFIG_ROW1) Config = CONFIG_ROW3;
 80010ce:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d112      	bne.n	80010fe <HAL_GPIO_EXTI_Callback+0xe6>
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80010da:	2203      	movs	r2, #3
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e00e      	b.n	80010fe <HAL_GPIO_EXTI_Callback+0xe6>
		}
		else if(ENTER_EXTI_5_Pin == GPIO_Pin)
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	2b20      	cmp	r3, #32
 80010e4:	d10b      	bne.n	80010fe <HAL_GPIO_EXTI_Callback+0xe6>
		{
			if(1 == Mode)
 80010e6:	4b39      	ldr	r3, [pc, #228]	; (80011cc <HAL_GPIO_EXTI_Callback+0x1b4>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d103      	bne.n	80010f8 <HAL_GPIO_EXTI_Callback+0xe0>
			{
				Enter = 1;
 80010f0:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e002      	b.n	80010fe <HAL_GPIO_EXTI_Callback+0xe6>
			}
			else
			{
				Mode = 1;
 80010f8:	4b34      	ldr	r3, [pc, #208]	; (80011cc <HAL_GPIO_EXTI_Callback+0x1b4>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	/*END CODE ISR*/
	HAL_Delay(20);
 80010fe:	2014      	movs	r0, #20
 8001100:	f000 fc54 	bl	80019ac <HAL_Delay>
	TimeBegin = HAL_GetTick();
 8001104:	f000 fc48 	bl	8001998 <HAL_GetTick>
 8001108:	4603      	mov	r3, r0
 800110a:	4a32      	ldr	r2, [pc, #200]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800110c:	6013      	str	r3, [r2, #0]
	while(		HAL_GPIO_ReadPin(GPIOB, UP_EXTI_3_Pin) == GPIO_PIN_RESET		\
 800110e:	e00d      	b.n	800112c <HAL_GPIO_EXTI_Callback+0x114>
			|| 	HAL_GPIO_ReadPin(R1_IN_GPIO_Port, R1_IN_Pin) == GPIO_PIN_RESET		\
			|| 	HAL_GPIO_ReadPin(R2_IN_GPIO_Port, R2_IN_Pin) == GPIO_PIN_RESET 		\
			|| 	HAL_GPIO_ReadPin(R3_IN_GPIO_Port, R3_IN_Pin) == GPIO_PIN_RESET		\
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
	{
		TimeNow = HAL_GetTick();
 8001110:	f000 fc42 	bl	8001998 <HAL_GetTick>
 8001114:	4603      	mov	r3, r0
 8001116:	4a30      	ldr	r2, [pc, #192]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001118:	6013      	str	r3, [r2, #0]
		if(TimeNow - TimeBegin == 5000)
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	f241 3288 	movw	r2, #5000	; 0x1388
 8001128:	4293      	cmp	r3, r2
 800112a:	d035      	beq.n	8001198 <HAL_GPIO_EXTI_Callback+0x180>
	while(		HAL_GPIO_ReadPin(GPIOB, UP_EXTI_3_Pin) == GPIO_PIN_RESET		\
 800112c:	2108      	movs	r1, #8
 800112e:	482b      	ldr	r0, [pc, #172]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001130:	f000 fef2 	bl	8001f18 <HAL_GPIO_ReadPin>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0ea      	beq.n	8001110 <HAL_GPIO_EXTI_Callback+0xf8>
			|| 	HAL_GPIO_ReadPin(GPIOB, DOWN_EXTI_4_Pin) == GPIO_PIN_RESET 		\
 800113a:	2110      	movs	r1, #16
 800113c:	4827      	ldr	r0, [pc, #156]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1c4>)
 800113e:	f000 feeb 	bl	8001f18 <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0e3      	beq.n	8001110 <HAL_GPIO_EXTI_Callback+0xf8>
			|| 	HAL_GPIO_ReadPin(GPIOB, ENTER_EXTI_5_Pin) == GPIO_PIN_RESET		\
 8001148:	2120      	movs	r1, #32
 800114a:	4824      	ldr	r0, [pc, #144]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1c4>)
 800114c:	f000 fee4 	bl	8001f18 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0dc      	beq.n	8001110 <HAL_GPIO_EXTI_Callback+0xf8>
			|| 	HAL_GPIO_ReadPin(R1_IN_GPIO_Port, R1_IN_Pin) == GPIO_PIN_RESET		\
 8001156:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800115a:	4820      	ldr	r0, [pc, #128]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1c4>)
 800115c:	f000 fedc 	bl	8001f18 <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0d4      	beq.n	8001110 <HAL_GPIO_EXTI_Callback+0xf8>
			|| 	HAL_GPIO_ReadPin(R2_IN_GPIO_Port, R2_IN_Pin) == GPIO_PIN_RESET 		\
 8001166:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116a:	481c      	ldr	r0, [pc, #112]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1c4>)
 800116c:	f000 fed4 	bl	8001f18 <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0cc      	beq.n	8001110 <HAL_GPIO_EXTI_Callback+0xf8>
			|| 	HAL_GPIO_ReadPin(R3_IN_GPIO_Port, R3_IN_Pin) == GPIO_PIN_RESET		\
 8001176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117a:	4818      	ldr	r0, [pc, #96]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1c4>)
 800117c:	f000 fecc 	bl	8001f18 <HAL_GPIO_ReadPin>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0c4      	beq.n	8001110 <HAL_GPIO_EXTI_Callback+0xf8>
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
 8001186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118a:	4814      	ldr	r0, [pc, #80]	; (80011dc <HAL_GPIO_EXTI_Callback+0x1c4>)
 800118c:	f000 fec4 	bl	8001f18 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0bc      	beq.n	8001110 <HAL_GPIO_EXTI_Callback+0xf8>
 8001196:	e000      	b.n	800119a <HAL_GPIO_EXTI_Callback+0x182>
		{
//			ButtonError = 1;
			break;
 8001198:	bf00      	nop
		}
	}
	HAL_Delay(20);
 800119a:	2014      	movs	r0, #20
 800119c:	f000 fc06 	bl	80019ac <HAL_Delay>
	EXTI->PR = ENTER_EXTI_5_Pin | DOWN_EXTI_4_Pin | UP_EXTI_3_Pin \
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80011a2:	f24f 0238 	movw	r2, #61496	; 0xf038
 80011a6:	615a      	str	r2, [r3, #20]
			| R1_IN_Pin | R2_IN_Pin |R3_IN_Pin | R4_IN_Pin;
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000006 	.word	0x20000006
 80011b4:	20000131 	.word	0x20000131
 80011b8:	20000110 	.word	0x20000110
 80011bc:	200000f8 	.word	0x200000f8
 80011c0:	20000128 	.word	0x20000128
 80011c4:	2000004b 	.word	0x2000004b
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000049 	.word	0x20000049
 80011d0:	2000004a 	.word	0x2000004a
 80011d4:	20000134 	.word	0x20000134
 80011d8:	20000138 	.word	0x20000138
 80011dc:	40010c00 	.word	0x40010c00
 80011e0:	40010400 	.word	0x40010400

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b092      	sub	sp, #72	; 0x48
 80011e8:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ea:	f000 fb7d 	bl	80018e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ee:	f000 f92f 	bl	8001450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f2:	f000 f9c5 	bl	8001580 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011f6:	f000 f967 	bl	80014c8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80011fa:	f000 f993 	bl	8001524 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  KeyPad_Init(		// Cpl pin + port
 80011fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001202:	930d      	str	r3, [sp, #52]	; 0x34
 8001204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001208:	930c      	str	r3, [sp, #48]	; 0x30
 800120a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800120e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001214:	930a      	str	r3, [sp, #40]	; 0x28
 8001216:	4b7f      	ldr	r3, [pc, #508]	; (8001414 <main+0x230>)
 8001218:	9309      	str	r3, [sp, #36]	; 0x24
 800121a:	4b7e      	ldr	r3, [pc, #504]	; (8001414 <main+0x230>)
 800121c:	9308      	str	r3, [sp, #32]
 800121e:	4b7d      	ldr	r3, [pc, #500]	; (8001414 <main+0x230>)
 8001220:	9307      	str	r3, [sp, #28]
 8001222:	4b7c      	ldr	r3, [pc, #496]	; (8001414 <main+0x230>)
 8001224:	9306      	str	r3, [sp, #24]
 8001226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122a:	9305      	str	r3, [sp, #20]
 800122c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001230:	9304      	str	r3, [sp, #16]
 8001232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001236:	9303      	str	r3, [sp, #12]
 8001238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	4b76      	ldr	r3, [pc, #472]	; (8001418 <main+0x234>)
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	4b75      	ldr	r3, [pc, #468]	; (8001418 <main+0x234>)
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	4b74      	ldr	r3, [pc, #464]	; (8001418 <main+0x234>)
 8001248:	4a73      	ldr	r2, [pc, #460]	; (8001418 <main+0x234>)
 800124a:	4974      	ldr	r1, [pc, #464]	; (800141c <main+0x238>)
 800124c:	4874      	ldr	r0, [pc, #464]	; (8001420 <main+0x23c>)
 800124e:	f7ff f973 	bl	8000538 <KeyPad_Init>
					C1_OUT_Pin, C2_OUT_Pin, C3_OUT_Pin, C4_OUT_Pin,								\
					// Row pin + port
					R1_IN_GPIO_Port, R2_IN_GPIO_Port, R3_IN_GPIO_Port, R4_IN_GPIO_Port,					\
					R1_IN_Pin, R2_IN_Pin, R3_IN_Pin, R4_IN_Pin
			  );
  CLCD_I2C_Init(&LCD1, &hi2c1, (0x27 << 1), 16, 4);
 8001252:	4638      	mov	r0, r7
 8001254:	2304      	movs	r3, #4
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2310      	movs	r3, #16
 800125a:	224e      	movs	r2, #78	; 0x4e
 800125c:	4971      	ldr	r1, [pc, #452]	; (8001424 <main+0x240>)
 800125e:	f7fe ffd9 	bl	8000214 <CLCD_I2C_Init>

  CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f843 	bl	80002f4 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1, "Hello");
 800126e:	463b      	mov	r3, r7
 8001270:	496d      	ldr	r1, [pc, #436]	; (8001428 <main+0x244>)
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f8ea 	bl	800044c <CLCD_I2C_WriteString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_keypad == 1)
 8001278:	4b6c      	ldr	r3, [pc, #432]	; (800142c <main+0x248>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d107      	bne.n	8001292 <main+0xae>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001286:	486a      	ldr	r0, [pc, #424]	; (8001430 <main+0x24c>)
 8001288:	f000 fe75 	bl	8001f76 <HAL_GPIO_TogglePin>
		  flag_keypad = 0;
 800128c:	4b67      	ldr	r3, [pc, #412]	; (800142c <main+0x248>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
	  }

	  /*test keypad screen lcd*/
	  if(key != KEYPAD_NOT_PRESSED)	//when state_button = KEYPAD
 8001292:	4b68      	ldr	r3, [pc, #416]	; (8001434 <main+0x250>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8088 	beq.w	80013ac <main+0x1c8>
	  {
		  if(enter_num_pass.signal_enter_pass == PROCESSING)
 800129c:	4b66      	ldr	r3, [pc, #408]	; (8001438 <main+0x254>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d13e      	bne.n	8001324 <main+0x140>
		  {
			  CLCD_I2C_SetCursor(&LCD1, row_key_password, 2);
 80012a6:	4b65      	ldr	r3, [pc, #404]	; (800143c <main+0x258>)
 80012a8:	7819      	ldrb	r1, [r3, #0]
 80012aa:	463b      	mov	r3, r7
 80012ac:	2202      	movs	r2, #2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f820 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteChar(&LCD1, key);
 80012b4:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <main+0x250>)
 80012b6:	781a      	ldrb	r2, [r3, #0]
 80012b8:	463b      	mov	r3, r7
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f873 	bl	80003a8 <CLCD_I2C_WriteChar>

			  password[row_key_password - 7] = key;
 80012c2:	4b5e      	ldr	r3, [pc, #376]	; (800143c <main+0x258>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	3b07      	subs	r3, #7
 80012c8:	4a5a      	ldr	r2, [pc, #360]	; (8001434 <main+0x250>)
 80012ca:	7811      	ldrb	r1, [r2, #0]
 80012cc:	4a5c      	ldr	r2, [pc, #368]	; (8001440 <main+0x25c>)
 80012ce:	54d1      	strb	r1, [r2, r3]
			  row_key_password++;
 80012d0:	4b5a      	ldr	r3, [pc, #360]	; (800143c <main+0x258>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	3301      	adds	r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b58      	ldr	r3, [pc, #352]	; (800143c <main+0x258>)
 80012da:	701a      	strb	r2, [r3, #0]
			  key = KEYPAD_NOT_PRESSED;
 80012dc:	4b55      	ldr	r3, [pc, #340]	; (8001434 <main+0x250>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]

			  if(row_key_password > SIZE_ROW_PASS)
 80012e2:	4b56      	ldr	r3, [pc, #344]	; (800143c <main+0x258>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b0b      	cmp	r3, #11
 80012e8:	d91c      	bls.n	8001324 <main+0x140>
			  {
				  enter_num_pass.signal_enter_pass = NOT_DONE;
 80012ea:	4b53      	ldr	r3, [pc, #332]	; (8001438 <main+0x254>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]

				  state_button = BUTTON;
 80012f0:	4b54      	ldr	r3, [pc, #336]	; (8001444 <main+0x260>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
				  /*Neu Mang hinh nhap du 5 so*/
				  /*reset mang hinh*/
				  CLCD_I2C_Clear(&LCD1);
 80012f6:	463b      	mov	r3, r7
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f90d 	bl	8000518 <CLCD_I2C_Clear>

				  state_star_pass = STAR;
 80012fe:	4b52      	ldr	r3, [pc, #328]	; (8001448 <main+0x264>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
				  row_key_password = 7;
 8001304:	4b4d      	ldr	r3, [pc, #308]	; (800143c <main+0x258>)
 8001306:	2207      	movs	r2, #7
 8001308:	701a      	strb	r2, [r3, #0]
				  for(uint8_t i = 0; i <= sizeof(password); i++)
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e006      	b.n	800131e <main+0x13a>
				  {
					  password[i] = 0;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	4a4b      	ldr	r2, [pc, #300]	; (8001440 <main+0x25c>)
 8001314:	2100      	movs	r1, #0
 8001316:	54d1      	strb	r1, [r2, r3]
				  for(uint8_t i = 0; i <= sizeof(password); i++)
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	3301      	adds	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d9f5      	bls.n	8001310 <main+0x12c>
				  }
			  }
		  }
		  if(enter_num_pass.signal_enter_num == PROCESSING)
 8001324:	4b44      	ldr	r3, [pc, #272]	; (8001438 <main+0x254>)
 8001326:	785b      	ldrb	r3, [r3, #1]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d13e      	bne.n	80013ac <main+0x1c8>
		  {
			  CLCD_I2C_SetCursor(&LCD1, row_key_num, 1);
 800132e:	4b47      	ldr	r3, [pc, #284]	; (800144c <main+0x268>)
 8001330:	7819      	ldrb	r1, [r3, #0]
 8001332:	463b      	mov	r3, r7
 8001334:	2201      	movs	r2, #1
 8001336:	4618      	mov	r0, r3
 8001338:	f7fe ffdc 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteChar(&LCD1, key);
 800133c:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <main+0x250>)
 800133e:	781a      	ldrb	r2, [r3, #0]
 8001340:	463b      	mov	r3, r7
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f82f 	bl	80003a8 <CLCD_I2C_WriteChar>

			  password[row_key_num - 1] = key;
 800134a:	4b40      	ldr	r3, [pc, #256]	; (800144c <main+0x268>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	3b01      	subs	r3, #1
 8001350:	4a38      	ldr	r2, [pc, #224]	; (8001434 <main+0x250>)
 8001352:	7811      	ldrb	r1, [r2, #0]
 8001354:	4a3a      	ldr	r2, [pc, #232]	; (8001440 <main+0x25c>)
 8001356:	54d1      	strb	r1, [r2, r3]
			  row_key_num++;
 8001358:	4b3c      	ldr	r3, [pc, #240]	; (800144c <main+0x268>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4b3a      	ldr	r3, [pc, #232]	; (800144c <main+0x268>)
 8001362:	701a      	strb	r2, [r3, #0]
			  key = KEYPAD_NOT_PRESSED;
 8001364:	4b33      	ldr	r3, [pc, #204]	; (8001434 <main+0x250>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]

			  if(row_key_num > SIZE_ROW_NUM)
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <main+0x268>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d91c      	bls.n	80013ac <main+0x1c8>
			  {
				  enter_num_pass.signal_enter_num = NOT_DONE;
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <main+0x254>)
 8001374:	2201      	movs	r2, #1
 8001376:	705a      	strb	r2, [r3, #1]

				  state_button = BUTTON;
 8001378:	4b32      	ldr	r3, [pc, #200]	; (8001444 <main+0x260>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
				  /*Neu Mang hinh nhap du 5 so*/
				  /*reset mang hinh*/
				  CLCD_I2C_Clear(&LCD1);
 800137e:	463b      	mov	r3, r7
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8c9 	bl	8000518 <CLCD_I2C_Clear>

				  state_star_pass = STAR;
 8001386:	4b30      	ldr	r3, [pc, #192]	; (8001448 <main+0x264>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
				  row_key_num = 1;
 800138c:	4b2f      	ldr	r3, [pc, #188]	; (800144c <main+0x268>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
				  for(uint8_t i = 0; i <= sizeof(password); i++)
 8001392:	2300      	movs	r3, #0
 8001394:	73bb      	strb	r3, [r7, #14]
 8001396:	e006      	b.n	80013a6 <main+0x1c2>
				  {
					  password[i] = 0;
 8001398:	7bbb      	ldrb	r3, [r7, #14]
 800139a:	4a29      	ldr	r2, [pc, #164]	; (8001440 <main+0x25c>)
 800139c:	2100      	movs	r1, #0
 800139e:	54d1      	strb	r1, [r2, r3]
				  for(uint8_t i = 0; i <= sizeof(password); i++)
 80013a0:	7bbb      	ldrb	r3, [r7, #14]
 80013a2:	3301      	adds	r3, #1
 80013a4:	73bb      	strb	r3, [r7, #14]
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	2b05      	cmp	r3, #5
 80013aa:	d9f5      	bls.n	8001398 <main+0x1b4>
				  }
			  }
		  }
	  }

	  if((enter_num_pass.signal_enter_pass == PROCESSING) || (enter_num_pass.signal_enter_num == PROCESSING))
 80013ac:	4b22      	ldr	r3, [pc, #136]	; (8001438 <main+0x254>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <main+0x1dc>
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <main+0x254>)
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d121      	bne.n	8001404 <main+0x220>
	  {
		  state_star_pass = NONE_STAR;
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <main+0x264>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
		  if(enter_num_pass.signal_enter_pass == PROCESSING)
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <main+0x254>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <main+0x1f8>
		  {
			  CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80013d0:	463b      	mov	r3, r7
 80013d2:	2201      	movs	r2, #1
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7fe ff8c 	bl	80002f4 <CLCD_I2C_SetCursor>
		  }
		  if(enter_num_pass.signal_enter_num == PROCESSING)
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <main+0x254>)
 80013de:	785b      	ldrb	r3, [r3, #1]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d105      	bne.n	80013f2 <main+0x20e>
		  {
			  CLCD_I2C_SetCursor(&LCD1, 6, 3);
 80013e6:	463b      	mov	r3, r7
 80013e8:	2203      	movs	r2, #3
 80013ea:	2106      	movs	r1, #6
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7fe ff81 	bl	80002f4 <CLCD_I2C_SetCursor>
		  }
		  CLCD_I2C_WriteChar(&LCD1, '>');
 80013f2:	463b      	mov	r3, r7
 80013f4:	213e      	movs	r1, #62	; 0x3e
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe ffd6 	bl	80003a8 <CLCD_I2C_WriteChar>
		  state_button = KEYPAD;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <main+0x260>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e002      	b.n	800140a <main+0x226>
	  }
	  else
	  {
		  state_button = BUTTON;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <main+0x260>)
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
	  }


	  lcd_system_handler(&LCD1);
 800140a:	463b      	mov	r3, r7
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fc8b 	bl	8000d28 <lcd_system_handler>
	  if(flag_keypad == 1)
 8001412:	e731      	b.n	8001278 <main+0x94>
 8001414:	40010c00 	.word	0x40010c00
 8001418:	40010800 	.word	0x40010800
 800141c:	20000110 	.word	0x20000110
 8001420:	200000f8 	.word	0x200000f8
 8001424:	20000050 	.word	0x20000050
 8001428:	0800335c 	.word	0x0800335c
 800142c:	20000131 	.word	0x20000131
 8001430:	40011000 	.word	0x40011000
 8001434:	20000128 	.word	0x20000128
 8001438:	20000004 	.word	0x20000004
 800143c:	20000008 	.word	0x20000008
 8001440:	2000012c 	.word	0x2000012c
 8001444:	20000006 	.word	0x20000006
 8001448:	2000004c 	.word	0x2000004c
 800144c:	20000007 	.word	0x20000007

08001450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b090      	sub	sp, #64	; 0x40
 8001454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001456:	f107 0318 	add.w	r3, r7, #24
 800145a:	2228      	movs	r2, #40	; 0x28
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f001 fe76 	bl	8003150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001476:	2301      	movs	r3, #1
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800147a:	2310      	movs	r3, #16
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800147e:	2300      	movs	r3, #0
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001482:	f107 0318 	add.w	r3, r7, #24
 8001486:	4618      	mov	r0, r3
 8001488:	f001 fa42 	bl	8002910 <HAL_RCC_OscConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001492:	f000 f909 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001496:	230f      	movs	r3, #15
 8001498:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 fcb0 	bl	8002e14 <HAL_RCC_ClockConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014ba:	f000 f8f5 	bl	80016a8 <Error_Handler>
  }
}
 80014be:	bf00      	nop
 80014c0:	3740      	adds	r7, #64	; 0x40
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_I2C1_Init+0x50>)
 80014ce:	4a13      	ldr	r2, [pc, #76]	; (800151c <MX_I2C1_Init+0x54>)
 80014d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_I2C1_Init+0x50>)
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_I2C1_Init+0x58>)
 80014d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_I2C1_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_I2C1_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_I2C1_Init+0x50>)
 80014e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <MX_I2C1_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_I2C1_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_I2C1_Init+0x50>)
 8001506:	f000 fd67 	bl	8001fd8 <HAL_I2C_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001510:	f000 f8ca 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000050 	.word	0x20000050
 800151c:	40005400 	.word	0x40005400
 8001520:	000186a0 	.word	0x000186a0

08001524 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_I2C2_Init+0x50>)
 800152a:	4a13      	ldr	r2, [pc, #76]	; (8001578 <MX_I2C2_Init+0x54>)
 800152c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_I2C2_Init+0x50>)
 8001530:	4a12      	ldr	r2, [pc, #72]	; (800157c <MX_I2C2_Init+0x58>)
 8001532:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_I2C2_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_I2C2_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_I2C2_Init+0x50>)
 8001542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001546:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <MX_I2C2_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_I2C2_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <MX_I2C2_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_I2C2_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_I2C2_Init+0x50>)
 8001562:	f000 fd39 	bl	8001fd8 <HAL_I2C_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800156c:	f000 f89c 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200000a4 	.word	0x200000a4
 8001578:	40005800 	.word	0x40005800
 800157c:	000186a0 	.word	0x000186a0

08001580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <MX_GPIO_Init+0x114>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a3e      	ldr	r2, [pc, #248]	; (8001694 <MX_GPIO_Init+0x114>)
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <MX_GPIO_Init+0x114>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b39      	ldr	r3, [pc, #228]	; (8001694 <MX_GPIO_Init+0x114>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a38      	ldr	r2, [pc, #224]	; (8001694 <MX_GPIO_Init+0x114>)
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b36      	ldr	r3, [pc, #216]	; (8001694 <MX_GPIO_Init+0x114>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c4:	4b33      	ldr	r3, [pc, #204]	; (8001694 <MX_GPIO_Init+0x114>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a32      	ldr	r2, [pc, #200]	; (8001694 <MX_GPIO_Init+0x114>)
 80015ca:	f043 0308 	orr.w	r3, r3, #8
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b30      	ldr	r3, [pc, #192]	; (8001694 <MX_GPIO_Init+0x114>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e2:	482d      	ldr	r0, [pc, #180]	; (8001698 <MX_GPIO_Init+0x118>)
 80015e4:	f000 fcaf 	bl	8001f46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R7_Pin|R6_Pin|R5_Pin|R4_Pin
 80015e8:	2200      	movs	r2, #0
 80015ea:	f640 71fe 	movw	r1, #4094	; 0xffe
 80015ee:	482b      	ldr	r0, [pc, #172]	; (800169c <MX_GPIO_Init+0x11c>)
 80015f0:	f000 fca9 	bl	8001f46 <HAL_GPIO_WritePin>
                          |R3_Pin|R2_Pin|R1_Pin|C4_OUT_Pin
                          |C3_OUT_Pin|C2_OUT_Pin|C1_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2302      	movs	r3, #2
 8001604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	4619      	mov	r1, r3
 800160c:	4822      	ldr	r0, [pc, #136]	; (8001698 <MX_GPIO_Init+0x118>)
 800160e:	f000 faff 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin R6_Pin R5_Pin R4_Pin
                           R3_Pin R2_Pin R1_Pin C4_OUT_Pin
                           C3_OUT_Pin C2_OUT_Pin C1_OUT_Pin */
  GPIO_InitStruct.Pin = R7_Pin|R6_Pin|R5_Pin|R4_Pin
 8001612:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001616:	613b      	str	r3, [r7, #16]
                          |R3_Pin|R2_Pin|R1_Pin|C4_OUT_Pin
                          |C3_OUT_Pin|C2_OUT_Pin|C1_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2302      	movs	r3, #2
 8001622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	4619      	mov	r1, r3
 800162a:	481c      	ldr	r0, [pc, #112]	; (800169c <MX_GPIO_Init+0x11c>)
 800162c:	f000 faf0 	bl	8001c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_IN_Pin R3_IN_Pin R2_IN_Pin R1_IN_Pin
                           UP_EXTI_3_Pin DOWN_EXTI_4_Pin ENTER_EXTI_5_Pin */
  GPIO_InitStruct.Pin = R4_IN_Pin|R3_IN_Pin|R2_IN_Pin|R1_IN_Pin
 8001630:	f24f 0338 	movw	r3, #61496	; 0xf038
 8001634:	613b      	str	r3, [r7, #16]
                          |UP_EXTI_3_Pin|DOWN_EXTI_4_Pin|ENTER_EXTI_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_GPIO_Init+0x120>)
 8001638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163a:	2301      	movs	r3, #1
 800163c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	4817      	ldr	r0, [pc, #92]	; (80016a4 <MX_GPIO_Init+0x124>)
 8001646:	f000 fae3 	bl	8001c10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2105      	movs	r1, #5
 800164e:	2009      	movs	r0, #9
 8001650:	f000 faa7 	bl	8001ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001654:	2009      	movs	r0, #9
 8001656:	f000 fac0 	bl	8001bda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2105      	movs	r1, #5
 800165e:	200a      	movs	r0, #10
 8001660:	f000 fa9f 	bl	8001ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001664:	200a      	movs	r0, #10
 8001666:	f000 fab8 	bl	8001bda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2105      	movs	r1, #5
 800166e:	2017      	movs	r0, #23
 8001670:	f000 fa97 	bl	8001ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001674:	2017      	movs	r0, #23
 8001676:	f000 fab0 	bl	8001bda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2105      	movs	r1, #5
 800167e:	2028      	movs	r0, #40	; 0x28
 8001680:	f000 fa8f 	bl	8001ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001684:	2028      	movs	r0, #40	; 0x28
 8001686:	f000 faa8 	bl	8001bda <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800168a:	bf00      	nop
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	40011000 	.word	0x40011000
 800169c:	40010800 	.word	0x40010800
 80016a0:	10210000 	.word	0x10210000
 80016a4:	40010c00 	.word	0x40010c00

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <Error_Handler+0x8>
	...

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_MspInit+0x5c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a14      	ldr	r2, [pc, #80]	; (8001710 <HAL_MspInit+0x5c>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6193      	str	r3, [r2, #24]
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_MspInit+0x5c>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_MspInit+0x5c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_MspInit+0x5c>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_MspInit+0x5c>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_MspInit+0x60>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <HAL_MspInit+0x60>)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40021000 	.word	0x40021000
 8001714:	40010000 	.word	0x40010000

08001718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0318 	add.w	r3, r7, #24
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a2b      	ldr	r2, [pc, #172]	; (80017e0 <HAL_I2C_MspInit+0xc8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d124      	bne.n	8001782 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001738:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <HAL_I2C_MspInit+0xcc>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a29      	ldr	r2, [pc, #164]	; (80017e4 <HAL_I2C_MspInit+0xcc>)
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <HAL_I2C_MspInit+0xcc>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001750:	23c0      	movs	r3, #192	; 0xc0
 8001752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001754:	2312      	movs	r3, #18
 8001756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	f107 0318 	add.w	r3, r7, #24
 8001760:	4619      	mov	r1, r3
 8001762:	4821      	ldr	r0, [pc, #132]	; (80017e8 <HAL_I2C_MspInit+0xd0>)
 8001764:	f000 fa54 	bl	8001c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <HAL_I2C_MspInit+0xcc>)
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <HAL_I2C_MspInit+0xcc>)
 800176e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001772:	61d3      	str	r3, [r2, #28]
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_I2C_MspInit+0xcc>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001780:	e029      	b.n	80017d6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a19      	ldr	r2, [pc, #100]	; (80017ec <HAL_I2C_MspInit+0xd4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d124      	bne.n	80017d6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_I2C_MspInit+0xcc>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <HAL_I2C_MspInit+0xcc>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_I2C_MspInit+0xcc>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017aa:	2312      	movs	r3, #18
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f107 0318 	add.w	r3, r7, #24
 80017b6:	4619      	mov	r1, r3
 80017b8:	480b      	ldr	r0, [pc, #44]	; (80017e8 <HAL_I2C_MspInit+0xd0>)
 80017ba:	f000 fa29 	bl	8001c10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_I2C_MspInit+0xcc>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <HAL_I2C_MspInit+0xcc>)
 80017c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c8:	61d3      	str	r3, [r2, #28]
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_I2C_MspInit+0xcc>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	; 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40005400 	.word	0x40005400
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010c00 	.word	0x40010c00
 80017ec:	40005800 	.word	0x40005800

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001836:	f000 f89d 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}

0800183e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_EXTI_3_Pin);
 8001842:	2008      	movs	r0, #8
 8001844:	f000 fbb0 	bl	8001fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_EXTI_4_Pin);
 8001850:	2010      	movs	r0, #16
 8001852:	f000 fba9 	bl	8001fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}

0800185a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENTER_EXTI_5_Pin);
 800185e:	2020      	movs	r0, #32
 8001860:	f000 fba2 	bl	8001fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R4_IN_Pin);
 800186c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001870:	f000 fb9a 	bl	8001fa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R3_IN_Pin);
 8001874:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001878:	f000 fb96 	bl	8001fa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R2_IN_Pin);
 800187c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001880:	f000 fb92 	bl	8001fa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R1_IN_Pin);
 8001884:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001888:	f000 fb8e 	bl	8001fa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800189c:	f7ff fff8 	bl	8001890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a0:	480b      	ldr	r0, [pc, #44]	; (80018d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018a2:	490c      	ldr	r1, [pc, #48]	; (80018d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018a4:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a8:	e002      	b.n	80018b0 <LoopCopyDataInit>

080018aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ae:	3304      	adds	r3, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b4:	d3f9      	bcc.n	80018aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018b8:	4c09      	ldr	r4, [pc, #36]	; (80018e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018bc:	e001      	b.n	80018c2 <LoopFillZerobss>

080018be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c0:	3204      	adds	r2, #4

080018c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c4:	d3fb      	bcc.n	80018be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018c6:	f001 fc1f 	bl	8003108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ca:	f7ff fc8b 	bl	80011e4 <main>
  bx lr
 80018ce:	4770      	bx	lr
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80018d8:	080033a8 	.word	0x080033a8
  ldr r2, =_sbss
 80018dc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80018e0:	20000140 	.word	0x20000140

080018e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC1_2_IRQHandler>
	...

080018e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_Init+0x28>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <HAL_Init+0x28>)
 80018f2:	f043 0310 	orr.w	r3, r3, #16
 80018f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f000 f947 	bl	8001b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fe:	2004      	movs	r0, #4
 8001900:	f000 f808 	bl	8001914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001904:	f7ff fed6 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40022000 	.word	0x40022000

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_InitTick+0x54>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_InitTick+0x58>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192a:	fbb3 f3f1 	udiv	r3, r3, r1
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f95f 	bl	8001bf6 <HAL_SYSTICK_Config>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00e      	b.n	8001960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d80a      	bhi.n	800195e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f000 f927 	bl	8001ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001954:	4a06      	ldr	r2, [pc, #24]	; (8001970 <HAL_InitTick+0x5c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	2000000c 	.word	0x2000000c
 800196c:	20000014 	.word	0x20000014
 8001970:	20000010 	.word	0x20000010

08001974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_IncTick+0x1c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_IncTick+0x20>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a03      	ldr	r2, [pc, #12]	; (8001994 <HAL_IncTick+0x20>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	20000014 	.word	0x20000014
 8001994:	2000013c 	.word	0x2000013c

08001998 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <HAL_GetTick+0x10>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	2000013c 	.word	0x2000013c

080019ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff fff0 	bl	8001998 <HAL_GetTick>
 80019b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d005      	beq.n	80019d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_Delay+0x44>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d2:	bf00      	nop
 80019d4:	f7ff ffe0 	bl	8001998 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f7      	bhi.n	80019d4 <HAL_Delay+0x28>
  {
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000014 	.word	0x20000014

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4906      	ldr	r1, [pc, #24]	; (8001a8c <__NVIC_EnableIRQ+0x34>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b58:	d301      	bcc.n	8001b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00f      	b.n	8001b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <SysTick_Config+0x40>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b66:	210f      	movs	r1, #15
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6c:	f7ff ff90 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <SysTick_Config+0x40>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b76:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <SysTick_Config+0x40>)
 8001b78:	2207      	movs	r2, #7
 8001b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	e000e010 	.word	0xe000e010

08001b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ff2d 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb4:	f7ff ff42 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	6978      	ldr	r0, [r7, #20]
 8001bc0:	f7ff ff90 	bl	8001ae4 <NVIC_EncodePriority>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff5f 	bl	8001a90 <__NVIC_SetPriority>
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff35 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffa2 	bl	8001b48 <SysTick_Config>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b08b      	sub	sp, #44	; 0x2c
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c22:	e169      	b.n	8001ef8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c24:	2201      	movs	r2, #1
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f040 8158 	bne.w	8001ef2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4a9a      	ldr	r2, [pc, #616]	; (8001eb0 <HAL_GPIO_Init+0x2a0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d05e      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c4c:	4a98      	ldr	r2, [pc, #608]	; (8001eb0 <HAL_GPIO_Init+0x2a0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d875      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c52:	4a98      	ldr	r2, [pc, #608]	; (8001eb4 <HAL_GPIO_Init+0x2a4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d058      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c58:	4a96      	ldr	r2, [pc, #600]	; (8001eb4 <HAL_GPIO_Init+0x2a4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d86f      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c5e:	4a96      	ldr	r2, [pc, #600]	; (8001eb8 <HAL_GPIO_Init+0x2a8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d052      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c64:	4a94      	ldr	r2, [pc, #592]	; (8001eb8 <HAL_GPIO_Init+0x2a8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d869      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c6a:	4a94      	ldr	r2, [pc, #592]	; (8001ebc <HAL_GPIO_Init+0x2ac>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d04c      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c70:	4a92      	ldr	r2, [pc, #584]	; (8001ebc <HAL_GPIO_Init+0x2ac>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d863      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c76:	4a92      	ldr	r2, [pc, #584]	; (8001ec0 <HAL_GPIO_Init+0x2b0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d046      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
 8001c7c:	4a90      	ldr	r2, [pc, #576]	; (8001ec0 <HAL_GPIO_Init+0x2b0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d85d      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	d82a      	bhi.n	8001cdc <HAL_GPIO_Init+0xcc>
 8001c86:	2b12      	cmp	r3, #18
 8001c88:	d859      	bhi.n	8001d3e <HAL_GPIO_Init+0x12e>
 8001c8a:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <HAL_GPIO_Init+0x80>)
 8001c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c90:	08001d0b 	.word	0x08001d0b
 8001c94:	08001ce5 	.word	0x08001ce5
 8001c98:	08001cf7 	.word	0x08001cf7
 8001c9c:	08001d39 	.word	0x08001d39
 8001ca0:	08001d3f 	.word	0x08001d3f
 8001ca4:	08001d3f 	.word	0x08001d3f
 8001ca8:	08001d3f 	.word	0x08001d3f
 8001cac:	08001d3f 	.word	0x08001d3f
 8001cb0:	08001d3f 	.word	0x08001d3f
 8001cb4:	08001d3f 	.word	0x08001d3f
 8001cb8:	08001d3f 	.word	0x08001d3f
 8001cbc:	08001d3f 	.word	0x08001d3f
 8001cc0:	08001d3f 	.word	0x08001d3f
 8001cc4:	08001d3f 	.word	0x08001d3f
 8001cc8:	08001d3f 	.word	0x08001d3f
 8001ccc:	08001d3f 	.word	0x08001d3f
 8001cd0:	08001d3f 	.word	0x08001d3f
 8001cd4:	08001ced 	.word	0x08001ced
 8001cd8:	08001d01 	.word	0x08001d01
 8001cdc:	4a79      	ldr	r2, [pc, #484]	; (8001ec4 <HAL_GPIO_Init+0x2b4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ce2:	e02c      	b.n	8001d3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	623b      	str	r3, [r7, #32]
          break;
 8001cea:	e029      	b.n	8001d40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e024      	b.n	8001d40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	3308      	adds	r3, #8
 8001cfc:	623b      	str	r3, [r7, #32]
          break;
 8001cfe:	e01f      	b.n	8001d40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	330c      	adds	r3, #12
 8001d06:	623b      	str	r3, [r7, #32]
          break;
 8001d08:	e01a      	b.n	8001d40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d12:	2304      	movs	r3, #4
 8001d14:	623b      	str	r3, [r7, #32]
          break;
 8001d16:	e013      	b.n	8001d40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d20:	2308      	movs	r3, #8
 8001d22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	611a      	str	r2, [r3, #16]
          break;
 8001d2a:	e009      	b.n	8001d40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	615a      	str	r2, [r3, #20]
          break;
 8001d36:	e003      	b.n	8001d40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
          break;
 8001d3c:	e000      	b.n	8001d40 <HAL_GPIO_Init+0x130>
          break;
 8001d3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2bff      	cmp	r3, #255	; 0xff
 8001d44:	d801      	bhi.n	8001d4a <HAL_GPIO_Init+0x13a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	e001      	b.n	8001d4e <HAL_GPIO_Init+0x13e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	2bff      	cmp	r3, #255	; 0xff
 8001d54:	d802      	bhi.n	8001d5c <HAL_GPIO_Init+0x14c>
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	e002      	b.n	8001d62 <HAL_GPIO_Init+0x152>
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	3b08      	subs	r3, #8
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	210f      	movs	r1, #15
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	401a      	ands	r2, r3
 8001d74:	6a39      	ldr	r1, [r7, #32]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80b1 	beq.w	8001ef2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d90:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <HAL_GPIO_Init+0x2b8>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a4c      	ldr	r2, [pc, #304]	; (8001ec8 <HAL_GPIO_Init+0x2b8>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b4a      	ldr	r3, [pc, #296]	; (8001ec8 <HAL_GPIO_Init+0x2b8>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001da8:	4a48      	ldr	r2, [pc, #288]	; (8001ecc <HAL_GPIO_Init+0x2bc>)
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	3302      	adds	r3, #2
 8001db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a40      	ldr	r2, [pc, #256]	; (8001ed0 <HAL_GPIO_Init+0x2c0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d013      	beq.n	8001dfc <HAL_GPIO_Init+0x1ec>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a3f      	ldr	r2, [pc, #252]	; (8001ed4 <HAL_GPIO_Init+0x2c4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00d      	beq.n	8001df8 <HAL_GPIO_Init+0x1e8>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a3e      	ldr	r2, [pc, #248]	; (8001ed8 <HAL_GPIO_Init+0x2c8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d007      	beq.n	8001df4 <HAL_GPIO_Init+0x1e4>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a3d      	ldr	r2, [pc, #244]	; (8001edc <HAL_GPIO_Init+0x2cc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d101      	bne.n	8001df0 <HAL_GPIO_Init+0x1e0>
 8001dec:	2303      	movs	r3, #3
 8001dee:	e006      	b.n	8001dfe <HAL_GPIO_Init+0x1ee>
 8001df0:	2304      	movs	r3, #4
 8001df2:	e004      	b.n	8001dfe <HAL_GPIO_Init+0x1ee>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e002      	b.n	8001dfe <HAL_GPIO_Init+0x1ee>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <HAL_GPIO_Init+0x1ee>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e00:	f002 0203 	and.w	r2, r2, #3
 8001e04:	0092      	lsls	r2, r2, #2
 8001e06:	4093      	lsls	r3, r2
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e0e:	492f      	ldr	r1, [pc, #188]	; (8001ecc <HAL_GPIO_Init+0x2bc>)
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e28:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	492c      	ldr	r1, [pc, #176]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	4928      	ldr	r1, [pc, #160]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	4922      	ldr	r1, [pc, #136]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60cb      	str	r3, [r1, #12]
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	491e      	ldr	r1, [pc, #120]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d006      	beq.n	8001e86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	4918      	ldr	r1, [pc, #96]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e86:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4914      	ldr	r1, [pc, #80]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d021      	beq.n	8001ee4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	490e      	ldr	r1, [pc, #56]	; (8001ee0 <HAL_GPIO_Init+0x2d0>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]
 8001eac:	e021      	b.n	8001ef2 <HAL_GPIO_Init+0x2e2>
 8001eae:	bf00      	nop
 8001eb0:	10320000 	.word	0x10320000
 8001eb4:	10310000 	.word	0x10310000
 8001eb8:	10220000 	.word	0x10220000
 8001ebc:	10210000 	.word	0x10210000
 8001ec0:	10120000 	.word	0x10120000
 8001ec4:	10110000 	.word	0x10110000
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40010000 	.word	0x40010000
 8001ed0:	40010800 	.word	0x40010800
 8001ed4:	40010c00 	.word	0x40010c00
 8001ed8:	40011000 	.word	0x40011000
 8001edc:	40011400 	.word	0x40011400
 8001ee0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_GPIO_Init+0x304>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	4909      	ldr	r1, [pc, #36]	; (8001f14 <HAL_GPIO_Init+0x304>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	fa22 f303 	lsr.w	r3, r2, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f47f ae8e 	bne.w	8001c24 <HAL_GPIO_Init+0x14>
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	372c      	adds	r7, #44	; 0x2c
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	40010400 	.word	0x40010400

08001f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	887b      	ldrh	r3, [r7, #2]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	e001      	b.n	8001f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	807b      	strh	r3, [r7, #2]
 8001f52:	4613      	mov	r3, r2
 8001f54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f56:	787b      	ldrb	r3, [r7, #1]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5c:	887a      	ldrh	r2, [r7, #2]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f62:	e003      	b.n	8001f6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f64:	887b      	ldrh	r3, [r7, #2]
 8001f66:	041a      	lsls	r2, r3, #16
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	611a      	str	r2, [r3, #16]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f88:	887a      	ldrh	r2, [r7, #2]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	041a      	lsls	r2, r3, #16
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	887b      	ldrh	r3, [r7, #2]
 8001f96:	400b      	ands	r3, r1
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	611a      	str	r2, [r3, #16]
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fbe:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff f826 	bl	8001018 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40010400 	.word	0x40010400

08001fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e12b      	b.n	8002242 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fb8a 	bl	8001718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	; 0x24
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800202a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800203a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800203c:	f001 f832 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8002040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4a81      	ldr	r2, [pc, #516]	; (800224c <HAL_I2C_Init+0x274>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d807      	bhi.n	800205c <HAL_I2C_Init+0x84>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a80      	ldr	r2, [pc, #512]	; (8002250 <HAL_I2C_Init+0x278>)
 8002050:	4293      	cmp	r3, r2
 8002052:	bf94      	ite	ls
 8002054:	2301      	movls	r3, #1
 8002056:	2300      	movhi	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	e006      	b.n	800206a <HAL_I2C_Init+0x92>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a7d      	ldr	r2, [pc, #500]	; (8002254 <HAL_I2C_Init+0x27c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	bf94      	ite	ls
 8002064:	2301      	movls	r3, #1
 8002066:	2300      	movhi	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0e7      	b.n	8002242 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4a78      	ldr	r2, [pc, #480]	; (8002258 <HAL_I2C_Init+0x280>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	0c9b      	lsrs	r3, r3, #18
 800207c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a6a      	ldr	r2, [pc, #424]	; (800224c <HAL_I2C_Init+0x274>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d802      	bhi.n	80020ac <HAL_I2C_Init+0xd4>
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3301      	adds	r3, #1
 80020aa:	e009      	b.n	80020c0 <HAL_I2C_Init+0xe8>
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	4a69      	ldr	r2, [pc, #420]	; (800225c <HAL_I2C_Init+0x284>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	099b      	lsrs	r3, r3, #6
 80020be:	3301      	adds	r3, #1
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	495c      	ldr	r1, [pc, #368]	; (800224c <HAL_I2C_Init+0x274>)
 80020dc:	428b      	cmp	r3, r1
 80020de:	d819      	bhi.n	8002114 <HAL_I2C_Init+0x13c>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1e59      	subs	r1, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ee:	1c59      	adds	r1, r3, #1
 80020f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020f4:	400b      	ands	r3, r1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_I2C_Init+0x138>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1e59      	subs	r1, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fbb1 f3f3 	udiv	r3, r1, r3
 8002108:	3301      	adds	r3, #1
 800210a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210e:	e051      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 8002110:	2304      	movs	r3, #4
 8002112:	e04f      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d111      	bne.n	8002140 <HAL_I2C_Init+0x168>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1e58      	subs	r0, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	440b      	add	r3, r1
 800212a:	fbb0 f3f3 	udiv	r3, r0, r3
 800212e:	3301      	adds	r3, #1
 8002130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf0c      	ite	eq
 8002138:	2301      	moveq	r3, #1
 800213a:	2300      	movne	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	e012      	b.n	8002166 <HAL_I2C_Init+0x18e>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1e58      	subs	r0, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	0099      	lsls	r1, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	fbb0 f3f3 	udiv	r3, r0, r3
 8002156:	3301      	adds	r3, #1
 8002158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_I2C_Init+0x196>
 800216a:	2301      	movs	r3, #1
 800216c:	e022      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10e      	bne.n	8002194 <HAL_I2C_Init+0x1bc>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1e58      	subs	r0, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6859      	ldr	r1, [r3, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	440b      	add	r3, r1
 8002184:	fbb0 f3f3 	udiv	r3, r0, r3
 8002188:	3301      	adds	r3, #1
 800218a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002192:	e00f      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1e58      	subs	r0, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6859      	ldr	r1, [r3, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	0099      	lsls	r1, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021aa:	3301      	adds	r3, #1
 80021ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	6809      	ldr	r1, [r1, #0]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6911      	ldr	r1, [r2, #16]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68d2      	ldr	r2, [r2, #12]
 80021ee:	4311      	orrs	r1, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	430b      	orrs	r3, r1
 80021f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	000186a0 	.word	0x000186a0
 8002250:	001e847f 	.word	0x001e847f
 8002254:	003d08ff 	.word	0x003d08ff
 8002258:	431bde83 	.word	0x431bde83
 800225c:	10624dd3 	.word	0x10624dd3

08002260 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af02      	add	r7, sp, #8
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	461a      	mov	r2, r3
 800226c:	460b      	mov	r3, r1
 800226e:	817b      	strh	r3, [r7, #10]
 8002270:	4613      	mov	r3, r2
 8002272:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff fb90 	bl	8001998 <HAL_GetTick>
 8002278:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b20      	cmp	r3, #32
 8002284:	f040 80e0 	bne.w	8002448 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2319      	movs	r3, #25
 800228e:	2201      	movs	r2, #1
 8002290:	4970      	ldr	r1, [pc, #448]	; (8002454 <HAL_I2C_Master_Transmit+0x1f4>)
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f964 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800229e:	2302      	movs	r3, #2
 80022a0:	e0d3      	b.n	800244a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_I2C_Master_Transmit+0x50>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e0cc      	b.n	800244a <HAL_I2C_Master_Transmit+0x1ea>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d007      	beq.n	80022d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2221      	movs	r2, #33	; 0x21
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2210      	movs	r2, #16
 80022f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	893a      	ldrh	r2, [r7, #8]
 8002306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a50      	ldr	r2, [pc, #320]	; (8002458 <HAL_I2C_Master_Transmit+0x1f8>)
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	6a3a      	ldr	r2, [r7, #32]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f89c 	bl	800245c <I2C_MasterRequestWrite>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e08d      	b.n	800244a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002344:	e066      	b.n	8002414 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	6a39      	ldr	r1, [r7, #32]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fa22 	bl	8002794 <I2C_WaitOnTXEFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00d      	beq.n	8002372 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	2b04      	cmp	r3, #4
 800235c:	d107      	bne.n	800236e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e06b      	b.n	800244a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d11b      	bne.n	80023e8 <HAL_I2C_Master_Transmit+0x188>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d017      	beq.n	80023e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	6a39      	ldr	r1, [r7, #32]
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fa19 	bl	8002824 <I2C_WaitOnBTFFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00d      	beq.n	8002414 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d107      	bne.n	8002410 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e01a      	b.n	800244a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002418:	2b00      	cmp	r3, #0
 800241a:	d194      	bne.n	8002346 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	00100002 	.word	0x00100002
 8002458:	ffff0000 	.word	0xffff0000

0800245c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	460b      	mov	r3, r1
 800246a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b08      	cmp	r3, #8
 8002476:	d006      	beq.n	8002486 <I2C_MasterRequestWrite+0x2a>
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d003      	beq.n	8002486 <I2C_MasterRequestWrite+0x2a>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002484:	d108      	bne.n	8002498 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e00b      	b.n	80024b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	2b12      	cmp	r3, #18
 800249e:	d107      	bne.n	80024b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f84f 	bl	8002560 <I2C_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00d      	beq.n	80024e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d6:	d103      	bne.n	80024e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e035      	b.n	8002550 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ec:	d108      	bne.n	8002500 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024fc:	611a      	str	r2, [r3, #16]
 80024fe:	e01b      	b.n	8002538 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002500:	897b      	ldrh	r3, [r7, #10]
 8002502:	11db      	asrs	r3, r3, #7
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 0306 	and.w	r3, r3, #6
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f063 030f 	orn	r3, r3, #15
 8002510:	b2da      	uxtb	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	490e      	ldr	r1, [pc, #56]	; (8002558 <I2C_MasterRequestWrite+0xfc>)
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 f898 	bl	8002654 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e010      	b.n	8002550 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800252e:	897b      	ldrh	r3, [r7, #10]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4907      	ldr	r1, [pc, #28]	; (800255c <I2C_MasterRequestWrite+0x100>)
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f888 	bl	8002654 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	00010008 	.word	0x00010008
 800255c:	00010002 	.word	0x00010002

08002560 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002570:	e048      	b.n	8002604 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d044      	beq.n	8002604 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257a:	f7ff fa0d 	bl	8001998 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d302      	bcc.n	8002590 <I2C_WaitOnFlagUntilTimeout+0x30>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d139      	bne.n	8002604 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	0c1b      	lsrs	r3, r3, #16
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d10d      	bne.n	80025b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	43da      	mvns	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	4013      	ands	r3, r2
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	e00c      	b.n	80025d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	43da      	mvns	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	4013      	ands	r3, r2
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf0c      	ite	eq
 80025c8:	2301      	moveq	r3, #1
 80025ca:	2300      	movne	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d116      	bne.n	8002604 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f043 0220 	orr.w	r2, r3, #32
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e023      	b.n	800264c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	0c1b      	lsrs	r3, r3, #16
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d10d      	bne.n	800262a <I2C_WaitOnFlagUntilTimeout+0xca>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	43da      	mvns	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4013      	ands	r3, r2
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	e00c      	b.n	8002644 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	43da      	mvns	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4013      	ands	r3, r2
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	429a      	cmp	r2, r3
 8002648:	d093      	beq.n	8002572 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002662:	e071      	b.n	8002748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002672:	d123      	bne.n	80026bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800268c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f043 0204 	orr.w	r2, r3, #4
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e067      	b.n	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d041      	beq.n	8002748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c4:	f7ff f968 	bl	8001998 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d302      	bcc.n	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d136      	bne.n	8002748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d10c      	bne.n	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	43da      	mvns	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4013      	ands	r3, r2
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf14      	ite	ne
 80026f6:	2301      	movne	r3, #1
 80026f8:	2300      	moveq	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	e00b      	b.n	8002716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	43da      	mvns	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4013      	ands	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d016      	beq.n	8002748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f043 0220 	orr.w	r2, r3, #32
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e021      	b.n	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	0c1b      	lsrs	r3, r3, #16
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d10c      	bne.n	800276c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	43da      	mvns	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4013      	ands	r3, r2
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2300      	moveq	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	e00b      	b.n	8002784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4013      	ands	r3, r2
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	f47f af6d 	bne.w	8002664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027a0:	e034      	b.n	800280c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f886 	bl	80028b4 <I2C_IsAcknowledgeFailed>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e034      	b.n	800281c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d028      	beq.n	800280c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ba:	f7ff f8ed 	bl	8001998 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d302      	bcc.n	80027d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d11d      	bne.n	800280c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	2b80      	cmp	r3, #128	; 0x80
 80027dc:	d016      	beq.n	800280c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f043 0220 	orr.w	r2, r3, #32
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e007      	b.n	800281c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002816:	2b80      	cmp	r3, #128	; 0x80
 8002818:	d1c3      	bne.n	80027a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002830:	e034      	b.n	800289c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f83e 	bl	80028b4 <I2C_IsAcknowledgeFailed>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e034      	b.n	80028ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d028      	beq.n	800289c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284a:	f7ff f8a5 	bl	8001998 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	429a      	cmp	r2, r3
 8002858:	d302      	bcc.n	8002860 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d11d      	bne.n	800289c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b04      	cmp	r3, #4
 800286c:	d016      	beq.n	800289c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f043 0220 	orr.w	r2, r3, #32
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e007      	b.n	80028ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d1c3      	bne.n	8002832 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ca:	d11b      	bne.n	8002904 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f043 0204 	orr.w	r2, r3, #4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e272      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8087 	beq.w	8002a3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002930:	4b92      	ldr	r3, [pc, #584]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b04      	cmp	r3, #4
 800293a:	d00c      	beq.n	8002956 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800293c:	4b8f      	ldr	r3, [pc, #572]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b08      	cmp	r3, #8
 8002946:	d112      	bne.n	800296e <HAL_RCC_OscConfig+0x5e>
 8002948:	4b8c      	ldr	r3, [pc, #560]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002954:	d10b      	bne.n	800296e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002956:	4b89      	ldr	r3, [pc, #548]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d06c      	beq.n	8002a3c <HAL_RCC_OscConfig+0x12c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d168      	bne.n	8002a3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e24c      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002976:	d106      	bne.n	8002986 <HAL_RCC_OscConfig+0x76>
 8002978:	4b80      	ldr	r3, [pc, #512]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a7f      	ldr	r2, [pc, #508]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800297e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	e02e      	b.n	80029e4 <HAL_RCC_OscConfig+0xd4>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x98>
 800298e:	4b7b      	ldr	r3, [pc, #492]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a7a      	ldr	r2, [pc, #488]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b78      	ldr	r3, [pc, #480]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a77      	ldr	r2, [pc, #476]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e01d      	b.n	80029e4 <HAL_RCC_OscConfig+0xd4>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0xbc>
 80029b2:	4b72      	ldr	r3, [pc, #456]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a71      	ldr	r2, [pc, #452]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b6f      	ldr	r3, [pc, #444]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6e      	ldr	r2, [pc, #440]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0xd4>
 80029cc:	4b6b      	ldr	r3, [pc, #428]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a6a      	ldr	r2, [pc, #424]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b68      	ldr	r3, [pc, #416]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a67      	ldr	r2, [pc, #412]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe ffd4 	bl	8001998 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe ffd0 	bl	8001998 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e200      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	4b5d      	ldr	r3, [pc, #372]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe4>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe ffc0 	bl	8001998 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe ffbc 	bl	8001998 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e1ec      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x10c>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d063      	beq.n	8002b12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a4a:	4b4c      	ldr	r3, [pc, #304]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a56:	4b49      	ldr	r3, [pc, #292]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d11c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x18c>
 8002a62:	4b46      	ldr	r3, [pc, #280]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_RCC_OscConfig+0x176>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1c0      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b3d      	ldr	r3, [pc, #244]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4939      	ldr	r1, [pc, #228]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	e03a      	b.n	8002b12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa4:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe ff75 	bl	8001998 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab2:	f7fe ff71 	bl	8001998 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e1a1      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4927      	ldr	r1, [pc, #156]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
 8002ae4:	e015      	b.n	8002b12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae6:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe ff54 	bl	8001998 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af4:	f7fe ff50 	bl	8001998 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e180      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d03a      	beq.n	8002b94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d019      	beq.n	8002b5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <HAL_RCC_OscConfig+0x274>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2c:	f7fe ff34 	bl	8001998 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b34:	f7fe ff30 	bl	8001998 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e160      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b52:	2001      	movs	r0, #1
 8002b54:	f000 faba 	bl	80030cc <RCC_Delay>
 8002b58:	e01c      	b.n	8002b94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b60:	f7fe ff1a 	bl	8001998 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b66:	e00f      	b.n	8002b88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b68:	f7fe ff16 	bl	8001998 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d908      	bls.n	8002b88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e146      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	42420000 	.word	0x42420000
 8002b84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b88:	4b92      	ldr	r3, [pc, #584]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e9      	bne.n	8002b68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a6 	beq.w	8002cee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba6:	4b8b      	ldr	r3, [pc, #556]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb2:	4b88      	ldr	r3, [pc, #544]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	4a87      	ldr	r2, [pc, #540]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	61d3      	str	r3, [r2, #28]
 8002bbe:	4b85      	ldr	r3, [pc, #532]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bce:	4b82      	ldr	r3, [pc, #520]	; (8002dd8 <HAL_RCC_OscConfig+0x4c8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d118      	bne.n	8002c0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bda:	4b7f      	ldr	r3, [pc, #508]	; (8002dd8 <HAL_RCC_OscConfig+0x4c8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a7e      	ldr	r2, [pc, #504]	; (8002dd8 <HAL_RCC_OscConfig+0x4c8>)
 8002be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be6:	f7fe fed7 	bl	8001998 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bee:	f7fe fed3 	bl	8001998 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b64      	cmp	r3, #100	; 0x64
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e103      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	4b75      	ldr	r3, [pc, #468]	; (8002dd8 <HAL_RCC_OscConfig+0x4c8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x312>
 8002c14:	4b6f      	ldr	r3, [pc, #444]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	4a6e      	ldr	r2, [pc, #440]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6213      	str	r3, [r2, #32]
 8002c20:	e02d      	b.n	8002c7e <HAL_RCC_OscConfig+0x36e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x334>
 8002c2a:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4a69      	ldr	r2, [pc, #420]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	6213      	str	r3, [r2, #32]
 8002c36:	4b67      	ldr	r3, [pc, #412]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4a66      	ldr	r2, [pc, #408]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f023 0304 	bic.w	r3, r3, #4
 8002c40:	6213      	str	r3, [r2, #32]
 8002c42:	e01c      	b.n	8002c7e <HAL_RCC_OscConfig+0x36e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d10c      	bne.n	8002c66 <HAL_RCC_OscConfig+0x356>
 8002c4c:	4b61      	ldr	r3, [pc, #388]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4a60      	ldr	r2, [pc, #384]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	f043 0304 	orr.w	r3, r3, #4
 8002c56:	6213      	str	r3, [r2, #32]
 8002c58:	4b5e      	ldr	r3, [pc, #376]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	4a5d      	ldr	r2, [pc, #372]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6213      	str	r3, [r2, #32]
 8002c64:	e00b      	b.n	8002c7e <HAL_RCC_OscConfig+0x36e>
 8002c66:	4b5b      	ldr	r3, [pc, #364]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	4a5a      	ldr	r2, [pc, #360]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	6213      	str	r3, [r2, #32]
 8002c72:	4b58      	ldr	r3, [pc, #352]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	4a57      	ldr	r2, [pc, #348]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	f023 0304 	bic.w	r3, r3, #4
 8002c7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d015      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c86:	f7fe fe87 	bl	8001998 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7fe fe83 	bl	8001998 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e0b1      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca4:	4b4b      	ldr	r3, [pc, #300]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0ee      	beq.n	8002c8e <HAL_RCC_OscConfig+0x37e>
 8002cb0:	e014      	b.n	8002cdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fe71 	bl	8001998 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fe fe6d 	bl	8001998 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e09b      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd0:	4b40      	ldr	r3, [pc, #256]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ee      	bne.n	8002cba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d105      	bne.n	8002cee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce2:	4b3c      	ldr	r3, [pc, #240]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4a3b      	ldr	r2, [pc, #236]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8087 	beq.w	8002e06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf8:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d061      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d146      	bne.n	8002d9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0c:	4b33      	ldr	r3, [pc, #204]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7fe fe41 	bl	8001998 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7fe fe3d 	bl	8001998 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e06d      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2c:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f0      	bne.n	8002d1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d40:	d108      	bne.n	8002d54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d42:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	4921      	ldr	r1, [pc, #132]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d54:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a19      	ldr	r1, [r3, #32]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	430b      	orrs	r3, r1
 8002d66:	491b      	ldr	r1, [pc, #108]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d6c:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d72:	f7fe fe11 	bl	8001998 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7a:	f7fe fe0d 	bl	8001998 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e03d      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x46a>
 8002d98:	e035      	b.n	8002e06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9a:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe fdfa 	bl	8001998 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da8:	f7fe fdf6 	bl	8001998 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e026      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x498>
 8002dc6:	e01e      	b.n	8002e06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d107      	bne.n	8002de0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e019      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_OscConfig+0x500>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d106      	bne.n	8002e02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d001      	beq.n	8002e06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40021000 	.word	0x40021000

08002e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0d0      	b.n	8002fca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e28:	4b6a      	ldr	r3, [pc, #424]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d910      	bls.n	8002e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b67      	ldr	r3, [pc, #412]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 0207 	bic.w	r2, r3, #7
 8002e3e:	4965      	ldr	r1, [pc, #404]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e46:	4b63      	ldr	r3, [pc, #396]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0b8      	b.n	8002fca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d020      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e70:	4b59      	ldr	r3, [pc, #356]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4a58      	ldr	r2, [pc, #352]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e88:	4b53      	ldr	r3, [pc, #332]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4a52      	ldr	r2, [pc, #328]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e94:	4b50      	ldr	r3, [pc, #320]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	494d      	ldr	r1, [pc, #308]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d040      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d115      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e07f      	b.n	8002fca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed2:	4b41      	ldr	r3, [pc, #260]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e073      	b.n	8002fca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee2:	4b3d      	ldr	r3, [pc, #244]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e06b      	b.n	8002fca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef2:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f023 0203 	bic.w	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4936      	ldr	r1, [pc, #216]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f04:	f7fe fd48 	bl	8001998 <HAL_GetTick>
 8002f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0c:	f7fe fd44 	bl	8001998 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e053      	b.n	8002fca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 020c 	and.w	r2, r3, #12
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d1eb      	bne.n	8002f0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f34:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d210      	bcs.n	8002f64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f42:	4b24      	ldr	r3, [pc, #144]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 0207 	bic.w	r2, r3, #7
 8002f4a:	4922      	ldr	r1, [pc, #136]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e032      	b.n	8002fca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4916      	ldr	r1, [pc, #88]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f8e:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	490e      	ldr	r1, [pc, #56]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fa2:	f000 f821 	bl	8002fe8 <HAL_RCC_GetSysClockFreq>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	490a      	ldr	r1, [pc, #40]	; (8002fdc <HAL_RCC_ClockConfig+0x1c8>)
 8002fb4:	5ccb      	ldrb	r3, [r1, r3]
 8002fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fba:	4a09      	ldr	r2, [pc, #36]	; (8002fe0 <HAL_RCC_ClockConfig+0x1cc>)
 8002fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fbe:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <HAL_RCC_ClockConfig+0x1d0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fca6 	bl	8001914 <HAL_InitTick>

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40022000 	.word	0x40022000
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	08003374 	.word	0x08003374
 8002fe0:	2000000c 	.word	0x2000000c
 8002fe4:	20000010 	.word	0x20000010

08002fe8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003002:	4b1e      	ldr	r3, [pc, #120]	; (800307c <HAL_RCC_GetSysClockFreq+0x94>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b04      	cmp	r3, #4
 8003010:	d002      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x30>
 8003012:	2b08      	cmp	r3, #8
 8003014:	d003      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0x36>
 8003016:	e027      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <HAL_RCC_GetSysClockFreq+0x98>)
 800301a:	613b      	str	r3, [r7, #16]
      break;
 800301c:	e027      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	0c9b      	lsrs	r3, r3, #18
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	4a17      	ldr	r2, [pc, #92]	; (8003084 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003028:	5cd3      	ldrb	r3, [r2, r3]
 800302a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d010      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003036:	4b11      	ldr	r3, [pc, #68]	; (800307c <HAL_RCC_GetSysClockFreq+0x94>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	0c5b      	lsrs	r3, r3, #17
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	4a11      	ldr	r2, [pc, #68]	; (8003088 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a0d      	ldr	r2, [pc, #52]	; (8003080 <HAL_RCC_GetSysClockFreq+0x98>)
 800304a:	fb03 f202 	mul.w	r2, r3, r2
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	fbb2 f3f3 	udiv	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	e004      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a0c      	ldr	r2, [pc, #48]	; (800308c <HAL_RCC_GetSysClockFreq+0xa4>)
 800305c:	fb02 f303 	mul.w	r3, r2, r3
 8003060:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	613b      	str	r3, [r7, #16]
      break;
 8003066:	e002      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetSysClockFreq+0x98>)
 800306a:	613b      	str	r3, [r7, #16]
      break;
 800306c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306e:	693b      	ldr	r3, [r7, #16]
}
 8003070:	4618      	mov	r0, r3
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	007a1200 	.word	0x007a1200
 8003084:	0800338c 	.word	0x0800338c
 8003088:	0800339c 	.word	0x0800339c
 800308c:	003d0900 	.word	0x003d0900

08003090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003094:	4b02      	ldr	r3, [pc, #8]	; (80030a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003096:	681b      	ldr	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	2000000c 	.word	0x2000000c

080030a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030a8:	f7ff fff2 	bl	8003090 <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4903      	ldr	r1, [pc, #12]	; (80030c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40021000 	.word	0x40021000
 80030c8:	08003384 	.word	0x08003384

080030cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <RCC_Delay+0x34>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <RCC_Delay+0x38>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	0a5b      	lsrs	r3, r3, #9
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030e8:	bf00      	nop
  }
  while (Delay --);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1e5a      	subs	r2, r3, #1
 80030ee:	60fa      	str	r2, [r7, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f9      	bne.n	80030e8 <RCC_Delay+0x1c>
}
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	2000000c 	.word	0x2000000c
 8003104:	10624dd3 	.word	0x10624dd3

08003108 <__libc_init_array>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	2600      	movs	r6, #0
 800310c:	4d0c      	ldr	r5, [pc, #48]	; (8003140 <__libc_init_array+0x38>)
 800310e:	4c0d      	ldr	r4, [pc, #52]	; (8003144 <__libc_init_array+0x3c>)
 8003110:	1b64      	subs	r4, r4, r5
 8003112:	10a4      	asrs	r4, r4, #2
 8003114:	42a6      	cmp	r6, r4
 8003116:	d109      	bne.n	800312c <__libc_init_array+0x24>
 8003118:	f000 f822 	bl	8003160 <_init>
 800311c:	2600      	movs	r6, #0
 800311e:	4d0a      	ldr	r5, [pc, #40]	; (8003148 <__libc_init_array+0x40>)
 8003120:	4c0a      	ldr	r4, [pc, #40]	; (800314c <__libc_init_array+0x44>)
 8003122:	1b64      	subs	r4, r4, r5
 8003124:	10a4      	asrs	r4, r4, #2
 8003126:	42a6      	cmp	r6, r4
 8003128:	d105      	bne.n	8003136 <__libc_init_array+0x2e>
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003130:	4798      	blx	r3
 8003132:	3601      	adds	r6, #1
 8003134:	e7ee      	b.n	8003114 <__libc_init_array+0xc>
 8003136:	f855 3b04 	ldr.w	r3, [r5], #4
 800313a:	4798      	blx	r3
 800313c:	3601      	adds	r6, #1
 800313e:	e7f2      	b.n	8003126 <__libc_init_array+0x1e>
 8003140:	080033a0 	.word	0x080033a0
 8003144:	080033a0 	.word	0x080033a0
 8003148:	080033a0 	.word	0x080033a0
 800314c:	080033a4 	.word	0x080033a4

08003150 <memset>:
 8003150:	4603      	mov	r3, r0
 8003152:	4402      	add	r2, r0
 8003154:	4293      	cmp	r3, r2
 8003156:	d100      	bne.n	800315a <memset+0xa>
 8003158:	4770      	bx	lr
 800315a:	f803 1b01 	strb.w	r1, [r3], #1
 800315e:	e7f9      	b.n	8003154 <memset+0x4>

08003160 <_init>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	bf00      	nop
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr

0800316c <_fini>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr
