
TuThuoc_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006680  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0800678c  0800678c  0001678c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b3c  08006b3c  0002012c  2**0
                  CONTENTS
  4 .ARM          00000000  08006b3c  08006b3c  0002012c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b3c  08006b3c  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b3c  08006b3c  00016b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b40  08006b40  00016b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08006b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000012c  08006c70  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08006c70  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eca6  00000000  00000000  00020155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ca  00000000  00000000  0002edfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  000315c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  000321a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019160  00000000  00000000  00032c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011306  00000000  00000000  0004bde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000874f7  00000000  00000000  0005d0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e45e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a8c  00000000  00000000  000e4638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000012c 	.word	0x2000012c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006774 	.word	0x08006774

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000130 	.word	0x20000130
 8000148:	08006774 	.word	0x08006774

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <at24_I2C_Init>:

static uint8_t at24_lock = 0;
static I2C_HandleTypeDef hi2c_lib;

void at24_I2C_Init(I2C_HandleTypeDef i2c)
{
 800015c:	b084      	sub	sp, #16
 800015e:	b580      	push	{r7, lr}
 8000160:	af00      	add	r7, sp, #0
 8000162:	f107 0c08 	add.w	ip, r7, #8
 8000166:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c_lib = i2c;
 800016a:	4b07      	ldr	r3, [pc, #28]	; (8000188 <at24_I2C_Init+0x2c>)
 800016c:	4618      	mov	r0, r3
 800016e:	f107 0308 	add.w	r3, r7, #8
 8000172:	2254      	movs	r2, #84	; 0x54
 8000174:	4619      	mov	r1, r3
 8000176:	f005 f8a7 	bl	80052c8 <memcpy>
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000182:	b004      	add	sp, #16
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	2000014c 	.word	0x2000014c

0800018c <at24_isConnected>:
  * @brief  Checks if memory device is ready for communication.
  * @param  none
  * @retval bool status
  */
bool at24_isConnected(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
	HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
  #endif
  if (HAL_I2C_IsDeviceReady(&hi2c_lib, _EEPROM_ADDRESS, 2, 100) == HAL_OK)
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	2202      	movs	r2, #2
 8000194:	21a0      	movs	r1, #160	; 0xa0
 8000196:	4805      	ldr	r0, [pc, #20]	; (80001ac <at24_isConnected+0x20>)
 8000198:	f003 f916 	bl	80033c8 <HAL_I2C_IsDeviceReady>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d101      	bne.n	80001a6 <at24_isConnected+0x1a>
    return true;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e000      	b.n	80001a8 <at24_isConnected+0x1c>
  else
    return false;
 80001a6:	2300      	movs	r3, #0
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	2000014c 	.word	0x2000014c

080001b0 <at24_read>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
bool at24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b088      	sub	sp, #32
 80001b4:	af04      	add	r7, sp, #16
 80001b6:	60b9      	str	r1, [r7, #8]
 80001b8:	607a      	str	r2, [r7, #4]
 80001ba:	603b      	str	r3, [r7, #0]
 80001bc:	4603      	mov	r3, r0
 80001be:	81fb      	strh	r3, [r7, #14]
//	HAL_IWDG_Refresh(&hi2c_lib);
  if (at24_lock == 1)
 80001c0:	4b13      	ldr	r3, [pc, #76]	; (8000210 <at24_read+0x60>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d101      	bne.n	80001cc <at24_read+0x1c>
    return false;
 80001c8:	2300      	movs	r3, #0
 80001ca:	e01c      	b.n	8000206 <at24_read+0x56>
  at24_lock = 1;
 80001cc:	4b10      	ldr	r3, [pc, #64]	; (8000210 <at24_read+0x60>)
 80001ce:	2201      	movs	r2, #1
 80001d0:	701a      	strb	r2, [r3, #0]
  #elif (_EEPROM_SIZE_KBIT == 8)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT==16)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #else
  if (HAL_I2C_Mem_Read(&hi2c_lib, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	89f9      	ldrh	r1, [r7, #14]
 80001d8:	683a      	ldr	r2, [r7, #0]
 80001da:	9202      	str	r2, [sp, #8]
 80001dc:	9301      	str	r3, [sp, #4]
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	2310      	movs	r3, #16
 80001e4:	460a      	mov	r2, r1
 80001e6:	21a0      	movs	r1, #160	; 0xa0
 80001e8:	480a      	ldr	r0, [pc, #40]	; (8000214 <at24_read+0x64>)
 80001ea:	f002 fe85 	bl	8002ef8 <HAL_I2C_Mem_Read>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d104      	bne.n	80001fe <at24_read+0x4e>
  #endif
  {
    at24_lock = 0;
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <at24_read+0x60>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	701a      	strb	r2, [r3, #0]
    return true;
 80001fa:	2301      	movs	r3, #1
 80001fc:	e003      	b.n	8000206 <at24_read+0x56>
  }
  else
  {
    at24_lock = 0;
 80001fe:	4b04      	ldr	r3, [pc, #16]	; (8000210 <at24_read+0x60>)
 8000200:	2200      	movs	r2, #0
 8000202:	701a      	strb	r2, [r3, #0]
    return false;
 8000204:	2300      	movs	r3, #0
  }
}
 8000206:	4618      	mov	r0, r3
 8000208:	3710      	adds	r7, #16
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	20000148 	.word	0x20000148
 8000214:	2000014c 	.word	0x2000014c

08000218 <CLCD_Delay>:
//************************** Low Level Function ****************************************************************//
uint8_t currentline;
uint8_t Xcursor,Ycursor,countWriteChar,CurrentWriteChar;
CLCD_I2C_Name LCD1;
static void CLCD_Delay(uint16_t Time)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000222:	88fb      	ldrh	r3, [r7, #6]
 8000224:	4618      	mov	r0, r3
 8000226:	f002 f85d 	bl	80022e4 <HAL_Delay>
}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}

08000232 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000232:	b580      	push	{r7, lr}
 8000234:	b086      	sub	sp, #24
 8000236:	af02      	add	r7, sp, #8
 8000238:	6078      	str	r0, [r7, #4]
 800023a:	460b      	mov	r3, r1
 800023c:	70fb      	strb	r3, [r7, #3]
 800023e:	4613      	mov	r3, r2
 8000240:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000242:	78fb      	ldrb	r3, [r7, #3]
 8000244:	f023 030f 	bic.w	r3, r3, #15
 8000248:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 800024a:	78fb      	ldrb	r3, [r7, #3]
 800024c:	011b      	lsls	r3, r3, #4
 800024e:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	7adb      	ldrb	r3, [r3, #11]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d007      	beq.n	8000268 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 8000258:	7bfb      	ldrb	r3, [r7, #15]
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8000260:	7bbb      	ldrb	r3, [r7, #14]
 8000262:	f043 0308 	orr.w	r3, r3, #8
 8000266:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 8000268:	78bb      	ldrb	r3, [r7, #2]
 800026a:	2b01      	cmp	r3, #1
 800026c:	d108      	bne.n	8000280 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 800026e:	7bfb      	ldrb	r3, [r7, #15]
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8000276:	7bbb      	ldrb	r3, [r7, #14]
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	73bb      	strb	r3, [r7, #14]
 800027e:	e00a      	b.n	8000296 <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 8000280:	78bb      	ldrb	r3, [r7, #2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d107      	bne.n	8000296 <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 8000286:	7bfb      	ldrb	r3, [r7, #15]
 8000288:	f023 0301 	bic.w	r3, r3, #1
 800028c:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 800028e:	7bbb      	ldrb	r3, [r7, #14]
 8000290:	f023 0301 	bic.w	r3, r3, #1
 8000294:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8000296:	7bfb      	ldrb	r3, [r7, #15]
 8000298:	f043 0304 	orr.w	r3, r3, #4
 800029c:	b2db      	uxtb	r3, r3
 800029e:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f7ff ffb9 	bl	8000218 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
 80002a8:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80002aa:	7bbb      	ldrb	r3, [r7, #14]
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f7ff ffaf 	bl	8000218 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80002ba:	7bbb      	ldrb	r3, [r7, #14]
 80002bc:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	6818      	ldr	r0, [r3, #0]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	791b      	ldrb	r3, [r3, #4]
 80002c6:	b299      	uxth	r1, r3
 80002c8:	f107 0208 	add.w	r2, r7, #8
 80002cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	2304      	movs	r3, #4
 80002d4:	f002 fd12 	bl	8002cfc <HAL_I2C_Master_Transmit>

}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <CLCD_I2C_Init>:
//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	4611      	mov	r1, r2
 80002ec:	461a      	mov	r2, r3
 80002ee:	460b      	mov	r3, r1
 80002f0:	71fb      	strb	r3, [r7, #7]
 80002f2:	4613      	mov	r3, r2
 80002f4:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	68ba      	ldr	r2, [r7, #8]
 80002fa:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	79fa      	ldrb	r2, [r7, #7]
 8000300:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	79ba      	ldrb	r2, [r7, #6]
 8000306:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	7e3a      	ldrb	r2, [r7, #24]
 800030c:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	2228      	movs	r2, #40	; 0x28
 8000312:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	2206      	movs	r2, #6
 8000318:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	220c      	movs	r2, #12
 800031e:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	2214      	movs	r2, #20
 8000324:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	2208      	movs	r2, #8
 800032a:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 800032c:	2032      	movs	r0, #50	; 0x32
 800032e:	f7ff ff73 	bl	8000218 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000332:	2200      	movs	r2, #0
 8000334:	2133      	movs	r1, #51	; 0x33
 8000336:	68f8      	ldr	r0, [r7, #12]
 8000338:	f7ff ff7b 	bl	8000232 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800033c:	2200      	movs	r2, #0
 800033e:	2133      	movs	r1, #51	; 0x33
 8000340:	68f8      	ldr	r0, [r7, #12]
 8000342:	f7ff ff76 	bl	8000232 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000346:	2005      	movs	r0, #5
 8000348:	f7ff ff66 	bl	8000218 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 800034c:	2200      	movs	r2, #0
 800034e:	2132      	movs	r1, #50	; 0x32
 8000350:	68f8      	ldr	r0, [r7, #12]
 8000352:	f7ff ff6e 	bl	8000232 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000356:	2005      	movs	r0, #5
 8000358:	f7ff ff5e 	bl	8000218 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 800035c:	2200      	movs	r2, #0
 800035e:	2120      	movs	r1, #32
 8000360:	68f8      	ldr	r0, [r7, #12]
 8000362:	f7ff ff66 	bl	8000232 <CLCD_WriteI2C>
	CLCD_Delay(5);
 8000366:	2005      	movs	r0, #5
 8000368:	f7ff ff56 	bl	8000218 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	79db      	ldrb	r3, [r3, #7]
 8000370:	2200      	movs	r2, #0
 8000372:	4619      	mov	r1, r3
 8000374:	68f8      	ldr	r0, [r7, #12]
 8000376:	f7ff ff5c 	bl	8000232 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	7a1b      	ldrb	r3, [r3, #8]
 800037e:	2200      	movs	r2, #0
 8000380:	4619      	mov	r1, r3
 8000382:	68f8      	ldr	r0, [r7, #12]
 8000384:	f7ff ff55 	bl	8000232 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	7a5b      	ldrb	r3, [r3, #9]
 800038c:	2200      	movs	r2, #0
 800038e:	4619      	mov	r1, r3
 8000390:	68f8      	ldr	r0, [r7, #12]
 8000392:	f7ff ff4e 	bl	8000232 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	7a9b      	ldrb	r3, [r3, #10]
 800039a:	2200      	movs	r2, #0
 800039c:	4619      	mov	r1, r3
 800039e:	68f8      	ldr	r0, [r7, #12]
 80003a0:	f7ff ff47 	bl	8000232 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2101      	movs	r1, #1
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f7ff ff42 	bl	8000232 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2102      	movs	r1, #2
 80003b2:	68f8      	ldr	r0, [r7, #12]
 80003b4:	f7ff ff3d 	bl	8000232 <CLCD_WriteI2C>
}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	460b      	mov	r3, r1
 80003ca:	70fb      	strb	r3, [r7, #3]
 80003cc:	4613      	mov	r3, r2
 80003ce:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 80003d0:	2300      	movs	r3, #0
 80003d2:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	78fa      	ldrb	r2, [r7, #3]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d303      	bcc.n	80003e6 <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	795b      	ldrb	r3, [r3, #5]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	799b      	ldrb	r3, [r3, #6]
 80003ea:	78ba      	ldrb	r2, [r7, #2]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d303      	bcc.n	80003f8 <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	799b      	ldrb	r3, [r3, #6]
 80003f4:	3b01      	subs	r3, #1
 80003f6:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 80003f8:	78bb      	ldrb	r3, [r7, #2]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d102      	bne.n	8000404 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 80003fe:	78fb      	ldrb	r3, [r7, #3]
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	e013      	b.n	800042c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000404:	78bb      	ldrb	r3, [r7, #2]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d103      	bne.n	8000412 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	3340      	adds	r3, #64	; 0x40
 800040e:	73fb      	strb	r3, [r7, #15]
 8000410:	e00c      	b.n	800042c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8000412:	78bb      	ldrb	r3, [r7, #2]
 8000414:	2b02      	cmp	r3, #2
 8000416:	d103      	bne.n	8000420 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x10 + Xpos;
 8000418:	78fb      	ldrb	r3, [r7, #3]
 800041a:	3310      	adds	r3, #16
 800041c:	73fb      	strb	r3, [r7, #15]
 800041e:	e005      	b.n	800042c <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000420:	78bb      	ldrb	r3, [r7, #2]
 8000422:	2b03      	cmp	r3, #3
 8000424:	d102      	bne.n	800042c <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x50 + Xpos;
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	3350      	adds	r3, #80	; 0x50
 800042a:	73fb      	strb	r3, [r7, #15]
	}
	Xcursor = Xpos;
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <CLCD_I2C_SetCursor+0xa4>)
 800042e:	78fb      	ldrb	r3, [r7, #3]
 8000430:	7013      	strb	r3, [r2, #0]

	Ycursor = Ypos;
 8000432:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <CLCD_I2C_SetCursor+0xa8>)
 8000434:	78bb      	ldrb	r3, [r7, #2]
 8000436:	7013      	strb	r3, [r2, #0]
	currentline = Ycursor;
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <CLCD_I2C_SetCursor+0xa8>)
 800043a:	781a      	ldrb	r2, [r3, #0]
 800043c:	4b0b      	ldr	r3, [pc, #44]	; (800046c <CLCD_I2C_SetCursor+0xac>)
 800043e:	701a      	strb	r2, [r3, #0]
	countWriteChar = Xcursor;
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <CLCD_I2C_SetCursor+0xa4>)
 8000442:	781a      	ldrb	r2, [r3, #0]
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <CLCD_I2C_SetCursor+0xb0>)
 8000446:	701a      	strb	r2, [r3, #0]
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800044e:	b2db      	uxtb	r3, r3
 8000450:	2200      	movs	r2, #0
 8000452:	4619      	mov	r1, r3
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff feec 	bl	8000232 <CLCD_WriteI2C>
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	200001a1 	.word	0x200001a1
 8000468:	200001a2 	.word	0x200001a2
 800046c:	200001a0 	.word	0x200001a0
 8000470:	200001a3 	.word	0x200001a3

08000474 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	460b      	mov	r3, r1
 800047e:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 8000480:	78fb      	ldrb	r3, [r7, #3]
 8000482:	2201      	movs	r2, #1
 8000484:	4619      	mov	r1, r3
 8000486:	6878      	ldr	r0, [r7, #4]
 8000488:	f7ff fed3 	bl	8000232 <CLCD_WriteI2C>
	countWriteChar++;
 800048c:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <CLCD_I2C_WriteChar+0x94>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	b2da      	uxtb	r2, r3
 8000494:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <CLCD_I2C_WriteChar+0x94>)
 8000496:	701a      	strb	r2, [r3, #0]
	if (CurrentWriteChar)
 8000498:	4b1c      	ldr	r3, [pc, #112]	; (800050c <CLCD_I2C_WriteChar+0x98>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d02b      	beq.n	80004f8 <CLCD_I2C_WriteChar+0x84>
	{
	if (countWriteChar ==20)
 80004a0:	4b19      	ldr	r3, [pc, #100]	; (8000508 <CLCD_I2C_WriteChar+0x94>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b14      	cmp	r3, #20
 80004a6:	d127      	bne.n	80004f8 <CLCD_I2C_WriteChar+0x84>
	{
	switch(currentline)
 80004a8:	4b19      	ldr	r3, [pc, #100]	; (8000510 <CLCD_I2C_WriteChar+0x9c>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d825      	bhi.n	80004fc <CLCD_I2C_WriteChar+0x88>
 80004b0:	a201      	add	r2, pc, #4	; (adr r2, 80004b8 <CLCD_I2C_WriteChar+0x44>)
 80004b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b6:	bf00      	nop
 80004b8:	080004c9 	.word	0x080004c9
 80004bc:	080004d5 	.word	0x080004d5
 80004c0:	080004e1 	.word	0x080004e1
 80004c4:	080004ed 	.word	0x080004ed
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2100      	movs	r1, #0
 80004cc:	4811      	ldr	r0, [pc, #68]	; (8000514 <CLCD_I2C_WriteChar+0xa0>)
 80004ce:	f7ff ff77 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80004d2:	e014      	b.n	80004fe <CLCD_I2C_WriteChar+0x8a>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 80004d4:	2202      	movs	r2, #2
 80004d6:	2100      	movs	r1, #0
 80004d8:	480e      	ldr	r0, [pc, #56]	; (8000514 <CLCD_I2C_WriteChar+0xa0>)
 80004da:	f7ff ff71 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80004de:	e00e      	b.n	80004fe <CLCD_I2C_WriteChar+0x8a>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 80004e0:	2203      	movs	r2, #3
 80004e2:	2100      	movs	r1, #0
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <CLCD_I2C_WriteChar+0xa0>)
 80004e6:	f7ff ff6b 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80004ea:	e008      	b.n	80004fe <CLCD_I2C_WriteChar+0x8a>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2100      	movs	r1, #0
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <CLCD_I2C_WriteChar+0xa0>)
 80004f2:	f7ff ff65 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80004f6:	e002      	b.n	80004fe <CLCD_I2C_WriteChar+0x8a>
				default:
								break;
			}
		}
 80004f8:	bf00      	nop
 80004fa:	e000      	b.n	80004fe <CLCD_I2C_WriteChar+0x8a>
								break;
 80004fc:	bf00      	nop
	}
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200001a3 	.word	0x200001a3
 800050c:	200001a4 	.word	0x200001a4
 8000510:	200001a0 	.word	0x200001a0
 8000514:	200001a8 	.word	0x200001a8

08000518 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
	while (*String)
 8000522:	e04a      	b.n	80005ba <CLCD_I2C_WriteString+0xa2>
	{
	CurrentWriteChar=0;
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <CLCD_I2C_WriteString+0xbc>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 800052a:	2300      	movs	r3, #0
 800052c:	73fb      	strb	r3, [r7, #15]
 800052e:	e00e      	b.n	800054e <CLCD_I2C_WriteString+0x36>
		{
			if (*String)
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d012      	beq.n	800055e <CLCD_I2C_WriteString+0x46>
			{
				CLCD_I2C_WriteChar(LCD, *String++);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	603a      	str	r2, [r7, #0]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f7ff ff96 	bl	8000474 <CLCD_I2C_WriteChar>
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	3301      	adds	r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	7bfa      	ldrb	r2, [r7, #15]
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <CLCD_I2C_WriteString+0xc0>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	f1c3 0314 	rsb	r3, r3, #20
 8000558:	429a      	cmp	r2, r3
 800055a:	dbe9      	blt.n	8000530 <CLCD_I2C_WriteString+0x18>
 800055c:	e000      	b.n	8000560 <CLCD_I2C_WriteString+0x48>
			}
			else break;
 800055e:	bf00      	nop
		}
		if (*String)
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d02d      	beq.n	80005c4 <CLCD_I2C_WriteString+0xac>
		{
			switch(currentline)
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <CLCD_I2C_WriteString+0xc4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b03      	cmp	r3, #3
 800056e:	d823      	bhi.n	80005b8 <CLCD_I2C_WriteString+0xa0>
 8000570:	a201      	add	r2, pc, #4	; (adr r2, 8000578 <CLCD_I2C_WriteString+0x60>)
 8000572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000576:	bf00      	nop
 8000578:	08000589 	.word	0x08000589
 800057c:	08000595 	.word	0x08000595
 8000580:	080005a1 	.word	0x080005a1
 8000584:	080005ad 	.word	0x080005ad
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2100      	movs	r1, #0
 800058c:	4814      	ldr	r0, [pc, #80]	; (80005e0 <CLCD_I2C_WriteString+0xc8>)
 800058e:	f7ff ff17 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 8000592:	e012      	b.n	80005ba <CLCD_I2C_WriteString+0xa2>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8000594:	2202      	movs	r2, #2
 8000596:	2100      	movs	r1, #0
 8000598:	4811      	ldr	r0, [pc, #68]	; (80005e0 <CLCD_I2C_WriteString+0xc8>)
 800059a:	f7ff ff11 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 800059e:	e00c      	b.n	80005ba <CLCD_I2C_WriteString+0xa2>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 80005a0:	2203      	movs	r2, #3
 80005a2:	2100      	movs	r1, #0
 80005a4:	480e      	ldr	r0, [pc, #56]	; (80005e0 <CLCD_I2C_WriteString+0xc8>)
 80005a6:	f7ff ff0b 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80005aa:	e006      	b.n	80005ba <CLCD_I2C_WriteString+0xa2>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	480b      	ldr	r0, [pc, #44]	; (80005e0 <CLCD_I2C_WriteString+0xc8>)
 80005b2:	f7ff ff05 	bl	80003c0 <CLCD_I2C_SetCursor>
								break;
 80005b6:	e000      	b.n	80005ba <CLCD_I2C_WriteString+0xa2>
				default:
								break;
 80005b8:	bf00      	nop
	while (*String)
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d1b0      	bne.n	8000524 <CLCD_I2C_WriteString+0xc>
 80005c2:	e000      	b.n	80005c6 <CLCD_I2C_WriteString+0xae>
			}
		}
		else break;
 80005c4:	bf00      	nop

		}
	CurrentWriteChar=1;
 80005c6:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <CLCD_I2C_WriteString+0xbc>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200001a4 	.word	0x200001a4
 80005d8:	200001a1 	.word	0x200001a1
 80005dc:	200001a0 	.word	0x200001a0
 80005e0:	200001a8 	.word	0x200001a8

080005e4 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2101      	movs	r1, #1
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff fe1e 	bl	8000232 <CLCD_WriteI2C>
	CLCD_Delay(5);
 80005f6:	2005      	movs	r0, #5
 80005f8:	f7ff fe0e 	bl	8000218 <CLCD_Delay>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <Check_Keypad_Column>:
  +) RETURN:
    -Keypad_Button_Values[Row-x][x+1]   : Keypad_Button_Values
    -KEYPAD_NOT_PRESSED                 : "\0" (Không ấn nút)
*/
static char Check_Keypad_Column(GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main, uint8_t Row)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO0, ROW_KEY_PAD_main->PIN.GPIO_PIN_A)) //If ROW_1 is LOW
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	8a1b      	ldrh	r3, [r3, #16]
 8000618:	4619      	mov	r1, r3
 800061a:	4610      	mov	r0, r2
 800061c:	f002 f9ca 	bl	80029b4 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d105      	bne.n	8000632 <Check_Keypad_Column+0x2e>
	{
		return Keypad_Button_Values[Row-1][0];
 8000626:	78fb      	ldrb	r3, [r7, #3]
 8000628:	3b01      	subs	r3, #1
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <Check_Keypad_Column+0xa4>)
 800062c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000630:	e036      	b.n	80006a0 <Check_Keypad_Column+0x9c>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO1, ROW_KEY_PAD_main->PIN.GPIO_PIN_B)) //If ROW_2 is LOW
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	685a      	ldr	r2, [r3, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	8a5b      	ldrh	r3, [r3, #18]
 800063a:	4619      	mov	r1, r3
 800063c:	4610      	mov	r0, r2
 800063e:	f002 f9b9 	bl	80029b4 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d106      	bne.n	8000656 <Check_Keypad_Column+0x52>
	{
		return Keypad_Button_Values[Row-1][1];
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	3b01      	subs	r3, #1
 800064c:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <Check_Keypad_Column+0xa4>)
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4413      	add	r3, r2
 8000652:	785b      	ldrb	r3, [r3, #1]
 8000654:	e024      	b.n	80006a0 <Check_Keypad_Column+0x9c>
	}

    if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO2, ROW_KEY_PAD_main->PIN.GPIO_PIN_C)) //If ROW_3 is LOW
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	689a      	ldr	r2, [r3, #8]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	8a9b      	ldrh	r3, [r3, #20]
 800065e:	4619      	mov	r1, r3
 8000660:	4610      	mov	r0, r2
 8000662:	f002 f9a7 	bl	80029b4 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d106      	bne.n	800067a <Check_Keypad_Column+0x76>
	{
		return Keypad_Button_Values[Row-1][2];
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	3b01      	subs	r3, #1
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <Check_Keypad_Column+0xa4>)
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	e012      	b.n	80006a0 <Check_Keypad_Column+0x9c>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO3, ROW_KEY_PAD_main->PIN.GPIO_PIN_D)) //If ROW_4 is LOW
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	68da      	ldr	r2, [r3, #12]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	8adb      	ldrh	r3, [r3, #22]
 8000682:	4619      	mov	r1, r3
 8000684:	4610      	mov	r0, r2
 8000686:	f002 f995 	bl	80029b4 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d106      	bne.n	800069e <Check_Keypad_Column+0x9a>
	{
		return Keypad_Button_Values[Row-1][3];
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	3b01      	subs	r3, #1
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <Check_Keypad_Column+0xa4>)
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4413      	add	r3, r2
 800069a:	78db      	ldrb	r3, [r3, #3]
 800069c:	e000      	b.n	80006a0 <Check_Keypad_Column+0x9c>
	}
	return KEYPAD_NOT_PRESSED;                   //If NO Key is pressed
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	080069b8 	.word	0x080069b8

080006ac <KEYPAD_Read>:
  +) RETURN:
    -char check                                  	: const char Keypad_Button_Values[x][y]
    -KEYPAD_NOT_PRESSED                     		: '\0' {reason of failed)
*/
static char KEYPAD_Read(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    char check = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	73fb      	strb	r3, [r7, #15]
    /*Set COL_1 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_RESET);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6818      	ldr	r0, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	8a1b      	ldrh	r3, [r3, #16]
 80006c2:	2200      	movs	r2, #0
 80006c4:	4619      	mov	r1, r3
 80006c6:	f002 f98c 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6858      	ldr	r0, [r3, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	8a5b      	ldrh	r3, [r3, #18]
 80006d2:	2201      	movs	r2, #1
 80006d4:	4619      	mov	r1, r3
 80006d6:	f002 f984 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6898      	ldr	r0, [r3, #8]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	8a9b      	ldrh	r3, [r3, #20]
 80006e2:	2201      	movs	r2, #1
 80006e4:	4619      	mov	r1, r3
 80006e6:	f002 f97c 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	68d8      	ldr	r0, [r3, #12]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	8adb      	ldrh	r3, [r3, #22]
 80006f2:	2201      	movs	r2, #1
 80006f4:	4619      	mov	r1, r3
 80006f6:	f002 f974 	bl	80029e2 <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 1);
 80006fa:	2101      	movs	r1, #1
 80006fc:	6838      	ldr	r0, [r7, #0]
 80006fe:	f7ff ff81 	bl	8000604 <Check_Keypad_Column>
 8000702:	4603      	mov	r3, r0
 8000704:	73fb      	strb	r3, [r7, #15]
    if(check)
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <KEYPAD_Read+0x64>
    {
    	return check;
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	e081      	b.n	8000814 <KEYPAD_Read+0x168>
    }
    /*Set COL_2 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6818      	ldr	r0, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	8a1b      	ldrh	r3, [r3, #16]
 8000718:	2201      	movs	r2, #1
 800071a:	4619      	mov	r1, r3
 800071c:	f002 f961 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_RESET);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6858      	ldr	r0, [r3, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	8a5b      	ldrh	r3, [r3, #18]
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f002 f959 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6898      	ldr	r0, [r3, #8]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	8a9b      	ldrh	r3, [r3, #20]
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	f002 f951 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68d8      	ldr	r0, [r3, #12]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	8adb      	ldrh	r3, [r3, #22]
 8000748:	2201      	movs	r2, #1
 800074a:	4619      	mov	r1, r3
 800074c:	f002 f949 	bl	80029e2 <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 2);
 8000750:	2102      	movs	r1, #2
 8000752:	6838      	ldr	r0, [r7, #0]
 8000754:	f7ff ff56 	bl	8000604 <Check_Keypad_Column>
 8000758:	4603      	mov	r3, r0
 800075a:	73fb      	strb	r3, [r7, #15]
    if(check)
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <KEYPAD_Read+0xba>
    {
    	return check;
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	e056      	b.n	8000814 <KEYPAD_Read+0x168>
    }
    /*Set COL_3 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	8a1b      	ldrh	r3, [r3, #16]
 800076e:	2201      	movs	r2, #1
 8000770:	4619      	mov	r1, r3
 8000772:	f002 f936 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6858      	ldr	r0, [r3, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	8a5b      	ldrh	r3, [r3, #18]
 800077e:	2201      	movs	r2, #1
 8000780:	4619      	mov	r1, r3
 8000782:	f002 f92e 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_RESET);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6898      	ldr	r0, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	8a9b      	ldrh	r3, [r3, #20]
 800078e:	2200      	movs	r2, #0
 8000790:	4619      	mov	r1, r3
 8000792:	f002 f926 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68d8      	ldr	r0, [r3, #12]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	8adb      	ldrh	r3, [r3, #22]
 800079e:	2201      	movs	r2, #1
 80007a0:	4619      	mov	r1, r3
 80007a2:	f002 f91e 	bl	80029e2 <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 3);
 80007a6:	2103      	movs	r1, #3
 80007a8:	6838      	ldr	r0, [r7, #0]
 80007aa:	f7ff ff2b 	bl	8000604 <Check_Keypad_Column>
 80007ae:	4603      	mov	r3, r0
 80007b0:	73fb      	strb	r3, [r7, #15]
    if(check)
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <KEYPAD_Read+0x110>
    {
    	return check;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	e02b      	b.n	8000814 <KEYPAD_Read+0x168>
    }
    /*Set COL_4 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	8a1b      	ldrh	r3, [r3, #16]
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	f002 f90b 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6858      	ldr	r0, [r3, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	8a5b      	ldrh	r3, [r3, #18]
 80007d4:	2201      	movs	r2, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	f002 f903 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6898      	ldr	r0, [r3, #8]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	8a9b      	ldrh	r3, [r3, #20]
 80007e4:	2201      	movs	r2, #1
 80007e6:	4619      	mov	r1, r3
 80007e8:	f002 f8fb 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_RESET);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	68d8      	ldr	r0, [r3, #12]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	8adb      	ldrh	r3, [r3, #22]
 80007f4:	2200      	movs	r2, #0
 80007f6:	4619      	mov	r1, r3
 80007f8:	f002 f8f3 	bl	80029e2 <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 4);
 80007fc:	2104      	movs	r1, #4
 80007fe:	6838      	ldr	r0, [r7, #0]
 8000800:	f7ff ff00 	bl	8000604 <Check_Keypad_Column>
 8000804:	4603      	mov	r3, r0
 8000806:	73fb      	strb	r3, [r7, #15]
    if(check)
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <KEYPAD_Read+0x166>
    {
    	return check;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	e000      	b.n	8000814 <KEYPAD_Read+0x168>
    }
    /*Key not pressed */
    return KEYPAD_NOT_PRESSED;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <KeyPad_Init>:
void KeyPad_Init(	GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD,
					GPIO_TypeDef* C_port0, GPIO_TypeDef* C_port1, GPIO_TypeDef* C_port2, GPIO_TypeDef* C_port3,\
					uint16_t C_pin0, uint16_t C_pin1, uint16_t C_pin2, uint16_t C_pin3,\
					GPIO_TypeDef* R_port0, GPIO_TypeDef* R_port1, GPIO_TypeDef* R_port2, GPIO_TypeDef* R_port3,\
					uint16_t R_pin0, uint16_t R_pin1, uint16_t R_pin2, uint16_t R_pin3)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	603b      	str	r3, [r7, #0]
	//OUTPUT
  COL_KEY_PAD->PORT.GPIO0 = C_port0;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	601a      	str	r2, [r3, #0]
  COL_KEY_PAD->PORT.GPIO1 = C_port1;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	605a      	str	r2, [r3, #4]
  COL_KEY_PAD->PORT.GPIO2 = C_port2;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	609a      	str	r2, [r3, #8]
  COL_KEY_PAD->PORT.GPIO3 = C_port3;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	69fa      	ldr	r2, [r7, #28]
 8000840:	60da      	str	r2, [r3, #12]

  COL_KEY_PAD->PIN.GPIO_PIN_A = C_pin0;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	8c3a      	ldrh	r2, [r7, #32]
 8000846:	821a      	strh	r2, [r3, #16]
  COL_KEY_PAD->PIN.GPIO_PIN_B = C_pin1;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800084c:	825a      	strh	r2, [r3, #18]
  COL_KEY_PAD->PIN.GPIO_PIN_C = C_pin2;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000852:	829a      	strh	r2, [r3, #20]
  COL_KEY_PAD->PIN.GPIO_PIN_D = C_pin3;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000858:	82da      	strh	r2, [r3, #22]
  //INPUT
  ROW_KEY_PAD->PORT.GPIO0 = R_port0;
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800085e:	601a      	str	r2, [r3, #0]
  ROW_KEY_PAD->PORT.GPIO1 = R_port1;
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000864:	605a      	str	r2, [r3, #4]
  ROW_KEY_PAD->PORT.GPIO2 = R_port2;
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800086a:	609a      	str	r2, [r3, #8]
  ROW_KEY_PAD->PORT.GPIO3 = R_port3;
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000870:	60da      	str	r2, [r3, #12]

  ROW_KEY_PAD->PIN.GPIO_PIN_A = R_pin0;
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000878:	821a      	strh	r2, [r3, #16]
  ROW_KEY_PAD->PIN.GPIO_PIN_B = R_pin1;
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000880:	825a      	strh	r2, [r3, #18]
  ROW_KEY_PAD->PIN.GPIO_PIN_C = R_pin2;
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8000888:	829a      	strh	r2, [r3, #20]
  ROW_KEY_PAD->PIN.GPIO_PIN_D = R_pin3;
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8000890:	82da      	strh	r2, [r3, #22]
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <KEYPAD_Handler>:



char KEYPAD_Handler(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	char key = KEYPAD_Read(COL_KEY_PAD, ROW_KEY_PAD_main);;
 80008a6:	6839      	ldr	r1, [r7, #0]
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff feff 	bl	80006ac <KEYPAD_Read>
 80008ae:	4603      	mov	r3, r0
 80008b0:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_RESET);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	8a1b      	ldrh	r3, [r3, #16]
 80008ba:	2200      	movs	r2, #0
 80008bc:	4619      	mov	r1, r3
 80008be:	f002 f890 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_RESET);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6858      	ldr	r0, [r3, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	8a5b      	ldrh	r3, [r3, #18]
 80008ca:	2200      	movs	r2, #0
 80008cc:	4619      	mov	r1, r3
 80008ce:	f002 f888 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_RESET);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6898      	ldr	r0, [r3, #8]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	8a9b      	ldrh	r3, [r3, #20]
 80008da:	2200      	movs	r2, #0
 80008dc:	4619      	mov	r1, r3
 80008de:	f002 f880 	bl	80029e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_RESET);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	68d8      	ldr	r0, [r3, #12]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	8adb      	ldrh	r3, [r3, #22]
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	f002 f878 	bl	80029e2 <HAL_GPIO_WritePin>
    return key;
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <FET_74HC595_Init>:



void FET_74HC595_Init(	GPIO_TypeDef * DS_Port, GPIO_TypeDef * Shift_Port, GPIO_TypeDef * ST_Port, 			\
						uint16_t DS_Pin, uint16_t SH_Pin, uint16_t ST_Pin)									\
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
 8000908:	807b      	strh	r3, [r7, #2]
	IC74HC595_ST_Port		=	ST_Port;
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <FET_74HC595_Init+0x3c>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6013      	str	r3, [r2, #0]
	IC74hc595_DS_Port		= 	DS_Port;
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <FET_74HC595_Init+0x40>)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	6013      	str	r3, [r2, #0]
	IC74HC595_Shift_Port	=	Shift_Port;
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <FET_74HC595_Init+0x44>)
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	6013      	str	r3, [r2, #0]
	IC74HC595_ST_Pin		=	ST_Pin;
 800091c:	4a09      	ldr	r2, [pc, #36]	; (8000944 <FET_74HC595_Init+0x48>)
 800091e:	8bbb      	ldrh	r3, [r7, #28]
 8000920:	8013      	strh	r3, [r2, #0]
	IC74hc595_Shift_Pin		=	SH_Pin;
 8000922:	4a09      	ldr	r2, [pc, #36]	; (8000948 <FET_74HC595_Init+0x4c>)
 8000924:	8b3b      	ldrh	r3, [r7, #24]
 8000926:	8013      	strh	r3, [r2, #0]
	IC74hc595_DS_Pin		=	DS_Pin;
 8000928:	4a08      	ldr	r2, [pc, #32]	; (800094c <FET_74HC595_Init+0x50>)
 800092a:	887b      	ldrh	r3, [r7, #2]
 800092c:	8013      	strh	r3, [r2, #0]
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	200001b8 	.word	0x200001b8
 800093c:	200001bc 	.word	0x200001bc
 8000940:	200001c0 	.word	0x200001c0
 8000944:	200001c8 	.word	0x200001c8
 8000948:	200001c4 	.word	0x200001c4
 800094c:	200001c6 	.word	0x200001c6

08000950 <FET_74HC595_Set_Reset>:



void FET_74HC595_Set_Reset(uint16_t  tt)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
	uint16_t	tam 	= 	tt;
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	81bb      	strh	r3, [r7, #12]
	uint8_t		i 		= 	0;
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
	for(i = 0; i < 8; i++)
 8000962:	2300      	movs	r3, #0
 8000964:	73fb      	strb	r3, [r7, #15]
 8000966:	e031      	b.n	80009cc <FET_74HC595_Set_Reset+0x7c>
	{
		if(tam & (0x80 >> i))
 8000968:	89ba      	ldrh	r2, [r7, #12]
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	fa41 f303 	asr.w	r3, r1, r3
 8000972:	4013      	ands	r3, r2
 8000974:	2b00      	cmp	r3, #0
 8000976:	d008      	beq.n	800098a <FET_74HC595_Set_Reset+0x3a>
		{
			HAL_GPIO_WritePin(IC74hc595_DS_Port, IC74hc595_DS_Pin, GPIO_PIN_SET);
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <FET_74HC595_Set_Reset+0xb8>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <FET_74HC595_Set_Reset+0xbc>)
 800097e:	8811      	ldrh	r1, [r2, #0]
 8000980:	2201      	movs	r2, #1
 8000982:	4618      	mov	r0, r3
 8000984:	f002 f82d 	bl	80029e2 <HAL_GPIO_WritePin>
 8000988:	e007      	b.n	800099a <FET_74HC595_Set_Reset+0x4a>
		}
		else
		{
			HAL_GPIO_WritePin(IC74hc595_DS_Port, IC74hc595_DS_Pin, GPIO_PIN_RESET);
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <FET_74HC595_Set_Reset+0xb8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a1f      	ldr	r2, [pc, #124]	; (8000a0c <FET_74HC595_Set_Reset+0xbc>)
 8000990:	8811      	ldrh	r1, [r2, #0]
 8000992:	2200      	movs	r2, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f002 f824 	bl	80029e2 <HAL_GPIO_WritePin>
		}
		HAL_GPIO_WritePin(IC74HC595_Shift_Port, IC74hc595_Shift_Pin ,GPIO_PIN_SET);
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <FET_74HC595_Set_Reset+0xc0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <FET_74HC595_Set_Reset+0xc4>)
 80009a0:	8811      	ldrh	r1, [r2, #0]
 80009a2:	2201      	movs	r2, #1
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 f81c 	bl	80029e2 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80009aa:	2001      	movs	r0, #1
 80009ac:	f001 fc9a 	bl	80022e4 <HAL_Delay>
		HAL_GPIO_WritePin(IC74HC595_Shift_Port, IC74hc595_Shift_Pin, GPIO_PIN_RESET);
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <FET_74HC595_Set_Reset+0xc0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <FET_74HC595_Set_Reset+0xc4>)
 80009b6:	8811      	ldrh	r1, [r2, #0]
 80009b8:	2200      	movs	r2, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 f811 	bl	80029e2 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80009c0:	2001      	movs	r0, #1
 80009c2:	f001 fc8f 	bl	80022e4 <HAL_Delay>
	for(i = 0; i < 8; i++)
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	3301      	adds	r3, #1
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	2b07      	cmp	r3, #7
 80009d0:	d9ca      	bls.n	8000968 <FET_74HC595_Set_Reset+0x18>
	}
	HAL_GPIO_WritePin(IC74HC595_ST_Port, IC74HC595_ST_Pin, GPIO_PIN_SET);
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <FET_74HC595_Set_Reset+0xc8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <FET_74HC595_Set_Reset+0xcc>)
 80009d8:	8811      	ldrh	r1, [r2, #0]
 80009da:	2201      	movs	r2, #1
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 f800 	bl	80029e2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f001 fc7e 	bl	80022e4 <HAL_Delay>
	HAL_GPIO_WritePin(IC74HC595_ST_Port, IC74HC595_ST_Pin, GPIO_PIN_RESET);
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <FET_74HC595_Set_Reset+0xc8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <FET_74HC595_Set_Reset+0xcc>)
 80009ee:	8811      	ldrh	r1, [r2, #0]
 80009f0:	2200      	movs	r2, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fff5 	bl	80029e2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f001 fc73 	bl	80022e4 <HAL_Delay>
}
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200001bc 	.word	0x200001bc
 8000a0c:	200001c6 	.word	0x200001c6
 8000a10:	200001c0 	.word	0x200001c0
 8000a14:	200001c4 	.word	0x200001c4
 8000a18:	200001b8 	.word	0x200001b8
 8000a1c:	200001c8 	.word	0x200001c8

08000a20 <handler_keyIN_enterKey_DisplayLCD>:




STATE_KEY handler_keyIN_enterKey_DisplayLCD(CLCD_I2C_Name* LCD_user, STATE_SELECT_BUTTON_HANDLER_TYPEDEF state_button, char* key, char* password)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	72fb      	strb	r3, [r7, #11]
	  if(*key != KEYPAD_NOT_PRESSED)	//when state_button = KEYPAD
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d06b      	beq.n	8000b10 <handler_keyIN_enterKey_DisplayLCD+0xf0>
	  {
		  if(enter_num_pass.signal_enter_pass == PROCESSING)	// Được thay đổi trong lcd_user.c
 8000a38:	4b38      	ldr	r3, [pc, #224]	; (8000b1c <handler_keyIN_enterKey_DisplayLCD+0xfc>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d130      	bne.n	8000aa2 <handler_keyIN_enterKey_DisplayLCD+0x82>
		  {
			  CLCD_I2C_SetCursor(LCD_user, row_key_password, 2);
 8000a40:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2202      	movs	r2, #2
 8000a46:	4619      	mov	r1, r3
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f7ff fcb9 	bl	80003c0 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteChar(LCD_user, *key);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	4619      	mov	r1, r3
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f7ff fd0d 	bl	8000474 <CLCD_I2C_WriteChar>

			  password[row_key_password - ROW_BEGIN_KEPAD_PASS] = *key;
 8000a5a:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	3b09      	subs	r3, #9
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	7812      	ldrb	r2, [r2, #0]
 8000a68:	701a      	strb	r2, [r3, #0]
			  row_key_password++;
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000a74:	701a      	strb	r2, [r3, #0]
			  *key = KEYPAD_NOT_PRESSED;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]

			  if(row_key_password > SIZE_ROW_PASS)
 8000a7c:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b0d      	cmp	r3, #13
 8000a82:	d90c      	bls.n	8000a9e <handler_keyIN_enterKey_DisplayLCD+0x7e>
			  {
				  state_button = BUTTON;
 8000a84:	2301      	movs	r3, #1
 8000a86:	72fb      	strb	r3, [r7, #11]
				  /*Neu Mang hinh nhap du 5 so*/
				  /*reset mang hinh*/
				  CLCD_I2C_Clear(LCD_user);
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f7ff fdab 	bl	80005e4 <CLCD_I2C_Clear>

				  state_star_pass = STAR;
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <handler_keyIN_enterKey_DisplayLCD+0x104>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
				  row_key_password = ROW_BEGIN_KEPAD_PASS;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <handler_keyIN_enterKey_DisplayLCD+0x100>)
 8000a96:	2209      	movs	r2, #9
 8000a98:	701a      	strb	r2, [r3, #0]
				  return KEY_OK;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e039      	b.n	8000b12 <handler_keyIN_enterKey_DisplayLCD+0xf2>
			  }
			  else
			  {
				  return KEY_NOT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e037      	b.n	8000b12 <handler_keyIN_enterKey_DisplayLCD+0xf2>
			  }
		  }/*END if(enter_num_pass.signal_enter_pass == PROCESSING)*/
		  else if(enter_num_pass.signal_enter_num == PROCESSING)
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <handler_keyIN_enterKey_DisplayLCD+0xfc>)
 8000aa4:	785b      	ldrb	r3, [r3, #1]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d130      	bne.n	8000b0c <handler_keyIN_enterKey_DisplayLCD+0xec>
		  {
			  CLCD_I2C_SetCursor(LCD_user, row_key_num, 1);
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f7ff fc84 	bl	80003c0 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteChar(LCD_user, *key);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fcd8 	bl	8000474 <CLCD_I2C_WriteChar>

			  password[row_key_num - ROW_BEGIN_KEPAD_NUM] = *key;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	3b09      	subs	r3, #9
 8000aca:	683a      	ldr	r2, [r7, #0]
 8000acc:	4413      	add	r3, r2
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	7812      	ldrb	r2, [r2, #0]
 8000ad2:	701a      	strb	r2, [r3, #0]
			  row_key_num++;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 8000ade:	701a      	strb	r2, [r3, #0]
			  *key = KEYPAD_NOT_PRESSED;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]

			  if(row_key_num > SIZE_ROW_NUM)
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b09      	cmp	r3, #9
 8000aec:	d90c      	bls.n	8000b08 <handler_keyIN_enterKey_DisplayLCD+0xe8>
			  {
				  state_button = BUTTON;
 8000aee:	2301      	movs	r3, #1
 8000af0:	72fb      	strb	r3, [r7, #11]
				  /*Neu Mang hinh nhap du 5 so*/
				  /*reset mang hinh*/
				  CLCD_I2C_Clear(LCD_user);
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f7ff fd76 	bl	80005e4 <CLCD_I2C_Clear>

				  state_star_pass = STAR;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <handler_keyIN_enterKey_DisplayLCD+0x104>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
				  row_key_num = ROW_BEGIN_KEPAD_NUM;
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 8000b00:	2209      	movs	r2, #9
 8000b02:	701a      	strb	r2, [r3, #0]
				  return KEY_OK;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e004      	b.n	8000b12 <handler_keyIN_enterKey_DisplayLCD+0xf2>
			  }
			  else
			  {
				  return KEY_NOT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e002      	b.n	8000b12 <handler_keyIN_enterKey_DisplayLCD+0xf2>
			  }
		  }/*END if(enter_num_pass.signal_enter_num == PROCESSING)*/
		  else
		  {
			  return KEY_NOT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e000      	b.n	8000b12 <handler_keyIN_enterKey_DisplayLCD+0xf2>
		  }
	  }/*END if(*key != KEYPAD_NOT_PRESSED)*/
	  else
	  {
		  return KEY_NOT;
 8000b10:	2300      	movs	r3, #0
	  }
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000b0 	.word	0x200000b0
 8000b20:	20000002 	.word	0x20000002
 8000b24:	200001d0 	.word	0x200001d0
 8000b28:	20000001 	.word	0x20000001

08000b2c <handler_keyIN_CheckPIN_NUM>:



STATE_HANDLER handler_keyIN_CheckPIN_NUM(char * num_pin_buffer, uint8_t* num)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
	static uint8_t counter = 0;
	if(enter_num_pass.signal_enter_num == PROCESSING)	// Nếu nhấn nút nhập num
 8000b36:	4b47      	ldr	r3, [pc, #284]	; (8000c54 <handler_keyIN_CheckPIN_NUM+0x128>)
 8000b38:	785b      	ldrb	r3, [r3, #1]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d137      	bne.n	8000bae <handler_keyIN_CheckPIN_NUM+0x82>
	{
		counter = 0;
 8000b3e:	4b46      	ldr	r3, [pc, #280]	; (8000c58 <handler_keyIN_CheckPIN_NUM+0x12c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
		num_ok = 0;
 8000b44:	4b45      	ldr	r3, [pc, #276]	; (8000c5c <handler_keyIN_CheckPIN_NUM+0x130>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
		enter_num_pass.signal_enter_num = NOT_DONE;
 8000b4a:	4b42      	ldr	r3, [pc, #264]	; (8000c54 <handler_keyIN_CheckPIN_NUM+0x128>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	705a      	strb	r2, [r3, #1]
		for(uint8_t j = 0; j < 7; j++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	e016      	b.n	8000b84 <handler_keyIN_CheckPIN_NUM+0x58>
		{
			if(strstr(num_pin_buffer, jagged_num[j]) != NULL)		// Check num
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	4a41      	ldr	r2, [pc, #260]	; (8000c60 <handler_keyIN_CheckPIN_NUM+0x134>)
 8000b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f004 fbe7 	bl	8005334 <strstr>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d008      	beq.n	8000b7e <handler_keyIN_CheckPIN_NUM+0x52>
			{
				num_ok = j;
 8000b6c:	4a3b      	ldr	r2, [pc, #236]	; (8000c5c <handler_keyIN_CheckPIN_NUM+0x130>)
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	7013      	strb	r3, [r2, #0]
				counter++;	// VD: Nhập đúng pass nằm ở stt1, thì counter = 1
 8000b72:	4b39      	ldr	r3, [pc, #228]	; (8000c58 <handler_keyIN_CheckPIN_NUM+0x12c>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4b37      	ldr	r3, [pc, #220]	; (8000c58 <handler_keyIN_CheckPIN_NUM+0x12c>)
 8000b7c:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0; j < 7; j++)
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	3301      	adds	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d9e5      	bls.n	8000b56 <handler_keyIN_CheckPIN_NUM+0x2a>
			}
		}
		if(counter == 0)
 8000b8a:	4b33      	ldr	r3, [pc, #204]	; (8000c58 <handler_keyIN_CheckPIN_NUM+0x12c>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d107      	bne.n	8000ba2 <handler_keyIN_CheckPIN_NUM+0x76>
		{
			*num = 0;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
			num_ok = 0;
 8000b98:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <handler_keyIN_CheckPIN_NUM+0x130>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
			return NUM_NONE;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e053      	b.n	8000c4a <handler_keyIN_CheckPIN_NUM+0x11e>
		}
		else
		{
			*num = counter;
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <handler_keyIN_CheckPIN_NUM+0x12c>)
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	701a      	strb	r2, [r3, #0]
			return NUM_OKE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e04d      	b.n	8000c4a <handler_keyIN_CheckPIN_NUM+0x11e>
		}
	}
	else if(enter_num_pass.signal_enter_pass == PROCESSING && counter != 0)	// Nếu nhấn nút nhập pass, nhập đúng num
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <handler_keyIN_CheckPIN_NUM+0x128>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d13c      	bne.n	8000c30 <handler_keyIN_CheckPIN_NUM+0x104>
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <handler_keyIN_CheckPIN_NUM+0x12c>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d038      	beq.n	8000c30 <handler_keyIN_CheckPIN_NUM+0x104>
	{
		enter_num_pass.signal_enter_pass = NOT_DONE;
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <handler_keyIN_CheckPIN_NUM+0x128>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
		if(strstr(num_pin_buffer, jagged_pass[num_ok]) != NULL) 	// Check pass
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <handler_keyIN_CheckPIN_NUM+0x130>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <handler_keyIN_CheckPIN_NUM+0x138>)
 8000bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f004 fbae 	bl	8005334 <strstr>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d012      	beq.n	8000c04 <handler_keyIN_CheckPIN_NUM+0xd8>
		{
			/*Reset*/
			for(uint8_t i = 0; i < sizeof(num_pin_buffer); i++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	73bb      	strb	r3, [r7, #14]
 8000be2:	e007      	b.n	8000bf4 <handler_keyIN_CheckPIN_NUM+0xc8>
			{
				num_pin_buffer[i] = 0;
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < sizeof(num_pin_buffer); i++)
 8000bee:	7bbb      	ldrb	r3, [r7, #14]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	73bb      	strb	r3, [r7, #14]
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d9f4      	bls.n	8000be4 <handler_keyIN_CheckPIN_NUM+0xb8>
			}
			/*Nhập ""ĐÚNG"" NUM-PIN: Thực hiện lệnh dưới*/
			Index_mode = INDEX_MODE_OKE_PASS;
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <handler_keyIN_CheckPIN_NUM+0x13c>)
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	701a      	strb	r2, [r3, #0]
			return PASS_OKE;
 8000c00:	2302      	movs	r3, #2
 8000c02:	e022      	b.n	8000c4a <handler_keyIN_CheckPIN_NUM+0x11e>
		}
		else
		{
			/*Reset*/
			*num = 0;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < sizeof(num_pin_buffer); i++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	737b      	strb	r3, [r7, #13]
 8000c0e:	e007      	b.n	8000c20 <handler_keyIN_CheckPIN_NUM+0xf4>
			{
				num_pin_buffer[i] = 0;
 8000c10:	7b7b      	ldrb	r3, [r7, #13]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < sizeof(num_pin_buffer); i++)
 8000c1a:	7b7b      	ldrb	r3, [r7, #13]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	737b      	strb	r3, [r7, #13]
 8000c20:	7b7b      	ldrb	r3, [r7, #13]
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d9f4      	bls.n	8000c10 <handler_keyIN_CheckPIN_NUM+0xe4>
			}
			/*Nhập ""SAI"" NUM-PIN: Thực hiện lệnh dưới*/
			Index_mode = INDEX_MODE_NO_OKE_PASS;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <handler_keyIN_CheckPIN_NUM+0x13c>)
 8000c28:	2204      	movs	r2, #4
 8000c2a:	701a      	strb	r2, [r3, #0]
			return PASS_NONE;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e00c      	b.n	8000c4a <handler_keyIN_CheckPIN_NUM+0x11e>
		}
	}
	else
	{
		*num = 0;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
		enter_num_pass.signal_enter_num = NOT_DONE;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <handler_keyIN_CheckPIN_NUM+0x128>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	705a      	strb	r2, [r3, #1]
		enter_num_pass.signal_enter_pass = NOT_DONE;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <handler_keyIN_CheckPIN_NUM+0x128>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
		Index_mode = INDEX_MODE_NO_OKE_PASS;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <handler_keyIN_CheckPIN_NUM+0x13c>)
 8000c44:	2204      	movs	r2, #4
 8000c46:	701a      	strb	r2, [r3, #0]
		return NUM_PASS_NONE;
 8000c48:	2304      	movs	r3, #4
	}
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000b0 	.word	0x200000b0
 8000c58:	200001cc 	.word	0x200001cc
 8000c5c:	200001cb 	.word	0x200001cb
 8000c60:	2000003c 	.word	0x2000003c
 8000c64:	20000090 	.word	0x20000090
 8000c68:	200001d1 	.word	0x200001d1

08000c6c <lcd_user_display>:
    -STATUS_DISPLAY_TYPEDEF status_display         : STATUS_1 -> STATUS_7
  +) RETURN:
    -void
*/
static void lcd_user_display(CLCD_I2C_Name* LCD_user, STATUS_DISPLAY_TYPEDEF status_display)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	70fb      	strb	r3, [r7, #3]
	if(language == ENGLISH)
 8000c78:	4bb3      	ldr	r3, [pc, #716]	; (8000f48 <lcd_user_display+0x2dc>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	f040 810d 	bne.w	8000e9c <lcd_user_display+0x230>
	{
		if(status_display == STATUS_BEGIN)
 8000c82:	78fb      	ldrb	r3, [r7, #3]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d124      	bne.n	8000cd2 <lcd_user_display+0x66>
		{
			// dislay hello ! Status_Display=0
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fb97 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 8000c92:	49ae      	ldr	r1, [pc, #696]	; (8000f4c <lcd_user_display+0x2e0>)
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff fc3f 	bl	8000518 <CLCD_I2C_WriteString>

			CLCD_I2C_SetCursor(LCD_user, 4, 1);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff fb8e 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"SV-NV-KH");
 8000ca4:	49aa      	ldr	r1, [pc, #680]	; (8000f50 <lcd_user_display+0x2e4>)
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff fc36 	bl	8000518 <CLCD_I2C_WriteString>

			CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000cac:	2202      	movs	r2, #2
 8000cae:	2104      	movs	r1, #4
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff fb85 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 8000cb6:	49a7      	ldr	r1, [pc, #668]	; (8000f54 <lcd_user_display+0x2e8>)
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fc2d 	bl	8000518 <CLCD_I2C_WriteString>

			CLCD_I2C_SetCursor(LCD_user, 2, 3);
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fb7c 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Press \"Enter\"!");
 8000cc8:	49a3      	ldr	r1, [pc, #652]	; (8000f58 <lcd_user_display+0x2ec>)
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fc24 	bl	8000518 <CLCD_I2C_WriteString>

			CLCD_I2C_SetCursor(LCD_user, 0, 3);
			CLCD_I2C_WriteString(LCD_user,"-EXIT");
		}
	}/*END if(language == ENGLISH)*/
}
 8000cd0:	e233      	b.n	800113a <lcd_user_display+0x4ce>
		else if(status_display == STATUS_MENU)
 8000cd2:	78fb      	ldrb	r3, [r7, #3]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d124      	bne.n	8000d22 <lcd_user_display+0xb6>
			CLCD_I2C_SetCursor(LCD_user, 3, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2103      	movs	r1, #3
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff fb6f 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"SELECT MODE");
 8000ce2:	499e      	ldr	r1, [pc, #632]	; (8000f5c <lcd_user_display+0x2f0>)
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff fc17 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2100      	movs	r1, #0
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fb66 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Language");
 8000cf4:	499a      	ldr	r1, [pc, #616]	; (8000f60 <lcd_user_display+0x2f4>)
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff fc0e 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	2100      	movs	r1, #0
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fb5d 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Enter password");
 8000d06:	4997      	ldr	r1, [pc, #604]	; (8000f64 <lcd_user_display+0x2f8>)
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fc05 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000d0e:	2203      	movs	r2, #3
 8000d10:	2100      	movs	r1, #0
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff fb54 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Exit");
 8000d18:	4993      	ldr	r1, [pc, #588]	; (8000f68 <lcd_user_display+0x2fc>)
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fbfc 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000d20:	e20b      	b.n	800113a <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN)							// PASSWORD
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d152      	bne.n	8000dce <lcd_user_display+0x162>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff fb47 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Information:");
 8000d32:	498e      	ldr	r1, [pc, #568]	; (8000f6c <lcd_user_display+0x300>)
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff fbef 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff fb3e 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-NUM:");
 8000d44:	498a      	ldr	r1, [pc, #552]	; (8000f70 <lcd_user_display+0x304>)
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff fbe6 	bl	8000518 <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000d4c:	4b89      	ldr	r3, [pc, #548]	; (8000f74 <lcd_user_display+0x308>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d109      	bne.n	8000d68 <lcd_user_display+0xfc>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_NUM - 1, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2108      	movs	r1, #8
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fb31 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*");
 8000d5e:	4986      	ldr	r1, [pc, #536]	; (8000f78 <lcd_user_display+0x30c>)
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff fbd9 	bl	8000518 <CLCD_I2C_WriteString>
 8000d66:	e008      	b.n	8000d7a <lcd_user_display+0x10e>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_NUM - 1, 1);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2108      	movs	r1, #8
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff fb27 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8000d72:	4982      	ldr	r1, [pc, #520]	; (8000f7c <lcd_user_display+0x310>)
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff fbcf 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fb1e 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-PIN: ");
 8000d84:	497e      	ldr	r1, [pc, #504]	; (8000f80 <lcd_user_display+0x314>)
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fbc6 	bl	8000518 <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000d8c:	4b79      	ldr	r3, [pc, #484]	; (8000f74 <lcd_user_display+0x308>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d109      	bne.n	8000da8 <lcd_user_display+0x13c>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_PASS - 1, 2);
 8000d94:	2202      	movs	r2, #2
 8000d96:	2108      	movs	r1, #8
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff fb11 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*****");
 8000d9e:	4979      	ldr	r1, [pc, #484]	; (8000f84 <lcd_user_display+0x318>)
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff fbb9 	bl	8000518 <CLCD_I2C_WriteString>
 8000da6:	e008      	b.n	8000dba <lcd_user_display+0x14e>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_PASS - 1, 2);
 8000da8:	2202      	movs	r2, #2
 8000daa:	2108      	movs	r1, #8
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fb07 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8000db2:	4972      	ldr	r1, [pc, #456]	; (8000f7c <lcd_user_display+0x310>)
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff fbaf 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000dba:	2203      	movs	r2, #3
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fafe 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Exit");
 8000dc4:	4968      	ldr	r1, [pc, #416]	; (8000f68 <lcd_user_display+0x2fc>)
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff fba6 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000dcc:	e1b5      	b.n	800113a <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN_OK)
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d11b      	bne.n	8000e0c <lcd_user_display+0x1a0>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff faf1 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Password OKE!");
 8000dde:	496a      	ldr	r1, [pc, #424]	; (8000f88 <lcd_user_display+0x31c>)
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fb99 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2100      	movs	r1, #0
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fae8 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Wait few ");
 8000df0:	4966      	ldr	r1, [pc, #408]	; (8000f8c <lcd_user_display+0x320>)
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff fb90 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 3, 2);
 8000df8:	2202      	movs	r2, #2
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fadf 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"minutes...");
 8000e02:	4963      	ldr	r1, [pc, #396]	; (8000f90 <lcd_user_display+0x324>)
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff fb87 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000e0a:	e196      	b.n	800113a <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN_FAIL)
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	2b05      	cmp	r3, #5
 8000e10:	d11b      	bne.n	8000e4a <lcd_user_display+0x1de>
		  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fad2 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"Password FAIL!");
 8000e1c:	495d      	ldr	r1, [pc, #372]	; (8000f94 <lcd_user_display+0x328>)
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fb7a 	bl	8000518 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2100      	movs	r1, #0
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fac9 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"\"Enter\" to enter");
 8000e2e:	495a      	ldr	r1, [pc, #360]	; (8000f98 <lcd_user_display+0x32c>)
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fb71 	bl	8000518 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000e36:	2202      	movs	r2, #2
 8000e38:	2104      	movs	r1, #4
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fac0 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"new password :<");
 8000e40:	4956      	ldr	r1, [pc, #344]	; (8000f9c <lcd_user_display+0x330>)
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fb68 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000e48:	e177      	b.n	800113a <lcd_user_display+0x4ce>
		else if(status_display == STATUS_LANGUAGE)
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	2b06      	cmp	r3, #6
 8000e4e:	f040 8174 	bne.w	800113a <lcd_user_display+0x4ce>
			CLCD_I2C_SetCursor(LCD_user, 3, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2103      	movs	r1, #3
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff fab2 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Language");
 8000e5c:	4950      	ldr	r1, [pc, #320]	; (8000fa0 <lcd_user_display+0x334>)
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fb5a 	bl	8000518 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2100      	movs	r1, #0
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff faa9 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 8000e6e:	494d      	ldr	r1, [pc, #308]	; (8000fa4 <lcd_user_display+0x338>)
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fb51 	bl	8000518 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000e76:	2202      	movs	r2, #2
 8000e78:	2100      	movs	r1, #0
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff faa0 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"-English");
 8000e80:	4949      	ldr	r1, [pc, #292]	; (8000fa8 <lcd_user_display+0x33c>)
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff fb48 	bl	8000518 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000e88:	2203      	movs	r2, #3
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff fa97 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"-EXIT");
 8000e92:	4946      	ldr	r1, [pc, #280]	; (8000fac <lcd_user_display+0x340>)
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff fb3f 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000e9a:	e14e      	b.n	800113a <lcd_user_display+0x4ce>
	else if(language == VIETNAMESE)
 8000e9c:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <lcd_user_display+0x2dc>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f040 814a 	bne.w	800113a <lcd_user_display+0x4ce>
		if(status_display == STATUS_BEGIN)
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d124      	bne.n	8000ef6 <lcd_user_display+0x28a>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff fa85 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 8000eb6:	4925      	ldr	r1, [pc, #148]	; (8000f4c <lcd_user_display+0x2e0>)
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff fb2d 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 4, 1);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2104      	movs	r1, #4
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fa7c 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"SV-NV-KH");
 8000ec8:	4921      	ldr	r1, [pc, #132]	; (8000f50 <lcd_user_display+0x2e4>)
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fb24 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fa73 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 8000eda:	491e      	ldr	r1, [pc, #120]	; (8000f54 <lcd_user_display+0x2e8>)
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff fb1b 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 2, 3);
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff fa6a 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Nhan \"Enter\"!");
 8000eec:	4930      	ldr	r1, [pc, #192]	; (8000fb0 <lcd_user_display+0x344>)
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fb12 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000ef4:	e121      	b.n	800113a <lcd_user_display+0x4ce>
		else if(status_display == STATUS_MENU)
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d163      	bne.n	8000fc4 <lcd_user_display+0x358>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fa5d 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Lua chon che do:");
 8000f06:	492b      	ldr	r1, [pc, #172]	; (8000fb4 <lcd_user_display+0x348>)
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff fb05 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2100      	movs	r1, #0
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff fa54 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Ngon ngu");
 8000f18:	4927      	ldr	r1, [pc, #156]	; (8000fb8 <lcd_user_display+0x34c>)
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fafc 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000f20:	2202      	movs	r2, #2
 8000f22:	2100      	movs	r1, #0
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff fa4b 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Nhap ma pin");
 8000f2a:	4924      	ldr	r1, [pc, #144]	; (8000fbc <lcd_user_display+0x350>)
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff faf3 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000f32:	2203      	movs	r2, #3
 8000f34:	2100      	movs	r1, #0
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fa42 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Thoat");
 8000f3c:	4920      	ldr	r1, [pc, #128]	; (8000fc0 <lcd_user_display+0x354>)
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff faea 	bl	8000518 <CLCD_I2C_WriteString>
}
 8000f44:	e0f9      	b.n	800113a <lcd_user_display+0x4ce>
 8000f46:	bf00      	nop
 8000f48:	200001d3 	.word	0x200001d3
 8000f4c:	0800678c 	.word	0x0800678c
 8000f50:	080067a0 	.word	0x080067a0
 8000f54:	080067ac 	.word	0x080067ac
 8000f58:	080067b8 	.word	0x080067b8
 8000f5c:	080067c8 	.word	0x080067c8
 8000f60:	080067d4 	.word	0x080067d4
 8000f64:	080067e0 	.word	0x080067e0
 8000f68:	080067f0 	.word	0x080067f0
 8000f6c:	080067f8 	.word	0x080067f8
 8000f70:	08006808 	.word	0x08006808
 8000f74:	200001d0 	.word	0x200001d0
 8000f78:	08006810 	.word	0x08006810
 8000f7c:	08006814 	.word	0x08006814
 8000f80:	08006818 	.word	0x08006818
 8000f84:	08006820 	.word	0x08006820
 8000f88:	08006828 	.word	0x08006828
 8000f8c:	08006838 	.word	0x08006838
 8000f90:	08006844 	.word	0x08006844
 8000f94:	08006850 	.word	0x08006850
 8000f98:	08006860 	.word	0x08006860
 8000f9c:	08006874 	.word	0x08006874
 8000fa0:	08006884 	.word	0x08006884
 8000fa4:	08006890 	.word	0x08006890
 8000fa8:	0800689c 	.word	0x0800689c
 8000fac:	080068a8 	.word	0x080068a8
 8000fb0:	080068b0 	.word	0x080068b0
 8000fb4:	080068c0 	.word	0x080068c0
 8000fb8:	080068d4 	.word	0x080068d4
 8000fbc:	080068e0 	.word	0x080068e0
 8000fc0:	080068f0 	.word	0x080068f0
		else if(status_display == STATUS_PIN)										//PASSWORD
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d152      	bne.n	8001070 <lcd_user_display+0x404>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff f9f6 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TT benh nhan:");
 8000fd4:	495b      	ldr	r1, [pc, #364]	; (8001144 <lcd_user_display+0x4d8>)
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff fa9e 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2100      	movs	r1, #0
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff f9ed 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-STT:");
 8000fe6:	4958      	ldr	r1, [pc, #352]	; (8001148 <lcd_user_display+0x4dc>)
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff fa95 	bl	8000518 <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000fee:	4b57      	ldr	r3, [pc, #348]	; (800114c <lcd_user_display+0x4e0>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d109      	bne.n	800100a <lcd_user_display+0x39e>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_NUM - 1, 1);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff f9e0 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*");
 8001000:	4953      	ldr	r1, [pc, #332]	; (8001150 <lcd_user_display+0x4e4>)
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fa88 	bl	8000518 <CLCD_I2C_WriteString>
 8001008:	e008      	b.n	800101c <lcd_user_display+0x3b0>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_NUM - 1, 1);
 800100a:	2201      	movs	r2, #1
 800100c:	2108      	movs	r1, #8
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff f9d6 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8001014:	494f      	ldr	r1, [pc, #316]	; (8001154 <lcd_user_display+0x4e8>)
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff fa7e 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 800101c:	2202      	movs	r2, #2
 800101e:	2100      	movs	r1, #0
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff f9cd 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-PIN: ");
 8001026:	494c      	ldr	r1, [pc, #304]	; (8001158 <lcd_user_display+0x4ec>)
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fa75 	bl	8000518 <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 800102e:	4b47      	ldr	r3, [pc, #284]	; (800114c <lcd_user_display+0x4e0>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d109      	bne.n	800104a <lcd_user_display+0x3de>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_PASS - 1, 2);
 8001036:	2202      	movs	r2, #2
 8001038:	2108      	movs	r1, #8
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff f9c0 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*****");
 8001040:	4946      	ldr	r1, [pc, #280]	; (800115c <lcd_user_display+0x4f0>)
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fa68 	bl	8000518 <CLCD_I2C_WriteString>
 8001048:	e008      	b.n	800105c <lcd_user_display+0x3f0>
				CLCD_I2C_SetCursor(LCD_user, ROW_BEGIN_KEPAD_PASS - 1, 2);
 800104a:	2202      	movs	r2, #2
 800104c:	2108      	movs	r1, #8
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff f9b6 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8001054:	493f      	ldr	r1, [pc, #252]	; (8001154 <lcd_user_display+0x4e8>)
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fa5e 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 800105c:	2203      	movs	r2, #3
 800105e:	2100      	movs	r1, #0
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff f9ad 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Thoat");
 8001066:	493e      	ldr	r1, [pc, #248]	; (8001160 <lcd_user_display+0x4f4>)
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff fa55 	bl	8000518 <CLCD_I2C_WriteString>
}
 800106e:	e064      	b.n	800113a <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN_OK)
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	2b04      	cmp	r3, #4
 8001074:	d11b      	bne.n	80010ae <lcd_user_display+0x442>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff f9a0 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"PIN OKE!");
 8001080:	4938      	ldr	r1, [pc, #224]	; (8001164 <lcd_user_display+0x4f8>)
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff fa48 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	2100      	movs	r1, #0
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff f997 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Cho");
 8001092:	4935      	ldr	r1, [pc, #212]	; (8001168 <lcd_user_display+0x4fc>)
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff fa3f 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 3, 2);
 800109a:	2202      	movs	r2, #2
 800109c:	2103      	movs	r1, #3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff f98e 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"1 phut...");
 80010a4:	4931      	ldr	r1, [pc, #196]	; (800116c <lcd_user_display+0x500>)
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fa36 	bl	8000518 <CLCD_I2C_WriteString>
}
 80010ac:	e045      	b.n	800113a <lcd_user_display+0x4ce>
		else if(status_display == STATUS_PIN_FAIL)
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	2b05      	cmp	r3, #5
 80010b2:	d11b      	bne.n	80010ec <lcd_user_display+0x480>
		  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff f981 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"PIN sai!");
 80010be:	492c      	ldr	r1, [pc, #176]	; (8001170 <lcd_user_display+0x504>)
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff fa29 	bl	8000518 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2100      	movs	r1, #0
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff f978 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"\"Nhap\" de nhap");
 80010d0:	4928      	ldr	r1, [pc, #160]	; (8001174 <lcd_user_display+0x508>)
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fa20 	bl	8000518 <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 80010d8:	2202      	movs	r2, #2
 80010da:	2104      	movs	r1, #4
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff f96f 	bl	80003c0 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"PIN moi :<");
 80010e2:	4925      	ldr	r1, [pc, #148]	; (8001178 <lcd_user_display+0x50c>)
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff fa17 	bl	8000518 <CLCD_I2C_WriteString>
}
 80010ea:	e026      	b.n	800113a <lcd_user_display+0x4ce>
		else if(status_display == STATUS_LANGUAGE)
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d123      	bne.n	800113a <lcd_user_display+0x4ce>
			CLCD_I2C_SetCursor(LCD_user, 3, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2103      	movs	r1, #3
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff f962 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Ngon ngu");
 80010fc:	491f      	ldr	r1, [pc, #124]	; (800117c <lcd_user_display+0x510>)
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fa0a 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	2100      	movs	r1, #0
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff f959 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 800110e:	491c      	ldr	r1, [pc, #112]	; (8001180 <lcd_user_display+0x514>)
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fa01 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8001116:	2202      	movs	r2, #2
 8001118:	2100      	movs	r1, #0
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff f950 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-English");
 8001120:	4918      	ldr	r1, [pc, #96]	; (8001184 <lcd_user_display+0x518>)
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff f9f8 	bl	8000518 <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8001128:	2203      	movs	r2, #3
 800112a:	2100      	movs	r1, #0
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff f947 	bl	80003c0 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-EXIT");
 8001132:	4915      	ldr	r1, [pc, #84]	; (8001188 <lcd_user_display+0x51c>)
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff f9ef 	bl	8000518 <CLCD_I2C_WriteString>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	080068f8 	.word	0x080068f8
 8001148:	08006908 	.word	0x08006908
 800114c:	200001d0 	.word	0x200001d0
 8001150:	08006810 	.word	0x08006810
 8001154:	08006814 	.word	0x08006814
 8001158:	08006818 	.word	0x08006818
 800115c:	08006820 	.word	0x08006820
 8001160:	080068f0 	.word	0x080068f0
 8001164:	08006910 	.word	0x08006910
 8001168:	0800691c 	.word	0x0800691c
 800116c:	08006920 	.word	0x08006920
 8001170:	0800692c 	.word	0x0800692c
 8001174:	08006938 	.word	0x08006938
 8001178:	08006948 	.word	0x08006948
 800117c:	08006954 	.word	0x08006954
 8001180:	08006890 	.word	0x08006890
 8001184:	0800689c 	.word	0x0800689c
 8001188:	080068a8 	.word	0x080068a8

0800118c <lcd_system_handler>:


//************************** High Level Function ****************************************************************//
void lcd_system_handler(CLCD_I2C_Name* LCD_user)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	if(delete)
 8001194:	4b7c      	ldr	r3, [pc, #496]	; (8001388 <lcd_system_handler+0x1fc>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <lcd_system_handler+0x1c>
	{
		CLCD_I2C_Clear(LCD_user);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff fa21 	bl	80005e4 <CLCD_I2C_Clear>
		delete = 0;
 80011a2:	4b79      	ldr	r3, [pc, #484]	; (8001388 <lcd_system_handler+0x1fc>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	}
	if(Mode == 0)												//Begin
 80011a8:	4b78      	ldr	r3, [pc, #480]	; (800138c <lcd_system_handler+0x200>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d112      	bne.n	80011d8 <lcd_system_handler+0x4c>
	{
		Config = CONFIG_ROW0;
 80011b2:	4b77      	ldr	r3, [pc, #476]	; (8001390 <lcd_system_handler+0x204>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
		Enter = 0;
 80011b8:	4b76      	ldr	r3, [pc, #472]	; (8001394 <lcd_system_handler+0x208>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
		Status_Display = STATUS_BEGIN;
 80011be:	4b76      	ldr	r3, [pc, #472]	; (8001398 <lcd_system_handler+0x20c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
		lcd_user_display(LCD_user, Status_Display);
 80011c4:	4b74      	ldr	r3, [pc, #464]	; (8001398 <lcd_system_handler+0x20c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff fd4e 	bl	8000c6c <lcd_user_display>
		Index_mode = INDEX_MODE_MENU;
 80011d0:	4b72      	ldr	r3, [pc, #456]	; (800139c <lcd_system_handler+0x210>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
                Status_Display = STATUS_PIN;
                delete = 1;
            }
		}
	}/*END if(Mode == 1)*/
}
 80011d6:	e18d      	b.n	80014f4 <lcd_system_handler+0x368>
	else if(Mode == 1)
 80011d8:	4b6c      	ldr	r3, [pc, #432]	; (800138c <lcd_system_handler+0x200>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	f040 8188 	bne.w	80014f4 <lcd_system_handler+0x368>
		if(Index_mode == INDEX_MODE_MENU)						//  Select modes
 80011e4:	4b6d      	ldr	r3, [pc, #436]	; (800139c <lcd_system_handler+0x210>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d165      	bne.n	80012b8 <lcd_system_handler+0x12c>
			if (flag_button)
 80011ec:	4b6c      	ldr	r3, [pc, #432]	; (80013a0 <lcd_system_handler+0x214>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <lcd_system_handler+0x76>
				CLCD_I2C_Clear(LCD_user);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff f9f4 	bl	80005e4 <CLCD_I2C_Clear>
				flag_button = 0;
 80011fc:	4b68      	ldr	r3, [pc, #416]	; (80013a0 <lcd_system_handler+0x214>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
			Status_Display = STATUS_MENU;
 8001202:	4b65      	ldr	r3, [pc, #404]	; (8001398 <lcd_system_handler+0x20c>)
 8001204:	2202      	movs	r2, #2
 8001206:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_ROW0)
 8001208:	4b61      	ldr	r3, [pc, #388]	; (8001390 <lcd_system_handler+0x204>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b25b      	sxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d045      	beq.n	800129e <lcd_system_handler+0x112>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8001212:	4b5f      	ldr	r3, [pc, #380]	; (8001390 <lcd_system_handler+0x204>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b25b      	sxtb	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	210f      	movs	r1, #15
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff f8ce 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8001224:	495f      	ldr	r1, [pc, #380]	; (80013a4 <lcd_system_handler+0x218>)
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff f976 	bl	8000518 <CLCD_I2C_WriteString>
				if(Enter)
 800122c:	4b59      	ldr	r3, [pc, #356]	; (8001394 <lcd_system_handler+0x208>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d039      	beq.n	80012aa <lcd_system_handler+0x11e>
					Enter = 0;
 8001236:	4b57      	ldr	r3, [pc, #348]	; (8001394 <lcd_system_handler+0x208>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 800123c:	4b54      	ldr	r3, [pc, #336]	; (8001390 <lcd_system_handler+0x204>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b25b      	sxtb	r3, r3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d108      	bne.n	8001258 <lcd_system_handler+0xcc>
                        Index_mode = INDEX_MODE_LANGUAGE;
 8001246:	4b55      	ldr	r3, [pc, #340]	; (800139c <lcd_system_handler+0x210>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 800124c:	4b50      	ldr	r3, [pc, #320]	; (8001390 <lcd_system_handler+0x204>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8001252:	4b4d      	ldr	r3, [pc, #308]	; (8001388 <lcd_system_handler+0x1fc>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 8001258:	4b4d      	ldr	r3, [pc, #308]	; (8001390 <lcd_system_handler+0x204>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b25b      	sxtb	r3, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d108      	bne.n	8001274 <lcd_system_handler+0xe8>
                        Index_mode = INDEX_MODE_PIN;
 8001262:	4b4e      	ldr	r3, [pc, #312]	; (800139c <lcd_system_handler+0x210>)
 8001264:	2202      	movs	r2, #2
 8001266:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8001268:	4b49      	ldr	r3, [pc, #292]	; (8001390 <lcd_system_handler+0x204>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 800126e:	4b46      	ldr	r3, [pc, #280]	; (8001388 <lcd_system_handler+0x1fc>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8001274:	4b46      	ldr	r3, [pc, #280]	; (8001390 <lcd_system_handler+0x204>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b25b      	sxtb	r3, r3
 800127a:	2b03      	cmp	r3, #3
 800127c:	d115      	bne.n	80012aa <lcd_system_handler+0x11e>
                        Index_mode = INDEX_MODE_LANGUAGE;
 800127e:	4b47      	ldr	r3, [pc, #284]	; (800139c <lcd_system_handler+0x210>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
                        Mode = 0;
 8001284:	4b41      	ldr	r3, [pc, #260]	; (800138c <lcd_system_handler+0x200>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW0;
 800128a:	4b41      	ldr	r3, [pc, #260]	; (8001390 <lcd_system_handler+0x204>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_BEGIN;
 8001290:	4b41      	ldr	r3, [pc, #260]	; (8001398 <lcd_system_handler+0x20c>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8001296:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <lcd_system_handler+0x1fc>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	e005      	b.n	80012aa <lcd_system_handler+0x11e>
				Config = CONFIG_ROW1;
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <lcd_system_handler+0x204>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 80012a4:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <lcd_system_handler+0x208>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 80012aa:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <lcd_system_handler+0x20c>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4619      	mov	r1, r3
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fcdb 	bl	8000c6c <lcd_user_display>
}
 80012b6:	e11d      	b.n	80014f4 <lcd_system_handler+0x368>
		else if(INDEX_MODE_LANGUAGE == Index_mode)					// Languge
 80012b8:	4b38      	ldr	r3, [pc, #224]	; (800139c <lcd_system_handler+0x210>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d175      	bne.n	80013ac <lcd_system_handler+0x220>
			Status_Display = STATUS_LANGUAGE;
 80012c0:	4b35      	ldr	r3, [pc, #212]	; (8001398 <lcd_system_handler+0x20c>)
 80012c2:	2206      	movs	r2, #6
 80012c4:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 80012c6:	4b34      	ldr	r3, [pc, #208]	; (8001398 <lcd_system_handler+0x20c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fccd 	bl	8000c6c <lcd_user_display>
			if (flag_button)
 80012d2:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <lcd_system_handler+0x214>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <lcd_system_handler+0x15c>
				CLCD_I2C_Clear(LCD_user);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff f981 	bl	80005e4 <CLCD_I2C_Clear>
				flag_button = 0;
 80012e2:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <lcd_system_handler+0x214>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_ROW0)
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <lcd_system_handler+0x204>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d03c      	beq.n	800136c <lcd_system_handler+0x1e0>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 80012f2:	4b27      	ldr	r3, [pc, #156]	; (8001390 <lcd_system_handler+0x204>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	210f      	movs	r1, #15
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff f85e 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8001304:	4927      	ldr	r1, [pc, #156]	; (80013a4 <lcd_system_handler+0x218>)
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff f906 	bl	8000518 <CLCD_I2C_WriteString>
				if(Enter)
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <lcd_system_handler+0x208>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d030      	beq.n	8001378 <lcd_system_handler+0x1ec>
					Enter = 0;
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <lcd_system_handler+0x208>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <lcd_system_handler+0x204>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b25b      	sxtb	r3, r3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d105      	bne.n	8001332 <lcd_system_handler+0x1a6>
						language = VIETNAMESE;
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <lcd_system_handler+0x21c>)
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <lcd_system_handler+0x204>)
 800132e:	2203      	movs	r2, #3
 8001330:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <lcd_system_handler+0x204>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b25b      	sxtb	r3, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d105      	bne.n	8001348 <lcd_system_handler+0x1bc>
						language = ENGLISH;
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <lcd_system_handler+0x21c>)
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <lcd_system_handler+0x204>)
 8001344:	2203      	movs	r2, #3
 8001346:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <lcd_system_handler+0x204>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b25b      	sxtb	r3, r3
 800134e:	2b03      	cmp	r3, #3
 8001350:	d112      	bne.n	8001378 <lcd_system_handler+0x1ec>
                        Index_mode = INDEX_MODE_MENU;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <lcd_system_handler+0x210>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW0;
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <lcd_system_handler+0x204>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_MENU;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <lcd_system_handler+0x20c>)
 8001360:	2202      	movs	r2, #2
 8001362:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <lcd_system_handler+0x1fc>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
 800136a:	e005      	b.n	8001378 <lcd_system_handler+0x1ec>
				Config = CONFIG_ROW1;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <lcd_system_handler+0x204>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <lcd_system_handler+0x208>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <lcd_system_handler+0x20c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fc74 	bl	8000c6c <lcd_user_display>
}
 8001384:	e0b6      	b.n	80014f4 <lcd_system_handler+0x368>
 8001386:	bf00      	nop
 8001388:	200001d4 	.word	0x200001d4
 800138c:	200001cd 	.word	0x200001cd
 8001390:	200000ac 	.word	0x200000ac
 8001394:	200001ce 	.word	0x200001ce
 8001398:	200001d2 	.word	0x200001d2
 800139c:	200001d1 	.word	0x200001d1
 80013a0:	200001cf 	.word	0x200001cf
 80013a4:	08006960 	.word	0x08006960
 80013a8:	200001d3 	.word	0x200001d3
		else if(INDEX_MODE_PIN == Index_mode)						// Enter Password
 80013ac:	4b53      	ldr	r3, [pc, #332]	; (80014fc <lcd_system_handler+0x370>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d15c      	bne.n	800146e <lcd_system_handler+0x2e2>
			Status_Display = STATUS_PIN;
 80013b4:	4b52      	ldr	r3, [pc, #328]	; (8001500 <lcd_system_handler+0x374>)
 80013b6:	2203      	movs	r2, #3
 80013b8:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 80013ba:	4b51      	ldr	r3, [pc, #324]	; (8001500 <lcd_system_handler+0x374>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4619      	mov	r1, r3
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff fc53 	bl	8000c6c <lcd_user_display>
			if (flag_button)
 80013c6:	4b4f      	ldr	r3, [pc, #316]	; (8001504 <lcd_system_handler+0x378>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <lcd_system_handler+0x250>
				CLCD_I2C_Clear(LCD_user);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff f907 	bl	80005e4 <CLCD_I2C_Clear>
				flag_button = 0;
 80013d6:	4b4b      	ldr	r3, [pc, #300]	; (8001504 <lcd_system_handler+0x378>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_ROW0)
 80013dc:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <lcd_system_handler+0x37c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d036      	beq.n	8001454 <lcd_system_handler+0x2c8>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 80013e6:	4b48      	ldr	r3, [pc, #288]	; (8001508 <lcd_system_handler+0x37c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	210f      	movs	r1, #15
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7fe ffe4 	bl	80003c0 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 80013f8:	4944      	ldr	r1, [pc, #272]	; (800150c <lcd_system_handler+0x380>)
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff f88c 	bl	8000518 <CLCD_I2C_WriteString>
				if(Enter)
 8001400:	4b43      	ldr	r3, [pc, #268]	; (8001510 <lcd_system_handler+0x384>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d02a      	beq.n	8001460 <lcd_system_handler+0x2d4>
					Enter = 0;
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <lcd_system_handler+0x384>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)	// Nhap so thu tu
 8001410:	4b3d      	ldr	r3, [pc, #244]	; (8001508 <lcd_system_handler+0x37c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b25b      	sxtb	r3, r3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d102      	bne.n	8001420 <lcd_system_handler+0x294>
						enter_num_pass.signal_enter_num = PROCESSING;
 800141a:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <lcd_system_handler+0x388>)
 800141c:	2200      	movs	r2, #0
 800141e:	705a      	strb	r2, [r3, #1]
					if(Config == CONFIG_ROW2)	// Nhap pass
 8001420:	4b39      	ldr	r3, [pc, #228]	; (8001508 <lcd_system_handler+0x37c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b25b      	sxtb	r3, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d102      	bne.n	8001430 <lcd_system_handler+0x2a4>
						enter_num_pass.signal_enter_pass = PROCESSING;
 800142a:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <lcd_system_handler+0x388>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <lcd_system_handler+0x37c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b25b      	sxtb	r3, r3
 8001436:	2b03      	cmp	r3, #3
 8001438:	d112      	bne.n	8001460 <lcd_system_handler+0x2d4>
						Index_mode = INDEX_MODE_MENU;
 800143a:	4b30      	ldr	r3, [pc, #192]	; (80014fc <lcd_system_handler+0x370>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW0;
 8001440:	4b31      	ldr	r3, [pc, #196]	; (8001508 <lcd_system_handler+0x37c>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
						Status_Display = STATUS_MENU;
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <lcd_system_handler+0x374>)
 8001448:	2202      	movs	r2, #2
 800144a:	701a      	strb	r2, [r3, #0]
						delete = 1;
 800144c:	4b32      	ldr	r3, [pc, #200]	; (8001518 <lcd_system_handler+0x38c>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	e005      	b.n	8001460 <lcd_system_handler+0x2d4>
				Config = CONFIG_ROW1;
 8001454:	4b2c      	ldr	r3, [pc, #176]	; (8001508 <lcd_system_handler+0x37c>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <lcd_system_handler+0x384>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <lcd_system_handler+0x374>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fc00 	bl	8000c6c <lcd_user_display>
}
 800146c:	e042      	b.n	80014f4 <lcd_system_handler+0x368>
		else if(INDEX_MODE_OKE_PASS == Index_mode)					// Pass oke
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <lcd_system_handler+0x370>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d11d      	bne.n	80014b2 <lcd_system_handler+0x326>
			Status_Display = STATUS_PIN_OK;
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <lcd_system_handler+0x374>)
 8001478:	2204      	movs	r2, #4
 800147a:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <lcd_system_handler+0x374>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fbf2 	bl	8000c6c <lcd_user_display>
			if(Enter)
 8001488:	4b21      	ldr	r3, [pc, #132]	; (8001510 <lcd_system_handler+0x384>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d030      	beq.n	80014f4 <lcd_system_handler+0x368>
				Enter = 0;
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <lcd_system_handler+0x384>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
                Index_mode = INDEX_MODE_MENU;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <lcd_system_handler+0x370>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
                Config = CONFIG_ROW0;
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <lcd_system_handler+0x37c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
                Status_Display = STATUS_MENU;
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <lcd_system_handler+0x374>)
 80014a6:	2202      	movs	r2, #2
 80014a8:	701a      	strb	r2, [r3, #0]
                delete = 1;
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <lcd_system_handler+0x38c>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
}
 80014b0:	e020      	b.n	80014f4 <lcd_system_handler+0x368>
		else if(INDEX_MODE_NO_OKE_PASS == Index_mode)				// Pass fail
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <lcd_system_handler+0x370>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d11c      	bne.n	80014f4 <lcd_system_handler+0x368>
			Status_Display = STATUS_PIN_FAIL;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <lcd_system_handler+0x374>)
 80014bc:	2205      	movs	r2, #5
 80014be:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <lcd_system_handler+0x374>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fbd0 	bl	8000c6c <lcd_user_display>
			if(Enter)
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <lcd_system_handler+0x384>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00e      	beq.n	80014f4 <lcd_system_handler+0x368>
				Enter = 0;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <lcd_system_handler+0x384>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
                Index_mode = INDEX_MODE_PIN;
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <lcd_system_handler+0x370>)
 80014de:	2202      	movs	r2, #2
 80014e0:	701a      	strb	r2, [r3, #0]
                Config = CONFIG_ROW0;
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <lcd_system_handler+0x37c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
                Status_Display = STATUS_PIN;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <lcd_system_handler+0x374>)
 80014ea:	2203      	movs	r2, #3
 80014ec:	701a      	strb	r2, [r3, #0]
                delete = 1;
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <lcd_system_handler+0x38c>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200001d1 	.word	0x200001d1
 8001500:	200001d2 	.word	0x200001d2
 8001504:	200001cf 	.word	0x200001cf
 8001508:	200000ac 	.word	0x200000ac
 800150c:	08006960 	.word	0x08006960
 8001510:	200001ce 	.word	0x200001ce
 8001514:	200000b0 	.word	0x200000b0
 8001518:	200001d4 	.word	0x200001d4

0800151c <response>:
    -uint8_t * string								: chu truyen di (OKE, FAIL dai loai)
  +) RETURN:
    -
*/
static void response(char *string)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&Lib_uart, (uint8_t *) string, strlen(string), 1000);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7fe fe11 	bl	800014c <strlen>
 800152a:	4603      	mov	r3, r0
 800152c:	b29a      	uxth	r2, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <response+0x28>)
 8001536:	f003 f875 	bl	8004624 <HAL_UART_Transmit>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200001d8 	.word	0x200001d8

08001548 <UART_Check_string>:
  +) RETURN:
    -bool											: true
    												  false
*/
static bool UART_Check_string(uint8_t * rxBuffer)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	if(strstr((char*)rxBuffer, confirm_NUM_PIN) != NULL)
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <UART_Check_string+0x28>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f003 feec 	bl	8005334 <strstr>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <UART_Check_string+0x1e>
	{
		return true;
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <UART_Check_string+0x20>
	}
	else
	{
		return false;
 8001566:	2300      	movs	r3, #0
	}
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200000b4 	.word	0x200000b4

08001574 <UART_SetNUM_PIN>:
    -uint8_t * rxBuffer								: value frome EXTI uart
  +) RETURN:
    -void
*/
static void UART_SetNUM_PIN(uint8_t * rxBuffer)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	char response_string[20] = {0};
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
   /* Kiểm tra độ dài của command "*NUM-PIN:x,abcde\n\r"*/
   if(strlen((char*)rxBuffer) == 17)
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7fe fddc 	bl	800014c <strlen>
 8001594:	4603      	mov	r3, r0
 8001596:	2b11      	cmp	r3, #17
 8001598:	d130      	bne.n	80015fc <UART_SetNUM_PIN+0x88>
   {
      /*Tách NUM thiết bị */
      char *token = NULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
      token = strtok((char*)rxBuffer, ":"); //*NUM-PIN:
 800159e:	491b      	ldr	r1, [pc, #108]	; (800160c <UART_SetNUM_PIN+0x98>)
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f003 fedd 	bl	8005360 <strtok>
 80015a6:	61f8      	str	r0, [r7, #28]
      token = strtok(NULL, ","); //x
 80015a8:	4919      	ldr	r1, [pc, #100]	; (8001610 <UART_SetNUM_PIN+0x9c>)
 80015aa:	2000      	movs	r0, #0
 80015ac:	f003 fed8 	bl	8005360 <strtok>
 80015b0:	61f8      	str	r0, [r7, #28]
      num = *token - 48; //num = x
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	3b30      	subs	r3, #48	; 0x30
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <UART_SetNUM_PIN+0xa0>)
 80015bc:	701a      	strb	r2, [r3, #0]


      /*Tách PIN thiết bị */
      token = strtok(NULL, "\n"); //abcde
 80015be:	4916      	ldr	r1, [pc, #88]	; (8001618 <UART_SetNUM_PIN+0xa4>)
 80015c0:	2000      	movs	r0, #0
 80015c2:	f003 fecd 	bl	8005360 <strtok>
 80015c6:	61f8      	str	r0, [r7, #28]
      memcpy(pin, token, 5); //pin = "abcde";
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <UART_SetNUM_PIN+0xa8>)
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	6810      	ldr	r0, [r2, #0]
 80015ce:	6018      	str	r0, [r3, #0]
 80015d0:	7912      	ldrb	r2, [r2, #4]
 80015d2:	711a      	strb	r2, [r3, #4]

      token = NULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]

//      sprintf(response_string, "num: %d, pin: %c%c%c%c%c", num, pin[0], pin[1], pin[2], pin[3], pin[4]);
      sprintf(response_string, "num: %d, pin: %s", num, pin);
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <UART_SetNUM_PIN+0xa0>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	f107 0008 	add.w	r0, r7, #8
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <UART_SetNUM_PIN+0xa8>)
 80015e4:	490e      	ldr	r1, [pc, #56]	; (8001620 <UART_SetNUM_PIN+0xac>)
 80015e6:	f003 fe85 	bl	80052f4 <siprintf>
      response(response_string);
 80015ea:	f107 0308 	add.w	r3, r7, #8
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff94 	bl	800151c <response>
      response("\r\n+OK\r\n ");
 80015f4:	480b      	ldr	r0, [pc, #44]	; (8001624 <UART_SetNUM_PIN+0xb0>)
 80015f6:	f7ff ff91 	bl	800151c <response>
   }
   else
   {
      response("\r\n+ERROR:error command\r\n");
   }
}
 80015fa:	e002      	b.n	8001602 <UART_SetNUM_PIN+0x8e>
      response("\r\n+ERROR:error command\r\n");
 80015fc:	480a      	ldr	r0, [pc, #40]	; (8001628 <UART_SetNUM_PIN+0xb4>)
 80015fe:	f7ff ff8d 	bl	800151c <response>
}
 8001602:	bf00      	nop
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	08006970 	.word	0x08006970
 8001610:	08006974 	.word	0x08006974
 8001614:	20000220 	.word	0x20000220
 8001618:	08006978 	.word	0x08006978
 800161c:	20000224 	.word	0x20000224
 8001620:	0800697c 	.word	0x0800697c
 8001624:	08006990 	.word	0x08006990
 8001628:	0800699c 	.word	0x0800699c

0800162c <UART_Assign_password>:
    -uint8_t * rxBuffer								: value frome EXTI uart
  +) RETURN:
    -void
*/
static void UART_Assign_password()
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i <= sizeof(jagged_pass[num - 1]); i++)
 8001632:	2300      	movs	r3, #0
 8001634:	71fb      	strb	r3, [r7, #7]
 8001636:	e00e      	b.n	8001656 <UART_Assign_password+0x2a>
	{
		*(jagged_pass[num - 1] + i) = pin[i];
 8001638:	79fa      	ldrb	r2, [r7, #7]
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <UART_Assign_password+0x3c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	3b01      	subs	r3, #1
 8001640:	490a      	ldr	r1, [pc, #40]	; (800166c <UART_Assign_password+0x40>)
 8001642:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	440b      	add	r3, r1
 800164a:	4909      	ldr	r1, [pc, #36]	; (8001670 <UART_Assign_password+0x44>)
 800164c:	5c8a      	ldrb	r2, [r1, r2]
 800164e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i <= sizeof(jagged_pass[num - 1]); i++)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	3301      	adds	r3, #1
 8001654:	71fb      	strb	r3, [r7, #7]
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b04      	cmp	r3, #4
 800165a:	d9ed      	bls.n	8001638 <UART_Assign_password+0xc>
	}
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	20000220 	.word	0x20000220
 800166c:	20000090 	.word	0x20000090
 8001670:	20000224 	.word	0x20000224

08001674 <UART_Init_UART>:


//************************** High Level Function ****************************************************************//

void UART_Init_UART(UART_HandleTypeDef *huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	Lib_uart = *huart;
 800167c:	4a05      	ldr	r2, [pc, #20]	; (8001694 <UART_Init_UART+0x20>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	2348      	movs	r3, #72	; 0x48
 8001686:	461a      	mov	r2, r3
 8001688:	f003 fe1e 	bl	80052c8 <memcpy>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200001d8 	.word	0x200001d8

08001698 <UART_handler>:



STATE_TX_PIN UART_handler(uint8_t * rxBuffer, char* NUM, char* PIN)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
	if(UART_Check_string(rxBuffer) == true)	// Kiem tra chuoi
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f7ff ff4f 	bl	8001548 <UART_Check_string>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d01a      	beq.n	80016e6 <UART_handler+0x4e>
	{
		UART_SetNUM_PIN(rxBuffer);			// Gan vao val "pin" voi num tuong ung
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff ff5f 	bl	8001574 <UART_SetNUM_PIN>

		UART_Assign_password();				// Gan vao Array extern ben handler_keyIN.h
 80016b6:	f7ff ffb9 	bl	800162c <UART_Assign_password>

		//Lay lai gia tri num va pin
		*NUM = num;
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <UART_handler+0x58>)
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i <= sizeof(PIN); i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	75fb      	strb	r3, [r7, #23]
 80016c6:	e009      	b.n	80016dc <UART_handler+0x44>
		{
			PIN[i] = pin[i];
 80016c8:	7dfa      	ldrb	r2, [r7, #23]
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	440b      	add	r3, r1
 80016d0:	4908      	ldr	r1, [pc, #32]	; (80016f4 <UART_handler+0x5c>)
 80016d2:	5c8a      	ldrb	r2, [r1, r2]
 80016d4:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i <= sizeof(PIN); i++)
 80016d6:	7dfb      	ldrb	r3, [r7, #23]
 80016d8:	3301      	adds	r3, #1
 80016da:	75fb      	strb	r3, [r7, #23]
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d9f2      	bls.n	80016c8 <UART_handler+0x30>
		}

		return UART_HANDLER_OKE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <UART_handler+0x50>
	}
	else
	{
		return UART_HANDLER_ERROR;
 80016e6:	2301      	movs	r3, #1
	}
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000220 	.word	0x20000220
 80016f4:	20000224 	.word	0x20000224

080016f8 <HAL_GPIO_EXTI_Callback>:
uint8_t rxBuffer[20]={0};
volatile uint8_t rxBufferIndex = 0;
volatile uint8_t flag_rx_done = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
	static uint32_t TimeBegin = 0;
	static uint32_t TimeNow = 0;
/*CODE ISR*/
	/*flag keypad*/
	if(((R1_IN_Pin == GPIO_Pin) | (R2_IN_Pin == GPIO_Pin) | (R3_IN_Pin == GPIO_Pin) | (R4_IN_Pin == GPIO_Pin)) && (state_button == KEYPAD))
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001708:	bf0c      	ite	eq
 800170a:	2301      	moveq	r3, #1
 800170c:	2300      	movne	r3, #0
 800170e:	b2da      	uxtb	r2, r3
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001716:	bf0c      	ite	eq
 8001718:	2301      	moveq	r3, #1
 800171a:	2300      	movne	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800172a:	bf0c      	ite	eq
 800172c:	2301      	moveq	r3, #1
 800172e:	2300      	movne	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	88fa      	ldrh	r2, [r7, #6]
 8001736:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800173a:	bf0c      	ite	eq
 800173c:	2201      	moveq	r2, #1
 800173e:	2200      	movne	r2, #0
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	4313      	orrs	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00e      	beq.n	8001766 <HAL_GPIO_EXTI_Callback+0x6e>
 8001748:	4b53      	ldr	r3, [pc, #332]	; (8001898 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10a      	bne.n	8001766 <HAL_GPIO_EXTI_Callback+0x6e>
	{
		flag_keypad = 1;
 8001750:	4b52      	ldr	r3, [pc, #328]	; (800189c <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
		key = KEYPAD_Handler(&COL_KEY_PAD_main, &ROW_KEY_PAD_main);
 8001756:	4952      	ldr	r1, [pc, #328]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001758:	4852      	ldr	r0, [pc, #328]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x1ac>)
 800175a:	f7ff f89f 	bl	800089c <KEYPAD_Handler>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	4b51      	ldr	r3, [pc, #324]	; (80018a8 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001764:	701a      	strb	r2, [r3, #0]
	}
	/*flag lcd*/
	if(state_button == BUTTON)
 8001766:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d13b      	bne.n	80017e6 <HAL_GPIO_EXTI_Callback+0xee>
	{
		flag_button = 1;
 800176e:	4b4f      	ldr	r3, [pc, #316]	; (80018ac <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
		if(UP_EXTI_3_Pin == GPIO_Pin)
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	2b08      	cmp	r3, #8
 8001778:	d111      	bne.n	800179e <HAL_GPIO_EXTI_Callback+0xa6>
		{
			Config++;
 800177a:	4b4d      	ldr	r3, [pc, #308]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b25b      	sxtb	r3, r3
 8001780:	b2db      	uxtb	r3, r3
 8001782:	3301      	adds	r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	b25a      	sxtb	r2, r3
 8001788:	4b49      	ldr	r3, [pc, #292]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800178a:	701a      	strb	r2, [r3, #0]
			if(Config > CONFIG_ROW3) Config = CONFIG_ROW1;
 800178c:	4b48      	ldr	r3, [pc, #288]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	2b03      	cmp	r3, #3
 8001794:	dd27      	ble.n	80017e6 <HAL_GPIO_EXTI_Callback+0xee>
 8001796:	4b46      	ldr	r3, [pc, #280]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
 800179c:	e023      	b.n	80017e6 <HAL_GPIO_EXTI_Callback+0xee>
		}
		else if(DOWN_EXTI_4_Pin == GPIO_Pin)
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	2b10      	cmp	r3, #16
 80017a2:	d111      	bne.n	80017c8 <HAL_GPIO_EXTI_Callback+0xd0>
		{
			Config--;
 80017a4:	4b42      	ldr	r3, [pc, #264]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	b25a      	sxtb	r2, r3
 80017b2:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80017b4:	701a      	strb	r2, [r3, #0]
			if(Config < CONFIG_ROW1) Config = CONFIG_ROW3;
 80017b6:	4b3e      	ldr	r3, [pc, #248]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	dc12      	bgt.n	80017e6 <HAL_GPIO_EXTI_Callback+0xee>
 80017c0:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80017c2:	2203      	movs	r2, #3
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	e00e      	b.n	80017e6 <HAL_GPIO_EXTI_Callback+0xee>
		}
		else if(ENTER_EXTI_5_Pin == GPIO_Pin)
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	2b20      	cmp	r3, #32
 80017cc:	d10b      	bne.n	80017e6 <HAL_GPIO_EXTI_Callback+0xee>
		{
			if(1 == Mode)
 80017ce:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d103      	bne.n	80017e0 <HAL_GPIO_EXTI_Callback+0xe8>
			{
				Enter = 1;
 80017d8:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
 80017de:	e002      	b.n	80017e6 <HAL_GPIO_EXTI_Callback+0xee>
			}
			else
			{
				Mode = 1;
 80017e0:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	/*END CODE ISR*/

	HAL_Delay(20);
 80017e6:	2014      	movs	r0, #20
 80017e8:	f000 fd7c 	bl	80022e4 <HAL_Delay>
	TimeBegin = HAL_GetTick();
 80017ec:	f000 fd70 	bl	80022d0 <HAL_GetTick>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4a32      	ldr	r2, [pc, #200]	; (80018bc <HAL_GPIO_EXTI_Callback+0x1c4>)
 80017f4:	6013      	str	r3, [r2, #0]
	while(		HAL_GPIO_ReadPin(GPIOB, UP_EXTI_3_Pin) == GPIO_PIN_RESET		\
 80017f6:	e00d      	b.n	8001814 <HAL_GPIO_EXTI_Callback+0x11c>
			|| 	HAL_GPIO_ReadPin(R1_IN_GPIO_Port, R1_IN_Pin) == GPIO_PIN_RESET		\
			|| 	HAL_GPIO_ReadPin(R2_IN_GPIO_Port, R2_IN_Pin) == GPIO_PIN_RESET 		\
			|| 	HAL_GPIO_ReadPin(R3_IN_GPIO_Port, R3_IN_Pin) == GPIO_PIN_RESET		\
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
	{
		TimeNow = HAL_GetTick();
 80017f8:	f000 fd6a 	bl	80022d0 <HAL_GetTick>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001800:	6013      	str	r3, [r2, #0]
		if(TimeNow - TimeBegin == 5000)
 8001802:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001810:	4293      	cmp	r3, r2
 8001812:	d035      	beq.n	8001880 <HAL_GPIO_EXTI_Callback+0x188>
	while(		HAL_GPIO_ReadPin(GPIOB, UP_EXTI_3_Pin) == GPIO_PIN_RESET		\
 8001814:	2108      	movs	r1, #8
 8001816:	482b      	ldr	r0, [pc, #172]	; (80018c4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001818:	f001 f8cc 	bl	80029b4 <HAL_GPIO_ReadPin>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0ea      	beq.n	80017f8 <HAL_GPIO_EXTI_Callback+0x100>
			|| 	HAL_GPIO_ReadPin(GPIOB, DOWN_EXTI_4_Pin) == GPIO_PIN_RESET 		\
 8001822:	2110      	movs	r1, #16
 8001824:	4827      	ldr	r0, [pc, #156]	; (80018c4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001826:	f001 f8c5 	bl	80029b4 <HAL_GPIO_ReadPin>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0e3      	beq.n	80017f8 <HAL_GPIO_EXTI_Callback+0x100>
			|| 	HAL_GPIO_ReadPin(GPIOB, ENTER_EXTI_5_Pin) == GPIO_PIN_RESET		\
 8001830:	2120      	movs	r1, #32
 8001832:	4824      	ldr	r0, [pc, #144]	; (80018c4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001834:	f001 f8be 	bl	80029b4 <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0dc      	beq.n	80017f8 <HAL_GPIO_EXTI_Callback+0x100>
			|| 	HAL_GPIO_ReadPin(R1_IN_GPIO_Port, R1_IN_Pin) == GPIO_PIN_RESET		\
 800183e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001842:	4820      	ldr	r0, [pc, #128]	; (80018c4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001844:	f001 f8b6 	bl	80029b4 <HAL_GPIO_ReadPin>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0d4      	beq.n	80017f8 <HAL_GPIO_EXTI_Callback+0x100>
			|| 	HAL_GPIO_ReadPin(R2_IN_GPIO_Port, R2_IN_Pin) == GPIO_PIN_RESET 		\
 800184e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001852:	481c      	ldr	r0, [pc, #112]	; (80018c4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001854:	f001 f8ae 	bl	80029b4 <HAL_GPIO_ReadPin>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0cc      	beq.n	80017f8 <HAL_GPIO_EXTI_Callback+0x100>
			|| 	HAL_GPIO_ReadPin(R3_IN_GPIO_Port, R3_IN_Pin) == GPIO_PIN_RESET		\
 800185e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001862:	4818      	ldr	r0, [pc, #96]	; (80018c4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001864:	f001 f8a6 	bl	80029b4 <HAL_GPIO_ReadPin>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0c4      	beq.n	80017f8 <HAL_GPIO_EXTI_Callback+0x100>
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
 800186e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001872:	4814      	ldr	r0, [pc, #80]	; (80018c4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001874:	f001 f89e 	bl	80029b4 <HAL_GPIO_ReadPin>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0bc      	beq.n	80017f8 <HAL_GPIO_EXTI_Callback+0x100>
 800187e:	e000      	b.n	8001882 <HAL_GPIO_EXTI_Callback+0x18a>
		{
//			ButtonError = 1;
			break;
 8001880:	bf00      	nop
		}
	}
	HAL_Delay(20);
 8001882:	2014      	movs	r0, #20
 8001884:	f000 fd2e 	bl	80022e4 <HAL_Delay>
	EXTI->PR = ENTER_EXTI_5_Pin | DOWN_EXTI_4_Pin | UP_EXTI_3_Pin \
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800188a:	f24f 0238 	movw	r2, #61496	; 0xf038
 800188e:	615a      	str	r2, [r3, #20]
			| R1_IN_Pin | R2_IN_Pin |R3_IN_Pin | R4_IN_Pin;
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200000b8 	.word	0x200000b8
 800189c:	200001b4 	.word	0x200001b4
 80018a0:	200002e0 	.word	0x200002e0
 80018a4:	200002c8 	.word	0x200002c8
 80018a8:	200002f8 	.word	0x200002f8
 80018ac:	200001cf 	.word	0x200001cf
 80018b0:	200000ac 	.word	0x200000ac
 80018b4:	200001cd 	.word	0x200001cd
 80018b8:	200001ce 	.word	0x200001ce
 80018bc:	20000340 	.word	0x20000340
 80018c0:	20000344 	.word	0x20000344
 80018c4:	40010c00 	.word	0x40010c00
 80018c8:	40010400 	.word	0x40010400

080018cc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	if(rxByte == '\r')
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <HAL_UART_RxCpltCallback+0x5c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b0d      	cmp	r3, #13
 80018dc:	d103      	bne.n	80018e6 <HAL_UART_RxCpltCallback+0x1a>
	{
		flag_rx_done = 1;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_UART_RxCpltCallback+0x60>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	e00f      	b.n	8001906 <HAL_UART_RxCpltCallback+0x3a>
	}
	else
	{
		rxBuffer[rxBufferIndex] = rxByte;
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_UART_RxCpltCallback+0x64>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_UART_RxCpltCallback+0x5c>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	b2d9      	uxtb	r1, r3
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_UART_RxCpltCallback+0x68>)
 80018f6:	5499      	strb	r1, [r3, r2]
		rxBufferIndex++;
 80018f8:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <HAL_UART_RxCpltCallback+0x64>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	3301      	adds	r3, #1
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_UART_RxCpltCallback+0x64>)
 8001904:	701a      	strb	r2, [r3, #0]
	}
	if(rxBufferIndex >= 20)
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_UART_RxCpltCallback+0x64>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b13      	cmp	r3, #19
 800190e:	d902      	bls.n	8001916 <HAL_UART_RxCpltCallback+0x4a>
	{
		rxBufferIndex = 0;
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <HAL_UART_RxCpltCallback+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxByte, 1);
 8001916:	2201      	movs	r2, #1
 8001918:	4903      	ldr	r1, [pc, #12]	; (8001928 <HAL_UART_RxCpltCallback+0x5c>)
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <HAL_UART_RxCpltCallback+0x6c>)
 800191c:	f002 ff05 	bl	800472a <HAL_UART_Receive_IT>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000325 	.word	0x20000325
 800192c:	2000033d 	.word	0x2000033d
 8001930:	2000033c 	.word	0x2000033c
 8001934:	20000328 	.word	0x20000328
 8001938:	20000280 	.word	0x20000280

0800193c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b097      	sub	sp, #92	; 0x5c
 8001940:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001942:	f000 fc6d 	bl	8002220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001946:	f000 f913 	bl	8001b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194a:	f000 f9a5 	bl	8001c98 <MX_GPIO_Init>
  MX_I2C1_Init();
 800194e:	f000 f94b 	bl	8001be8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001952:	f000 f977 	bl	8001c44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // INIT HAL lib
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxByte, 1);
 8001956:	2201      	movs	r2, #1
 8001958:	496d      	ldr	r1, [pc, #436]	; (8001b10 <main+0x1d4>)
 800195a:	486e      	ldr	r0, [pc, #440]	; (8001b14 <main+0x1d8>)
 800195c:	f002 fee5 	bl	800472a <HAL_UART_Receive_IT>

  // INIT user
  KeyPad_Init(		// Cpl pin + port
 8001960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001964:	930d      	str	r3, [sp, #52]	; 0x34
 8001966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196a:	930c      	str	r3, [sp, #48]	; 0x30
 800196c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001970:	930b      	str	r3, [sp, #44]	; 0x2c
 8001972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001976:	930a      	str	r3, [sp, #40]	; 0x28
 8001978:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <main+0x1dc>)
 800197a:	9309      	str	r3, [sp, #36]	; 0x24
 800197c:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <main+0x1dc>)
 800197e:	9308      	str	r3, [sp, #32]
 8001980:	4b65      	ldr	r3, [pc, #404]	; (8001b18 <main+0x1dc>)
 8001982:	9307      	str	r3, [sp, #28]
 8001984:	4b64      	ldr	r3, [pc, #400]	; (8001b18 <main+0x1dc>)
 8001986:	9306      	str	r3, [sp, #24]
 8001988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800198c:	9305      	str	r3, [sp, #20]
 800198e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001992:	9304      	str	r3, [sp, #16]
 8001994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001998:	9303      	str	r3, [sp, #12]
 800199a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800199e:	9302      	str	r3, [sp, #8]
 80019a0:	4b5e      	ldr	r3, [pc, #376]	; (8001b1c <main+0x1e0>)
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	4b5d      	ldr	r3, [pc, #372]	; (8001b1c <main+0x1e0>)
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	4b5c      	ldr	r3, [pc, #368]	; (8001b1c <main+0x1e0>)
 80019aa:	4a5c      	ldr	r2, [pc, #368]	; (8001b1c <main+0x1e0>)
 80019ac:	495c      	ldr	r1, [pc, #368]	; (8001b20 <main+0x1e4>)
 80019ae:	485d      	ldr	r0, [pc, #372]	; (8001b24 <main+0x1e8>)
 80019b0:	f7fe ff34 	bl	800081c <KeyPad_Init>
					C1_OUT_Pin, C2_OUT_Pin, C3_OUT_Pin, C4_OUT_Pin,										\
					// Row pin + port
					R1_IN_GPIO_Port, R2_IN_GPIO_Port, R3_IN_GPIO_Port, R4_IN_GPIO_Port,					\
					R1_IN_Pin, R2_IN_Pin, R3_IN_Pin, R4_IN_Pin
			  );
  CLCD_I2C_Init(&LCD1, &hi2c1, (0x27 << 1), 16, 4);
 80019b4:	4638      	mov	r0, r7
 80019b6:	2304      	movs	r3, #4
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2310      	movs	r3, #16
 80019bc:	224e      	movs	r2, #78	; 0x4e
 80019be:	495a      	ldr	r1, [pc, #360]	; (8001b28 <main+0x1ec>)
 80019c0:	f7fe fc8e 	bl	80002e0 <CLCD_I2C_Init>

  at24_I2C_Init(hi2c1);
 80019c4:	4c58      	ldr	r4, [pc, #352]	; (8001b28 <main+0x1ec>)
 80019c6:	4668      	mov	r0, sp
 80019c8:	f104 0310 	add.w	r3, r4, #16
 80019cc:	2244      	movs	r2, #68	; 0x44
 80019ce:	4619      	mov	r1, r3
 80019d0:	f003 fc7a 	bl	80052c8 <memcpy>
 80019d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019d8:	f7fe fbc0 	bl	800015c <at24_I2C_Init>

  UART_Init_UART(&huart3);
 80019dc:	484d      	ldr	r0, [pc, #308]	; (8001b14 <main+0x1d8>)
 80019de:	f7ff fe49 	bl	8001674 <UART_Init_UART>

  FET_74HC595_Init(DATA_595_GPIO_Port, CLK_595_GPIO_Port, LAT_595_GPIO_Port, DATA_595_Pin, CLK_595_Pin, LAT_595_Pin);
 80019e2:	2302      	movs	r3, #2
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	2301      	movs	r3, #1
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	4a4a      	ldr	r2, [pc, #296]	; (8001b18 <main+0x1dc>)
 80019ee:	494a      	ldr	r1, [pc, #296]	; (8001b18 <main+0x1dc>)
 80019f0:	484a      	ldr	r0, [pc, #296]	; (8001b1c <main+0x1e0>)
 80019f2:	f7fe ff83 	bl	80008fc <FET_74HC595_Init>

	if(at24_isConnected())
 80019f6:	f7fe fbc9 	bl	800018c <at24_isConnected>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00c      	beq.n	8001a1a <main+0xde>
	{
		readStatus = at24_read(MEM_ADDR,rData, 15, 100);
 8001a00:	2364      	movs	r3, #100	; 0x64
 8001a02:	220f      	movs	r2, #15
 8001a04:	4949      	ldr	r1, [pc, #292]	; (8001b2c <main+0x1f0>)
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7fe fbd2 	bl	80001b0 <at24_read>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <main+0x1f4>)
 8001a12:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8001a14:	200a      	movs	r0, #10
 8001a16:	f000 fc65 	bl	80022e4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*Debug key*/
	  if(flag_keypad == 1)
 8001a1a:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <main+0x1f8>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d107      	bne.n	8001a34 <main+0xf8>
	  {
		  flag_keypad = 0;
 8001a24:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <main+0x1f8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED_KEY_GPIO_Port, LED_KEY_Pin);
 8001a2a:	2110      	movs	r1, #16
 8001a2c:	483b      	ldr	r0, [pc, #236]	; (8001b1c <main+0x1e0>)
 8001a2e:	f000 fff0 	bl	8002a12 <HAL_GPIO_TogglePin>
 8001a32:	e00c      	b.n	8001a4e <main+0x112>
	  }
	  else if(flag_button == 1)
 8001a34:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <main+0x1fc>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d107      	bne.n	8001a4e <main+0x112>
	  {
		  flag_button = 0;
 8001a3e:	4b3e      	ldr	r3, [pc, #248]	; (8001b38 <main+0x1fc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED_BUTTON_GPIO_Port, LED_BUTTON_Pin);
 8001a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a48:	483c      	ldr	r0, [pc, #240]	; (8001b3c <main+0x200>)
 8001a4a:	f000 ffe2 	bl	8002a12 <HAL_GPIO_TogglePin>
	  }

	  /*UART handler after uart rx is exexecuted*/
	  if(flag_rx_done == 1)
 8001a4e:	4b3c      	ldr	r3, [pc, #240]	; (8001b40 <main+0x204>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d11b      	bne.n	8001a90 <main+0x154>
	  {
		  flag_rx_done = 0;
 8001a58:	4b39      	ldr	r3, [pc, #228]	; (8001b40 <main+0x204>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED_RESULT_GPIO_Port, LED_RESULT_Pin);
 8001a5e:	2120      	movs	r1, #32
 8001a60:	482e      	ldr	r0, [pc, #184]	; (8001b1c <main+0x1e0>)
 8001a62:	f000 ffd6 	bl	8002a12 <HAL_GPIO_TogglePin>
		  /*function handler uart*/
		  if(UART_handler(rxBuffer, &num_IN_UART, pin_IN_UART) == UART_HANDLER_OKE);
 8001a66:	4a37      	ldr	r2, [pc, #220]	; (8001b44 <main+0x208>)
 8001a68:	4937      	ldr	r1, [pc, #220]	; (8001b48 <main+0x20c>)
 8001a6a:	4838      	ldr	r0, [pc, #224]	; (8001b4c <main+0x210>)
 8001a6c:	f7ff fe14 	bl	8001698 <UART_handler>
		  /*Reset arr rx*/
		  for(uint8_t i =0; i < sizeof(rxBuffer); i++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e009      	b.n	8001a8a <main+0x14e>
		  {
			  rxBuffer[i] = 0;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	4a34      	ldr	r2, [pc, #208]	; (8001b4c <main+0x210>)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	54d1      	strb	r1, [r2, r3]
		  	  rxBufferIndex = 0;
 8001a7e:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <main+0x214>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i =0; i < sizeof(rxBuffer); i++)
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	3301      	adds	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	2b13      	cmp	r3, #19
 8001a8e:	d9f2      	bls.n	8001a76 <main+0x13a>
		  }
	  }

	  /*Enter key and display on LCD pass/num*/
	  if(handler_keyIN_enterKey_DisplayLCD(&LCD1, state_button, &key, pin_IN) == KEY_OK)
 8001a90:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <main+0x218>)
 8001a92:	7819      	ldrb	r1, [r3, #0]
 8001a94:	4638      	mov	r0, r7
 8001a96:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <main+0x21c>)
 8001a98:	4a30      	ldr	r2, [pc, #192]	; (8001b5c <main+0x220>)
 8001a9a:	f7fe ffc1 	bl	8000a20 <handler_keyIN_enterKey_DisplayLCD>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d11d      	bne.n	8001ae0 <main+0x1a4>
	  {
		  state_hand = handler_keyIN_CheckPIN_NUM(pin_IN, &num_set_fet);
 8001aa4:	492e      	ldr	r1, [pc, #184]	; (8001b60 <main+0x224>)
 8001aa6:	482c      	ldr	r0, [pc, #176]	; (8001b58 <main+0x21c>)
 8001aa8:	f7ff f840 	bl	8000b2c <handler_keyIN_CheckPIN_NUM>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <main+0x228>)
 8001ab2:	701a      	strb	r2, [r3, #0]
		  if(state_hand == PASS_OKE && num_set_fet != 0)
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <main+0x228>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d10e      	bne.n	8001ada <main+0x19e>
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <main+0x224>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00a      	beq.n	8001ada <main+0x19e>
		  {
			  FET_74HC595_Set_Reset(0x01 << (num_set_fet - 1));
 8001ac4:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <main+0x224>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	2201      	movs	r2, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe ff3c 	bl	8000950 <FET_74HC595_Set_Reset>
 8001ad8:	e002      	b.n	8001ae0 <main+0x1a4>
		  }
		  else
		  {
			  FET_74HC595_Set_Reset(RESET_ALL_FET);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f7fe ff38 	bl	8000950 <FET_74HC595_Set_Reset>
		  }
	  }

	  /*Chuyển đổi chế độ ch�?n kiểu nút nhấn thao tác màng hình*/
	  if((enter_num_pass.signal_enter_pass == PROCESSING) || (enter_num_pass.signal_enter_num == PROCESSING))
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <main+0x22c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <main+0x1b4>
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <main+0x22c>)
 8001aea:	785b      	ldrb	r3, [r3, #1]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d106      	bne.n	8001afe <main+0x1c2>
	  {
		  state_star_pass = NONE_STAR;
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <main+0x230>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
		  state_button = KEYPAD;
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <main+0x218>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	e002      	b.n	8001b04 <main+0x1c8>
	  }
	  else
	  {
		  state_button = BUTTON;
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <main+0x218>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
	  }

	  lcd_system_handler(&LCD1);
 8001b04:	463b      	mov	r3, r7
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fb40 	bl	800118c <lcd_system_handler>
	  if(flag_keypad == 1)
 8001b0c:	e785      	b.n	8001a1a <main+0xde>
 8001b0e:	bf00      	nop
 8001b10:	20000325 	.word	0x20000325
 8001b14:	20000280 	.word	0x20000280
 8001b18:	40010c00 	.word	0x40010c00
 8001b1c:	40010800 	.word	0x40010800
 8001b20:	200002e0 	.word	0x200002e0
 8001b24:	200002c8 	.word	0x200002c8
 8001b28:	2000022c 	.word	0x2000022c
 8001b2c:	2000030c 	.word	0x2000030c
 8001b30:	2000030a 	.word	0x2000030a
 8001b34:	200001b4 	.word	0x200001b4
 8001b38:	200001cf 	.word	0x200001cf
 8001b3c:	40011000 	.word	0x40011000
 8001b40:	2000033d 	.word	0x2000033d
 8001b44:	20000304 	.word	0x20000304
 8001b48:	20000309 	.word	0x20000309
 8001b4c:	20000328 	.word	0x20000328
 8001b50:	2000033c 	.word	0x2000033c
 8001b54:	200000b8 	.word	0x200000b8
 8001b58:	200002fc 	.word	0x200002fc
 8001b5c:	200002f8 	.word	0x200002f8
 8001b60:	200001ca 	.word	0x200001ca
 8001b64:	20000000 	.word	0x20000000
 8001b68:	200000b0 	.word	0x200000b0
 8001b6c:	200001d0 	.word	0x200001d0

08001b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b090      	sub	sp, #64	; 0x40
 8001b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b76:	f107 0318 	add.w	r3, r7, #24
 8001b7a:	2228      	movs	r2, #40	; 0x28
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 fbb0 	bl	80052e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b96:	2301      	movs	r3, #1
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b9a:	2310      	movs	r3, #16
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba2:	f107 0318 	add.w	r3, r7, #24
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 f8dc 	bl	8003d64 <HAL_RCC_OscConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001bb2:	f000 f925 	bl	8001e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb6:	230f      	movs	r3, #15
 8001bb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fb4a 	bl	8004268 <HAL_RCC_ClockConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001bda:	f000 f911 	bl	8001e00 <Error_Handler>
  }
}
 8001bde:	bf00      	nop
 8001be0:	3740      	adds	r7, #64	; 0x40
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001bee:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <MX_I2C1_Init+0x54>)
 8001bf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001bf4:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <MX_I2C1_Init+0x58>)
 8001bf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001c06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001c26:	f000 ff25 	bl	8002a74 <HAL_I2C_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c30:	f000 f8e6 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	2000022c 	.word	0x2000022c
 8001c3c:	40005400 	.word	0x40005400
 8001c40:	000186a0 	.word	0x000186a0

08001c44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_USART3_UART_Init+0x4c>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <MX_USART3_UART_Init+0x50>)
 8001c4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MX_USART3_UART_Init+0x4c>)
 8001c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_USART3_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_USART3_UART_Init+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <MX_USART3_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_USART3_UART_Init+0x4c>)
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <MX_USART3_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_USART3_UART_Init+0x4c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_USART3_UART_Init+0x4c>)
 8001c7c:	f002 fc82 	bl	8004584 <HAL_UART_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c86:	f000 f8bb 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000280 	.word	0x20000280
 8001c94:	40004800 	.word	0x40004800

08001c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9e:	f107 0310 	add.w	r3, r7, #16
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cac:	4b4f      	ldr	r3, [pc, #316]	; (8001dec <MX_GPIO_Init+0x154>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a4e      	ldr	r2, [pc, #312]	; (8001dec <MX_GPIO_Init+0x154>)
 8001cb2:	f043 0310 	orr.w	r3, r3, #16
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b4c      	ldr	r3, [pc, #304]	; (8001dec <MX_GPIO_Init+0x154>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc4:	4b49      	ldr	r3, [pc, #292]	; (8001dec <MX_GPIO_Init+0x154>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a48      	ldr	r2, [pc, #288]	; (8001dec <MX_GPIO_Init+0x154>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b46      	ldr	r3, [pc, #280]	; (8001dec <MX_GPIO_Init+0x154>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cdc:	4b43      	ldr	r3, [pc, #268]	; (8001dec <MX_GPIO_Init+0x154>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a42      	ldr	r2, [pc, #264]	; (8001dec <MX_GPIO_Init+0x154>)
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	6193      	str	r3, [r2, #24]
 8001ce8:	4b40      	ldr	r3, [pc, #256]	; (8001dec <MX_GPIO_Init+0x154>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUTTON_GPIO_Port, LED_BUTTON_Pin, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cfa:	483d      	ldr	r0, [pc, #244]	; (8001df0 <MX_GPIO_Init+0x158>)
 8001cfc:	f000 fe71 	bl	80029e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATE_Pin|LED_KEY_Pin|LED_RESULT_Pin|LED_USER_Pin
 8001d00:	2200      	movs	r2, #0
 8001d02:	f640 71f8 	movw	r1, #4088	; 0xff8
 8001d06:	483b      	ldr	r0, [pc, #236]	; (8001df4 <MX_GPIO_Init+0x15c>)
 8001d08:	f000 fe6b 	bl	80029e2 <HAL_GPIO_WritePin>
                          |DATA_595_Pin|C4_OUT_Pin|C3_OUT_Pin|C2_OUT_Pin
                          |C1_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_595_Pin|LAT_595_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2103      	movs	r1, #3
 8001d10:	4839      	ldr	r0, [pc, #228]	; (8001df8 <MX_GPIO_Init+0x160>)
 8001d12:	f000 fe66 	bl	80029e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUTTON_Pin */
  GPIO_InitStruct.Pin = LED_BUTTON_Pin;
 8001d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4830      	ldr	r0, [pc, #192]	; (8001df0 <MX_GPIO_Init+0x158>)
 8001d30:	f000 fcbc 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATE_Pin LED_KEY_Pin LED_RESULT_Pin LED_USER_Pin
                           DATA_595_Pin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|LED_KEY_Pin|LED_RESULT_Pin|LED_USER_Pin
 8001d34:	23f8      	movs	r3, #248	; 0xf8
 8001d36:	613b      	str	r3, [r7, #16]
                          |DATA_595_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2302      	movs	r3, #2
 8001d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4619      	mov	r1, r3
 8001d4a:	482a      	ldr	r0, [pc, #168]	; (8001df4 <MX_GPIO_Init+0x15c>)
 8001d4c:	f000 fcae 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_595_Pin LAT_595_Pin */
  GPIO_InitStruct.Pin = CLK_595_Pin|LAT_595_Pin;
 8001d50:	2303      	movs	r3, #3
 8001d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4619      	mov	r1, r3
 8001d66:	4824      	ldr	r0, [pc, #144]	; (8001df8 <MX_GPIO_Init+0x160>)
 8001d68:	f000 fca0 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_IN_Pin R3_IN_Pin R2_IN_Pin R1_IN_Pin
                           UP_EXTI_3_Pin DOWN_EXTI_4_Pin ENTER_EXTI_5_Pin */
  GPIO_InitStruct.Pin = R4_IN_Pin|R3_IN_Pin|R2_IN_Pin|R1_IN_Pin
 8001d6c:	f24f 0338 	movw	r3, #61496	; 0xf038
 8001d70:	613b      	str	r3, [r7, #16]
                          |UP_EXTI_3_Pin|DOWN_EXTI_4_Pin|ENTER_EXTI_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d72:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <MX_GPIO_Init+0x164>)
 8001d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	f107 0310 	add.w	r3, r7, #16
 8001d7e:	4619      	mov	r1, r3
 8001d80:	481d      	ldr	r0, [pc, #116]	; (8001df8 <MX_GPIO_Init+0x160>)
 8001d82:	f000 fc93 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_OUT_Pin C3_OUT_Pin C2_OUT_Pin C1_OUT_Pin */
  GPIO_InitStruct.Pin = C4_OUT_Pin|C3_OUT_Pin|C2_OUT_Pin|C1_OUT_Pin;
 8001d86:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d90:	2302      	movs	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4815      	ldr	r0, [pc, #84]	; (8001df4 <MX_GPIO_Init+0x15c>)
 8001da0:	f000 fc84 	bl	80026ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2105      	movs	r1, #5
 8001da8:	2009      	movs	r0, #9
 8001daa:	f000 fb96 	bl	80024da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001dae:	2009      	movs	r0, #9
 8001db0:	f000 fbaf 	bl	8002512 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2105      	movs	r1, #5
 8001db8:	200a      	movs	r0, #10
 8001dba:	f000 fb8e 	bl	80024da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001dbe:	200a      	movs	r0, #10
 8001dc0:	f000 fba7 	bl	8002512 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2105      	movs	r1, #5
 8001dc8:	2017      	movs	r0, #23
 8001dca:	f000 fb86 	bl	80024da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001dce:	2017      	movs	r0, #23
 8001dd0:	f000 fb9f 	bl	8002512 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2105      	movs	r1, #5
 8001dd8:	2028      	movs	r0, #40	; 0x28
 8001dda:	f000 fb7e 	bl	80024da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dde:	2028      	movs	r0, #40	; 0x28
 8001de0:	f000 fb97 	bl	8002512 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001de4:	bf00      	nop
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40011000 	.word	0x40011000
 8001df4:	40010800 	.word	0x40010800
 8001df8:	40010c00 	.word	0x40010c00
 8001dfc:	10210000 	.word	0x10210000

08001e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e04:	b672      	cpsid	i
}
 8001e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <Error_Handler+0x8>
	...

08001e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_MspInit+0x5c>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <HAL_MspInit+0x5c>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6193      	str	r3, [r2, #24]
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_MspInit+0x5c>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_MspInit+0x5c>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <HAL_MspInit+0x5c>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	61d3      	str	r3, [r2, #28]
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_MspInit+0x5c>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_MspInit+0x60>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <HAL_MspInit+0x60>)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40010000 	.word	0x40010000

08001e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a15      	ldr	r2, [pc, #84]	; (8001ee0 <HAL_I2C_MspInit+0x70>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d123      	bne.n	8001ed8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_I2C_MspInit+0x74>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a13      	ldr	r2, [pc, #76]	; (8001ee4 <HAL_I2C_MspInit+0x74>)
 8001e96:	f043 0308 	orr.w	r3, r3, #8
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_I2C_MspInit+0x74>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ea8:	23c0      	movs	r3, #192	; 0xc0
 8001eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eac:	2312      	movs	r3, #18
 8001eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480b      	ldr	r0, [pc, #44]	; (8001ee8 <HAL_I2C_MspInit+0x78>)
 8001ebc:	f000 fbf6 	bl	80026ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_I2C_MspInit+0x74>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_I2C_MspInit+0x74>)
 8001ec6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eca:	61d3      	str	r3, [r2, #28]
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_I2C_MspInit+0x74>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ed8:	bf00      	nop
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40005400 	.word	0x40005400
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010c00 	.word	0x40010c00

08001eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a20      	ldr	r2, [pc, #128]	; (8001f88 <HAL_UART_MspInit+0x9c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d139      	bne.n	8001f80 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <HAL_UART_MspInit+0xa0>)
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <HAL_UART_MspInit+0xa0>)
 8001f12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f16:	61d3      	str	r3, [r2, #28]
 8001f18:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <HAL_UART_MspInit+0xa0>)
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_UART_MspInit+0xa0>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <HAL_UART_MspInit+0xa0>)
 8001f2a:	f043 0308 	orr.w	r3, r3, #8
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_UART_MspInit+0xa0>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480f      	ldr	r0, [pc, #60]	; (8001f90 <HAL_UART_MspInit+0xa4>)
 8001f52:	f000 fbab 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4809      	ldr	r0, [pc, #36]	; (8001f90 <HAL_UART_MspInit+0xa4>)
 8001f6c:	f000 fb9e 	bl	80026ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	2027      	movs	r0, #39	; 0x27
 8001f76:	f000 fab0 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f7a:	2027      	movs	r0, #39	; 0x27
 8001f7c:	f000 fac9 	bl	8002512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f80:	bf00      	nop
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40004800 	.word	0x40004800
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40010c00 	.word	0x40010c00

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <NMI_Handler+0x4>

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fda:	f000 f967 	bl	80022ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_EXTI_3_Pin);
 8001fe6:	2008      	movs	r0, #8
 8001fe8:	f000 fd2c 	bl	8002a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_EXTI_4_Pin);
 8001ff4:	2010      	movs	r0, #16
 8001ff6:	f000 fd25 	bl	8002a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENTER_EXTI_5_Pin);
 8002002:	2020      	movs	r0, #32
 8002004:	f000 fd1e 	bl	8002a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}

0800200c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <USART3_IRQHandler+0x10>)
 8002012:	f002 fbaf 	bl	8004774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000280 	.word	0x20000280

08002020 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R4_IN_Pin);
 8002024:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002028:	f000 fd0c 	bl	8002a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R3_IN_Pin);
 800202c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002030:	f000 fd08 	bl	8002a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R2_IN_Pin);
 8002034:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002038:	f000 fd04 	bl	8002a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R1_IN_Pin);
 800203c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002040:	f000 fd00 	bl	8002a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return 1;
 800204c:	2301      	movs	r3, #1
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <_kill>:

int _kill(int pid, int sig)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002060:	f003 f908 	bl	8005274 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	2216      	movs	r2, #22
 8002068:	601a      	str	r2, [r3, #0]
  return -1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_exit>:

void _exit (int status)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800207e:	f04f 31ff 	mov.w	r1, #4294967295
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ffe7 	bl	8002056 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002088:	e7fe      	b.n	8002088 <_exit+0x12>

0800208a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e00a      	b.n	80020b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800209c:	f3af 8000 	nop.w
 80020a0:	4601      	mov	r1, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	60ba      	str	r2, [r7, #8]
 80020a8:	b2ca      	uxtb	r2, r1
 80020aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3301      	adds	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	dbf0      	blt.n	800209c <_read+0x12>
  }

  return len;
 80020ba:	687b      	ldr	r3, [r7, #4]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e009      	b.n	80020ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	60ba      	str	r2, [r7, #8]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3301      	adds	r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dbf1      	blt.n	80020d6 <_write+0x12>
  }
  return len;
 80020f2:	687b      	ldr	r3, [r7, #4]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_close>:

int _close(int file)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002122:	605a      	str	r2, [r3, #4]
  return 0;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <_isatty>:

int _isatty(int file)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002138:	2301      	movs	r3, #1
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002164:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <_sbrk+0x5c>)
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <_sbrk+0x60>)
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <_sbrk+0x64>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <_sbrk+0x64>)
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <_sbrk+0x68>)
 800217c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <_sbrk+0x64>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	429a      	cmp	r2, r3
 800218a:	d207      	bcs.n	800219c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800218c:	f003 f872 	bl	8005274 <__errno>
 8002190:	4603      	mov	r3, r0
 8002192:	220c      	movs	r2, #12
 8002194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	e009      	b.n	80021b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <_sbrk+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <_sbrk+0x64>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <_sbrk+0x64>)
 80021ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ae:	68fb      	ldr	r3, [r7, #12]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20005000 	.word	0x20005000
 80021bc:	00000400 	.word	0x00000400
 80021c0:	20000348 	.word	0x20000348
 80021c4:	20000360 	.word	0x20000360

080021c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021d4:	f7ff fff8 	bl	80021c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d8:	480b      	ldr	r0, [pc, #44]	; (8002208 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021da:	490c      	ldr	r1, [pc, #48]	; (800220c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021dc:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e0:	e002      	b.n	80021e8 <LoopCopyDataInit>

080021e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e6:	3304      	adds	r3, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ec:	d3f9      	bcc.n	80021e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ee:	4a09      	ldr	r2, [pc, #36]	; (8002214 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021f0:	4c09      	ldr	r4, [pc, #36]	; (8002218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f4:	e001      	b.n	80021fa <LoopFillZerobss>

080021f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f8:	3204      	adds	r2, #4

080021fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021fe:	f003 f83f 	bl	8005280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002202:	f7ff fb9b 	bl	800193c <main>
  bx lr
 8002206:	4770      	bx	lr
  ldr r0, =_sdata
 8002208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800220c:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8002210:	08006b44 	.word	0x08006b44
  ldr r2, =_sbss
 8002214:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8002218:	20000360 	.word	0x20000360

0800221c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800221c:	e7fe      	b.n	800221c <ADC1_2_IRQHandler>
	...

08002220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_Init+0x28>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a07      	ldr	r2, [pc, #28]	; (8002248 <HAL_Init+0x28>)
 800222a:	f043 0310 	orr.w	r3, r3, #16
 800222e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002230:	2003      	movs	r0, #3
 8002232:	f000 f947 	bl	80024c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002236:	2004      	movs	r0, #4
 8002238:	f000 f808 	bl	800224c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800223c:	f7ff fde6 	bl	8001e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40022000 	.word	0x40022000

0800224c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_InitTick+0x54>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_InitTick+0x58>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	4619      	mov	r1, r3
 800225e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002262:	fbb3 f3f1 	udiv	r3, r3, r1
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f95f 	bl	800252e <HAL_SYSTICK_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e00e      	b.n	8002298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b0f      	cmp	r3, #15
 800227e:	d80a      	bhi.n	8002296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002280:	2200      	movs	r2, #0
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f000 f927 	bl	80024da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800228c:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <HAL_InitTick+0x5c>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e000      	b.n	8002298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	200000bc 	.word	0x200000bc
 80022a4:	200000c4 	.word	0x200000c4
 80022a8:	200000c0 	.word	0x200000c0

080022ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_IncTick+0x1c>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_IncTick+0x20>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	4a03      	ldr	r2, [pc, #12]	; (80022cc <HAL_IncTick+0x20>)
 80022be:	6013      	str	r3, [r2, #0]
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	200000c4 	.word	0x200000c4
 80022cc:	2000034c 	.word	0x2000034c

080022d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return uwTick;
 80022d4:	4b02      	ldr	r3, [pc, #8]	; (80022e0 <HAL_GetTick+0x10>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	2000034c 	.word	0x2000034c

080022e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff fff0 	bl	80022d0 <HAL_GetTick>
 80022f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d005      	beq.n	800230a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_Delay+0x44>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800230a:	bf00      	nop
 800230c:	f7ff ffe0 	bl	80022d0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d8f7      	bhi.n	800230c <HAL_Delay+0x28>
  {
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200000c4 	.word	0x200000c4

0800232c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002348:	4013      	ands	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800235c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235e:	4a04      	ldr	r2, [pc, #16]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <__NVIC_GetPriorityGrouping+0x18>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	f003 0307 	and.w	r3, r3, #7
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db0b      	blt.n	80023ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	4906      	ldr	r1, [pc, #24]	; (80023c4 <__NVIC_EnableIRQ+0x34>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2001      	movs	r0, #1
 80023b2:	fa00 f202 	lsl.w	r2, r0, r2
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	e000e100 	.word	0xe000e100

080023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	db0a      	blt.n	80023f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	490c      	ldr	r1, [pc, #48]	; (8002414 <__NVIC_SetPriority+0x4c>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f0:	e00a      	b.n	8002408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4908      	ldr	r1, [pc, #32]	; (8002418 <__NVIC_SetPriority+0x50>)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	3b04      	subs	r3, #4
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	440b      	add	r3, r1
 8002406:	761a      	strb	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f1c3 0307 	rsb	r3, r3, #7
 8002436:	2b04      	cmp	r3, #4
 8002438:	bf28      	it	cs
 800243a:	2304      	movcs	r3, #4
 800243c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3304      	adds	r3, #4
 8002442:	2b06      	cmp	r3, #6
 8002444:	d902      	bls.n	800244c <NVIC_EncodePriority+0x30>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3b03      	subs	r3, #3
 800244a:	e000      	b.n	800244e <NVIC_EncodePriority+0x32>
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	401a      	ands	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002464:	f04f 31ff 	mov.w	r1, #4294967295
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43d9      	mvns	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	4313      	orrs	r3, r2
         );
}
 8002476:	4618      	mov	r0, r3
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002490:	d301      	bcc.n	8002496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002492:	2301      	movs	r3, #1
 8002494:	e00f      	b.n	80024b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <SysTick_Config+0x40>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249e:	210f      	movs	r1, #15
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f7ff ff90 	bl	80023c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <SysTick_Config+0x40>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <SysTick_Config+0x40>)
 80024b0:	2207      	movs	r2, #7
 80024b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	e000e010 	.word	0xe000e010

080024c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff2d 	bl	800232c <__NVIC_SetPriorityGrouping>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ec:	f7ff ff42 	bl	8002374 <__NVIC_GetPriorityGrouping>
 80024f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	6978      	ldr	r0, [r7, #20]
 80024f8:	f7ff ff90 	bl	800241c <NVIC_EncodePriority>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff5f 	bl	80023c8 <__NVIC_SetPriority>
}
 800250a:	bf00      	nop
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800251c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff35 	bl	8002390 <__NVIC_EnableIRQ>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ffa2 	bl	8002480 <SysTick_Config>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002546:	b480      	push	{r7}
 8002548:	b085      	sub	sp, #20
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d008      	beq.n	8002570 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2204      	movs	r2, #4
 8002562:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e020      	b.n	80025b2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 020e 	bic.w	r2, r2, #14
 800257e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f202 	lsl.w	r2, r1, r2
 800259e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d005      	beq.n	80025e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2204      	movs	r2, #4
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
 80025de:	e051      	b.n	8002684 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 020e 	bic.w	r2, r2, #14
 80025ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a22      	ldr	r2, [pc, #136]	; (8002690 <HAL_DMA_Abort_IT+0xd4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d029      	beq.n	800265e <HAL_DMA_Abort_IT+0xa2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a21      	ldr	r2, [pc, #132]	; (8002694 <HAL_DMA_Abort_IT+0xd8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d022      	beq.n	800265a <HAL_DMA_Abort_IT+0x9e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1f      	ldr	r2, [pc, #124]	; (8002698 <HAL_DMA_Abort_IT+0xdc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01a      	beq.n	8002654 <HAL_DMA_Abort_IT+0x98>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1e      	ldr	r2, [pc, #120]	; (800269c <HAL_DMA_Abort_IT+0xe0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d012      	beq.n	800264e <HAL_DMA_Abort_IT+0x92>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <HAL_DMA_Abort_IT+0xe4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00a      	beq.n	8002648 <HAL_DMA_Abort_IT+0x8c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <HAL_DMA_Abort_IT+0xe8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d102      	bne.n	8002642 <HAL_DMA_Abort_IT+0x86>
 800263c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002640:	e00e      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 8002642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002646:	e00b      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 8002648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800264c:	e008      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 800264e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002652:	e005      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 8002654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002658:	e002      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 800265a:	2310      	movs	r3, #16
 800265c:	e000      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 800265e:	2301      	movs	r3, #1
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_DMA_Abort_IT+0xec>)
 8002662:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
    } 
  }
  return status;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40020008 	.word	0x40020008
 8002694:	4002001c 	.word	0x4002001c
 8002698:	40020030 	.word	0x40020030
 800269c:	40020044 	.word	0x40020044
 80026a0:	40020058 	.word	0x40020058
 80026a4:	4002006c 	.word	0x4002006c
 80026a8:	40020000 	.word	0x40020000

080026ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b08b      	sub	sp, #44	; 0x2c
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026ba:	2300      	movs	r3, #0
 80026bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026be:	e169      	b.n	8002994 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026c0:	2201      	movs	r2, #1
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	429a      	cmp	r2, r3
 80026da:	f040 8158 	bne.w	800298e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4a9a      	ldr	r2, [pc, #616]	; (800294c <HAL_GPIO_Init+0x2a0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d05e      	beq.n	80027a6 <HAL_GPIO_Init+0xfa>
 80026e8:	4a98      	ldr	r2, [pc, #608]	; (800294c <HAL_GPIO_Init+0x2a0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d875      	bhi.n	80027da <HAL_GPIO_Init+0x12e>
 80026ee:	4a98      	ldr	r2, [pc, #608]	; (8002950 <HAL_GPIO_Init+0x2a4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d058      	beq.n	80027a6 <HAL_GPIO_Init+0xfa>
 80026f4:	4a96      	ldr	r2, [pc, #600]	; (8002950 <HAL_GPIO_Init+0x2a4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d86f      	bhi.n	80027da <HAL_GPIO_Init+0x12e>
 80026fa:	4a96      	ldr	r2, [pc, #600]	; (8002954 <HAL_GPIO_Init+0x2a8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d052      	beq.n	80027a6 <HAL_GPIO_Init+0xfa>
 8002700:	4a94      	ldr	r2, [pc, #592]	; (8002954 <HAL_GPIO_Init+0x2a8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d869      	bhi.n	80027da <HAL_GPIO_Init+0x12e>
 8002706:	4a94      	ldr	r2, [pc, #592]	; (8002958 <HAL_GPIO_Init+0x2ac>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d04c      	beq.n	80027a6 <HAL_GPIO_Init+0xfa>
 800270c:	4a92      	ldr	r2, [pc, #584]	; (8002958 <HAL_GPIO_Init+0x2ac>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d863      	bhi.n	80027da <HAL_GPIO_Init+0x12e>
 8002712:	4a92      	ldr	r2, [pc, #584]	; (800295c <HAL_GPIO_Init+0x2b0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d046      	beq.n	80027a6 <HAL_GPIO_Init+0xfa>
 8002718:	4a90      	ldr	r2, [pc, #576]	; (800295c <HAL_GPIO_Init+0x2b0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d85d      	bhi.n	80027da <HAL_GPIO_Init+0x12e>
 800271e:	2b12      	cmp	r3, #18
 8002720:	d82a      	bhi.n	8002778 <HAL_GPIO_Init+0xcc>
 8002722:	2b12      	cmp	r3, #18
 8002724:	d859      	bhi.n	80027da <HAL_GPIO_Init+0x12e>
 8002726:	a201      	add	r2, pc, #4	; (adr r2, 800272c <HAL_GPIO_Init+0x80>)
 8002728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272c:	080027a7 	.word	0x080027a7
 8002730:	08002781 	.word	0x08002781
 8002734:	08002793 	.word	0x08002793
 8002738:	080027d5 	.word	0x080027d5
 800273c:	080027db 	.word	0x080027db
 8002740:	080027db 	.word	0x080027db
 8002744:	080027db 	.word	0x080027db
 8002748:	080027db 	.word	0x080027db
 800274c:	080027db 	.word	0x080027db
 8002750:	080027db 	.word	0x080027db
 8002754:	080027db 	.word	0x080027db
 8002758:	080027db 	.word	0x080027db
 800275c:	080027db 	.word	0x080027db
 8002760:	080027db 	.word	0x080027db
 8002764:	080027db 	.word	0x080027db
 8002768:	080027db 	.word	0x080027db
 800276c:	080027db 	.word	0x080027db
 8002770:	08002789 	.word	0x08002789
 8002774:	0800279d 	.word	0x0800279d
 8002778:	4a79      	ldr	r2, [pc, #484]	; (8002960 <HAL_GPIO_Init+0x2b4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d013      	beq.n	80027a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800277e:	e02c      	b.n	80027da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	623b      	str	r3, [r7, #32]
          break;
 8002786:	e029      	b.n	80027dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	3304      	adds	r3, #4
 800278e:	623b      	str	r3, [r7, #32]
          break;
 8002790:	e024      	b.n	80027dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	3308      	adds	r3, #8
 8002798:	623b      	str	r3, [r7, #32]
          break;
 800279a:	e01f      	b.n	80027dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	330c      	adds	r3, #12
 80027a2:	623b      	str	r3, [r7, #32]
          break;
 80027a4:	e01a      	b.n	80027dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d102      	bne.n	80027b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ae:	2304      	movs	r3, #4
 80027b0:	623b      	str	r3, [r7, #32]
          break;
 80027b2:	e013      	b.n	80027dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027bc:	2308      	movs	r3, #8
 80027be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	611a      	str	r2, [r3, #16]
          break;
 80027c6:	e009      	b.n	80027dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027c8:	2308      	movs	r3, #8
 80027ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	615a      	str	r2, [r3, #20]
          break;
 80027d2:	e003      	b.n	80027dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027d4:	2300      	movs	r3, #0
 80027d6:	623b      	str	r3, [r7, #32]
          break;
 80027d8:	e000      	b.n	80027dc <HAL_GPIO_Init+0x130>
          break;
 80027da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2bff      	cmp	r3, #255	; 0xff
 80027e0:	d801      	bhi.n	80027e6 <HAL_GPIO_Init+0x13a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	e001      	b.n	80027ea <HAL_GPIO_Init+0x13e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2bff      	cmp	r3, #255	; 0xff
 80027f0:	d802      	bhi.n	80027f8 <HAL_GPIO_Init+0x14c>
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	e002      	b.n	80027fe <HAL_GPIO_Init+0x152>
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	3b08      	subs	r3, #8
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	210f      	movs	r1, #15
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	401a      	ands	r2, r3
 8002810:	6a39      	ldr	r1, [r7, #32]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	431a      	orrs	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80b1 	beq.w	800298e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800282c:	4b4d      	ldr	r3, [pc, #308]	; (8002964 <HAL_GPIO_Init+0x2b8>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	4a4c      	ldr	r2, [pc, #304]	; (8002964 <HAL_GPIO_Init+0x2b8>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6193      	str	r3, [r2, #24]
 8002838:	4b4a      	ldr	r3, [pc, #296]	; (8002964 <HAL_GPIO_Init+0x2b8>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002844:	4a48      	ldr	r2, [pc, #288]	; (8002968 <HAL_GPIO_Init+0x2bc>)
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	3302      	adds	r3, #2
 800284c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002850:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a40      	ldr	r2, [pc, #256]	; (800296c <HAL_GPIO_Init+0x2c0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d013      	beq.n	8002898 <HAL_GPIO_Init+0x1ec>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a3f      	ldr	r2, [pc, #252]	; (8002970 <HAL_GPIO_Init+0x2c4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00d      	beq.n	8002894 <HAL_GPIO_Init+0x1e8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a3e      	ldr	r2, [pc, #248]	; (8002974 <HAL_GPIO_Init+0x2c8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d007      	beq.n	8002890 <HAL_GPIO_Init+0x1e4>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a3d      	ldr	r2, [pc, #244]	; (8002978 <HAL_GPIO_Init+0x2cc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d101      	bne.n	800288c <HAL_GPIO_Init+0x1e0>
 8002888:	2303      	movs	r3, #3
 800288a:	e006      	b.n	800289a <HAL_GPIO_Init+0x1ee>
 800288c:	2304      	movs	r3, #4
 800288e:	e004      	b.n	800289a <HAL_GPIO_Init+0x1ee>
 8002890:	2302      	movs	r3, #2
 8002892:	e002      	b.n	800289a <HAL_GPIO_Init+0x1ee>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <HAL_GPIO_Init+0x1ee>
 8002898:	2300      	movs	r3, #0
 800289a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289c:	f002 0203 	and.w	r2, r2, #3
 80028a0:	0092      	lsls	r2, r2, #2
 80028a2:	4093      	lsls	r3, r2
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028aa:	492f      	ldr	r1, [pc, #188]	; (8002968 <HAL_GPIO_Init+0x2bc>)
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	3302      	adds	r3, #2
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d006      	beq.n	80028d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028c4:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_GPIO_Init+0x2d0>)
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	492c      	ldr	r1, [pc, #176]	; (800297c <HAL_GPIO_Init+0x2d0>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]
 80028d0:	e006      	b.n	80028e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028d2:	4b2a      	ldr	r3, [pc, #168]	; (800297c <HAL_GPIO_Init+0x2d0>)
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	43db      	mvns	r3, r3
 80028da:	4928      	ldr	r1, [pc, #160]	; (800297c <HAL_GPIO_Init+0x2d0>)
 80028dc:	4013      	ands	r3, r2
 80028de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d006      	beq.n	80028fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028ec:	4b23      	ldr	r3, [pc, #140]	; (800297c <HAL_GPIO_Init+0x2d0>)
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	4922      	ldr	r1, [pc, #136]	; (800297c <HAL_GPIO_Init+0x2d0>)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60cb      	str	r3, [r1, #12]
 80028f8:	e006      	b.n	8002908 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028fa:	4b20      	ldr	r3, [pc, #128]	; (800297c <HAL_GPIO_Init+0x2d0>)
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	43db      	mvns	r3, r3
 8002902:	491e      	ldr	r1, [pc, #120]	; (800297c <HAL_GPIO_Init+0x2d0>)
 8002904:	4013      	ands	r3, r2
 8002906:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d006      	beq.n	8002922 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_GPIO_Init+0x2d0>)
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4918      	ldr	r1, [pc, #96]	; (800297c <HAL_GPIO_Init+0x2d0>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002922:	4b16      	ldr	r3, [pc, #88]	; (800297c <HAL_GPIO_Init+0x2d0>)
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	43db      	mvns	r3, r3
 800292a:	4914      	ldr	r1, [pc, #80]	; (800297c <HAL_GPIO_Init+0x2d0>)
 800292c:	4013      	ands	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d021      	beq.n	8002980 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_GPIO_Init+0x2d0>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	490e      	ldr	r1, [pc, #56]	; (800297c <HAL_GPIO_Init+0x2d0>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]
 8002948:	e021      	b.n	800298e <HAL_GPIO_Init+0x2e2>
 800294a:	bf00      	nop
 800294c:	10320000 	.word	0x10320000
 8002950:	10310000 	.word	0x10310000
 8002954:	10220000 	.word	0x10220000
 8002958:	10210000 	.word	0x10210000
 800295c:	10120000 	.word	0x10120000
 8002960:	10110000 	.word	0x10110000
 8002964:	40021000 	.word	0x40021000
 8002968:	40010000 	.word	0x40010000
 800296c:	40010800 	.word	0x40010800
 8002970:	40010c00 	.word	0x40010c00
 8002974:	40011000 	.word	0x40011000
 8002978:	40011400 	.word	0x40011400
 800297c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_GPIO_Init+0x304>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	43db      	mvns	r3, r3
 8002988:	4909      	ldr	r1, [pc, #36]	; (80029b0 <HAL_GPIO_Init+0x304>)
 800298a:	4013      	ands	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	3301      	adds	r3, #1
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f47f ae8e 	bne.w	80026c0 <HAL_GPIO_Init+0x14>
  }
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	372c      	adds	r7, #44	; 0x2c
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	40010400 	.word	0x40010400

080029b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	887b      	ldrh	r3, [r7, #2]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
 80029d0:	e001      	b.n	80029d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	807b      	strh	r3, [r7, #2]
 80029ee:	4613      	mov	r3, r2
 80029f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029f2:	787b      	ldrb	r3, [r7, #1]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f8:	887a      	ldrh	r2, [r7, #2]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029fe:	e003      	b.n	8002a08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a00:	887b      	ldrh	r3, [r7, #2]
 8002a02:	041a      	lsls	r2, r3, #16
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	611a      	str	r2, [r3, #16]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a24:	887a      	ldrh	r2, [r7, #2]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	041a      	lsls	r2, r3, #16
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	43d9      	mvns	r1, r3
 8002a30:	887b      	ldrh	r3, [r7, #2]
 8002a32:	400b      	ands	r3, r1
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	611a      	str	r2, [r3, #16]
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fe48 	bl	80016f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40010400 	.word	0x40010400

08002a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e12b      	b.n	8002cde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff f9e8 	bl	8001e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2224      	movs	r2, #36	; 0x24
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ad8:	f001 fd0e 	bl	80044f8 <HAL_RCC_GetPCLK1Freq>
 8002adc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4a81      	ldr	r2, [pc, #516]	; (8002ce8 <HAL_I2C_Init+0x274>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d807      	bhi.n	8002af8 <HAL_I2C_Init+0x84>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4a80      	ldr	r2, [pc, #512]	; (8002cec <HAL_I2C_Init+0x278>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	bf94      	ite	ls
 8002af0:	2301      	movls	r3, #1
 8002af2:	2300      	movhi	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	e006      	b.n	8002b06 <HAL_I2C_Init+0x92>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a7d      	ldr	r2, [pc, #500]	; (8002cf0 <HAL_I2C_Init+0x27c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	bf94      	ite	ls
 8002b00:	2301      	movls	r3, #1
 8002b02:	2300      	movhi	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e0e7      	b.n	8002cde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a78      	ldr	r2, [pc, #480]	; (8002cf4 <HAL_I2C_Init+0x280>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	0c9b      	lsrs	r3, r3, #18
 8002b18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	4a6a      	ldr	r2, [pc, #424]	; (8002ce8 <HAL_I2C_Init+0x274>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d802      	bhi.n	8002b48 <HAL_I2C_Init+0xd4>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	3301      	adds	r3, #1
 8002b46:	e009      	b.n	8002b5c <HAL_I2C_Init+0xe8>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	4a69      	ldr	r2, [pc, #420]	; (8002cf8 <HAL_I2C_Init+0x284>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	495c      	ldr	r1, [pc, #368]	; (8002ce8 <HAL_I2C_Init+0x274>)
 8002b78:	428b      	cmp	r3, r1
 8002b7a:	d819      	bhi.n	8002bb0 <HAL_I2C_Init+0x13c>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1e59      	subs	r1, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b8a:	1c59      	adds	r1, r3, #1
 8002b8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b90:	400b      	ands	r3, r1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_I2C_Init+0x138>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1e59      	subs	r1, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002baa:	e051      	b.n	8002c50 <HAL_I2C_Init+0x1dc>
 8002bac:	2304      	movs	r3, #4
 8002bae:	e04f      	b.n	8002c50 <HAL_I2C_Init+0x1dc>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d111      	bne.n	8002bdc <HAL_I2C_Init+0x168>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1e58      	subs	r0, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	440b      	add	r3, r1
 8002bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	e012      	b.n	8002c02 <HAL_I2C_Init+0x18e>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1e58      	subs	r0, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	0099      	lsls	r1, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Init+0x196>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e022      	b.n	8002c50 <HAL_I2C_Init+0x1dc>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10e      	bne.n	8002c30 <HAL_I2C_Init+0x1bc>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1e58      	subs	r0, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	440b      	add	r3, r1
 8002c20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c24:	3301      	adds	r3, #1
 8002c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c2e:	e00f      	b.n	8002c50 <HAL_I2C_Init+0x1dc>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1e58      	subs	r0, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	0099      	lsls	r1, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	6809      	ldr	r1, [r1, #0]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6911      	ldr	r1, [r2, #16]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68d2      	ldr	r2, [r2, #12]
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	000186a0 	.word	0x000186a0
 8002cec:	001e847f 	.word	0x001e847f
 8002cf0:	003d08ff 	.word	0x003d08ff
 8002cf4:	431bde83 	.word	0x431bde83
 8002cf8:	10624dd3 	.word	0x10624dd3

08002cfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	461a      	mov	r2, r3
 8002d08:	460b      	mov	r3, r1
 8002d0a:	817b      	strh	r3, [r7, #10]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d10:	f7ff fade 	bl	80022d0 <HAL_GetTick>
 8002d14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	f040 80e0 	bne.w	8002ee4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2319      	movs	r3, #25
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4970      	ldr	r1, [pc, #448]	; (8002ef0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fde2 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e0d3      	b.n	8002ee6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_I2C_Master_Transmit+0x50>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e0cc      	b.n	8002ee6 <HAL_I2C_Master_Transmit+0x1ea>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d007      	beq.n	8002d72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0201 	orr.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2221      	movs	r2, #33	; 0x21
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	893a      	ldrh	r2, [r7, #8]
 8002da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4a50      	ldr	r2, [pc, #320]	; (8002ef4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002db4:	8979      	ldrh	r1, [r7, #10]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	6a3a      	ldr	r2, [r7, #32]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fc32 	bl	8003624 <I2C_MasterRequestWrite>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e08d      	b.n	8002ee6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002de0:	e066      	b.n	8002eb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	6a39      	ldr	r1, [r7, #32]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fea0 	bl	8003b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00d      	beq.n	8002e0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d107      	bne.n	8002e0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e06b      	b.n	8002ee6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	781a      	ldrb	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d11b      	bne.n	8002e84 <HAL_I2C_Master_Transmit+0x188>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d017      	beq.n	8002e84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	781a      	ldrb	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	6a39      	ldr	r1, [r7, #32]
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fe97 	bl	8003bbc <I2C_WaitOnBTFFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00d      	beq.n	8002eb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d107      	bne.n	8002eac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eaa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e01a      	b.n	8002ee6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d194      	bne.n	8002de2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e000      	b.n	8002ee6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ee4:	2302      	movs	r3, #2
  }
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	00100002 	.word	0x00100002
 8002ef4:	ffff0000 	.word	0xffff0000

08002ef8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08c      	sub	sp, #48	; 0x30
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	4608      	mov	r0, r1
 8002f02:	4611      	mov	r1, r2
 8002f04:	461a      	mov	r2, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	817b      	strh	r3, [r7, #10]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	813b      	strh	r3, [r7, #8]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f16:	f7ff f9db 	bl	80022d0 <HAL_GetTick>
 8002f1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	f040 8244 	bne.w	80033b2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2319      	movs	r3, #25
 8002f30:	2201      	movs	r2, #1
 8002f32:	4982      	ldr	r1, [pc, #520]	; (800313c <HAL_I2C_Mem_Read+0x244>)
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fcdf 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
 8002f42:	e237      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_I2C_Mem_Read+0x5a>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e230      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d007      	beq.n	8002f78 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2222      	movs	r2, #34	; 0x22
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2240      	movs	r2, #64	; 0x40
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a62      	ldr	r2, [pc, #392]	; (8003140 <HAL_I2C_Mem_Read+0x248>)
 8002fb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fba:	88f8      	ldrh	r0, [r7, #6]
 8002fbc:	893a      	ldrh	r2, [r7, #8]
 8002fbe:	8979      	ldrh	r1, [r7, #10]
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	9301      	str	r3, [sp, #4]
 8002fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	4603      	mov	r3, r0
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fbac 	bl	8003728 <I2C_RequestMemoryRead>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e1ec      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d113      	bne.n	800300a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e1c0      	b.n	800338c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	2b01      	cmp	r3, #1
 8003010:	d11e      	bne.n	8003050 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003020:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003022:	b672      	cpsid	i
}
 8003024:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800304c:	b662      	cpsie	i
}
 800304e:	e035      	b.n	80030bc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	2b02      	cmp	r3, #2
 8003056:	d11e      	bne.n	8003096 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003066:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003068:	b672      	cpsid	i
}
 800306a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003090:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003092:	b662      	cpsie	i
}
 8003094:	e012      	b.n	80030bc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030a4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80030bc:	e166      	b.n	800338c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	f200 811f 	bhi.w	8003306 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d123      	bne.n	8003118 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fdb9 	bl	8003c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e167      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003116:	e139      	b.n	800338c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	2b02      	cmp	r3, #2
 800311e:	d152      	bne.n	80031c6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003126:	2200      	movs	r2, #0
 8003128:	4906      	ldr	r1, [pc, #24]	; (8003144 <HAL_I2C_Mem_Read+0x24c>)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fbe4 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e13c      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
 800313a:	bf00      	nop
 800313c:	00100002 	.word	0x00100002
 8003140:	ffff0000 	.word	0xffff0000
 8003144:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003148:	b672      	cpsid	i
}
 800314a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800318e:	b662      	cpsie	i
}
 8003190:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031c4:	e0e2      	b.n	800338c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	2200      	movs	r2, #0
 80031ce:	497b      	ldr	r1, [pc, #492]	; (80033bc <HAL_I2C_Mem_Read+0x4c4>)
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 fb91 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0e9      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031f0:	b672      	cpsid	i
}
 80031f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003226:	4b66      	ldr	r3, [pc, #408]	; (80033c0 <HAL_I2C_Mem_Read+0x4c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	08db      	lsrs	r3, r3, #3
 800322c:	4a65      	ldr	r2, [pc, #404]	; (80033c4 <HAL_I2C_Mem_Read+0x4cc>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	0a1a      	lsrs	r2, r3, #8
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	00da      	lsls	r2, r3, #3
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	3b01      	subs	r3, #1
 8003244:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d118      	bne.n	800327e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800326e:	b662      	cpsie	i
}
 8003270:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e09a      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b04      	cmp	r3, #4
 800328a:	d1d9      	bne.n	8003240 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032ce:	b662      	cpsie	i
}
 80032d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003304:	e042      	b.n	800338c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003308:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fc9e 	bl	8003c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e04c      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b04      	cmp	r3, #4
 8003358:	d118      	bne.n	800338c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	f47f ae94 	bne.w	80030be <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
  }
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3728      	adds	r7, #40	; 0x28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	00010004 	.word	0x00010004
 80033c0:	200000bc 	.word	0x200000bc
 80033c4:	14f8b589 	.word	0x14f8b589

080033c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	460b      	mov	r3, r1
 80033d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80033d8:	f7fe ff7a 	bl	80022d0 <HAL_GetTick>
 80033dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	f040 8111 	bne.w	8003612 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	2319      	movs	r3, #25
 80033f6:	2201      	movs	r2, #1
 80033f8:	4988      	ldr	r1, [pc, #544]	; (800361c <HAL_I2C_IsDeviceReady+0x254>)
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fa7c 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003406:	2302      	movs	r3, #2
 8003408:	e104      	b.n	8003614 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_I2C_IsDeviceReady+0x50>
 8003414:	2302      	movs	r3, #2
 8003416:	e0fd      	b.n	8003614 <HAL_I2C_IsDeviceReady+0x24c>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d007      	beq.n	800343e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0201 	orr.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800344c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2224      	movs	r2, #36	; 0x24
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4a70      	ldr	r2, [pc, #448]	; (8003620 <HAL_I2C_IsDeviceReady+0x258>)
 8003460:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003470:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2200      	movs	r2, #0
 800347a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 fa3a 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003498:	d103      	bne.n	80034a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e0b6      	b.n	8003614 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034a6:	897b      	ldrh	r3, [r7, #10]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80034b6:	f7fe ff0b 	bl	80022d0 <HAL_GetTick>
 80034ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	bf0c      	ite	eq
 80034ca:	2301      	moveq	r3, #1
 80034cc:	2300      	movne	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e0:	bf0c      	ite	eq
 80034e2:	2301      	moveq	r3, #1
 80034e4:	2300      	movne	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034ea:	e025      	b.n	8003538 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034ec:	f7fe fef0 	bl	80022d0 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d302      	bcc.n	8003502 <HAL_I2C_IsDeviceReady+0x13a>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	22a0      	movs	r2, #160	; 0xa0
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b02      	cmp	r3, #2
 8003516:	bf0c      	ite	eq
 8003518:	2301      	moveq	r3, #1
 800351a:	2300      	movne	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2ba0      	cmp	r3, #160	; 0xa0
 8003542:	d005      	beq.n	8003550 <HAL_I2C_IsDeviceReady+0x188>
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <HAL_I2C_IsDeviceReady+0x188>
 800354a:	7dbb      	ldrb	r3, [r7, #22]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0cd      	beq.n	80034ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b02      	cmp	r3, #2
 8003564:	d129      	bne.n	80035ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003574:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	2319      	movs	r3, #25
 8003592:	2201      	movs	r2, #1
 8003594:	4921      	ldr	r1, [pc, #132]	; (800361c <HAL_I2C_IsDeviceReady+0x254>)
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f9ae 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e036      	b.n	8003614 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e02c      	b.n	8003614 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	2319      	movs	r3, #25
 80035da:	2201      	movs	r2, #1
 80035dc:	490f      	ldr	r1, [pc, #60]	; (800361c <HAL_I2C_IsDeviceReady+0x254>)
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f98a 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e012      	b.n	8003614 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	3301      	adds	r3, #1
 80035f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	f4ff af32 	bcc.w	8003462 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	00100002 	.word	0x00100002
 8003620:	ffff0000 	.word	0xffff0000

08003624 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	460b      	mov	r3, r1
 8003632:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d006      	beq.n	800364e <I2C_MasterRequestWrite+0x2a>
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d003      	beq.n	800364e <I2C_MasterRequestWrite+0x2a>
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800364c:	d108      	bne.n	8003660 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e00b      	b.n	8003678 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	2b12      	cmp	r3, #18
 8003666:	d107      	bne.n	8003678 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003676:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f937 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369e:	d103      	bne.n	80036a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e035      	b.n	8003718 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036b4:	d108      	bne.n	80036c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036b6:	897b      	ldrh	r3, [r7, #10]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036c4:	611a      	str	r2, [r3, #16]
 80036c6:	e01b      	b.n	8003700 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036c8:	897b      	ldrh	r3, [r7, #10]
 80036ca:	11db      	asrs	r3, r3, #7
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f003 0306 	and.w	r3, r3, #6
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f063 030f 	orn	r3, r3, #15
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	490e      	ldr	r1, [pc, #56]	; (8003720 <I2C_MasterRequestWrite+0xfc>)
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f980 	bl	80039ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e010      	b.n	8003718 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036f6:	897b      	ldrh	r3, [r7, #10]
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4907      	ldr	r1, [pc, #28]	; (8003724 <I2C_MasterRequestWrite+0x100>)
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f970 	bl	80039ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	00010008 	.word	0x00010008
 8003724:	00010002 	.word	0x00010002

08003728 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	461a      	mov	r2, r3
 8003736:	4603      	mov	r3, r0
 8003738:	817b      	strh	r3, [r7, #10]
 800373a:	460b      	mov	r3, r1
 800373c:	813b      	strh	r3, [r7, #8]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003750:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003760:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	2200      	movs	r2, #0
 800376a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f8c2 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003788:	d103      	bne.n	8003792 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e0aa      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003796:	897b      	ldrh	r3, [r7, #10]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	6a3a      	ldr	r2, [r7, #32]
 80037aa:	4952      	ldr	r1, [pc, #328]	; (80038f4 <I2C_RequestMemoryRead+0x1cc>)
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f91d 	bl	80039ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e097      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d4:	6a39      	ldr	r1, [r7, #32]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f9a8 	bl	8003b2c <I2C_WaitOnTXEFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00d      	beq.n	80037fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d107      	bne.n	80037fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e076      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003804:	893b      	ldrh	r3, [r7, #8]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	611a      	str	r2, [r3, #16]
 800380e:	e021      	b.n	8003854 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003810:	893b      	ldrh	r3, [r7, #8]
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	b29b      	uxth	r3, r3
 8003816:	b2da      	uxtb	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800381e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003820:	6a39      	ldr	r1, [r7, #32]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f982 	bl	8003b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b04      	cmp	r3, #4
 8003834:	d107      	bne.n	8003846 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003844:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e050      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800384a:	893b      	ldrh	r3, [r7, #8]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003856:	6a39      	ldr	r1, [r7, #32]
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f967 	bl	8003b2c <I2C_WaitOnTXEFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00d      	beq.n	8003880 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	2b04      	cmp	r3, #4
 800386a:	d107      	bne.n	800387c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e035      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	2200      	movs	r2, #0
 8003898:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f82b 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00d      	beq.n	80038c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b6:	d103      	bne.n	80038c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e013      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038c4:	897b      	ldrh	r3, [r7, #10]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	6a3a      	ldr	r2, [r7, #32]
 80038d8:	4906      	ldr	r1, [pc, #24]	; (80038f4 <I2C_RequestMemoryRead+0x1cc>)
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 f886 	bl	80039ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	00010002 	.word	0x00010002

080038f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003908:	e048      	b.n	800399c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d044      	beq.n	800399c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7fe fcdd 	bl	80022d0 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d139      	bne.n	800399c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	0c1b      	lsrs	r3, r3, #16
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d10d      	bne.n	800394e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	43da      	mvns	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4013      	ands	r3, r2
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	e00c      	b.n	8003968 <I2C_WaitOnFlagUntilTimeout+0x70>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	43da      	mvns	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4013      	ands	r3, r2
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	bf0c      	ite	eq
 8003960:	2301      	moveq	r3, #1
 8003962:	2300      	movne	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	429a      	cmp	r2, r3
 800396c:	d116      	bne.n	800399c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	f043 0220 	orr.w	r2, r3, #32
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e023      	b.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	0c1b      	lsrs	r3, r3, #16
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d10d      	bne.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	43da      	mvns	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4013      	ands	r3, r2
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bf0c      	ite	eq
 80039b8:	2301      	moveq	r3, #1
 80039ba:	2300      	movne	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	e00c      	b.n	80039dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	43da      	mvns	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	4013      	ands	r3, r2
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d093      	beq.n	800390a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039fa:	e071      	b.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0a:	d123      	bne.n	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e067      	b.n	8003b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d041      	beq.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5c:	f7fe fc38 	bl	80022d0 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d302      	bcc.n	8003a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d136      	bne.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	0c1b      	lsrs	r3, r3, #16
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d10c      	bne.n	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	43da      	mvns	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4013      	ands	r3, r2
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bf14      	ite	ne
 8003a8e:	2301      	movne	r3, #1
 8003a90:	2300      	moveq	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	e00b      	b.n	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	43da      	mvns	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d016      	beq.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	f043 0220 	orr.w	r2, r3, #32
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e021      	b.n	8003b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	0c1b      	lsrs	r3, r3, #16
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d10c      	bne.n	8003b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	43da      	mvns	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	4013      	ands	r3, r2
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e00b      	b.n	8003b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f47f af6d 	bne.w	80039fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b38:	e034      	b.n	8003ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f8e3 	bl	8003d06 <I2C_IsAcknowledgeFailed>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e034      	b.n	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d028      	beq.n	8003ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b52:	f7fe fbbd 	bl	80022d0 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d302      	bcc.n	8003b68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d11d      	bne.n	8003ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b80      	cmp	r3, #128	; 0x80
 8003b74:	d016      	beq.n	8003ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e007      	b.n	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bae:	2b80      	cmp	r3, #128	; 0x80
 8003bb0:	d1c3      	bne.n	8003b3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc8:	e034      	b.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f89b 	bl	8003d06 <I2C_IsAcknowledgeFailed>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e034      	b.n	8003c44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d028      	beq.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be2:	f7fe fb75 	bl	80022d0 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d302      	bcc.n	8003bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d11d      	bne.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d016      	beq.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e007      	b.n	8003c44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d1c3      	bne.n	8003bca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c58:	e049      	b.n	8003cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d119      	bne.n	8003c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0210 	mvn.w	r2, #16
 8003c70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e030      	b.n	8003cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9c:	f7fe fb18 	bl	80022d0 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d302      	bcc.n	8003cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d11d      	bne.n	8003cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d016      	beq.n	8003cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f043 0220 	orr.w	r2, r3, #32
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e007      	b.n	8003cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b40      	cmp	r3, #64	; 0x40
 8003cfa:	d1ae      	bne.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1c:	d11b      	bne.n	8003d56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f043 0204 	orr.w	r2, r3, #4
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e272      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8087 	beq.w	8003e92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d84:	4b92      	ldr	r3, [pc, #584]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d00c      	beq.n	8003daa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d90:	4b8f      	ldr	r3, [pc, #572]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d112      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x5e>
 8003d9c:	4b8c      	ldr	r3, [pc, #560]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da8:	d10b      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003daa:	4b89      	ldr	r3, [pc, #548]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d06c      	beq.n	8003e90 <HAL_RCC_OscConfig+0x12c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d168      	bne.n	8003e90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e24c      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dca:	d106      	bne.n	8003dda <HAL_RCC_OscConfig+0x76>
 8003dcc:	4b80      	ldr	r3, [pc, #512]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a7f      	ldr	r2, [pc, #508]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	e02e      	b.n	8003e38 <HAL_RCC_OscConfig+0xd4>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCC_OscConfig+0x98>
 8003de2:	4b7b      	ldr	r3, [pc, #492]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a7a      	ldr	r2, [pc, #488]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b78      	ldr	r3, [pc, #480]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a77      	ldr	r2, [pc, #476]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e01d      	b.n	8003e38 <HAL_RCC_OscConfig+0xd4>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCC_OscConfig+0xbc>
 8003e06:	4b72      	ldr	r3, [pc, #456]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a71      	ldr	r2, [pc, #452]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b6f      	ldr	r3, [pc, #444]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a6e      	ldr	r2, [pc, #440]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	e00b      	b.n	8003e38 <HAL_RCC_OscConfig+0xd4>
 8003e20:	4b6b      	ldr	r3, [pc, #428]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a6a      	ldr	r2, [pc, #424]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	4b68      	ldr	r3, [pc, #416]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a67      	ldr	r2, [pc, #412]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d013      	beq.n	8003e68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fe fa46 	bl	80022d0 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e48:	f7fe fa42 	bl	80022d0 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	; 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e200      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	4b5d      	ldr	r3, [pc, #372]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0xe4>
 8003e66:	e014      	b.n	8003e92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe fa32 	bl	80022d0 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fe fa2e 	bl	80022d0 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e1ec      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	4b53      	ldr	r3, [pc, #332]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x10c>
 8003e8e:	e000      	b.n	8003e92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d063      	beq.n	8003f66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e9e:	4b4c      	ldr	r3, [pc, #304]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003eaa:	4b49      	ldr	r3, [pc, #292]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d11c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x18c>
 8003eb6:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d116      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec2:	4b43      	ldr	r3, [pc, #268]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_RCC_OscConfig+0x176>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d001      	beq.n	8003eda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e1c0      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eda:	4b3d      	ldr	r3, [pc, #244]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4939      	ldr	r1, [pc, #228]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eee:	e03a      	b.n	8003f66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef8:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <HAL_RCC_OscConfig+0x270>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efe:	f7fe f9e7 	bl	80022d0 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f06:	f7fe f9e3 	bl	80022d0 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e1a1      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	4b2d      	ldr	r3, [pc, #180]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f24:	4b2a      	ldr	r3, [pc, #168]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4927      	ldr	r1, [pc, #156]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]
 8003f38:	e015      	b.n	8003f66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3a:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fe f9c6 	bl	80022d0 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f48:	f7fe f9c2 	bl	80022d0 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e180      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d03a      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d019      	beq.n	8003fae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7a:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f80:	f7fe f9a6 	bl	80022d0 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f88:	f7fe f9a2 	bl	80022d0 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e160      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	f000 face 	bl	8004548 <RCC_Delay>
 8003fac:	e01c      	b.n	8003fe8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb4:	f7fe f98c 	bl	80022d0 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fba:	e00f      	b.n	8003fdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fbc:	f7fe f988 	bl	80022d0 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d908      	bls.n	8003fdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e146      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	42420000 	.word	0x42420000
 8003fd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	4b92      	ldr	r3, [pc, #584]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e9      	bne.n	8003fbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80a6 	beq.w	8004142 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffa:	4b8b      	ldr	r3, [pc, #556]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10d      	bne.n	8004022 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	4b88      	ldr	r3, [pc, #544]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4a87      	ldr	r2, [pc, #540]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004010:	61d3      	str	r3, [r2, #28]
 8004012:	4b85      	ldr	r3, [pc, #532]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004022:	4b82      	ldr	r3, [pc, #520]	; (800422c <HAL_RCC_OscConfig+0x4c8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d118      	bne.n	8004060 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800402e:	4b7f      	ldr	r3, [pc, #508]	; (800422c <HAL_RCC_OscConfig+0x4c8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a7e      	ldr	r2, [pc, #504]	; (800422c <HAL_RCC_OscConfig+0x4c8>)
 8004034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403a:	f7fe f949 	bl	80022d0 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004042:	f7fe f945 	bl	80022d0 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b64      	cmp	r3, #100	; 0x64
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e103      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004054:	4b75      	ldr	r3, [pc, #468]	; (800422c <HAL_RCC_OscConfig+0x4c8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d106      	bne.n	8004076 <HAL_RCC_OscConfig+0x312>
 8004068:	4b6f      	ldr	r3, [pc, #444]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	4a6e      	ldr	r2, [pc, #440]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6213      	str	r3, [r2, #32]
 8004074:	e02d      	b.n	80040d2 <HAL_RCC_OscConfig+0x36e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x334>
 800407e:	4b6a      	ldr	r3, [pc, #424]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	4a69      	ldr	r2, [pc, #420]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	6213      	str	r3, [r2, #32]
 800408a:	4b67      	ldr	r3, [pc, #412]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	4a66      	ldr	r2, [pc, #408]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004090:	f023 0304 	bic.w	r3, r3, #4
 8004094:	6213      	str	r3, [r2, #32]
 8004096:	e01c      	b.n	80040d2 <HAL_RCC_OscConfig+0x36e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b05      	cmp	r3, #5
 800409e:	d10c      	bne.n	80040ba <HAL_RCC_OscConfig+0x356>
 80040a0:	4b61      	ldr	r3, [pc, #388]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	4a60      	ldr	r2, [pc, #384]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040a6:	f043 0304 	orr.w	r3, r3, #4
 80040aa:	6213      	str	r3, [r2, #32]
 80040ac:	4b5e      	ldr	r3, [pc, #376]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	4a5d      	ldr	r2, [pc, #372]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6213      	str	r3, [r2, #32]
 80040b8:	e00b      	b.n	80040d2 <HAL_RCC_OscConfig+0x36e>
 80040ba:	4b5b      	ldr	r3, [pc, #364]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	4a5a      	ldr	r2, [pc, #360]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	6213      	str	r3, [r2, #32]
 80040c6:	4b58      	ldr	r3, [pc, #352]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	4a57      	ldr	r2, [pc, #348]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	f023 0304 	bic.w	r3, r3, #4
 80040d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d015      	beq.n	8004106 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040da:	f7fe f8f9 	bl	80022d0 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e0:	e00a      	b.n	80040f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fe f8f5 	bl	80022d0 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e0b1      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f8:	4b4b      	ldr	r3, [pc, #300]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ee      	beq.n	80040e2 <HAL_RCC_OscConfig+0x37e>
 8004104:	e014      	b.n	8004130 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004106:	f7fe f8e3 	bl	80022d0 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fe f8df 	bl	80022d0 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	; 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e09b      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004124:	4b40      	ldr	r3, [pc, #256]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ee      	bne.n	800410e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004130:	7dfb      	ldrb	r3, [r7, #23]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d105      	bne.n	8004142 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004136:	4b3c      	ldr	r3, [pc, #240]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	4a3b      	ldr	r2, [pc, #236]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 800413c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004140:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8087 	beq.w	800425a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800414c:	4b36      	ldr	r3, [pc, #216]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 030c 	and.w	r3, r3, #12
 8004154:	2b08      	cmp	r3, #8
 8004156:	d061      	beq.n	800421c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	2b02      	cmp	r3, #2
 800415e:	d146      	bne.n	80041ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004160:	4b33      	ldr	r3, [pc, #204]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004166:	f7fe f8b3 	bl	80022d0 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416e:	f7fe f8af 	bl	80022d0 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e06d      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004180:	4b29      	ldr	r3, [pc, #164]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f0      	bne.n	800416e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004194:	d108      	bne.n	80041a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004196:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4921      	ldr	r1, [pc, #132]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041a8:	4b1f      	ldr	r3, [pc, #124]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a19      	ldr	r1, [r3, #32]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	430b      	orrs	r3, r1
 80041ba:	491b      	ldr	r1, [pc, #108]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c6:	f7fe f883 	bl	80022d0 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ce:	f7fe f87f 	bl	80022d0 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e03d      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x46a>
 80041ec:	e035      	b.n	800425a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_RCC_OscConfig+0x4cc>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fe f86c 	bl	80022d0 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fc:	f7fe f868 	bl	80022d0 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e026      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCC_OscConfig+0x4c4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x498>
 800421a:	e01e      	b.n	800425a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d107      	bne.n	8004234 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e019      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
 8004228:	40021000 	.word	0x40021000
 800422c:	40007000 	.word	0x40007000
 8004230:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_RCC_OscConfig+0x500>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	429a      	cmp	r2, r3
 8004246:	d106      	bne.n	8004256 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	429a      	cmp	r2, r3
 8004254:	d001      	beq.n	800425a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40021000 	.word	0x40021000

08004268 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0d0      	b.n	800441e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800427c:	4b6a      	ldr	r3, [pc, #424]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d910      	bls.n	80042ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428a:	4b67      	ldr	r3, [pc, #412]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f023 0207 	bic.w	r2, r3, #7
 8004292:	4965      	ldr	r1, [pc, #404]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	4313      	orrs	r3, r2
 8004298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429a:	4b63      	ldr	r3, [pc, #396]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0b8      	b.n	800441e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d020      	beq.n	80042fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042c4:	4b59      	ldr	r3, [pc, #356]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4a58      	ldr	r2, [pc, #352]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80042ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042dc:	4b53      	ldr	r3, [pc, #332]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4a52      	ldr	r2, [pc, #328]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80042e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e8:	4b50      	ldr	r3, [pc, #320]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	494d      	ldr	r1, [pc, #308]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d040      	beq.n	8004388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d107      	bne.n	800431e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	4b47      	ldr	r3, [pc, #284]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d115      	bne.n	8004346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e07f      	b.n	800441e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d107      	bne.n	8004336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004326:	4b41      	ldr	r3, [pc, #260]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e073      	b.n	800441e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004336:	4b3d      	ldr	r3, [pc, #244]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e06b      	b.n	800441e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004346:	4b39      	ldr	r3, [pc, #228]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f023 0203 	bic.w	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	4936      	ldr	r1, [pc, #216]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004358:	f7fd ffba 	bl	80022d0 <HAL_GetTick>
 800435c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435e:	e00a      	b.n	8004376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004360:	f7fd ffb6 	bl	80022d0 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	; 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e053      	b.n	800441e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004376:	4b2d      	ldr	r3, [pc, #180]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 020c 	and.w	r2, r3, #12
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	429a      	cmp	r2, r3
 8004386:	d1eb      	bne.n	8004360 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004388:	4b27      	ldr	r3, [pc, #156]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d210      	bcs.n	80043b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004396:	4b24      	ldr	r3, [pc, #144]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 0207 	bic.w	r2, r3, #7
 800439e:	4922      	ldr	r1, [pc, #136]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a6:	4b20      	ldr	r3, [pc, #128]	; (8004428 <HAL_RCC_ClockConfig+0x1c0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d001      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e032      	b.n	800441e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c4:	4b19      	ldr	r3, [pc, #100]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4916      	ldr	r1, [pc, #88]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	490e      	ldr	r1, [pc, #56]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043f6:	f000 f821 	bl	800443c <HAL_RCC_GetSysClockFreq>
 80043fa:	4602      	mov	r2, r0
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	490a      	ldr	r1, [pc, #40]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 8004408:	5ccb      	ldrb	r3, [r1, r3]
 800440a:	fa22 f303 	lsr.w	r3, r2, r3
 800440e:	4a09      	ldr	r2, [pc, #36]	; (8004434 <HAL_RCC_ClockConfig+0x1cc>)
 8004410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004412:	4b09      	ldr	r3, [pc, #36]	; (8004438 <HAL_RCC_ClockConfig+0x1d0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd ff18 	bl	800224c <HAL_InitTick>

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40022000 	.word	0x40022000
 800442c:	40021000 	.word	0x40021000
 8004430:	080069c8 	.word	0x080069c8
 8004434:	200000bc 	.word	0x200000bc
 8004438:	200000c0 	.word	0x200000c0

0800443c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004456:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b04      	cmp	r3, #4
 8004464:	d002      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x30>
 8004466:	2b08      	cmp	r3, #8
 8004468:	d003      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x36>
 800446a:	e027      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800446c:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800446e:	613b      	str	r3, [r7, #16]
      break;
 8004470:	e027      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	0c9b      	lsrs	r3, r3, #18
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	4a17      	ldr	r2, [pc, #92]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800447c:	5cd3      	ldrb	r3, [r2, r3]
 800447e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d010      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800448a:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	0c5b      	lsrs	r3, r3, #17
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	4a11      	ldr	r2, [pc, #68]	; (80044dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004496:	5cd3      	ldrb	r3, [r2, r3]
 8004498:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a0d      	ldr	r2, [pc, #52]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800449e:	fb03 f202 	mul.w	r2, r3, r2
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e004      	b.n	80044b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a0c      	ldr	r2, [pc, #48]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80044b0:	fb02 f303 	mul.w	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	613b      	str	r3, [r7, #16]
      break;
 80044ba:	e002      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80044be:	613b      	str	r3, [r7, #16]
      break;
 80044c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044c2:	693b      	ldr	r3, [r7, #16]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000
 80044d4:	007a1200 	.word	0x007a1200
 80044d8:	080069e0 	.word	0x080069e0
 80044dc:	080069f0 	.word	0x080069f0
 80044e0:	003d0900 	.word	0x003d0900

080044e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e8:	4b02      	ldr	r3, [pc, #8]	; (80044f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr
 80044f4:	200000bc 	.word	0x200000bc

080044f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044fc:	f7ff fff2 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	4903      	ldr	r1, [pc, #12]	; (800451c <HAL_RCC_GetPCLK1Freq+0x24>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40021000 	.word	0x40021000
 800451c:	080069d8 	.word	0x080069d8

08004520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004524:	f7ff ffde 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	0adb      	lsrs	r3, r3, #11
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4903      	ldr	r1, [pc, #12]	; (8004544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40021000 	.word	0x40021000
 8004544:	080069d8 	.word	0x080069d8

08004548 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004550:	4b0a      	ldr	r3, [pc, #40]	; (800457c <RCC_Delay+0x34>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <RCC_Delay+0x38>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	0a5b      	lsrs	r3, r3, #9
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004564:	bf00      	nop
  }
  while (Delay --);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1e5a      	subs	r2, r3, #1
 800456a:	60fa      	str	r2, [r7, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1f9      	bne.n	8004564 <RCC_Delay+0x1c>
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr
 800457c:	200000bc 	.word	0x200000bc
 8004580:	10624dd3 	.word	0x10624dd3

08004584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e042      	b.n	800461c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fd fc9e 	bl	8001eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2224      	movs	r2, #36	; 0x24
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fdc5 	bl	8005158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b20      	cmp	r3, #32
 8004642:	d16d      	bne.n	8004720 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_UART_Transmit+0x2c>
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e066      	b.n	8004722 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2221      	movs	r2, #33	; 0x21
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004662:	f7fd fe35 	bl	80022d0 <HAL_GetTick>
 8004666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	88fa      	ldrh	r2, [r7, #6]
 8004672:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d108      	bne.n	8004690 <HAL_UART_Transmit+0x6c>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d104      	bne.n	8004690 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	e003      	b.n	8004698 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004698:	e02a      	b.n	80046f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	2180      	movs	r1, #128	; 0x80
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fb14 	bl	8004cd2 <UART_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e036      	b.n	8004722 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10b      	bne.n	80046d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	3302      	adds	r3, #2
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	e007      	b.n	80046e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	781a      	ldrb	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	3301      	adds	r3, #1
 80046e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1cf      	bne.n	800469a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	2140      	movs	r1, #64	; 0x40
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fae4 	bl	8004cd2 <UART_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e006      	b.n	8004722 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	e000      	b.n	8004722 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004720:	2302      	movs	r3, #2
  }
}
 8004722:	4618      	mov	r0, r3
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	4613      	mov	r3, r2
 8004736:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b20      	cmp	r3, #32
 8004742:	d112      	bne.n	800476a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_UART_Receive_IT+0x26>
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e00b      	b.n	800476c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	461a      	mov	r2, r3
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 fb24 	bl	8004dae <UART_Start_Receive_IT>
 8004766:	4603      	mov	r3, r0
 8004768:	e000      	b.n	800476c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800476a:	2302      	movs	r3, #2
  }
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b0ba      	sub	sp, #232	; 0xe8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800479a:	2300      	movs	r3, #0
 800479c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_UART_IRQHandler+0x66>
 80047c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fc01 	bl	8004fda <UART_Receive_IT>
      return;
 80047d8:	e25b      	b.n	8004c92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 80de 	beq.w	80049a0 <HAL_UART_IRQHandler+0x22c>
 80047e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d106      	bne.n	80047fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 80d1 	beq.w	80049a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <HAL_UART_IRQHandler+0xae>
 800480a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800480e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	f043 0201 	orr.w	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <HAL_UART_IRQHandler+0xd2>
 800482e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	f043 0202 	orr.w	r2, r3, #2
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00b      	beq.n	800486a <HAL_UART_IRQHandler+0xf6>
 8004852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	f043 0204 	orr.w	r2, r3, #4
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d011      	beq.n	800489a <HAL_UART_IRQHandler+0x126>
 8004876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487a:	f003 0320 	and.w	r3, r3, #32
 800487e:	2b00      	cmp	r3, #0
 8004880:	d105      	bne.n	800488e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	f043 0208 	orr.w	r2, r3, #8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 81f2 	beq.w	8004c88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d008      	beq.n	80048c2 <HAL_UART_IRQHandler+0x14e>
 80048b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fb8c 	bl	8004fda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	bf14      	ite	ne
 80048d0:	2301      	movne	r3, #1
 80048d2:	2300      	moveq	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d103      	bne.n	80048ee <HAL_UART_IRQHandler+0x17a>
 80048e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d04f      	beq.n	800498e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fa96 	bl	8004e20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d041      	beq.n	8004986 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3314      	adds	r3, #20
 8004908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004918:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800491c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3314      	adds	r3, #20
 800492a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800492e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004932:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800493a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1d9      	bne.n	8004902 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d013      	beq.n	800497e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495a:	4a7e      	ldr	r2, [pc, #504]	; (8004b54 <HAL_UART_IRQHandler+0x3e0>)
 800495c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004962:	4618      	mov	r0, r3
 8004964:	f7fd fe2a 	bl	80025bc <HAL_DMA_Abort_IT>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d016      	beq.n	800499c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004978:	4610      	mov	r0, r2
 800497a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497c:	e00e      	b.n	800499c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f993 	bl	8004caa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	e00a      	b.n	800499c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f98f 	bl	8004caa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	e006      	b.n	800499c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f98b 	bl	8004caa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800499a:	e175      	b.n	8004c88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800499c:	bf00      	nop
    return;
 800499e:	e173      	b.n	8004c88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	f040 814f 	bne.w	8004c48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 8148 	beq.w	8004c48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8141 	beq.w	8004c48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049c6:	2300      	movs	r3, #0
 80049c8:	60bb      	str	r3, [r7, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 80b6 	beq.w	8004b58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8145 	beq.w	8004c8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	f080 813e 	bcs.w	8004c8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	f000 8088 	beq.w	8004b34 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a32:	e853 3f00 	ldrex	r3, [r3]
 8004a36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a50:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1d9      	bne.n	8004a24 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3314      	adds	r3, #20
 8004a76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3314      	adds	r3, #20
 8004a90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a94:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e1      	bne.n	8004a70 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3314      	adds	r3, #20
 8004ab2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3314      	adds	r3, #20
 8004acc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ad0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ad2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ad6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e3      	bne.n	8004aac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b04:	f023 0310 	bic.w	r3, r3, #16
 8004b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	330c      	adds	r3, #12
 8004b12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b16:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b18:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e3      	bne.n	8004af2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fd fd09 	bl	8002546 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	4619      	mov	r1, r3
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8b6 	bl	8004cbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b50:	e09c      	b.n	8004c8c <HAL_UART_IRQHandler+0x518>
 8004b52:	bf00      	nop
 8004b54:	08004ee5 	.word	0x08004ee5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 808e 	beq.w	8004c90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8089 	beq.w	8004c90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	330c      	adds	r3, #12
 8004b84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	330c      	adds	r3, #12
 8004b9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ba2:	647a      	str	r2, [r7, #68]	; 0x44
 8004ba4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e3      	bne.n	8004b7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3314      	adds	r3, #20
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3314      	adds	r3, #20
 8004bd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bda:	633a      	str	r2, [r7, #48]	; 0x30
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e3      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	330c      	adds	r3, #12
 8004c02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0310 	bic.w	r3, r3, #16
 8004c12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	330c      	adds	r3, #12
 8004c1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c20:	61fa      	str	r2, [r7, #28]
 8004c22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	69b9      	ldr	r1, [r7, #24]
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e3      	bne.n	8004bfc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f83b 	bl	8004cbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c46:	e023      	b.n	8004c90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d009      	beq.n	8004c68 <HAL_UART_IRQHandler+0x4f4>
 8004c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f953 	bl	8004f0c <UART_Transmit_IT>
    return;
 8004c66:	e014      	b.n	8004c92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00e      	beq.n	8004c92 <HAL_UART_IRQHandler+0x51e>
 8004c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f992 	bl	8004faa <UART_EndTransmit_IT>
    return;
 8004c86:	e004      	b.n	8004c92 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c88:	bf00      	nop
 8004c8a:	e002      	b.n	8004c92 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c8c:	bf00      	nop
 8004c8e:	e000      	b.n	8004c92 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c90:	bf00      	nop
  }
}
 8004c92:	37e8      	adds	r7, #232	; 0xe8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr

08004caa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr

08004cd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b090      	sub	sp, #64	; 0x40
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	603b      	str	r3, [r7, #0]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce2:	e050      	b.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d04c      	beq.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cf2:	f7fd faed 	bl	80022d0 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d241      	bcs.n	8004d86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	330c      	adds	r3, #12
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	330c      	adds	r3, #12
 8004d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d22:	637a      	str	r2, [r7, #52]	; 0x34
 8004d24:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e5      	bne.n	8004d02 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3314      	adds	r3, #20
 8004d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	613b      	str	r3, [r7, #16]
   return(result);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f023 0301 	bic.w	r3, r3, #1
 8004d4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3314      	adds	r3, #20
 8004d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d56:	623a      	str	r2, [r7, #32]
 8004d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	69f9      	ldr	r1, [r7, #28]
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e5      	bne.n	8004d36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e00f      	b.n	8004da6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	bf0c      	ite	eq
 8004d96:	2301      	moveq	r3, #1
 8004d98:	2300      	movne	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d09f      	beq.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3740      	adds	r7, #64	; 0x40
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b085      	sub	sp, #20
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	4613      	mov	r3, r2
 8004dba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	88fa      	ldrh	r2, [r7, #6]
 8004dc6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	88fa      	ldrh	r2, [r7, #6]
 8004dcc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2222      	movs	r2, #34	; 0x22
 8004dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d007      	beq.n	8004df4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0220 	orr.w	r2, r2, #32
 8004e12:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bc80      	pop	{r7}
 8004e1e:	4770      	bx	lr

08004e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b095      	sub	sp, #84	; 0x54
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	330c      	adds	r3, #12
 8004e2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e48:	643a      	str	r2, [r7, #64]	; 0x40
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e5      	bne.n	8004e28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3314      	adds	r3, #20
 8004e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3314      	adds	r3, #20
 8004e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e5      	bne.n	8004e5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d119      	bne.n	8004ecc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f023 0310 	bic.w	r3, r3, #16
 8004eae:	647b      	str	r3, [r7, #68]	; 0x44
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eb8:	61ba      	str	r2, [r7, #24]
 8004eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6979      	ldr	r1, [r7, #20]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e5      	bne.n	8004e98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004eda:	bf00      	nop
 8004edc:	3754      	adds	r7, #84	; 0x54
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr

08004ee4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f7ff fed3 	bl	8004caa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b21      	cmp	r3, #33	; 0x21
 8004f1e:	d13e      	bne.n	8004f9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f28:	d114      	bne.n	8004f54 <UART_Transmit_IT+0x48>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d110      	bne.n	8004f54 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	1c9a      	adds	r2, r3, #2
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	621a      	str	r2, [r3, #32]
 8004f52:	e008      	b.n	8004f66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	1c59      	adds	r1, r3, #1
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6211      	str	r1, [r2, #32]
 8004f5e:	781a      	ldrb	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	4619      	mov	r1, r3
 8004f74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10f      	bne.n	8004f9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	e000      	b.n	8004fa0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f9e:	2302      	movs	r3, #2
  }
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr

08004faa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff fe64 	bl	8004c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b08c      	sub	sp, #48	; 0x30
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b22      	cmp	r3, #34	; 0x22
 8004fec:	f040 80ae 	bne.w	800514c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff8:	d117      	bne.n	800502a <UART_Receive_IT+0x50>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d113      	bne.n	800502a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005018:	b29a      	uxth	r2, r3
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	1c9a      	adds	r2, r3, #2
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	; 0x28
 8005028:	e026      	b.n	8005078 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503c:	d007      	beq.n	800504e <UART_Receive_IT+0x74>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <UART_Receive_IT+0x82>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	b2da      	uxtb	r2, r3
 8005056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	e008      	b.n	800506e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005068:	b2da      	uxtb	r2, r3
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29b      	uxth	r3, r3
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	4619      	mov	r1, r3
 8005086:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005088:	2b00      	cmp	r3, #0
 800508a:	d15d      	bne.n	8005148 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0220 	bic.w	r2, r2, #32
 800509a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695a      	ldr	r2, [r3, #20]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d135      	bne.n	800513e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	613b      	str	r3, [r7, #16]
   return(result);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f023 0310 	bic.w	r3, r3, #16
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	330c      	adds	r3, #12
 80050f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f8:	623a      	str	r2, [r7, #32]
 80050fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	69f9      	ldr	r1, [r7, #28]
 80050fe:	6a3a      	ldr	r2, [r7, #32]
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	61bb      	str	r3, [r7, #24]
   return(result);
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e5      	bne.n	80050d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b10      	cmp	r3, #16
 8005118:	d10a      	bne.n	8005130 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005134:	4619      	mov	r1, r3
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff fdc0 	bl	8004cbc <HAL_UARTEx_RxEventCallback>
 800513c:	e002      	b.n	8005144 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fc fbc4 	bl	80018cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	e002      	b.n	800514e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	e000      	b.n	800514e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800514c:	2302      	movs	r3, #2
  }
}
 800514e:	4618      	mov	r0, r3
 8005150:	3730      	adds	r7, #48	; 0x30
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005192:	f023 030c 	bic.w	r3, r3, #12
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	430b      	orrs	r3, r1
 800519e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2c      	ldr	r2, [pc, #176]	; (800526c <UART_SetConfig+0x114>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d103      	bne.n	80051c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051c0:	f7ff f9ae 	bl	8004520 <HAL_RCC_GetPCLK2Freq>
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	e002      	b.n	80051ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051c8:	f7ff f996 	bl	80044f8 <HAL_RCC_GetPCLK1Freq>
 80051cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009a      	lsls	r2, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <UART_SetConfig+0x118>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	0119      	lsls	r1, r3, #4
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009a      	lsls	r2, r3, #2
 80051f8:	441a      	add	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	fbb2 f2f3 	udiv	r2, r2, r3
 8005204:	4b1a      	ldr	r3, [pc, #104]	; (8005270 <UART_SetConfig+0x118>)
 8005206:	fba3 0302 	umull	r0, r3, r3, r2
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	2064      	movs	r0, #100	; 0x64
 800520e:	fb00 f303 	mul.w	r3, r0, r3
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	3332      	adds	r3, #50	; 0x32
 8005218:	4a15      	ldr	r2, [pc, #84]	; (8005270 <UART_SetConfig+0x118>)
 800521a:	fba2 2303 	umull	r2, r3, r2, r3
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005224:	4419      	add	r1, r3
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009a      	lsls	r2, r3, #2
 8005230:	441a      	add	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	fbb2 f2f3 	udiv	r2, r2, r3
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <UART_SetConfig+0x118>)
 800523e:	fba3 0302 	umull	r0, r3, r3, r2
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	2064      	movs	r0, #100	; 0x64
 8005246:	fb00 f303 	mul.w	r3, r0, r3
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	3332      	adds	r3, #50	; 0x32
 8005250:	4a07      	ldr	r2, [pc, #28]	; (8005270 <UART_SetConfig+0x118>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	f003 020f 	and.w	r2, r3, #15
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	440a      	add	r2, r1
 8005262:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40013800 	.word	0x40013800
 8005270:	51eb851f 	.word	0x51eb851f

08005274 <__errno>:
 8005274:	4b01      	ldr	r3, [pc, #4]	; (800527c <__errno+0x8>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	200000c8 	.word	0x200000c8

08005280 <__libc_init_array>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	2600      	movs	r6, #0
 8005284:	4d0c      	ldr	r5, [pc, #48]	; (80052b8 <__libc_init_array+0x38>)
 8005286:	4c0d      	ldr	r4, [pc, #52]	; (80052bc <__libc_init_array+0x3c>)
 8005288:	1b64      	subs	r4, r4, r5
 800528a:	10a4      	asrs	r4, r4, #2
 800528c:	42a6      	cmp	r6, r4
 800528e:	d109      	bne.n	80052a4 <__libc_init_array+0x24>
 8005290:	f001 fa70 	bl	8006774 <_init>
 8005294:	2600      	movs	r6, #0
 8005296:	4d0a      	ldr	r5, [pc, #40]	; (80052c0 <__libc_init_array+0x40>)
 8005298:	4c0a      	ldr	r4, [pc, #40]	; (80052c4 <__libc_init_array+0x44>)
 800529a:	1b64      	subs	r4, r4, r5
 800529c:	10a4      	asrs	r4, r4, #2
 800529e:	42a6      	cmp	r6, r4
 80052a0:	d105      	bne.n	80052ae <__libc_init_array+0x2e>
 80052a2:	bd70      	pop	{r4, r5, r6, pc}
 80052a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a8:	4798      	blx	r3
 80052aa:	3601      	adds	r6, #1
 80052ac:	e7ee      	b.n	800528c <__libc_init_array+0xc>
 80052ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b2:	4798      	blx	r3
 80052b4:	3601      	adds	r6, #1
 80052b6:	e7f2      	b.n	800529e <__libc_init_array+0x1e>
 80052b8:	08006b3c 	.word	0x08006b3c
 80052bc:	08006b3c 	.word	0x08006b3c
 80052c0:	08006b3c 	.word	0x08006b3c
 80052c4:	08006b40 	.word	0x08006b40

080052c8 <memcpy>:
 80052c8:	440a      	add	r2, r1
 80052ca:	4291      	cmp	r1, r2
 80052cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80052d0:	d100      	bne.n	80052d4 <memcpy+0xc>
 80052d2:	4770      	bx	lr
 80052d4:	b510      	push	{r4, lr}
 80052d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052da:	4291      	cmp	r1, r2
 80052dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052e0:	d1f9      	bne.n	80052d6 <memcpy+0xe>
 80052e2:	bd10      	pop	{r4, pc}

080052e4 <memset>:
 80052e4:	4603      	mov	r3, r0
 80052e6:	4402      	add	r2, r0
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d100      	bne.n	80052ee <memset+0xa>
 80052ec:	4770      	bx	lr
 80052ee:	f803 1b01 	strb.w	r1, [r3], #1
 80052f2:	e7f9      	b.n	80052e8 <memset+0x4>

080052f4 <siprintf>:
 80052f4:	b40e      	push	{r1, r2, r3}
 80052f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052fa:	b500      	push	{lr}
 80052fc:	b09c      	sub	sp, #112	; 0x70
 80052fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005300:	9002      	str	r0, [sp, #8]
 8005302:	9006      	str	r0, [sp, #24]
 8005304:	9107      	str	r1, [sp, #28]
 8005306:	9104      	str	r1, [sp, #16]
 8005308:	4808      	ldr	r0, [pc, #32]	; (800532c <siprintf+0x38>)
 800530a:	4909      	ldr	r1, [pc, #36]	; (8005330 <siprintf+0x3c>)
 800530c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005310:	9105      	str	r1, [sp, #20]
 8005312:	6800      	ldr	r0, [r0, #0]
 8005314:	a902      	add	r1, sp, #8
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	f000 f9ee 	bl	80056f8 <_svfiprintf_r>
 800531c:	2200      	movs	r2, #0
 800531e:	9b02      	ldr	r3, [sp, #8]
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	b01c      	add	sp, #112	; 0x70
 8005324:	f85d eb04 	ldr.w	lr, [sp], #4
 8005328:	b003      	add	sp, #12
 800532a:	4770      	bx	lr
 800532c:	200000c8 	.word	0x200000c8
 8005330:	ffff0208 	.word	0xffff0208

08005334 <strstr>:
 8005334:	780a      	ldrb	r2, [r1, #0]
 8005336:	b570      	push	{r4, r5, r6, lr}
 8005338:	b96a      	cbnz	r2, 8005356 <strstr+0x22>
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	429a      	cmp	r2, r3
 800533e:	d109      	bne.n	8005354 <strstr+0x20>
 8005340:	460c      	mov	r4, r1
 8005342:	4605      	mov	r5, r0
 8005344:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f6      	beq.n	800533a <strstr+0x6>
 800534c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005350:	429e      	cmp	r6, r3
 8005352:	d0f7      	beq.n	8005344 <strstr+0x10>
 8005354:	3001      	adds	r0, #1
 8005356:	7803      	ldrb	r3, [r0, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1ef      	bne.n	800533c <strstr+0x8>
 800535c:	4618      	mov	r0, r3
 800535e:	e7ec      	b.n	800533a <strstr+0x6>

08005360 <strtok>:
 8005360:	4b16      	ldr	r3, [pc, #88]	; (80053bc <strtok+0x5c>)
 8005362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005366:	681f      	ldr	r7, [r3, #0]
 8005368:	4605      	mov	r5, r0
 800536a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800536c:	460e      	mov	r6, r1
 800536e:	b9ec      	cbnz	r4, 80053ac <strtok+0x4c>
 8005370:	2050      	movs	r0, #80	; 0x50
 8005372:	f000 f881 	bl	8005478 <malloc>
 8005376:	4602      	mov	r2, r0
 8005378:	65b8      	str	r0, [r7, #88]	; 0x58
 800537a:	b920      	cbnz	r0, 8005386 <strtok+0x26>
 800537c:	2157      	movs	r1, #87	; 0x57
 800537e:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <strtok+0x60>)
 8005380:	4810      	ldr	r0, [pc, #64]	; (80053c4 <strtok+0x64>)
 8005382:	f000 f849 	bl	8005418 <__assert_func>
 8005386:	e9c0 4400 	strd	r4, r4, [r0]
 800538a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800538e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005392:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005396:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800539a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800539e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80053a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80053a6:	6184      	str	r4, [r0, #24]
 80053a8:	7704      	strb	r4, [r0, #28]
 80053aa:	6244      	str	r4, [r0, #36]	; 0x24
 80053ac:	4631      	mov	r1, r6
 80053ae:	4628      	mov	r0, r5
 80053b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053b2:	2301      	movs	r3, #1
 80053b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053b8:	f000 b806 	b.w	80053c8 <__strtok_r>
 80053bc:	200000c8 	.word	0x200000c8
 80053c0:	080069f8 	.word	0x080069f8
 80053c4:	08006a0f 	.word	0x08006a0f

080053c8 <__strtok_r>:
 80053c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ca:	b908      	cbnz	r0, 80053d0 <__strtok_r+0x8>
 80053cc:	6810      	ldr	r0, [r2, #0]
 80053ce:	b188      	cbz	r0, 80053f4 <__strtok_r+0x2c>
 80053d0:	4604      	mov	r4, r0
 80053d2:	460f      	mov	r7, r1
 80053d4:	4620      	mov	r0, r4
 80053d6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80053da:	f817 6b01 	ldrb.w	r6, [r7], #1
 80053de:	b91e      	cbnz	r6, 80053e8 <__strtok_r+0x20>
 80053e0:	b965      	cbnz	r5, 80053fc <__strtok_r+0x34>
 80053e2:	4628      	mov	r0, r5
 80053e4:	6015      	str	r5, [r2, #0]
 80053e6:	e005      	b.n	80053f4 <__strtok_r+0x2c>
 80053e8:	42b5      	cmp	r5, r6
 80053ea:	d1f6      	bne.n	80053da <__strtok_r+0x12>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1f0      	bne.n	80053d2 <__strtok_r+0xa>
 80053f0:	6014      	str	r4, [r2, #0]
 80053f2:	7003      	strb	r3, [r0, #0]
 80053f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f6:	461c      	mov	r4, r3
 80053f8:	e00c      	b.n	8005414 <__strtok_r+0x4c>
 80053fa:	b915      	cbnz	r5, 8005402 <__strtok_r+0x3a>
 80053fc:	460e      	mov	r6, r1
 80053fe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005402:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005406:	42ab      	cmp	r3, r5
 8005408:	d1f7      	bne.n	80053fa <__strtok_r+0x32>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f3      	beq.n	80053f6 <__strtok_r+0x2e>
 800540e:	2300      	movs	r3, #0
 8005410:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005414:	6014      	str	r4, [r2, #0]
 8005416:	e7ed      	b.n	80053f4 <__strtok_r+0x2c>

08005418 <__assert_func>:
 8005418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800541a:	4614      	mov	r4, r2
 800541c:	461a      	mov	r2, r3
 800541e:	4b09      	ldr	r3, [pc, #36]	; (8005444 <__assert_func+0x2c>)
 8005420:	4605      	mov	r5, r0
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68d8      	ldr	r0, [r3, #12]
 8005426:	b14c      	cbz	r4, 800543c <__assert_func+0x24>
 8005428:	4b07      	ldr	r3, [pc, #28]	; (8005448 <__assert_func+0x30>)
 800542a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800542e:	9100      	str	r1, [sp, #0]
 8005430:	462b      	mov	r3, r5
 8005432:	4906      	ldr	r1, [pc, #24]	; (800544c <__assert_func+0x34>)
 8005434:	f000 f80e 	bl	8005454 <fiprintf>
 8005438:	f000 fe1c 	bl	8006074 <abort>
 800543c:	4b04      	ldr	r3, [pc, #16]	; (8005450 <__assert_func+0x38>)
 800543e:	461c      	mov	r4, r3
 8005440:	e7f3      	b.n	800542a <__assert_func+0x12>
 8005442:	bf00      	nop
 8005444:	200000c8 	.word	0x200000c8
 8005448:	08006a6c 	.word	0x08006a6c
 800544c:	08006a79 	.word	0x08006a79
 8005450:	08006aa7 	.word	0x08006aa7

08005454 <fiprintf>:
 8005454:	b40e      	push	{r1, r2, r3}
 8005456:	b503      	push	{r0, r1, lr}
 8005458:	4601      	mov	r1, r0
 800545a:	ab03      	add	r3, sp, #12
 800545c:	4805      	ldr	r0, [pc, #20]	; (8005474 <fiprintf+0x20>)
 800545e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005462:	6800      	ldr	r0, [r0, #0]
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	f000 fa6f 	bl	8005948 <_vfiprintf_r>
 800546a:	b002      	add	sp, #8
 800546c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005470:	b003      	add	sp, #12
 8005472:	4770      	bx	lr
 8005474:	200000c8 	.word	0x200000c8

08005478 <malloc>:
 8005478:	4b02      	ldr	r3, [pc, #8]	; (8005484 <malloc+0xc>)
 800547a:	4601      	mov	r1, r0
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	f000 b86b 	b.w	8005558 <_malloc_r>
 8005482:	bf00      	nop
 8005484:	200000c8 	.word	0x200000c8

08005488 <_free_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4605      	mov	r5, r0
 800548c:	2900      	cmp	r1, #0
 800548e:	d040      	beq.n	8005512 <_free_r+0x8a>
 8005490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005494:	1f0c      	subs	r4, r1, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	bfb8      	it	lt
 800549a:	18e4      	addlt	r4, r4, r3
 800549c:	f001 f836 	bl	800650c <__malloc_lock>
 80054a0:	4a1c      	ldr	r2, [pc, #112]	; (8005514 <_free_r+0x8c>)
 80054a2:	6813      	ldr	r3, [r2, #0]
 80054a4:	b933      	cbnz	r3, 80054b4 <_free_r+0x2c>
 80054a6:	6063      	str	r3, [r4, #4]
 80054a8:	6014      	str	r4, [r2, #0]
 80054aa:	4628      	mov	r0, r5
 80054ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054b0:	f001 b832 	b.w	8006518 <__malloc_unlock>
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d908      	bls.n	80054ca <_free_r+0x42>
 80054b8:	6820      	ldr	r0, [r4, #0]
 80054ba:	1821      	adds	r1, r4, r0
 80054bc:	428b      	cmp	r3, r1
 80054be:	bf01      	itttt	eq
 80054c0:	6819      	ldreq	r1, [r3, #0]
 80054c2:	685b      	ldreq	r3, [r3, #4]
 80054c4:	1809      	addeq	r1, r1, r0
 80054c6:	6021      	streq	r1, [r4, #0]
 80054c8:	e7ed      	b.n	80054a6 <_free_r+0x1e>
 80054ca:	461a      	mov	r2, r3
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	b10b      	cbz	r3, 80054d4 <_free_r+0x4c>
 80054d0:	42a3      	cmp	r3, r4
 80054d2:	d9fa      	bls.n	80054ca <_free_r+0x42>
 80054d4:	6811      	ldr	r1, [r2, #0]
 80054d6:	1850      	adds	r0, r2, r1
 80054d8:	42a0      	cmp	r0, r4
 80054da:	d10b      	bne.n	80054f4 <_free_r+0x6c>
 80054dc:	6820      	ldr	r0, [r4, #0]
 80054de:	4401      	add	r1, r0
 80054e0:	1850      	adds	r0, r2, r1
 80054e2:	4283      	cmp	r3, r0
 80054e4:	6011      	str	r1, [r2, #0]
 80054e6:	d1e0      	bne.n	80054aa <_free_r+0x22>
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4401      	add	r1, r0
 80054ee:	6011      	str	r1, [r2, #0]
 80054f0:	6053      	str	r3, [r2, #4]
 80054f2:	e7da      	b.n	80054aa <_free_r+0x22>
 80054f4:	d902      	bls.n	80054fc <_free_r+0x74>
 80054f6:	230c      	movs	r3, #12
 80054f8:	602b      	str	r3, [r5, #0]
 80054fa:	e7d6      	b.n	80054aa <_free_r+0x22>
 80054fc:	6820      	ldr	r0, [r4, #0]
 80054fe:	1821      	adds	r1, r4, r0
 8005500:	428b      	cmp	r3, r1
 8005502:	bf01      	itttt	eq
 8005504:	6819      	ldreq	r1, [r3, #0]
 8005506:	685b      	ldreq	r3, [r3, #4]
 8005508:	1809      	addeq	r1, r1, r0
 800550a:	6021      	streq	r1, [r4, #0]
 800550c:	6063      	str	r3, [r4, #4]
 800550e:	6054      	str	r4, [r2, #4]
 8005510:	e7cb      	b.n	80054aa <_free_r+0x22>
 8005512:	bd38      	pop	{r3, r4, r5, pc}
 8005514:	20000350 	.word	0x20000350

08005518 <sbrk_aligned>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	4e0e      	ldr	r6, [pc, #56]	; (8005554 <sbrk_aligned+0x3c>)
 800551c:	460c      	mov	r4, r1
 800551e:	6831      	ldr	r1, [r6, #0]
 8005520:	4605      	mov	r5, r0
 8005522:	b911      	cbnz	r1, 800552a <sbrk_aligned+0x12>
 8005524:	f000 fcd6 	bl	8005ed4 <_sbrk_r>
 8005528:	6030      	str	r0, [r6, #0]
 800552a:	4621      	mov	r1, r4
 800552c:	4628      	mov	r0, r5
 800552e:	f000 fcd1 	bl	8005ed4 <_sbrk_r>
 8005532:	1c43      	adds	r3, r0, #1
 8005534:	d00a      	beq.n	800554c <sbrk_aligned+0x34>
 8005536:	1cc4      	adds	r4, r0, #3
 8005538:	f024 0403 	bic.w	r4, r4, #3
 800553c:	42a0      	cmp	r0, r4
 800553e:	d007      	beq.n	8005550 <sbrk_aligned+0x38>
 8005540:	1a21      	subs	r1, r4, r0
 8005542:	4628      	mov	r0, r5
 8005544:	f000 fcc6 	bl	8005ed4 <_sbrk_r>
 8005548:	3001      	adds	r0, #1
 800554a:	d101      	bne.n	8005550 <sbrk_aligned+0x38>
 800554c:	f04f 34ff 	mov.w	r4, #4294967295
 8005550:	4620      	mov	r0, r4
 8005552:	bd70      	pop	{r4, r5, r6, pc}
 8005554:	20000354 	.word	0x20000354

08005558 <_malloc_r>:
 8005558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800555c:	1ccd      	adds	r5, r1, #3
 800555e:	f025 0503 	bic.w	r5, r5, #3
 8005562:	3508      	adds	r5, #8
 8005564:	2d0c      	cmp	r5, #12
 8005566:	bf38      	it	cc
 8005568:	250c      	movcc	r5, #12
 800556a:	2d00      	cmp	r5, #0
 800556c:	4607      	mov	r7, r0
 800556e:	db01      	blt.n	8005574 <_malloc_r+0x1c>
 8005570:	42a9      	cmp	r1, r5
 8005572:	d905      	bls.n	8005580 <_malloc_r+0x28>
 8005574:	230c      	movs	r3, #12
 8005576:	2600      	movs	r6, #0
 8005578:	603b      	str	r3, [r7, #0]
 800557a:	4630      	mov	r0, r6
 800557c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005580:	4e2e      	ldr	r6, [pc, #184]	; (800563c <_malloc_r+0xe4>)
 8005582:	f000 ffc3 	bl	800650c <__malloc_lock>
 8005586:	6833      	ldr	r3, [r6, #0]
 8005588:	461c      	mov	r4, r3
 800558a:	bb34      	cbnz	r4, 80055da <_malloc_r+0x82>
 800558c:	4629      	mov	r1, r5
 800558e:	4638      	mov	r0, r7
 8005590:	f7ff ffc2 	bl	8005518 <sbrk_aligned>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	4604      	mov	r4, r0
 8005598:	d14d      	bne.n	8005636 <_malloc_r+0xde>
 800559a:	6834      	ldr	r4, [r6, #0]
 800559c:	4626      	mov	r6, r4
 800559e:	2e00      	cmp	r6, #0
 80055a0:	d140      	bne.n	8005624 <_malloc_r+0xcc>
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	4631      	mov	r1, r6
 80055a6:	4638      	mov	r0, r7
 80055a8:	eb04 0803 	add.w	r8, r4, r3
 80055ac:	f000 fc92 	bl	8005ed4 <_sbrk_r>
 80055b0:	4580      	cmp	r8, r0
 80055b2:	d13a      	bne.n	800562a <_malloc_r+0xd2>
 80055b4:	6821      	ldr	r1, [r4, #0]
 80055b6:	3503      	adds	r5, #3
 80055b8:	1a6d      	subs	r5, r5, r1
 80055ba:	f025 0503 	bic.w	r5, r5, #3
 80055be:	3508      	adds	r5, #8
 80055c0:	2d0c      	cmp	r5, #12
 80055c2:	bf38      	it	cc
 80055c4:	250c      	movcc	r5, #12
 80055c6:	4638      	mov	r0, r7
 80055c8:	4629      	mov	r1, r5
 80055ca:	f7ff ffa5 	bl	8005518 <sbrk_aligned>
 80055ce:	3001      	adds	r0, #1
 80055d0:	d02b      	beq.n	800562a <_malloc_r+0xd2>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	442b      	add	r3, r5
 80055d6:	6023      	str	r3, [r4, #0]
 80055d8:	e00e      	b.n	80055f8 <_malloc_r+0xa0>
 80055da:	6822      	ldr	r2, [r4, #0]
 80055dc:	1b52      	subs	r2, r2, r5
 80055de:	d41e      	bmi.n	800561e <_malloc_r+0xc6>
 80055e0:	2a0b      	cmp	r2, #11
 80055e2:	d916      	bls.n	8005612 <_malloc_r+0xba>
 80055e4:	1961      	adds	r1, r4, r5
 80055e6:	42a3      	cmp	r3, r4
 80055e8:	6025      	str	r5, [r4, #0]
 80055ea:	bf18      	it	ne
 80055ec:	6059      	strne	r1, [r3, #4]
 80055ee:	6863      	ldr	r3, [r4, #4]
 80055f0:	bf08      	it	eq
 80055f2:	6031      	streq	r1, [r6, #0]
 80055f4:	5162      	str	r2, [r4, r5]
 80055f6:	604b      	str	r3, [r1, #4]
 80055f8:	4638      	mov	r0, r7
 80055fa:	f104 060b 	add.w	r6, r4, #11
 80055fe:	f000 ff8b 	bl	8006518 <__malloc_unlock>
 8005602:	f026 0607 	bic.w	r6, r6, #7
 8005606:	1d23      	adds	r3, r4, #4
 8005608:	1af2      	subs	r2, r6, r3
 800560a:	d0b6      	beq.n	800557a <_malloc_r+0x22>
 800560c:	1b9b      	subs	r3, r3, r6
 800560e:	50a3      	str	r3, [r4, r2]
 8005610:	e7b3      	b.n	800557a <_malloc_r+0x22>
 8005612:	6862      	ldr	r2, [r4, #4]
 8005614:	42a3      	cmp	r3, r4
 8005616:	bf0c      	ite	eq
 8005618:	6032      	streq	r2, [r6, #0]
 800561a:	605a      	strne	r2, [r3, #4]
 800561c:	e7ec      	b.n	80055f8 <_malloc_r+0xa0>
 800561e:	4623      	mov	r3, r4
 8005620:	6864      	ldr	r4, [r4, #4]
 8005622:	e7b2      	b.n	800558a <_malloc_r+0x32>
 8005624:	4634      	mov	r4, r6
 8005626:	6876      	ldr	r6, [r6, #4]
 8005628:	e7b9      	b.n	800559e <_malloc_r+0x46>
 800562a:	230c      	movs	r3, #12
 800562c:	4638      	mov	r0, r7
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	f000 ff72 	bl	8006518 <__malloc_unlock>
 8005634:	e7a1      	b.n	800557a <_malloc_r+0x22>
 8005636:	6025      	str	r5, [r4, #0]
 8005638:	e7de      	b.n	80055f8 <_malloc_r+0xa0>
 800563a:	bf00      	nop
 800563c:	20000350 	.word	0x20000350

08005640 <__ssputs_r>:
 8005640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005644:	688e      	ldr	r6, [r1, #8]
 8005646:	4682      	mov	sl, r0
 8005648:	429e      	cmp	r6, r3
 800564a:	460c      	mov	r4, r1
 800564c:	4690      	mov	r8, r2
 800564e:	461f      	mov	r7, r3
 8005650:	d838      	bhi.n	80056c4 <__ssputs_r+0x84>
 8005652:	898a      	ldrh	r2, [r1, #12]
 8005654:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005658:	d032      	beq.n	80056c0 <__ssputs_r+0x80>
 800565a:	6825      	ldr	r5, [r4, #0]
 800565c:	6909      	ldr	r1, [r1, #16]
 800565e:	3301      	adds	r3, #1
 8005660:	eba5 0901 	sub.w	r9, r5, r1
 8005664:	6965      	ldr	r5, [r4, #20]
 8005666:	444b      	add	r3, r9
 8005668:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800566c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005670:	106d      	asrs	r5, r5, #1
 8005672:	429d      	cmp	r5, r3
 8005674:	bf38      	it	cc
 8005676:	461d      	movcc	r5, r3
 8005678:	0553      	lsls	r3, r2, #21
 800567a:	d531      	bpl.n	80056e0 <__ssputs_r+0xa0>
 800567c:	4629      	mov	r1, r5
 800567e:	f7ff ff6b 	bl	8005558 <_malloc_r>
 8005682:	4606      	mov	r6, r0
 8005684:	b950      	cbnz	r0, 800569c <__ssputs_r+0x5c>
 8005686:	230c      	movs	r3, #12
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	f8ca 3000 	str.w	r3, [sl]
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005696:	81a3      	strh	r3, [r4, #12]
 8005698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569c:	464a      	mov	r2, r9
 800569e:	6921      	ldr	r1, [r4, #16]
 80056a0:	f7ff fe12 	bl	80052c8 <memcpy>
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ae:	81a3      	strh	r3, [r4, #12]
 80056b0:	6126      	str	r6, [r4, #16]
 80056b2:	444e      	add	r6, r9
 80056b4:	6026      	str	r6, [r4, #0]
 80056b6:	463e      	mov	r6, r7
 80056b8:	6165      	str	r5, [r4, #20]
 80056ba:	eba5 0509 	sub.w	r5, r5, r9
 80056be:	60a5      	str	r5, [r4, #8]
 80056c0:	42be      	cmp	r6, r7
 80056c2:	d900      	bls.n	80056c6 <__ssputs_r+0x86>
 80056c4:	463e      	mov	r6, r7
 80056c6:	4632      	mov	r2, r6
 80056c8:	4641      	mov	r1, r8
 80056ca:	6820      	ldr	r0, [r4, #0]
 80056cc:	f000 ff04 	bl	80064d8 <memmove>
 80056d0:	68a3      	ldr	r3, [r4, #8]
 80056d2:	2000      	movs	r0, #0
 80056d4:	1b9b      	subs	r3, r3, r6
 80056d6:	60a3      	str	r3, [r4, #8]
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	4433      	add	r3, r6
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	e7db      	b.n	8005698 <__ssputs_r+0x58>
 80056e0:	462a      	mov	r2, r5
 80056e2:	f000 ff1f 	bl	8006524 <_realloc_r>
 80056e6:	4606      	mov	r6, r0
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d1e1      	bne.n	80056b0 <__ssputs_r+0x70>
 80056ec:	4650      	mov	r0, sl
 80056ee:	6921      	ldr	r1, [r4, #16]
 80056f0:	f7ff feca 	bl	8005488 <_free_r>
 80056f4:	e7c7      	b.n	8005686 <__ssputs_r+0x46>
	...

080056f8 <_svfiprintf_r>:
 80056f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fc:	4698      	mov	r8, r3
 80056fe:	898b      	ldrh	r3, [r1, #12]
 8005700:	4607      	mov	r7, r0
 8005702:	061b      	lsls	r3, r3, #24
 8005704:	460d      	mov	r5, r1
 8005706:	4614      	mov	r4, r2
 8005708:	b09d      	sub	sp, #116	; 0x74
 800570a:	d50e      	bpl.n	800572a <_svfiprintf_r+0x32>
 800570c:	690b      	ldr	r3, [r1, #16]
 800570e:	b963      	cbnz	r3, 800572a <_svfiprintf_r+0x32>
 8005710:	2140      	movs	r1, #64	; 0x40
 8005712:	f7ff ff21 	bl	8005558 <_malloc_r>
 8005716:	6028      	str	r0, [r5, #0]
 8005718:	6128      	str	r0, [r5, #16]
 800571a:	b920      	cbnz	r0, 8005726 <_svfiprintf_r+0x2e>
 800571c:	230c      	movs	r3, #12
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	f04f 30ff 	mov.w	r0, #4294967295
 8005724:	e0d1      	b.n	80058ca <_svfiprintf_r+0x1d2>
 8005726:	2340      	movs	r3, #64	; 0x40
 8005728:	616b      	str	r3, [r5, #20]
 800572a:	2300      	movs	r3, #0
 800572c:	9309      	str	r3, [sp, #36]	; 0x24
 800572e:	2320      	movs	r3, #32
 8005730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005734:	2330      	movs	r3, #48	; 0x30
 8005736:	f04f 0901 	mov.w	r9, #1
 800573a:	f8cd 800c 	str.w	r8, [sp, #12]
 800573e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80058e4 <_svfiprintf_r+0x1ec>
 8005742:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005746:	4623      	mov	r3, r4
 8005748:	469a      	mov	sl, r3
 800574a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800574e:	b10a      	cbz	r2, 8005754 <_svfiprintf_r+0x5c>
 8005750:	2a25      	cmp	r2, #37	; 0x25
 8005752:	d1f9      	bne.n	8005748 <_svfiprintf_r+0x50>
 8005754:	ebba 0b04 	subs.w	fp, sl, r4
 8005758:	d00b      	beq.n	8005772 <_svfiprintf_r+0x7a>
 800575a:	465b      	mov	r3, fp
 800575c:	4622      	mov	r2, r4
 800575e:	4629      	mov	r1, r5
 8005760:	4638      	mov	r0, r7
 8005762:	f7ff ff6d 	bl	8005640 <__ssputs_r>
 8005766:	3001      	adds	r0, #1
 8005768:	f000 80aa 	beq.w	80058c0 <_svfiprintf_r+0x1c8>
 800576c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800576e:	445a      	add	r2, fp
 8005770:	9209      	str	r2, [sp, #36]	; 0x24
 8005772:	f89a 3000 	ldrb.w	r3, [sl]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80a2 	beq.w	80058c0 <_svfiprintf_r+0x1c8>
 800577c:	2300      	movs	r3, #0
 800577e:	f04f 32ff 	mov.w	r2, #4294967295
 8005782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005786:	f10a 0a01 	add.w	sl, sl, #1
 800578a:	9304      	str	r3, [sp, #16]
 800578c:	9307      	str	r3, [sp, #28]
 800578e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005792:	931a      	str	r3, [sp, #104]	; 0x68
 8005794:	4654      	mov	r4, sl
 8005796:	2205      	movs	r2, #5
 8005798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800579c:	4851      	ldr	r0, [pc, #324]	; (80058e4 <_svfiprintf_r+0x1ec>)
 800579e:	f000 fe8d 	bl	80064bc <memchr>
 80057a2:	9a04      	ldr	r2, [sp, #16]
 80057a4:	b9d8      	cbnz	r0, 80057de <_svfiprintf_r+0xe6>
 80057a6:	06d0      	lsls	r0, r2, #27
 80057a8:	bf44      	itt	mi
 80057aa:	2320      	movmi	r3, #32
 80057ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057b0:	0711      	lsls	r1, r2, #28
 80057b2:	bf44      	itt	mi
 80057b4:	232b      	movmi	r3, #43	; 0x2b
 80057b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057ba:	f89a 3000 	ldrb.w	r3, [sl]
 80057be:	2b2a      	cmp	r3, #42	; 0x2a
 80057c0:	d015      	beq.n	80057ee <_svfiprintf_r+0xf6>
 80057c2:	4654      	mov	r4, sl
 80057c4:	2000      	movs	r0, #0
 80057c6:	f04f 0c0a 	mov.w	ip, #10
 80057ca:	9a07      	ldr	r2, [sp, #28]
 80057cc:	4621      	mov	r1, r4
 80057ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057d2:	3b30      	subs	r3, #48	; 0x30
 80057d4:	2b09      	cmp	r3, #9
 80057d6:	d94e      	bls.n	8005876 <_svfiprintf_r+0x17e>
 80057d8:	b1b0      	cbz	r0, 8005808 <_svfiprintf_r+0x110>
 80057da:	9207      	str	r2, [sp, #28]
 80057dc:	e014      	b.n	8005808 <_svfiprintf_r+0x110>
 80057de:	eba0 0308 	sub.w	r3, r0, r8
 80057e2:	fa09 f303 	lsl.w	r3, r9, r3
 80057e6:	4313      	orrs	r3, r2
 80057e8:	46a2      	mov	sl, r4
 80057ea:	9304      	str	r3, [sp, #16]
 80057ec:	e7d2      	b.n	8005794 <_svfiprintf_r+0x9c>
 80057ee:	9b03      	ldr	r3, [sp, #12]
 80057f0:	1d19      	adds	r1, r3, #4
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	9103      	str	r1, [sp, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bfbb      	ittet	lt
 80057fa:	425b      	neglt	r3, r3
 80057fc:	f042 0202 	orrlt.w	r2, r2, #2
 8005800:	9307      	strge	r3, [sp, #28]
 8005802:	9307      	strlt	r3, [sp, #28]
 8005804:	bfb8      	it	lt
 8005806:	9204      	strlt	r2, [sp, #16]
 8005808:	7823      	ldrb	r3, [r4, #0]
 800580a:	2b2e      	cmp	r3, #46	; 0x2e
 800580c:	d10c      	bne.n	8005828 <_svfiprintf_r+0x130>
 800580e:	7863      	ldrb	r3, [r4, #1]
 8005810:	2b2a      	cmp	r3, #42	; 0x2a
 8005812:	d135      	bne.n	8005880 <_svfiprintf_r+0x188>
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	3402      	adds	r4, #2
 8005818:	1d1a      	adds	r2, r3, #4
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	9203      	str	r2, [sp, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	bfb8      	it	lt
 8005822:	f04f 33ff 	movlt.w	r3, #4294967295
 8005826:	9305      	str	r3, [sp, #20]
 8005828:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80058e8 <_svfiprintf_r+0x1f0>
 800582c:	2203      	movs	r2, #3
 800582e:	4650      	mov	r0, sl
 8005830:	7821      	ldrb	r1, [r4, #0]
 8005832:	f000 fe43 	bl	80064bc <memchr>
 8005836:	b140      	cbz	r0, 800584a <_svfiprintf_r+0x152>
 8005838:	2340      	movs	r3, #64	; 0x40
 800583a:	eba0 000a 	sub.w	r0, r0, sl
 800583e:	fa03 f000 	lsl.w	r0, r3, r0
 8005842:	9b04      	ldr	r3, [sp, #16]
 8005844:	3401      	adds	r4, #1
 8005846:	4303      	orrs	r3, r0
 8005848:	9304      	str	r3, [sp, #16]
 800584a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800584e:	2206      	movs	r2, #6
 8005850:	4826      	ldr	r0, [pc, #152]	; (80058ec <_svfiprintf_r+0x1f4>)
 8005852:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005856:	f000 fe31 	bl	80064bc <memchr>
 800585a:	2800      	cmp	r0, #0
 800585c:	d038      	beq.n	80058d0 <_svfiprintf_r+0x1d8>
 800585e:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <_svfiprintf_r+0x1f8>)
 8005860:	bb1b      	cbnz	r3, 80058aa <_svfiprintf_r+0x1b2>
 8005862:	9b03      	ldr	r3, [sp, #12]
 8005864:	3307      	adds	r3, #7
 8005866:	f023 0307 	bic.w	r3, r3, #7
 800586a:	3308      	adds	r3, #8
 800586c:	9303      	str	r3, [sp, #12]
 800586e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005870:	4433      	add	r3, r6
 8005872:	9309      	str	r3, [sp, #36]	; 0x24
 8005874:	e767      	b.n	8005746 <_svfiprintf_r+0x4e>
 8005876:	460c      	mov	r4, r1
 8005878:	2001      	movs	r0, #1
 800587a:	fb0c 3202 	mla	r2, ip, r2, r3
 800587e:	e7a5      	b.n	80057cc <_svfiprintf_r+0xd4>
 8005880:	2300      	movs	r3, #0
 8005882:	f04f 0c0a 	mov.w	ip, #10
 8005886:	4619      	mov	r1, r3
 8005888:	3401      	adds	r4, #1
 800588a:	9305      	str	r3, [sp, #20]
 800588c:	4620      	mov	r0, r4
 800588e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005892:	3a30      	subs	r2, #48	; 0x30
 8005894:	2a09      	cmp	r2, #9
 8005896:	d903      	bls.n	80058a0 <_svfiprintf_r+0x1a8>
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0c5      	beq.n	8005828 <_svfiprintf_r+0x130>
 800589c:	9105      	str	r1, [sp, #20]
 800589e:	e7c3      	b.n	8005828 <_svfiprintf_r+0x130>
 80058a0:	4604      	mov	r4, r0
 80058a2:	2301      	movs	r3, #1
 80058a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80058a8:	e7f0      	b.n	800588c <_svfiprintf_r+0x194>
 80058aa:	ab03      	add	r3, sp, #12
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	462a      	mov	r2, r5
 80058b0:	4638      	mov	r0, r7
 80058b2:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <_svfiprintf_r+0x1fc>)
 80058b4:	a904      	add	r1, sp, #16
 80058b6:	f3af 8000 	nop.w
 80058ba:	1c42      	adds	r2, r0, #1
 80058bc:	4606      	mov	r6, r0
 80058be:	d1d6      	bne.n	800586e <_svfiprintf_r+0x176>
 80058c0:	89ab      	ldrh	r3, [r5, #12]
 80058c2:	065b      	lsls	r3, r3, #25
 80058c4:	f53f af2c 	bmi.w	8005720 <_svfiprintf_r+0x28>
 80058c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058ca:	b01d      	add	sp, #116	; 0x74
 80058cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d0:	ab03      	add	r3, sp, #12
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	462a      	mov	r2, r5
 80058d6:	4638      	mov	r0, r7
 80058d8:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <_svfiprintf_r+0x1fc>)
 80058da:	a904      	add	r1, sp, #16
 80058dc:	f000 f9d4 	bl	8005c88 <_printf_i>
 80058e0:	e7eb      	b.n	80058ba <_svfiprintf_r+0x1c2>
 80058e2:	bf00      	nop
 80058e4:	08006aa8 	.word	0x08006aa8
 80058e8:	08006aae 	.word	0x08006aae
 80058ec:	08006ab2 	.word	0x08006ab2
 80058f0:	00000000 	.word	0x00000000
 80058f4:	08005641 	.word	0x08005641

080058f8 <__sfputc_r>:
 80058f8:	6893      	ldr	r3, [r2, #8]
 80058fa:	b410      	push	{r4}
 80058fc:	3b01      	subs	r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	6093      	str	r3, [r2, #8]
 8005902:	da07      	bge.n	8005914 <__sfputc_r+0x1c>
 8005904:	6994      	ldr	r4, [r2, #24]
 8005906:	42a3      	cmp	r3, r4
 8005908:	db01      	blt.n	800590e <__sfputc_r+0x16>
 800590a:	290a      	cmp	r1, #10
 800590c:	d102      	bne.n	8005914 <__sfputc_r+0x1c>
 800590e:	bc10      	pop	{r4}
 8005910:	f000 baf0 	b.w	8005ef4 <__swbuf_r>
 8005914:	6813      	ldr	r3, [r2, #0]
 8005916:	1c58      	adds	r0, r3, #1
 8005918:	6010      	str	r0, [r2, #0]
 800591a:	7019      	strb	r1, [r3, #0]
 800591c:	4608      	mov	r0, r1
 800591e:	bc10      	pop	{r4}
 8005920:	4770      	bx	lr

08005922 <__sfputs_r>:
 8005922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005924:	4606      	mov	r6, r0
 8005926:	460f      	mov	r7, r1
 8005928:	4614      	mov	r4, r2
 800592a:	18d5      	adds	r5, r2, r3
 800592c:	42ac      	cmp	r4, r5
 800592e:	d101      	bne.n	8005934 <__sfputs_r+0x12>
 8005930:	2000      	movs	r0, #0
 8005932:	e007      	b.n	8005944 <__sfputs_r+0x22>
 8005934:	463a      	mov	r2, r7
 8005936:	4630      	mov	r0, r6
 8005938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800593c:	f7ff ffdc 	bl	80058f8 <__sfputc_r>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d1f3      	bne.n	800592c <__sfputs_r+0xa>
 8005944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005948 <_vfiprintf_r>:
 8005948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	460d      	mov	r5, r1
 800594e:	4614      	mov	r4, r2
 8005950:	4698      	mov	r8, r3
 8005952:	4606      	mov	r6, r0
 8005954:	b09d      	sub	sp, #116	; 0x74
 8005956:	b118      	cbz	r0, 8005960 <_vfiprintf_r+0x18>
 8005958:	6983      	ldr	r3, [r0, #24]
 800595a:	b90b      	cbnz	r3, 8005960 <_vfiprintf_r+0x18>
 800595c:	f000 fca8 	bl	80062b0 <__sinit>
 8005960:	4b89      	ldr	r3, [pc, #548]	; (8005b88 <_vfiprintf_r+0x240>)
 8005962:	429d      	cmp	r5, r3
 8005964:	d11b      	bne.n	800599e <_vfiprintf_r+0x56>
 8005966:	6875      	ldr	r5, [r6, #4]
 8005968:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800596a:	07d9      	lsls	r1, r3, #31
 800596c:	d405      	bmi.n	800597a <_vfiprintf_r+0x32>
 800596e:	89ab      	ldrh	r3, [r5, #12]
 8005970:	059a      	lsls	r2, r3, #22
 8005972:	d402      	bmi.n	800597a <_vfiprintf_r+0x32>
 8005974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005976:	f000 fd39 	bl	80063ec <__retarget_lock_acquire_recursive>
 800597a:	89ab      	ldrh	r3, [r5, #12]
 800597c:	071b      	lsls	r3, r3, #28
 800597e:	d501      	bpl.n	8005984 <_vfiprintf_r+0x3c>
 8005980:	692b      	ldr	r3, [r5, #16]
 8005982:	b9eb      	cbnz	r3, 80059c0 <_vfiprintf_r+0x78>
 8005984:	4629      	mov	r1, r5
 8005986:	4630      	mov	r0, r6
 8005988:	f000 fb06 	bl	8005f98 <__swsetup_r>
 800598c:	b1c0      	cbz	r0, 80059c0 <_vfiprintf_r+0x78>
 800598e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005990:	07dc      	lsls	r4, r3, #31
 8005992:	d50e      	bpl.n	80059b2 <_vfiprintf_r+0x6a>
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	b01d      	add	sp, #116	; 0x74
 800599a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599e:	4b7b      	ldr	r3, [pc, #492]	; (8005b8c <_vfiprintf_r+0x244>)
 80059a0:	429d      	cmp	r5, r3
 80059a2:	d101      	bne.n	80059a8 <_vfiprintf_r+0x60>
 80059a4:	68b5      	ldr	r5, [r6, #8]
 80059a6:	e7df      	b.n	8005968 <_vfiprintf_r+0x20>
 80059a8:	4b79      	ldr	r3, [pc, #484]	; (8005b90 <_vfiprintf_r+0x248>)
 80059aa:	429d      	cmp	r5, r3
 80059ac:	bf08      	it	eq
 80059ae:	68f5      	ldreq	r5, [r6, #12]
 80059b0:	e7da      	b.n	8005968 <_vfiprintf_r+0x20>
 80059b2:	89ab      	ldrh	r3, [r5, #12]
 80059b4:	0598      	lsls	r0, r3, #22
 80059b6:	d4ed      	bmi.n	8005994 <_vfiprintf_r+0x4c>
 80059b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059ba:	f000 fd18 	bl	80063ee <__retarget_lock_release_recursive>
 80059be:	e7e9      	b.n	8005994 <_vfiprintf_r+0x4c>
 80059c0:	2300      	movs	r3, #0
 80059c2:	9309      	str	r3, [sp, #36]	; 0x24
 80059c4:	2320      	movs	r3, #32
 80059c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ca:	2330      	movs	r3, #48	; 0x30
 80059cc:	f04f 0901 	mov.w	r9, #1
 80059d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80059d4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005b94 <_vfiprintf_r+0x24c>
 80059d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059dc:	4623      	mov	r3, r4
 80059de:	469a      	mov	sl, r3
 80059e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059e4:	b10a      	cbz	r2, 80059ea <_vfiprintf_r+0xa2>
 80059e6:	2a25      	cmp	r2, #37	; 0x25
 80059e8:	d1f9      	bne.n	80059de <_vfiprintf_r+0x96>
 80059ea:	ebba 0b04 	subs.w	fp, sl, r4
 80059ee:	d00b      	beq.n	8005a08 <_vfiprintf_r+0xc0>
 80059f0:	465b      	mov	r3, fp
 80059f2:	4622      	mov	r2, r4
 80059f4:	4629      	mov	r1, r5
 80059f6:	4630      	mov	r0, r6
 80059f8:	f7ff ff93 	bl	8005922 <__sfputs_r>
 80059fc:	3001      	adds	r0, #1
 80059fe:	f000 80aa 	beq.w	8005b56 <_vfiprintf_r+0x20e>
 8005a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a04:	445a      	add	r2, fp
 8005a06:	9209      	str	r2, [sp, #36]	; 0x24
 8005a08:	f89a 3000 	ldrb.w	r3, [sl]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 80a2 	beq.w	8005b56 <_vfiprintf_r+0x20e>
 8005a12:	2300      	movs	r3, #0
 8005a14:	f04f 32ff 	mov.w	r2, #4294967295
 8005a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a1c:	f10a 0a01 	add.w	sl, sl, #1
 8005a20:	9304      	str	r3, [sp, #16]
 8005a22:	9307      	str	r3, [sp, #28]
 8005a24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a28:	931a      	str	r3, [sp, #104]	; 0x68
 8005a2a:	4654      	mov	r4, sl
 8005a2c:	2205      	movs	r2, #5
 8005a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a32:	4858      	ldr	r0, [pc, #352]	; (8005b94 <_vfiprintf_r+0x24c>)
 8005a34:	f000 fd42 	bl	80064bc <memchr>
 8005a38:	9a04      	ldr	r2, [sp, #16]
 8005a3a:	b9d8      	cbnz	r0, 8005a74 <_vfiprintf_r+0x12c>
 8005a3c:	06d1      	lsls	r1, r2, #27
 8005a3e:	bf44      	itt	mi
 8005a40:	2320      	movmi	r3, #32
 8005a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a46:	0713      	lsls	r3, r2, #28
 8005a48:	bf44      	itt	mi
 8005a4a:	232b      	movmi	r3, #43	; 0x2b
 8005a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a50:	f89a 3000 	ldrb.w	r3, [sl]
 8005a54:	2b2a      	cmp	r3, #42	; 0x2a
 8005a56:	d015      	beq.n	8005a84 <_vfiprintf_r+0x13c>
 8005a58:	4654      	mov	r4, sl
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	f04f 0c0a 	mov.w	ip, #10
 8005a60:	9a07      	ldr	r2, [sp, #28]
 8005a62:	4621      	mov	r1, r4
 8005a64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a68:	3b30      	subs	r3, #48	; 0x30
 8005a6a:	2b09      	cmp	r3, #9
 8005a6c:	d94e      	bls.n	8005b0c <_vfiprintf_r+0x1c4>
 8005a6e:	b1b0      	cbz	r0, 8005a9e <_vfiprintf_r+0x156>
 8005a70:	9207      	str	r2, [sp, #28]
 8005a72:	e014      	b.n	8005a9e <_vfiprintf_r+0x156>
 8005a74:	eba0 0308 	sub.w	r3, r0, r8
 8005a78:	fa09 f303 	lsl.w	r3, r9, r3
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	46a2      	mov	sl, r4
 8005a80:	9304      	str	r3, [sp, #16]
 8005a82:	e7d2      	b.n	8005a2a <_vfiprintf_r+0xe2>
 8005a84:	9b03      	ldr	r3, [sp, #12]
 8005a86:	1d19      	adds	r1, r3, #4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	9103      	str	r1, [sp, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bfbb      	ittet	lt
 8005a90:	425b      	neglt	r3, r3
 8005a92:	f042 0202 	orrlt.w	r2, r2, #2
 8005a96:	9307      	strge	r3, [sp, #28]
 8005a98:	9307      	strlt	r3, [sp, #28]
 8005a9a:	bfb8      	it	lt
 8005a9c:	9204      	strlt	r2, [sp, #16]
 8005a9e:	7823      	ldrb	r3, [r4, #0]
 8005aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa2:	d10c      	bne.n	8005abe <_vfiprintf_r+0x176>
 8005aa4:	7863      	ldrb	r3, [r4, #1]
 8005aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa8:	d135      	bne.n	8005b16 <_vfiprintf_r+0x1ce>
 8005aaa:	9b03      	ldr	r3, [sp, #12]
 8005aac:	3402      	adds	r4, #2
 8005aae:	1d1a      	adds	r2, r3, #4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	9203      	str	r2, [sp, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bfb8      	it	lt
 8005ab8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005abc:	9305      	str	r3, [sp, #20]
 8005abe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005b98 <_vfiprintf_r+0x250>
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	4650      	mov	r0, sl
 8005ac6:	7821      	ldrb	r1, [r4, #0]
 8005ac8:	f000 fcf8 	bl	80064bc <memchr>
 8005acc:	b140      	cbz	r0, 8005ae0 <_vfiprintf_r+0x198>
 8005ace:	2340      	movs	r3, #64	; 0x40
 8005ad0:	eba0 000a 	sub.w	r0, r0, sl
 8005ad4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ad8:	9b04      	ldr	r3, [sp, #16]
 8005ada:	3401      	adds	r4, #1
 8005adc:	4303      	orrs	r3, r0
 8005ade:	9304      	str	r3, [sp, #16]
 8005ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae4:	2206      	movs	r2, #6
 8005ae6:	482d      	ldr	r0, [pc, #180]	; (8005b9c <_vfiprintf_r+0x254>)
 8005ae8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aec:	f000 fce6 	bl	80064bc <memchr>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	d03f      	beq.n	8005b74 <_vfiprintf_r+0x22c>
 8005af4:	4b2a      	ldr	r3, [pc, #168]	; (8005ba0 <_vfiprintf_r+0x258>)
 8005af6:	bb1b      	cbnz	r3, 8005b40 <_vfiprintf_r+0x1f8>
 8005af8:	9b03      	ldr	r3, [sp, #12]
 8005afa:	3307      	adds	r3, #7
 8005afc:	f023 0307 	bic.w	r3, r3, #7
 8005b00:	3308      	adds	r3, #8
 8005b02:	9303      	str	r3, [sp, #12]
 8005b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b06:	443b      	add	r3, r7
 8005b08:	9309      	str	r3, [sp, #36]	; 0x24
 8005b0a:	e767      	b.n	80059dc <_vfiprintf_r+0x94>
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	2001      	movs	r0, #1
 8005b10:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b14:	e7a5      	b.n	8005a62 <_vfiprintf_r+0x11a>
 8005b16:	2300      	movs	r3, #0
 8005b18:	f04f 0c0a 	mov.w	ip, #10
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	3401      	adds	r4, #1
 8005b20:	9305      	str	r3, [sp, #20]
 8005b22:	4620      	mov	r0, r4
 8005b24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b28:	3a30      	subs	r2, #48	; 0x30
 8005b2a:	2a09      	cmp	r2, #9
 8005b2c:	d903      	bls.n	8005b36 <_vfiprintf_r+0x1ee>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0c5      	beq.n	8005abe <_vfiprintf_r+0x176>
 8005b32:	9105      	str	r1, [sp, #20]
 8005b34:	e7c3      	b.n	8005abe <_vfiprintf_r+0x176>
 8005b36:	4604      	mov	r4, r0
 8005b38:	2301      	movs	r3, #1
 8005b3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b3e:	e7f0      	b.n	8005b22 <_vfiprintf_r+0x1da>
 8005b40:	ab03      	add	r3, sp, #12
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	462a      	mov	r2, r5
 8005b46:	4630      	mov	r0, r6
 8005b48:	4b16      	ldr	r3, [pc, #88]	; (8005ba4 <_vfiprintf_r+0x25c>)
 8005b4a:	a904      	add	r1, sp, #16
 8005b4c:	f3af 8000 	nop.w
 8005b50:	4607      	mov	r7, r0
 8005b52:	1c78      	adds	r0, r7, #1
 8005b54:	d1d6      	bne.n	8005b04 <_vfiprintf_r+0x1bc>
 8005b56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b58:	07d9      	lsls	r1, r3, #31
 8005b5a:	d405      	bmi.n	8005b68 <_vfiprintf_r+0x220>
 8005b5c:	89ab      	ldrh	r3, [r5, #12]
 8005b5e:	059a      	lsls	r2, r3, #22
 8005b60:	d402      	bmi.n	8005b68 <_vfiprintf_r+0x220>
 8005b62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b64:	f000 fc43 	bl	80063ee <__retarget_lock_release_recursive>
 8005b68:	89ab      	ldrh	r3, [r5, #12]
 8005b6a:	065b      	lsls	r3, r3, #25
 8005b6c:	f53f af12 	bmi.w	8005994 <_vfiprintf_r+0x4c>
 8005b70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b72:	e711      	b.n	8005998 <_vfiprintf_r+0x50>
 8005b74:	ab03      	add	r3, sp, #12
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	462a      	mov	r2, r5
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <_vfiprintf_r+0x25c>)
 8005b7e:	a904      	add	r1, sp, #16
 8005b80:	f000 f882 	bl	8005c88 <_printf_i>
 8005b84:	e7e4      	b.n	8005b50 <_vfiprintf_r+0x208>
 8005b86:	bf00      	nop
 8005b88:	08006afc 	.word	0x08006afc
 8005b8c:	08006b1c 	.word	0x08006b1c
 8005b90:	08006adc 	.word	0x08006adc
 8005b94:	08006aa8 	.word	0x08006aa8
 8005b98:	08006aae 	.word	0x08006aae
 8005b9c:	08006ab2 	.word	0x08006ab2
 8005ba0:	00000000 	.word	0x00000000
 8005ba4:	08005923 	.word	0x08005923

08005ba8 <_printf_common>:
 8005ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bac:	4616      	mov	r6, r2
 8005bae:	4699      	mov	r9, r3
 8005bb0:	688a      	ldr	r2, [r1, #8]
 8005bb2:	690b      	ldr	r3, [r1, #16]
 8005bb4:	4607      	mov	r7, r0
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	bfb8      	it	lt
 8005bba:	4613      	movlt	r3, r2
 8005bbc:	6033      	str	r3, [r6, #0]
 8005bbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bc8:	b10a      	cbz	r2, 8005bce <_printf_common+0x26>
 8005bca:	3301      	adds	r3, #1
 8005bcc:	6033      	str	r3, [r6, #0]
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	0699      	lsls	r1, r3, #26
 8005bd2:	bf42      	ittt	mi
 8005bd4:	6833      	ldrmi	r3, [r6, #0]
 8005bd6:	3302      	addmi	r3, #2
 8005bd8:	6033      	strmi	r3, [r6, #0]
 8005bda:	6825      	ldr	r5, [r4, #0]
 8005bdc:	f015 0506 	ands.w	r5, r5, #6
 8005be0:	d106      	bne.n	8005bf0 <_printf_common+0x48>
 8005be2:	f104 0a19 	add.w	sl, r4, #25
 8005be6:	68e3      	ldr	r3, [r4, #12]
 8005be8:	6832      	ldr	r2, [r6, #0]
 8005bea:	1a9b      	subs	r3, r3, r2
 8005bec:	42ab      	cmp	r3, r5
 8005bee:	dc28      	bgt.n	8005c42 <_printf_common+0x9a>
 8005bf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bf4:	1e13      	subs	r3, r2, #0
 8005bf6:	6822      	ldr	r2, [r4, #0]
 8005bf8:	bf18      	it	ne
 8005bfa:	2301      	movne	r3, #1
 8005bfc:	0692      	lsls	r2, r2, #26
 8005bfe:	d42d      	bmi.n	8005c5c <_printf_common+0xb4>
 8005c00:	4649      	mov	r1, r9
 8005c02:	4638      	mov	r0, r7
 8005c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c08:	47c0      	blx	r8
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	d020      	beq.n	8005c50 <_printf_common+0xa8>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	68e5      	ldr	r5, [r4, #12]
 8005c12:	f003 0306 	and.w	r3, r3, #6
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	bf18      	it	ne
 8005c1a:	2500      	movne	r5, #0
 8005c1c:	6832      	ldr	r2, [r6, #0]
 8005c1e:	f04f 0600 	mov.w	r6, #0
 8005c22:	68a3      	ldr	r3, [r4, #8]
 8005c24:	bf08      	it	eq
 8005c26:	1aad      	subeq	r5, r5, r2
 8005c28:	6922      	ldr	r2, [r4, #16]
 8005c2a:	bf08      	it	eq
 8005c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c30:	4293      	cmp	r3, r2
 8005c32:	bfc4      	itt	gt
 8005c34:	1a9b      	subgt	r3, r3, r2
 8005c36:	18ed      	addgt	r5, r5, r3
 8005c38:	341a      	adds	r4, #26
 8005c3a:	42b5      	cmp	r5, r6
 8005c3c:	d11a      	bne.n	8005c74 <_printf_common+0xcc>
 8005c3e:	2000      	movs	r0, #0
 8005c40:	e008      	b.n	8005c54 <_printf_common+0xac>
 8005c42:	2301      	movs	r3, #1
 8005c44:	4652      	mov	r2, sl
 8005c46:	4649      	mov	r1, r9
 8005c48:	4638      	mov	r0, r7
 8005c4a:	47c0      	blx	r8
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d103      	bne.n	8005c58 <_printf_common+0xb0>
 8005c50:	f04f 30ff 	mov.w	r0, #4294967295
 8005c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c58:	3501      	adds	r5, #1
 8005c5a:	e7c4      	b.n	8005be6 <_printf_common+0x3e>
 8005c5c:	2030      	movs	r0, #48	; 0x30
 8005c5e:	18e1      	adds	r1, r4, r3
 8005c60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c6a:	4422      	add	r2, r4
 8005c6c:	3302      	adds	r3, #2
 8005c6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c72:	e7c5      	b.n	8005c00 <_printf_common+0x58>
 8005c74:	2301      	movs	r3, #1
 8005c76:	4622      	mov	r2, r4
 8005c78:	4649      	mov	r1, r9
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	47c0      	blx	r8
 8005c7e:	3001      	adds	r0, #1
 8005c80:	d0e6      	beq.n	8005c50 <_printf_common+0xa8>
 8005c82:	3601      	adds	r6, #1
 8005c84:	e7d9      	b.n	8005c3a <_printf_common+0x92>
	...

08005c88 <_printf_i>:
 8005c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c8c:	7e0f      	ldrb	r7, [r1, #24]
 8005c8e:	4691      	mov	r9, r2
 8005c90:	2f78      	cmp	r7, #120	; 0x78
 8005c92:	4680      	mov	r8, r0
 8005c94:	460c      	mov	r4, r1
 8005c96:	469a      	mov	sl, r3
 8005c98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c9e:	d807      	bhi.n	8005cb0 <_printf_i+0x28>
 8005ca0:	2f62      	cmp	r7, #98	; 0x62
 8005ca2:	d80a      	bhi.n	8005cba <_printf_i+0x32>
 8005ca4:	2f00      	cmp	r7, #0
 8005ca6:	f000 80d9 	beq.w	8005e5c <_printf_i+0x1d4>
 8005caa:	2f58      	cmp	r7, #88	; 0x58
 8005cac:	f000 80a4 	beq.w	8005df8 <_printf_i+0x170>
 8005cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cb8:	e03a      	b.n	8005d30 <_printf_i+0xa8>
 8005cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cbe:	2b15      	cmp	r3, #21
 8005cc0:	d8f6      	bhi.n	8005cb0 <_printf_i+0x28>
 8005cc2:	a101      	add	r1, pc, #4	; (adr r1, 8005cc8 <_printf_i+0x40>)
 8005cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cc8:	08005d21 	.word	0x08005d21
 8005ccc:	08005d35 	.word	0x08005d35
 8005cd0:	08005cb1 	.word	0x08005cb1
 8005cd4:	08005cb1 	.word	0x08005cb1
 8005cd8:	08005cb1 	.word	0x08005cb1
 8005cdc:	08005cb1 	.word	0x08005cb1
 8005ce0:	08005d35 	.word	0x08005d35
 8005ce4:	08005cb1 	.word	0x08005cb1
 8005ce8:	08005cb1 	.word	0x08005cb1
 8005cec:	08005cb1 	.word	0x08005cb1
 8005cf0:	08005cb1 	.word	0x08005cb1
 8005cf4:	08005e43 	.word	0x08005e43
 8005cf8:	08005d65 	.word	0x08005d65
 8005cfc:	08005e25 	.word	0x08005e25
 8005d00:	08005cb1 	.word	0x08005cb1
 8005d04:	08005cb1 	.word	0x08005cb1
 8005d08:	08005e65 	.word	0x08005e65
 8005d0c:	08005cb1 	.word	0x08005cb1
 8005d10:	08005d65 	.word	0x08005d65
 8005d14:	08005cb1 	.word	0x08005cb1
 8005d18:	08005cb1 	.word	0x08005cb1
 8005d1c:	08005e2d 	.word	0x08005e2d
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	1d1a      	adds	r2, r3, #4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	602a      	str	r2, [r5, #0]
 8005d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0a4      	b.n	8005e7e <_printf_i+0x1f6>
 8005d34:	6820      	ldr	r0, [r4, #0]
 8005d36:	6829      	ldr	r1, [r5, #0]
 8005d38:	0606      	lsls	r6, r0, #24
 8005d3a:	f101 0304 	add.w	r3, r1, #4
 8005d3e:	d50a      	bpl.n	8005d56 <_printf_i+0xce>
 8005d40:	680e      	ldr	r6, [r1, #0]
 8005d42:	602b      	str	r3, [r5, #0]
 8005d44:	2e00      	cmp	r6, #0
 8005d46:	da03      	bge.n	8005d50 <_printf_i+0xc8>
 8005d48:	232d      	movs	r3, #45	; 0x2d
 8005d4a:	4276      	negs	r6, r6
 8005d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d50:	230a      	movs	r3, #10
 8005d52:	485e      	ldr	r0, [pc, #376]	; (8005ecc <_printf_i+0x244>)
 8005d54:	e019      	b.n	8005d8a <_printf_i+0x102>
 8005d56:	680e      	ldr	r6, [r1, #0]
 8005d58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d5c:	602b      	str	r3, [r5, #0]
 8005d5e:	bf18      	it	ne
 8005d60:	b236      	sxthne	r6, r6
 8005d62:	e7ef      	b.n	8005d44 <_printf_i+0xbc>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	6820      	ldr	r0, [r4, #0]
 8005d68:	1d19      	adds	r1, r3, #4
 8005d6a:	6029      	str	r1, [r5, #0]
 8005d6c:	0601      	lsls	r1, r0, #24
 8005d6e:	d501      	bpl.n	8005d74 <_printf_i+0xec>
 8005d70:	681e      	ldr	r6, [r3, #0]
 8005d72:	e002      	b.n	8005d7a <_printf_i+0xf2>
 8005d74:	0646      	lsls	r6, r0, #25
 8005d76:	d5fb      	bpl.n	8005d70 <_printf_i+0xe8>
 8005d78:	881e      	ldrh	r6, [r3, #0]
 8005d7a:	2f6f      	cmp	r7, #111	; 0x6f
 8005d7c:	bf0c      	ite	eq
 8005d7e:	2308      	moveq	r3, #8
 8005d80:	230a      	movne	r3, #10
 8005d82:	4852      	ldr	r0, [pc, #328]	; (8005ecc <_printf_i+0x244>)
 8005d84:	2100      	movs	r1, #0
 8005d86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d8a:	6865      	ldr	r5, [r4, #4]
 8005d8c:	2d00      	cmp	r5, #0
 8005d8e:	bfa8      	it	ge
 8005d90:	6821      	ldrge	r1, [r4, #0]
 8005d92:	60a5      	str	r5, [r4, #8]
 8005d94:	bfa4      	itt	ge
 8005d96:	f021 0104 	bicge.w	r1, r1, #4
 8005d9a:	6021      	strge	r1, [r4, #0]
 8005d9c:	b90e      	cbnz	r6, 8005da2 <_printf_i+0x11a>
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	d04d      	beq.n	8005e3e <_printf_i+0x1b6>
 8005da2:	4615      	mov	r5, r2
 8005da4:	fbb6 f1f3 	udiv	r1, r6, r3
 8005da8:	fb03 6711 	mls	r7, r3, r1, r6
 8005dac:	5dc7      	ldrb	r7, [r0, r7]
 8005dae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005db2:	4637      	mov	r7, r6
 8005db4:	42bb      	cmp	r3, r7
 8005db6:	460e      	mov	r6, r1
 8005db8:	d9f4      	bls.n	8005da4 <_printf_i+0x11c>
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d10b      	bne.n	8005dd6 <_printf_i+0x14e>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	07de      	lsls	r6, r3, #31
 8005dc2:	d508      	bpl.n	8005dd6 <_printf_i+0x14e>
 8005dc4:	6923      	ldr	r3, [r4, #16]
 8005dc6:	6861      	ldr	r1, [r4, #4]
 8005dc8:	4299      	cmp	r1, r3
 8005dca:	bfde      	ittt	le
 8005dcc:	2330      	movle	r3, #48	; 0x30
 8005dce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dd6:	1b52      	subs	r2, r2, r5
 8005dd8:	6122      	str	r2, [r4, #16]
 8005dda:	464b      	mov	r3, r9
 8005ddc:	4621      	mov	r1, r4
 8005dde:	4640      	mov	r0, r8
 8005de0:	f8cd a000 	str.w	sl, [sp]
 8005de4:	aa03      	add	r2, sp, #12
 8005de6:	f7ff fedf 	bl	8005ba8 <_printf_common>
 8005dea:	3001      	adds	r0, #1
 8005dec:	d14c      	bne.n	8005e88 <_printf_i+0x200>
 8005dee:	f04f 30ff 	mov.w	r0, #4294967295
 8005df2:	b004      	add	sp, #16
 8005df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df8:	4834      	ldr	r0, [pc, #208]	; (8005ecc <_printf_i+0x244>)
 8005dfa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005dfe:	6829      	ldr	r1, [r5, #0]
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e06:	6029      	str	r1, [r5, #0]
 8005e08:	061d      	lsls	r5, r3, #24
 8005e0a:	d514      	bpl.n	8005e36 <_printf_i+0x1ae>
 8005e0c:	07df      	lsls	r7, r3, #31
 8005e0e:	bf44      	itt	mi
 8005e10:	f043 0320 	orrmi.w	r3, r3, #32
 8005e14:	6023      	strmi	r3, [r4, #0]
 8005e16:	b91e      	cbnz	r6, 8005e20 <_printf_i+0x198>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	f023 0320 	bic.w	r3, r3, #32
 8005e1e:	6023      	str	r3, [r4, #0]
 8005e20:	2310      	movs	r3, #16
 8005e22:	e7af      	b.n	8005d84 <_printf_i+0xfc>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	f043 0320 	orr.w	r3, r3, #32
 8005e2a:	6023      	str	r3, [r4, #0]
 8005e2c:	2378      	movs	r3, #120	; 0x78
 8005e2e:	4828      	ldr	r0, [pc, #160]	; (8005ed0 <_printf_i+0x248>)
 8005e30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e34:	e7e3      	b.n	8005dfe <_printf_i+0x176>
 8005e36:	0659      	lsls	r1, r3, #25
 8005e38:	bf48      	it	mi
 8005e3a:	b2b6      	uxthmi	r6, r6
 8005e3c:	e7e6      	b.n	8005e0c <_printf_i+0x184>
 8005e3e:	4615      	mov	r5, r2
 8005e40:	e7bb      	b.n	8005dba <_printf_i+0x132>
 8005e42:	682b      	ldr	r3, [r5, #0]
 8005e44:	6826      	ldr	r6, [r4, #0]
 8005e46:	1d18      	adds	r0, r3, #4
 8005e48:	6961      	ldr	r1, [r4, #20]
 8005e4a:	6028      	str	r0, [r5, #0]
 8005e4c:	0635      	lsls	r5, r6, #24
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	d501      	bpl.n	8005e56 <_printf_i+0x1ce>
 8005e52:	6019      	str	r1, [r3, #0]
 8005e54:	e002      	b.n	8005e5c <_printf_i+0x1d4>
 8005e56:	0670      	lsls	r0, r6, #25
 8005e58:	d5fb      	bpl.n	8005e52 <_printf_i+0x1ca>
 8005e5a:	8019      	strh	r1, [r3, #0]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	4615      	mov	r5, r2
 8005e60:	6123      	str	r3, [r4, #16]
 8005e62:	e7ba      	b.n	8005dda <_printf_i+0x152>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	2100      	movs	r1, #0
 8005e68:	1d1a      	adds	r2, r3, #4
 8005e6a:	602a      	str	r2, [r5, #0]
 8005e6c:	681d      	ldr	r5, [r3, #0]
 8005e6e:	6862      	ldr	r2, [r4, #4]
 8005e70:	4628      	mov	r0, r5
 8005e72:	f000 fb23 	bl	80064bc <memchr>
 8005e76:	b108      	cbz	r0, 8005e7c <_printf_i+0x1f4>
 8005e78:	1b40      	subs	r0, r0, r5
 8005e7a:	6060      	str	r0, [r4, #4]
 8005e7c:	6863      	ldr	r3, [r4, #4]
 8005e7e:	6123      	str	r3, [r4, #16]
 8005e80:	2300      	movs	r3, #0
 8005e82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e86:	e7a8      	b.n	8005dda <_printf_i+0x152>
 8005e88:	462a      	mov	r2, r5
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	47d0      	blx	sl
 8005e92:	3001      	adds	r0, #1
 8005e94:	d0ab      	beq.n	8005dee <_printf_i+0x166>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	079b      	lsls	r3, r3, #30
 8005e9a:	d413      	bmi.n	8005ec4 <_printf_i+0x23c>
 8005e9c:	68e0      	ldr	r0, [r4, #12]
 8005e9e:	9b03      	ldr	r3, [sp, #12]
 8005ea0:	4298      	cmp	r0, r3
 8005ea2:	bfb8      	it	lt
 8005ea4:	4618      	movlt	r0, r3
 8005ea6:	e7a4      	b.n	8005df2 <_printf_i+0x16a>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4632      	mov	r2, r6
 8005eac:	4649      	mov	r1, r9
 8005eae:	4640      	mov	r0, r8
 8005eb0:	47d0      	blx	sl
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d09b      	beq.n	8005dee <_printf_i+0x166>
 8005eb6:	3501      	adds	r5, #1
 8005eb8:	68e3      	ldr	r3, [r4, #12]
 8005eba:	9903      	ldr	r1, [sp, #12]
 8005ebc:	1a5b      	subs	r3, r3, r1
 8005ebe:	42ab      	cmp	r3, r5
 8005ec0:	dcf2      	bgt.n	8005ea8 <_printf_i+0x220>
 8005ec2:	e7eb      	b.n	8005e9c <_printf_i+0x214>
 8005ec4:	2500      	movs	r5, #0
 8005ec6:	f104 0619 	add.w	r6, r4, #25
 8005eca:	e7f5      	b.n	8005eb8 <_printf_i+0x230>
 8005ecc:	08006ab9 	.word	0x08006ab9
 8005ed0:	08006aca 	.word	0x08006aca

08005ed4 <_sbrk_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	4d05      	ldr	r5, [pc, #20]	; (8005ef0 <_sbrk_r+0x1c>)
 8005eda:	4604      	mov	r4, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	602b      	str	r3, [r5, #0]
 8005ee0:	f7fc f93c 	bl	800215c <_sbrk>
 8005ee4:	1c43      	adds	r3, r0, #1
 8005ee6:	d102      	bne.n	8005eee <_sbrk_r+0x1a>
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	b103      	cbz	r3, 8005eee <_sbrk_r+0x1a>
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	2000035c 	.word	0x2000035c

08005ef4 <__swbuf_r>:
 8005ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef6:	460e      	mov	r6, r1
 8005ef8:	4614      	mov	r4, r2
 8005efa:	4605      	mov	r5, r0
 8005efc:	b118      	cbz	r0, 8005f06 <__swbuf_r+0x12>
 8005efe:	6983      	ldr	r3, [r0, #24]
 8005f00:	b90b      	cbnz	r3, 8005f06 <__swbuf_r+0x12>
 8005f02:	f000 f9d5 	bl	80062b0 <__sinit>
 8005f06:	4b21      	ldr	r3, [pc, #132]	; (8005f8c <__swbuf_r+0x98>)
 8005f08:	429c      	cmp	r4, r3
 8005f0a:	d12b      	bne.n	8005f64 <__swbuf_r+0x70>
 8005f0c:	686c      	ldr	r4, [r5, #4]
 8005f0e:	69a3      	ldr	r3, [r4, #24]
 8005f10:	60a3      	str	r3, [r4, #8]
 8005f12:	89a3      	ldrh	r3, [r4, #12]
 8005f14:	071a      	lsls	r2, r3, #28
 8005f16:	d52f      	bpl.n	8005f78 <__swbuf_r+0x84>
 8005f18:	6923      	ldr	r3, [r4, #16]
 8005f1a:	b36b      	cbz	r3, 8005f78 <__swbuf_r+0x84>
 8005f1c:	6923      	ldr	r3, [r4, #16]
 8005f1e:	6820      	ldr	r0, [r4, #0]
 8005f20:	b2f6      	uxtb	r6, r6
 8005f22:	1ac0      	subs	r0, r0, r3
 8005f24:	6963      	ldr	r3, [r4, #20]
 8005f26:	4637      	mov	r7, r6
 8005f28:	4283      	cmp	r3, r0
 8005f2a:	dc04      	bgt.n	8005f36 <__swbuf_r+0x42>
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f000 f92a 	bl	8006188 <_fflush_r>
 8005f34:	bb30      	cbnz	r0, 8005f84 <__swbuf_r+0x90>
 8005f36:	68a3      	ldr	r3, [r4, #8]
 8005f38:	3001      	adds	r0, #1
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	60a3      	str	r3, [r4, #8]
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	6022      	str	r2, [r4, #0]
 8005f44:	701e      	strb	r6, [r3, #0]
 8005f46:	6963      	ldr	r3, [r4, #20]
 8005f48:	4283      	cmp	r3, r0
 8005f4a:	d004      	beq.n	8005f56 <__swbuf_r+0x62>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	07db      	lsls	r3, r3, #31
 8005f50:	d506      	bpl.n	8005f60 <__swbuf_r+0x6c>
 8005f52:	2e0a      	cmp	r6, #10
 8005f54:	d104      	bne.n	8005f60 <__swbuf_r+0x6c>
 8005f56:	4621      	mov	r1, r4
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f000 f915 	bl	8006188 <_fflush_r>
 8005f5e:	b988      	cbnz	r0, 8005f84 <__swbuf_r+0x90>
 8005f60:	4638      	mov	r0, r7
 8005f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f64:	4b0a      	ldr	r3, [pc, #40]	; (8005f90 <__swbuf_r+0x9c>)
 8005f66:	429c      	cmp	r4, r3
 8005f68:	d101      	bne.n	8005f6e <__swbuf_r+0x7a>
 8005f6a:	68ac      	ldr	r4, [r5, #8]
 8005f6c:	e7cf      	b.n	8005f0e <__swbuf_r+0x1a>
 8005f6e:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <__swbuf_r+0xa0>)
 8005f70:	429c      	cmp	r4, r3
 8005f72:	bf08      	it	eq
 8005f74:	68ec      	ldreq	r4, [r5, #12]
 8005f76:	e7ca      	b.n	8005f0e <__swbuf_r+0x1a>
 8005f78:	4621      	mov	r1, r4
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f000 f80c 	bl	8005f98 <__swsetup_r>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d0cb      	beq.n	8005f1c <__swbuf_r+0x28>
 8005f84:	f04f 37ff 	mov.w	r7, #4294967295
 8005f88:	e7ea      	b.n	8005f60 <__swbuf_r+0x6c>
 8005f8a:	bf00      	nop
 8005f8c:	08006afc 	.word	0x08006afc
 8005f90:	08006b1c 	.word	0x08006b1c
 8005f94:	08006adc 	.word	0x08006adc

08005f98 <__swsetup_r>:
 8005f98:	4b32      	ldr	r3, [pc, #200]	; (8006064 <__swsetup_r+0xcc>)
 8005f9a:	b570      	push	{r4, r5, r6, lr}
 8005f9c:	681d      	ldr	r5, [r3, #0]
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	b125      	cbz	r5, 8005fae <__swsetup_r+0x16>
 8005fa4:	69ab      	ldr	r3, [r5, #24]
 8005fa6:	b913      	cbnz	r3, 8005fae <__swsetup_r+0x16>
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f000 f981 	bl	80062b0 <__sinit>
 8005fae:	4b2e      	ldr	r3, [pc, #184]	; (8006068 <__swsetup_r+0xd0>)
 8005fb0:	429c      	cmp	r4, r3
 8005fb2:	d10f      	bne.n	8005fd4 <__swsetup_r+0x3c>
 8005fb4:	686c      	ldr	r4, [r5, #4]
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fbc:	0719      	lsls	r1, r3, #28
 8005fbe:	d42c      	bmi.n	800601a <__swsetup_r+0x82>
 8005fc0:	06dd      	lsls	r5, r3, #27
 8005fc2:	d411      	bmi.n	8005fe8 <__swsetup_r+0x50>
 8005fc4:	2309      	movs	r3, #9
 8005fc6:	6033      	str	r3, [r6, #0]
 8005fc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd0:	81a3      	strh	r3, [r4, #12]
 8005fd2:	e03e      	b.n	8006052 <__swsetup_r+0xba>
 8005fd4:	4b25      	ldr	r3, [pc, #148]	; (800606c <__swsetup_r+0xd4>)
 8005fd6:	429c      	cmp	r4, r3
 8005fd8:	d101      	bne.n	8005fde <__swsetup_r+0x46>
 8005fda:	68ac      	ldr	r4, [r5, #8]
 8005fdc:	e7eb      	b.n	8005fb6 <__swsetup_r+0x1e>
 8005fde:	4b24      	ldr	r3, [pc, #144]	; (8006070 <__swsetup_r+0xd8>)
 8005fe0:	429c      	cmp	r4, r3
 8005fe2:	bf08      	it	eq
 8005fe4:	68ec      	ldreq	r4, [r5, #12]
 8005fe6:	e7e6      	b.n	8005fb6 <__swsetup_r+0x1e>
 8005fe8:	0758      	lsls	r0, r3, #29
 8005fea:	d512      	bpl.n	8006012 <__swsetup_r+0x7a>
 8005fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fee:	b141      	cbz	r1, 8006002 <__swsetup_r+0x6a>
 8005ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ff4:	4299      	cmp	r1, r3
 8005ff6:	d002      	beq.n	8005ffe <__swsetup_r+0x66>
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f7ff fa45 	bl	8005488 <_free_r>
 8005ffe:	2300      	movs	r3, #0
 8006000:	6363      	str	r3, [r4, #52]	; 0x34
 8006002:	89a3      	ldrh	r3, [r4, #12]
 8006004:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006008:	81a3      	strh	r3, [r4, #12]
 800600a:	2300      	movs	r3, #0
 800600c:	6063      	str	r3, [r4, #4]
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	f043 0308 	orr.w	r3, r3, #8
 8006018:	81a3      	strh	r3, [r4, #12]
 800601a:	6923      	ldr	r3, [r4, #16]
 800601c:	b94b      	cbnz	r3, 8006032 <__swsetup_r+0x9a>
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006028:	d003      	beq.n	8006032 <__swsetup_r+0x9a>
 800602a:	4621      	mov	r1, r4
 800602c:	4630      	mov	r0, r6
 800602e:	f000 fa05 	bl	800643c <__smakebuf_r>
 8006032:	89a0      	ldrh	r0, [r4, #12]
 8006034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006038:	f010 0301 	ands.w	r3, r0, #1
 800603c:	d00a      	beq.n	8006054 <__swsetup_r+0xbc>
 800603e:	2300      	movs	r3, #0
 8006040:	60a3      	str	r3, [r4, #8]
 8006042:	6963      	ldr	r3, [r4, #20]
 8006044:	425b      	negs	r3, r3
 8006046:	61a3      	str	r3, [r4, #24]
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	b943      	cbnz	r3, 800605e <__swsetup_r+0xc6>
 800604c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006050:	d1ba      	bne.n	8005fc8 <__swsetup_r+0x30>
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	0781      	lsls	r1, r0, #30
 8006056:	bf58      	it	pl
 8006058:	6963      	ldrpl	r3, [r4, #20]
 800605a:	60a3      	str	r3, [r4, #8]
 800605c:	e7f4      	b.n	8006048 <__swsetup_r+0xb0>
 800605e:	2000      	movs	r0, #0
 8006060:	e7f7      	b.n	8006052 <__swsetup_r+0xba>
 8006062:	bf00      	nop
 8006064:	200000c8 	.word	0x200000c8
 8006068:	08006afc 	.word	0x08006afc
 800606c:	08006b1c 	.word	0x08006b1c
 8006070:	08006adc 	.word	0x08006adc

08006074 <abort>:
 8006074:	2006      	movs	r0, #6
 8006076:	b508      	push	{r3, lr}
 8006078:	f000 faac 	bl	80065d4 <raise>
 800607c:	2001      	movs	r0, #1
 800607e:	f7fb fffa 	bl	8002076 <_exit>
	...

08006084 <__sflush_r>:
 8006084:	898a      	ldrh	r2, [r1, #12]
 8006086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006088:	4605      	mov	r5, r0
 800608a:	0710      	lsls	r0, r2, #28
 800608c:	460c      	mov	r4, r1
 800608e:	d457      	bmi.n	8006140 <__sflush_r+0xbc>
 8006090:	684b      	ldr	r3, [r1, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	dc04      	bgt.n	80060a0 <__sflush_r+0x1c>
 8006096:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006098:	2b00      	cmp	r3, #0
 800609a:	dc01      	bgt.n	80060a0 <__sflush_r+0x1c>
 800609c:	2000      	movs	r0, #0
 800609e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060a2:	2e00      	cmp	r6, #0
 80060a4:	d0fa      	beq.n	800609c <__sflush_r+0x18>
 80060a6:	2300      	movs	r3, #0
 80060a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060ac:	682f      	ldr	r7, [r5, #0]
 80060ae:	602b      	str	r3, [r5, #0]
 80060b0:	d032      	beq.n	8006118 <__sflush_r+0x94>
 80060b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	075a      	lsls	r2, r3, #29
 80060b8:	d505      	bpl.n	80060c6 <__sflush_r+0x42>
 80060ba:	6863      	ldr	r3, [r4, #4]
 80060bc:	1ac0      	subs	r0, r0, r3
 80060be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060c0:	b10b      	cbz	r3, 80060c6 <__sflush_r+0x42>
 80060c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060c4:	1ac0      	subs	r0, r0, r3
 80060c6:	2300      	movs	r3, #0
 80060c8:	4602      	mov	r2, r0
 80060ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060cc:	4628      	mov	r0, r5
 80060ce:	6a21      	ldr	r1, [r4, #32]
 80060d0:	47b0      	blx	r6
 80060d2:	1c43      	adds	r3, r0, #1
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	d106      	bne.n	80060e6 <__sflush_r+0x62>
 80060d8:	6829      	ldr	r1, [r5, #0]
 80060da:	291d      	cmp	r1, #29
 80060dc:	d82c      	bhi.n	8006138 <__sflush_r+0xb4>
 80060de:	4a29      	ldr	r2, [pc, #164]	; (8006184 <__sflush_r+0x100>)
 80060e0:	40ca      	lsrs	r2, r1
 80060e2:	07d6      	lsls	r6, r2, #31
 80060e4:	d528      	bpl.n	8006138 <__sflush_r+0xb4>
 80060e6:	2200      	movs	r2, #0
 80060e8:	6062      	str	r2, [r4, #4]
 80060ea:	6922      	ldr	r2, [r4, #16]
 80060ec:	04d9      	lsls	r1, r3, #19
 80060ee:	6022      	str	r2, [r4, #0]
 80060f0:	d504      	bpl.n	80060fc <__sflush_r+0x78>
 80060f2:	1c42      	adds	r2, r0, #1
 80060f4:	d101      	bne.n	80060fa <__sflush_r+0x76>
 80060f6:	682b      	ldr	r3, [r5, #0]
 80060f8:	b903      	cbnz	r3, 80060fc <__sflush_r+0x78>
 80060fa:	6560      	str	r0, [r4, #84]	; 0x54
 80060fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060fe:	602f      	str	r7, [r5, #0]
 8006100:	2900      	cmp	r1, #0
 8006102:	d0cb      	beq.n	800609c <__sflush_r+0x18>
 8006104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006108:	4299      	cmp	r1, r3
 800610a:	d002      	beq.n	8006112 <__sflush_r+0x8e>
 800610c:	4628      	mov	r0, r5
 800610e:	f7ff f9bb 	bl	8005488 <_free_r>
 8006112:	2000      	movs	r0, #0
 8006114:	6360      	str	r0, [r4, #52]	; 0x34
 8006116:	e7c2      	b.n	800609e <__sflush_r+0x1a>
 8006118:	6a21      	ldr	r1, [r4, #32]
 800611a:	2301      	movs	r3, #1
 800611c:	4628      	mov	r0, r5
 800611e:	47b0      	blx	r6
 8006120:	1c41      	adds	r1, r0, #1
 8006122:	d1c7      	bne.n	80060b4 <__sflush_r+0x30>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0c4      	beq.n	80060b4 <__sflush_r+0x30>
 800612a:	2b1d      	cmp	r3, #29
 800612c:	d001      	beq.n	8006132 <__sflush_r+0xae>
 800612e:	2b16      	cmp	r3, #22
 8006130:	d101      	bne.n	8006136 <__sflush_r+0xb2>
 8006132:	602f      	str	r7, [r5, #0]
 8006134:	e7b2      	b.n	800609c <__sflush_r+0x18>
 8006136:	89a3      	ldrh	r3, [r4, #12]
 8006138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800613c:	81a3      	strh	r3, [r4, #12]
 800613e:	e7ae      	b.n	800609e <__sflush_r+0x1a>
 8006140:	690f      	ldr	r7, [r1, #16]
 8006142:	2f00      	cmp	r7, #0
 8006144:	d0aa      	beq.n	800609c <__sflush_r+0x18>
 8006146:	0793      	lsls	r3, r2, #30
 8006148:	bf18      	it	ne
 800614a:	2300      	movne	r3, #0
 800614c:	680e      	ldr	r6, [r1, #0]
 800614e:	bf08      	it	eq
 8006150:	694b      	ldreq	r3, [r1, #20]
 8006152:	1bf6      	subs	r6, r6, r7
 8006154:	600f      	str	r7, [r1, #0]
 8006156:	608b      	str	r3, [r1, #8]
 8006158:	2e00      	cmp	r6, #0
 800615a:	dd9f      	ble.n	800609c <__sflush_r+0x18>
 800615c:	4633      	mov	r3, r6
 800615e:	463a      	mov	r2, r7
 8006160:	4628      	mov	r0, r5
 8006162:	6a21      	ldr	r1, [r4, #32]
 8006164:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006168:	47e0      	blx	ip
 800616a:	2800      	cmp	r0, #0
 800616c:	dc06      	bgt.n	800617c <__sflush_r+0xf8>
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	f04f 30ff 	mov.w	r0, #4294967295
 8006174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006178:	81a3      	strh	r3, [r4, #12]
 800617a:	e790      	b.n	800609e <__sflush_r+0x1a>
 800617c:	4407      	add	r7, r0
 800617e:	1a36      	subs	r6, r6, r0
 8006180:	e7ea      	b.n	8006158 <__sflush_r+0xd4>
 8006182:	bf00      	nop
 8006184:	20400001 	.word	0x20400001

08006188 <_fflush_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	690b      	ldr	r3, [r1, #16]
 800618c:	4605      	mov	r5, r0
 800618e:	460c      	mov	r4, r1
 8006190:	b913      	cbnz	r3, 8006198 <_fflush_r+0x10>
 8006192:	2500      	movs	r5, #0
 8006194:	4628      	mov	r0, r5
 8006196:	bd38      	pop	{r3, r4, r5, pc}
 8006198:	b118      	cbz	r0, 80061a2 <_fflush_r+0x1a>
 800619a:	6983      	ldr	r3, [r0, #24]
 800619c:	b90b      	cbnz	r3, 80061a2 <_fflush_r+0x1a>
 800619e:	f000 f887 	bl	80062b0 <__sinit>
 80061a2:	4b14      	ldr	r3, [pc, #80]	; (80061f4 <_fflush_r+0x6c>)
 80061a4:	429c      	cmp	r4, r3
 80061a6:	d11b      	bne.n	80061e0 <_fflush_r+0x58>
 80061a8:	686c      	ldr	r4, [r5, #4]
 80061aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0ef      	beq.n	8006192 <_fflush_r+0xa>
 80061b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061b4:	07d0      	lsls	r0, r2, #31
 80061b6:	d404      	bmi.n	80061c2 <_fflush_r+0x3a>
 80061b8:	0599      	lsls	r1, r3, #22
 80061ba:	d402      	bmi.n	80061c2 <_fflush_r+0x3a>
 80061bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061be:	f000 f915 	bl	80063ec <__retarget_lock_acquire_recursive>
 80061c2:	4628      	mov	r0, r5
 80061c4:	4621      	mov	r1, r4
 80061c6:	f7ff ff5d 	bl	8006084 <__sflush_r>
 80061ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061cc:	4605      	mov	r5, r0
 80061ce:	07da      	lsls	r2, r3, #31
 80061d0:	d4e0      	bmi.n	8006194 <_fflush_r+0xc>
 80061d2:	89a3      	ldrh	r3, [r4, #12]
 80061d4:	059b      	lsls	r3, r3, #22
 80061d6:	d4dd      	bmi.n	8006194 <_fflush_r+0xc>
 80061d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061da:	f000 f908 	bl	80063ee <__retarget_lock_release_recursive>
 80061de:	e7d9      	b.n	8006194 <_fflush_r+0xc>
 80061e0:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <_fflush_r+0x70>)
 80061e2:	429c      	cmp	r4, r3
 80061e4:	d101      	bne.n	80061ea <_fflush_r+0x62>
 80061e6:	68ac      	ldr	r4, [r5, #8]
 80061e8:	e7df      	b.n	80061aa <_fflush_r+0x22>
 80061ea:	4b04      	ldr	r3, [pc, #16]	; (80061fc <_fflush_r+0x74>)
 80061ec:	429c      	cmp	r4, r3
 80061ee:	bf08      	it	eq
 80061f0:	68ec      	ldreq	r4, [r5, #12]
 80061f2:	e7da      	b.n	80061aa <_fflush_r+0x22>
 80061f4:	08006afc 	.word	0x08006afc
 80061f8:	08006b1c 	.word	0x08006b1c
 80061fc:	08006adc 	.word	0x08006adc

08006200 <std>:
 8006200:	2300      	movs	r3, #0
 8006202:	b510      	push	{r4, lr}
 8006204:	4604      	mov	r4, r0
 8006206:	e9c0 3300 	strd	r3, r3, [r0]
 800620a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800620e:	6083      	str	r3, [r0, #8]
 8006210:	8181      	strh	r1, [r0, #12]
 8006212:	6643      	str	r3, [r0, #100]	; 0x64
 8006214:	81c2      	strh	r2, [r0, #14]
 8006216:	6183      	str	r3, [r0, #24]
 8006218:	4619      	mov	r1, r3
 800621a:	2208      	movs	r2, #8
 800621c:	305c      	adds	r0, #92	; 0x5c
 800621e:	f7ff f861 	bl	80052e4 <memset>
 8006222:	4b05      	ldr	r3, [pc, #20]	; (8006238 <std+0x38>)
 8006224:	6224      	str	r4, [r4, #32]
 8006226:	6263      	str	r3, [r4, #36]	; 0x24
 8006228:	4b04      	ldr	r3, [pc, #16]	; (800623c <std+0x3c>)
 800622a:	62a3      	str	r3, [r4, #40]	; 0x28
 800622c:	4b04      	ldr	r3, [pc, #16]	; (8006240 <std+0x40>)
 800622e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006230:	4b04      	ldr	r3, [pc, #16]	; (8006244 <std+0x44>)
 8006232:	6323      	str	r3, [r4, #48]	; 0x30
 8006234:	bd10      	pop	{r4, pc}
 8006236:	bf00      	nop
 8006238:	0800660d 	.word	0x0800660d
 800623c:	0800662f 	.word	0x0800662f
 8006240:	08006667 	.word	0x08006667
 8006244:	0800668b 	.word	0x0800668b

08006248 <_cleanup_r>:
 8006248:	4901      	ldr	r1, [pc, #4]	; (8006250 <_cleanup_r+0x8>)
 800624a:	f000 b8af 	b.w	80063ac <_fwalk_reent>
 800624e:	bf00      	nop
 8006250:	08006189 	.word	0x08006189

08006254 <__sfmoreglue>:
 8006254:	2268      	movs	r2, #104	; 0x68
 8006256:	b570      	push	{r4, r5, r6, lr}
 8006258:	1e4d      	subs	r5, r1, #1
 800625a:	4355      	muls	r5, r2
 800625c:	460e      	mov	r6, r1
 800625e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006262:	f7ff f979 	bl	8005558 <_malloc_r>
 8006266:	4604      	mov	r4, r0
 8006268:	b140      	cbz	r0, 800627c <__sfmoreglue+0x28>
 800626a:	2100      	movs	r1, #0
 800626c:	e9c0 1600 	strd	r1, r6, [r0]
 8006270:	300c      	adds	r0, #12
 8006272:	60a0      	str	r0, [r4, #8]
 8006274:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006278:	f7ff f834 	bl	80052e4 <memset>
 800627c:	4620      	mov	r0, r4
 800627e:	bd70      	pop	{r4, r5, r6, pc}

08006280 <__sfp_lock_acquire>:
 8006280:	4801      	ldr	r0, [pc, #4]	; (8006288 <__sfp_lock_acquire+0x8>)
 8006282:	f000 b8b3 	b.w	80063ec <__retarget_lock_acquire_recursive>
 8006286:	bf00      	nop
 8006288:	20000359 	.word	0x20000359

0800628c <__sfp_lock_release>:
 800628c:	4801      	ldr	r0, [pc, #4]	; (8006294 <__sfp_lock_release+0x8>)
 800628e:	f000 b8ae 	b.w	80063ee <__retarget_lock_release_recursive>
 8006292:	bf00      	nop
 8006294:	20000359 	.word	0x20000359

08006298 <__sinit_lock_acquire>:
 8006298:	4801      	ldr	r0, [pc, #4]	; (80062a0 <__sinit_lock_acquire+0x8>)
 800629a:	f000 b8a7 	b.w	80063ec <__retarget_lock_acquire_recursive>
 800629e:	bf00      	nop
 80062a0:	2000035a 	.word	0x2000035a

080062a4 <__sinit_lock_release>:
 80062a4:	4801      	ldr	r0, [pc, #4]	; (80062ac <__sinit_lock_release+0x8>)
 80062a6:	f000 b8a2 	b.w	80063ee <__retarget_lock_release_recursive>
 80062aa:	bf00      	nop
 80062ac:	2000035a 	.word	0x2000035a

080062b0 <__sinit>:
 80062b0:	b510      	push	{r4, lr}
 80062b2:	4604      	mov	r4, r0
 80062b4:	f7ff fff0 	bl	8006298 <__sinit_lock_acquire>
 80062b8:	69a3      	ldr	r3, [r4, #24]
 80062ba:	b11b      	cbz	r3, 80062c4 <__sinit+0x14>
 80062bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062c0:	f7ff bff0 	b.w	80062a4 <__sinit_lock_release>
 80062c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062c8:	6523      	str	r3, [r4, #80]	; 0x50
 80062ca:	4b13      	ldr	r3, [pc, #76]	; (8006318 <__sinit+0x68>)
 80062cc:	4a13      	ldr	r2, [pc, #76]	; (800631c <__sinit+0x6c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80062d2:	42a3      	cmp	r3, r4
 80062d4:	bf08      	it	eq
 80062d6:	2301      	moveq	r3, #1
 80062d8:	4620      	mov	r0, r4
 80062da:	bf08      	it	eq
 80062dc:	61a3      	streq	r3, [r4, #24]
 80062de:	f000 f81f 	bl	8006320 <__sfp>
 80062e2:	6060      	str	r0, [r4, #4]
 80062e4:	4620      	mov	r0, r4
 80062e6:	f000 f81b 	bl	8006320 <__sfp>
 80062ea:	60a0      	str	r0, [r4, #8]
 80062ec:	4620      	mov	r0, r4
 80062ee:	f000 f817 	bl	8006320 <__sfp>
 80062f2:	2200      	movs	r2, #0
 80062f4:	2104      	movs	r1, #4
 80062f6:	60e0      	str	r0, [r4, #12]
 80062f8:	6860      	ldr	r0, [r4, #4]
 80062fa:	f7ff ff81 	bl	8006200 <std>
 80062fe:	2201      	movs	r2, #1
 8006300:	2109      	movs	r1, #9
 8006302:	68a0      	ldr	r0, [r4, #8]
 8006304:	f7ff ff7c 	bl	8006200 <std>
 8006308:	2202      	movs	r2, #2
 800630a:	2112      	movs	r1, #18
 800630c:	68e0      	ldr	r0, [r4, #12]
 800630e:	f7ff ff77 	bl	8006200 <std>
 8006312:	2301      	movs	r3, #1
 8006314:	61a3      	str	r3, [r4, #24]
 8006316:	e7d1      	b.n	80062bc <__sinit+0xc>
 8006318:	080069f4 	.word	0x080069f4
 800631c:	08006249 	.word	0x08006249

08006320 <__sfp>:
 8006320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006322:	4607      	mov	r7, r0
 8006324:	f7ff ffac 	bl	8006280 <__sfp_lock_acquire>
 8006328:	4b1e      	ldr	r3, [pc, #120]	; (80063a4 <__sfp+0x84>)
 800632a:	681e      	ldr	r6, [r3, #0]
 800632c:	69b3      	ldr	r3, [r6, #24]
 800632e:	b913      	cbnz	r3, 8006336 <__sfp+0x16>
 8006330:	4630      	mov	r0, r6
 8006332:	f7ff ffbd 	bl	80062b0 <__sinit>
 8006336:	3648      	adds	r6, #72	; 0x48
 8006338:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800633c:	3b01      	subs	r3, #1
 800633e:	d503      	bpl.n	8006348 <__sfp+0x28>
 8006340:	6833      	ldr	r3, [r6, #0]
 8006342:	b30b      	cbz	r3, 8006388 <__sfp+0x68>
 8006344:	6836      	ldr	r6, [r6, #0]
 8006346:	e7f7      	b.n	8006338 <__sfp+0x18>
 8006348:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800634c:	b9d5      	cbnz	r5, 8006384 <__sfp+0x64>
 800634e:	4b16      	ldr	r3, [pc, #88]	; (80063a8 <__sfp+0x88>)
 8006350:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006354:	60e3      	str	r3, [r4, #12]
 8006356:	6665      	str	r5, [r4, #100]	; 0x64
 8006358:	f000 f847 	bl	80063ea <__retarget_lock_init_recursive>
 800635c:	f7ff ff96 	bl	800628c <__sfp_lock_release>
 8006360:	2208      	movs	r2, #8
 8006362:	4629      	mov	r1, r5
 8006364:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006368:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800636c:	6025      	str	r5, [r4, #0]
 800636e:	61a5      	str	r5, [r4, #24]
 8006370:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006374:	f7fe ffb6 	bl	80052e4 <memset>
 8006378:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800637c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006380:	4620      	mov	r0, r4
 8006382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006384:	3468      	adds	r4, #104	; 0x68
 8006386:	e7d9      	b.n	800633c <__sfp+0x1c>
 8006388:	2104      	movs	r1, #4
 800638a:	4638      	mov	r0, r7
 800638c:	f7ff ff62 	bl	8006254 <__sfmoreglue>
 8006390:	4604      	mov	r4, r0
 8006392:	6030      	str	r0, [r6, #0]
 8006394:	2800      	cmp	r0, #0
 8006396:	d1d5      	bne.n	8006344 <__sfp+0x24>
 8006398:	f7ff ff78 	bl	800628c <__sfp_lock_release>
 800639c:	230c      	movs	r3, #12
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	e7ee      	b.n	8006380 <__sfp+0x60>
 80063a2:	bf00      	nop
 80063a4:	080069f4 	.word	0x080069f4
 80063a8:	ffff0001 	.word	0xffff0001

080063ac <_fwalk_reent>:
 80063ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063b0:	4606      	mov	r6, r0
 80063b2:	4688      	mov	r8, r1
 80063b4:	2700      	movs	r7, #0
 80063b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063be:	f1b9 0901 	subs.w	r9, r9, #1
 80063c2:	d505      	bpl.n	80063d0 <_fwalk_reent+0x24>
 80063c4:	6824      	ldr	r4, [r4, #0]
 80063c6:	2c00      	cmp	r4, #0
 80063c8:	d1f7      	bne.n	80063ba <_fwalk_reent+0xe>
 80063ca:	4638      	mov	r0, r7
 80063cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063d0:	89ab      	ldrh	r3, [r5, #12]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d907      	bls.n	80063e6 <_fwalk_reent+0x3a>
 80063d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063da:	3301      	adds	r3, #1
 80063dc:	d003      	beq.n	80063e6 <_fwalk_reent+0x3a>
 80063de:	4629      	mov	r1, r5
 80063e0:	4630      	mov	r0, r6
 80063e2:	47c0      	blx	r8
 80063e4:	4307      	orrs	r7, r0
 80063e6:	3568      	adds	r5, #104	; 0x68
 80063e8:	e7e9      	b.n	80063be <_fwalk_reent+0x12>

080063ea <__retarget_lock_init_recursive>:
 80063ea:	4770      	bx	lr

080063ec <__retarget_lock_acquire_recursive>:
 80063ec:	4770      	bx	lr

080063ee <__retarget_lock_release_recursive>:
 80063ee:	4770      	bx	lr

080063f0 <__swhatbuf_r>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	460e      	mov	r6, r1
 80063f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f8:	4614      	mov	r4, r2
 80063fa:	2900      	cmp	r1, #0
 80063fc:	461d      	mov	r5, r3
 80063fe:	b096      	sub	sp, #88	; 0x58
 8006400:	da08      	bge.n	8006414 <__swhatbuf_r+0x24>
 8006402:	2200      	movs	r2, #0
 8006404:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006408:	602a      	str	r2, [r5, #0]
 800640a:	061a      	lsls	r2, r3, #24
 800640c:	d410      	bmi.n	8006430 <__swhatbuf_r+0x40>
 800640e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006412:	e00e      	b.n	8006432 <__swhatbuf_r+0x42>
 8006414:	466a      	mov	r2, sp
 8006416:	f000 f95f 	bl	80066d8 <_fstat_r>
 800641a:	2800      	cmp	r0, #0
 800641c:	dbf1      	blt.n	8006402 <__swhatbuf_r+0x12>
 800641e:	9a01      	ldr	r2, [sp, #4]
 8006420:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006424:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006428:	425a      	negs	r2, r3
 800642a:	415a      	adcs	r2, r3
 800642c:	602a      	str	r2, [r5, #0]
 800642e:	e7ee      	b.n	800640e <__swhatbuf_r+0x1e>
 8006430:	2340      	movs	r3, #64	; 0x40
 8006432:	2000      	movs	r0, #0
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	b016      	add	sp, #88	; 0x58
 8006438:	bd70      	pop	{r4, r5, r6, pc}
	...

0800643c <__smakebuf_r>:
 800643c:	898b      	ldrh	r3, [r1, #12]
 800643e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006440:	079d      	lsls	r5, r3, #30
 8006442:	4606      	mov	r6, r0
 8006444:	460c      	mov	r4, r1
 8006446:	d507      	bpl.n	8006458 <__smakebuf_r+0x1c>
 8006448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800644c:	6023      	str	r3, [r4, #0]
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	2301      	movs	r3, #1
 8006452:	6163      	str	r3, [r4, #20]
 8006454:	b002      	add	sp, #8
 8006456:	bd70      	pop	{r4, r5, r6, pc}
 8006458:	466a      	mov	r2, sp
 800645a:	ab01      	add	r3, sp, #4
 800645c:	f7ff ffc8 	bl	80063f0 <__swhatbuf_r>
 8006460:	9900      	ldr	r1, [sp, #0]
 8006462:	4605      	mov	r5, r0
 8006464:	4630      	mov	r0, r6
 8006466:	f7ff f877 	bl	8005558 <_malloc_r>
 800646a:	b948      	cbnz	r0, 8006480 <__smakebuf_r+0x44>
 800646c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006470:	059a      	lsls	r2, r3, #22
 8006472:	d4ef      	bmi.n	8006454 <__smakebuf_r+0x18>
 8006474:	f023 0303 	bic.w	r3, r3, #3
 8006478:	f043 0302 	orr.w	r3, r3, #2
 800647c:	81a3      	strh	r3, [r4, #12]
 800647e:	e7e3      	b.n	8006448 <__smakebuf_r+0xc>
 8006480:	4b0d      	ldr	r3, [pc, #52]	; (80064b8 <__smakebuf_r+0x7c>)
 8006482:	62b3      	str	r3, [r6, #40]	; 0x28
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	6020      	str	r0, [r4, #0]
 8006488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648c:	81a3      	strh	r3, [r4, #12]
 800648e:	9b00      	ldr	r3, [sp, #0]
 8006490:	6120      	str	r0, [r4, #16]
 8006492:	6163      	str	r3, [r4, #20]
 8006494:	9b01      	ldr	r3, [sp, #4]
 8006496:	b15b      	cbz	r3, 80064b0 <__smakebuf_r+0x74>
 8006498:	4630      	mov	r0, r6
 800649a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800649e:	f000 f92d 	bl	80066fc <_isatty_r>
 80064a2:	b128      	cbz	r0, 80064b0 <__smakebuf_r+0x74>
 80064a4:	89a3      	ldrh	r3, [r4, #12]
 80064a6:	f023 0303 	bic.w	r3, r3, #3
 80064aa:	f043 0301 	orr.w	r3, r3, #1
 80064ae:	81a3      	strh	r3, [r4, #12]
 80064b0:	89a0      	ldrh	r0, [r4, #12]
 80064b2:	4305      	orrs	r5, r0
 80064b4:	81a5      	strh	r5, [r4, #12]
 80064b6:	e7cd      	b.n	8006454 <__smakebuf_r+0x18>
 80064b8:	08006249 	.word	0x08006249

080064bc <memchr>:
 80064bc:	4603      	mov	r3, r0
 80064be:	b510      	push	{r4, lr}
 80064c0:	b2c9      	uxtb	r1, r1
 80064c2:	4402      	add	r2, r0
 80064c4:	4293      	cmp	r3, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	d101      	bne.n	80064ce <memchr+0x12>
 80064ca:	2000      	movs	r0, #0
 80064cc:	e003      	b.n	80064d6 <memchr+0x1a>
 80064ce:	7804      	ldrb	r4, [r0, #0]
 80064d0:	3301      	adds	r3, #1
 80064d2:	428c      	cmp	r4, r1
 80064d4:	d1f6      	bne.n	80064c4 <memchr+0x8>
 80064d6:	bd10      	pop	{r4, pc}

080064d8 <memmove>:
 80064d8:	4288      	cmp	r0, r1
 80064da:	b510      	push	{r4, lr}
 80064dc:	eb01 0402 	add.w	r4, r1, r2
 80064e0:	d902      	bls.n	80064e8 <memmove+0x10>
 80064e2:	4284      	cmp	r4, r0
 80064e4:	4623      	mov	r3, r4
 80064e6:	d807      	bhi.n	80064f8 <memmove+0x20>
 80064e8:	1e43      	subs	r3, r0, #1
 80064ea:	42a1      	cmp	r1, r4
 80064ec:	d008      	beq.n	8006500 <memmove+0x28>
 80064ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064f6:	e7f8      	b.n	80064ea <memmove+0x12>
 80064f8:	4601      	mov	r1, r0
 80064fa:	4402      	add	r2, r0
 80064fc:	428a      	cmp	r2, r1
 80064fe:	d100      	bne.n	8006502 <memmove+0x2a>
 8006500:	bd10      	pop	{r4, pc}
 8006502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800650a:	e7f7      	b.n	80064fc <memmove+0x24>

0800650c <__malloc_lock>:
 800650c:	4801      	ldr	r0, [pc, #4]	; (8006514 <__malloc_lock+0x8>)
 800650e:	f7ff bf6d 	b.w	80063ec <__retarget_lock_acquire_recursive>
 8006512:	bf00      	nop
 8006514:	20000358 	.word	0x20000358

08006518 <__malloc_unlock>:
 8006518:	4801      	ldr	r0, [pc, #4]	; (8006520 <__malloc_unlock+0x8>)
 800651a:	f7ff bf68 	b.w	80063ee <__retarget_lock_release_recursive>
 800651e:	bf00      	nop
 8006520:	20000358 	.word	0x20000358

08006524 <_realloc_r>:
 8006524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006528:	4680      	mov	r8, r0
 800652a:	4614      	mov	r4, r2
 800652c:	460e      	mov	r6, r1
 800652e:	b921      	cbnz	r1, 800653a <_realloc_r+0x16>
 8006530:	4611      	mov	r1, r2
 8006532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006536:	f7ff b80f 	b.w	8005558 <_malloc_r>
 800653a:	b92a      	cbnz	r2, 8006548 <_realloc_r+0x24>
 800653c:	f7fe ffa4 	bl	8005488 <_free_r>
 8006540:	4625      	mov	r5, r4
 8006542:	4628      	mov	r0, r5
 8006544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006548:	f000 f8fa 	bl	8006740 <_malloc_usable_size_r>
 800654c:	4284      	cmp	r4, r0
 800654e:	4607      	mov	r7, r0
 8006550:	d802      	bhi.n	8006558 <_realloc_r+0x34>
 8006552:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006556:	d812      	bhi.n	800657e <_realloc_r+0x5a>
 8006558:	4621      	mov	r1, r4
 800655a:	4640      	mov	r0, r8
 800655c:	f7fe fffc 	bl	8005558 <_malloc_r>
 8006560:	4605      	mov	r5, r0
 8006562:	2800      	cmp	r0, #0
 8006564:	d0ed      	beq.n	8006542 <_realloc_r+0x1e>
 8006566:	42bc      	cmp	r4, r7
 8006568:	4622      	mov	r2, r4
 800656a:	4631      	mov	r1, r6
 800656c:	bf28      	it	cs
 800656e:	463a      	movcs	r2, r7
 8006570:	f7fe feaa 	bl	80052c8 <memcpy>
 8006574:	4631      	mov	r1, r6
 8006576:	4640      	mov	r0, r8
 8006578:	f7fe ff86 	bl	8005488 <_free_r>
 800657c:	e7e1      	b.n	8006542 <_realloc_r+0x1e>
 800657e:	4635      	mov	r5, r6
 8006580:	e7df      	b.n	8006542 <_realloc_r+0x1e>

08006582 <_raise_r>:
 8006582:	291f      	cmp	r1, #31
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	4604      	mov	r4, r0
 8006588:	460d      	mov	r5, r1
 800658a:	d904      	bls.n	8006596 <_raise_r+0x14>
 800658c:	2316      	movs	r3, #22
 800658e:	6003      	str	r3, [r0, #0]
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	bd38      	pop	{r3, r4, r5, pc}
 8006596:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006598:	b112      	cbz	r2, 80065a0 <_raise_r+0x1e>
 800659a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800659e:	b94b      	cbnz	r3, 80065b4 <_raise_r+0x32>
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 f831 	bl	8006608 <_getpid_r>
 80065a6:	462a      	mov	r2, r5
 80065a8:	4601      	mov	r1, r0
 80065aa:	4620      	mov	r0, r4
 80065ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065b0:	f000 b818 	b.w	80065e4 <_kill_r>
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d00a      	beq.n	80065ce <_raise_r+0x4c>
 80065b8:	1c59      	adds	r1, r3, #1
 80065ba:	d103      	bne.n	80065c4 <_raise_r+0x42>
 80065bc:	2316      	movs	r3, #22
 80065be:	6003      	str	r3, [r0, #0]
 80065c0:	2001      	movs	r0, #1
 80065c2:	e7e7      	b.n	8006594 <_raise_r+0x12>
 80065c4:	2400      	movs	r4, #0
 80065c6:	4628      	mov	r0, r5
 80065c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80065cc:	4798      	blx	r3
 80065ce:	2000      	movs	r0, #0
 80065d0:	e7e0      	b.n	8006594 <_raise_r+0x12>
	...

080065d4 <raise>:
 80065d4:	4b02      	ldr	r3, [pc, #8]	; (80065e0 <raise+0xc>)
 80065d6:	4601      	mov	r1, r0
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	f7ff bfd2 	b.w	8006582 <_raise_r>
 80065de:	bf00      	nop
 80065e0:	200000c8 	.word	0x200000c8

080065e4 <_kill_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	2300      	movs	r3, #0
 80065e8:	4d06      	ldr	r5, [pc, #24]	; (8006604 <_kill_r+0x20>)
 80065ea:	4604      	mov	r4, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	4611      	mov	r1, r2
 80065f0:	602b      	str	r3, [r5, #0]
 80065f2:	f7fb fd30 	bl	8002056 <_kill>
 80065f6:	1c43      	adds	r3, r0, #1
 80065f8:	d102      	bne.n	8006600 <_kill_r+0x1c>
 80065fa:	682b      	ldr	r3, [r5, #0]
 80065fc:	b103      	cbz	r3, 8006600 <_kill_r+0x1c>
 80065fe:	6023      	str	r3, [r4, #0]
 8006600:	bd38      	pop	{r3, r4, r5, pc}
 8006602:	bf00      	nop
 8006604:	2000035c 	.word	0x2000035c

08006608 <_getpid_r>:
 8006608:	f7fb bd1e 	b.w	8002048 <_getpid>

0800660c <__sread>:
 800660c:	b510      	push	{r4, lr}
 800660e:	460c      	mov	r4, r1
 8006610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006614:	f000 f89c 	bl	8006750 <_read_r>
 8006618:	2800      	cmp	r0, #0
 800661a:	bfab      	itete	ge
 800661c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800661e:	89a3      	ldrhlt	r3, [r4, #12]
 8006620:	181b      	addge	r3, r3, r0
 8006622:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006626:	bfac      	ite	ge
 8006628:	6563      	strge	r3, [r4, #84]	; 0x54
 800662a:	81a3      	strhlt	r3, [r4, #12]
 800662c:	bd10      	pop	{r4, pc}

0800662e <__swrite>:
 800662e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006632:	461f      	mov	r7, r3
 8006634:	898b      	ldrh	r3, [r1, #12]
 8006636:	4605      	mov	r5, r0
 8006638:	05db      	lsls	r3, r3, #23
 800663a:	460c      	mov	r4, r1
 800663c:	4616      	mov	r6, r2
 800663e:	d505      	bpl.n	800664c <__swrite+0x1e>
 8006640:	2302      	movs	r3, #2
 8006642:	2200      	movs	r2, #0
 8006644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006648:	f000 f868 	bl	800671c <_lseek_r>
 800664c:	89a3      	ldrh	r3, [r4, #12]
 800664e:	4632      	mov	r2, r6
 8006650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	4628      	mov	r0, r5
 8006658:	463b      	mov	r3, r7
 800665a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800665e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006662:	f000 b817 	b.w	8006694 <_write_r>

08006666 <__sseek>:
 8006666:	b510      	push	{r4, lr}
 8006668:	460c      	mov	r4, r1
 800666a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800666e:	f000 f855 	bl	800671c <_lseek_r>
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	bf15      	itete	ne
 8006678:	6560      	strne	r0, [r4, #84]	; 0x54
 800667a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800667e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006682:	81a3      	strheq	r3, [r4, #12]
 8006684:	bf18      	it	ne
 8006686:	81a3      	strhne	r3, [r4, #12]
 8006688:	bd10      	pop	{r4, pc}

0800668a <__sclose>:
 800668a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800668e:	f000 b813 	b.w	80066b8 <_close_r>
	...

08006694 <_write_r>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	4604      	mov	r4, r0
 8006698:	4608      	mov	r0, r1
 800669a:	4611      	mov	r1, r2
 800669c:	2200      	movs	r2, #0
 800669e:	4d05      	ldr	r5, [pc, #20]	; (80066b4 <_write_r+0x20>)
 80066a0:	602a      	str	r2, [r5, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	f7fb fd0e 	bl	80020c4 <_write>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_write_r+0x1e>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_write_r+0x1e>
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	2000035c 	.word	0x2000035c

080066b8 <_close_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	2300      	movs	r3, #0
 80066bc:	4d05      	ldr	r5, [pc, #20]	; (80066d4 <_close_r+0x1c>)
 80066be:	4604      	mov	r4, r0
 80066c0:	4608      	mov	r0, r1
 80066c2:	602b      	str	r3, [r5, #0]
 80066c4:	f7fb fd1a 	bl	80020fc <_close>
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	d102      	bne.n	80066d2 <_close_r+0x1a>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	b103      	cbz	r3, 80066d2 <_close_r+0x1a>
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	bd38      	pop	{r3, r4, r5, pc}
 80066d4:	2000035c 	.word	0x2000035c

080066d8 <_fstat_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	2300      	movs	r3, #0
 80066dc:	4d06      	ldr	r5, [pc, #24]	; (80066f8 <_fstat_r+0x20>)
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	4611      	mov	r1, r2
 80066e4:	602b      	str	r3, [r5, #0]
 80066e6:	f7fb fd14 	bl	8002112 <_fstat>
 80066ea:	1c43      	adds	r3, r0, #1
 80066ec:	d102      	bne.n	80066f4 <_fstat_r+0x1c>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	b103      	cbz	r3, 80066f4 <_fstat_r+0x1c>
 80066f2:	6023      	str	r3, [r4, #0]
 80066f4:	bd38      	pop	{r3, r4, r5, pc}
 80066f6:	bf00      	nop
 80066f8:	2000035c 	.word	0x2000035c

080066fc <_isatty_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	2300      	movs	r3, #0
 8006700:	4d05      	ldr	r5, [pc, #20]	; (8006718 <_isatty_r+0x1c>)
 8006702:	4604      	mov	r4, r0
 8006704:	4608      	mov	r0, r1
 8006706:	602b      	str	r3, [r5, #0]
 8006708:	f7fb fd12 	bl	8002130 <_isatty>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_isatty_r+0x1a>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_isatty_r+0x1a>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	2000035c 	.word	0x2000035c

0800671c <_lseek_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	4611      	mov	r1, r2
 8006724:	2200      	movs	r2, #0
 8006726:	4d05      	ldr	r5, [pc, #20]	; (800673c <_lseek_r+0x20>)
 8006728:	602a      	str	r2, [r5, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	f7fb fd0a 	bl	8002144 <_lseek>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d102      	bne.n	800673a <_lseek_r+0x1e>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	b103      	cbz	r3, 800673a <_lseek_r+0x1e>
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	2000035c 	.word	0x2000035c

08006740 <_malloc_usable_size_r>:
 8006740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006744:	1f18      	subs	r0, r3, #4
 8006746:	2b00      	cmp	r3, #0
 8006748:	bfbc      	itt	lt
 800674a:	580b      	ldrlt	r3, [r1, r0]
 800674c:	18c0      	addlt	r0, r0, r3
 800674e:	4770      	bx	lr

08006750 <_read_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4604      	mov	r4, r0
 8006754:	4608      	mov	r0, r1
 8006756:	4611      	mov	r1, r2
 8006758:	2200      	movs	r2, #0
 800675a:	4d05      	ldr	r5, [pc, #20]	; (8006770 <_read_r+0x20>)
 800675c:	602a      	str	r2, [r5, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	f7fb fc93 	bl	800208a <_read>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_read_r+0x1e>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	b103      	cbz	r3, 800676e <_read_r+0x1e>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	2000035c 	.word	0x2000035c

08006774 <_init>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	bf00      	nop
 8006778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677a:	bc08      	pop	{r3}
 800677c:	469e      	mov	lr, r3
 800677e:	4770      	bx	lr

08006780 <_fini>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	bf00      	nop
 8006784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006786:	bc08      	pop	{r3}
 8006788:	469e      	mov	lr, r3
 800678a:	4770      	bx	lr
