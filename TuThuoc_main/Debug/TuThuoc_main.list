
TuThuoc_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c7c  08002c7c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002c7c  08002c7c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c7c  08002c7c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c7c  08002c7c  00012c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c80  08002c80  00012c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000010  08002c94  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002c94  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c32  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001735  00000000  00000000  00027c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  000293a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  00029b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dbb  00000000  00000000  0002a200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a455  00000000  00000000  00040fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d17  00000000  00000000  0004b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd127  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d5c  00000000  00000000  000cd178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b04 	.word	0x08002b04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002b04 	.word	0x08002b04

0800014c <CLCD_Delay>:
//************************** Low Level Function ****************************************************************//
uint8_t currentline;
uint8_t Xcursor,Ycursor,countWriteChar,CurrentWriteChar;
CLCD_I2C_Name LCD1;
static void CLCD_Delay(uint16_t Time)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	4618      	mov	r0, r3
 800015a:	f001 f911 	bl	8001380 <HAL_Delay>
}
 800015e:	bf00      	nop
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}

08000166 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b086      	sub	sp, #24
 800016a:	af02      	add	r7, sp, #8
 800016c:	6078      	str	r0, [r7, #4]
 800016e:	460b      	mov	r3, r1
 8000170:	70fb      	strb	r3, [r7, #3]
 8000172:	4613      	mov	r3, r2
 8000174:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000176:	78fb      	ldrb	r3, [r7, #3]
 8000178:	f023 030f 	bic.w	r3, r3, #15
 800017c:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 800017e:	78fb      	ldrb	r3, [r7, #3]
 8000180:	011b      	lsls	r3, r3, #4
 8000182:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	7adb      	ldrb	r3, [r3, #11]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d007      	beq.n	800019c <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	f043 0308 	orr.w	r3, r3, #8
 8000192:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8000194:	7bbb      	ldrb	r3, [r7, #14]
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 800019c:	78bb      	ldrb	r3, [r7, #2]
 800019e:	2b01      	cmp	r3, #1
 80001a0:	d108      	bne.n	80001b4 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001a2:	7bfb      	ldrb	r3, [r7, #15]
 80001a4:	f043 0301 	orr.w	r3, r3, #1
 80001a8:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001aa:	7bbb      	ldrb	r3, [r7, #14]
 80001ac:	f043 0301 	orr.w	r3, r3, #1
 80001b0:	73bb      	strb	r3, [r7, #14]
 80001b2:	e00a      	b.n	80001ca <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001b4:	78bb      	ldrb	r3, [r7, #2]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d107      	bne.n	80001ca <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	f023 0301 	bic.w	r3, r3, #1
 80001c0:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001c2:	7bbb      	ldrb	r3, [r7, #14]
 80001c4:	f023 0301 	bic.w	r3, r3, #1
 80001c8:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f043 0304 	orr.w	r3, r3, #4
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f7ff ffb9 	bl	800014c <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001da:	7bfb      	ldrb	r3, [r7, #15]
 80001dc:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001de:	7bbb      	ldrb	r3, [r7, #14]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffaf 	bl	800014c <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	6818      	ldr	r0, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	791b      	ldrb	r3, [r3, #4]
 80001fa:	b299      	uxth	r1, r3
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2304      	movs	r3, #4
 8000208:	f001 fcfc 	bl	8001c04 <HAL_I2C_Master_Transmit>

}
 800020c:	bf00      	nop
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <CLCD_I2C_Init>:
//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	4611      	mov	r1, r2
 8000220:	461a      	mov	r2, r3
 8000222:	460b      	mov	r3, r1
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	4613      	mov	r3, r2
 8000228:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	68ba      	ldr	r2, [r7, #8]
 800022e:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	79fa      	ldrb	r2, [r7, #7]
 8000234:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	79ba      	ldrb	r2, [r7, #6]
 800023a:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	7e3a      	ldrb	r2, [r7, #24]
 8000240:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2228      	movs	r2, #40	; 0x28
 8000246:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2206      	movs	r2, #6
 800024c:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	220c      	movs	r2, #12
 8000252:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	2214      	movs	r2, #20
 8000258:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	2208      	movs	r2, #8
 800025e:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000260:	2032      	movs	r0, #50	; 0x32
 8000262:	f7ff ff73 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000266:	2200      	movs	r2, #0
 8000268:	2133      	movs	r1, #51	; 0x33
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f7ff ff7b 	bl	8000166 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000270:	2200      	movs	r2, #0
 8000272:	2133      	movs	r1, #51	; 0x33
 8000274:	68f8      	ldr	r0, [r7, #12]
 8000276:	f7ff ff76 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800027a:	2005      	movs	r0, #5
 800027c:	f7ff ff66 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000280:	2200      	movs	r2, #0
 8000282:	2132      	movs	r1, #50	; 0x32
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	f7ff ff6e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028a:	2005      	movs	r0, #5
 800028c:	f7ff ff5e 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8000290:	2200      	movs	r2, #0
 8000292:	2120      	movs	r1, #32
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f7ff ff66 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029a:	2005      	movs	r0, #5
 800029c:	f7ff ff56 	bl	800014c <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	79db      	ldrb	r3, [r3, #7]
 80002a4:	2200      	movs	r2, #0
 80002a6:	4619      	mov	r1, r3
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff5c 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	7a1b      	ldrb	r3, [r3, #8]
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f7ff ff55 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	7a5b      	ldrb	r3, [r3, #9]
 80002c0:	2200      	movs	r2, #0
 80002c2:	4619      	mov	r1, r3
 80002c4:	68f8      	ldr	r0, [r7, #12]
 80002c6:	f7ff ff4e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	7a9b      	ldrb	r3, [r3, #10]
 80002ce:	2200      	movs	r2, #0
 80002d0:	4619      	mov	r1, r3
 80002d2:	68f8      	ldr	r0, [r7, #12]
 80002d4:	f7ff ff47 	bl	8000166 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002d8:	2200      	movs	r2, #0
 80002da:	2101      	movs	r1, #1
 80002dc:	68f8      	ldr	r0, [r7, #12]
 80002de:	f7ff ff42 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2102      	movs	r1, #2
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff3d 	bl	8000166 <CLCD_WriteI2C>
}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
 8000300:	4613      	mov	r3, r2
 8000302:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000304:	2300      	movs	r3, #0
 8000306:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	78fa      	ldrb	r2, [r7, #3]
 800030e:	429a      	cmp	r2, r3
 8000310:	d303      	bcc.n	800031a <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	795b      	ldrb	r3, [r3, #5]
 8000316:	3b01      	subs	r3, #1
 8000318:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	799b      	ldrb	r3, [r3, #6]
 800031e:	78ba      	ldrb	r2, [r7, #2]
 8000320:	429a      	cmp	r2, r3
 8000322:	d303      	bcc.n	800032c <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	799b      	ldrb	r3, [r3, #6]
 8000328:	3b01      	subs	r3, #1
 800032a:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 800032c:	78bb      	ldrb	r3, [r7, #2]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d102      	bne.n	8000338 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	e013      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000338:	78bb      	ldrb	r3, [r7, #2]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d103      	bne.n	8000346 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800033e:	78fb      	ldrb	r3, [r7, #3]
 8000340:	3340      	adds	r3, #64	; 0x40
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	e00c      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8000346:	78bb      	ldrb	r3, [r7, #2]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d103      	bne.n	8000354 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x10 + Xpos;
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	3310      	adds	r3, #16
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	e005      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000354:	78bb      	ldrb	r3, [r7, #2]
 8000356:	2b03      	cmp	r3, #3
 8000358:	d102      	bne.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x50 + Xpos;
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	3350      	adds	r3, #80	; 0x50
 800035e:	73fb      	strb	r3, [r7, #15]
	}
	Xcursor = Xpos;
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <CLCD_I2C_SetCursor+0xa4>)
 8000362:	78fb      	ldrb	r3, [r7, #3]
 8000364:	7013      	strb	r3, [r2, #0]

	Ycursor = Ypos;
 8000366:	4a0d      	ldr	r2, [pc, #52]	; (800039c <CLCD_I2C_SetCursor+0xa8>)
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	7013      	strb	r3, [r2, #0]
	currentline = Ycursor;
 800036c:	4b0b      	ldr	r3, [pc, #44]	; (800039c <CLCD_I2C_SetCursor+0xa8>)
 800036e:	781a      	ldrb	r2, [r3, #0]
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <CLCD_I2C_SetCursor+0xac>)
 8000372:	701a      	strb	r2, [r3, #0]
	countWriteChar = Xcursor;
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <CLCD_I2C_SetCursor+0xa4>)
 8000376:	781a      	ldrb	r2, [r3, #0]
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <CLCD_I2C_SetCursor+0xb0>)
 800037a:	701a      	strb	r2, [r3, #0]
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2200      	movs	r2, #0
 8000386:	4619      	mov	r1, r3
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff feec 	bl	8000166 <CLCD_WriteI2C>
}
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000002d 	.word	0x2000002d
 800039c:	2000002e 	.word	0x2000002e
 80003a0:	2000002c 	.word	0x2000002c
 80003a4:	2000002f 	.word	0x2000002f

080003a8 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2201      	movs	r2, #1
 80003b8:	4619      	mov	r1, r3
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f7ff fed3 	bl	8000166 <CLCD_WriteI2C>
	countWriteChar++;
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003ca:	701a      	strb	r2, [r3, #0]
	if (CurrentWriteChar)
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <CLCD_I2C_WriteChar+0x98>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d02b      	beq.n	800042c <CLCD_I2C_WriteChar+0x84>
	{
	if (countWriteChar ==20)
 80003d4:	4b19      	ldr	r3, [pc, #100]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b14      	cmp	r3, #20
 80003da:	d127      	bne.n	800042c <CLCD_I2C_WriteChar+0x84>
	{
	switch(currentline)
 80003dc:	4b19      	ldr	r3, [pc, #100]	; (8000444 <CLCD_I2C_WriteChar+0x9c>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d825      	bhi.n	8000430 <CLCD_I2C_WriteChar+0x88>
 80003e4:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <CLCD_I2C_WriteChar+0x44>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	080003fd 	.word	0x080003fd
 80003f0:	08000409 	.word	0x08000409
 80003f4:	08000415 	.word	0x08000415
 80003f8:	08000421 	.word	0x08000421
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2100      	movs	r1, #0
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 8000402:	f7ff ff77 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 8000406:	e014      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8000408:	2202      	movs	r2, #2
 800040a:	2100      	movs	r1, #0
 800040c:	480e      	ldr	r0, [pc, #56]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 800040e:	f7ff ff71 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 8000412:	e00e      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 8000414:	2203      	movs	r2, #3
 8000416:	2100      	movs	r1, #0
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 800041a:	f7ff ff6b 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 800041e:	e008      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	2100      	movs	r1, #0
 8000424:	4808      	ldr	r0, [pc, #32]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 8000426:	f7ff ff65 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 800042a:	e002      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				default:
								break;
			}
		}
 800042c:	bf00      	nop
 800042e:	e000      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
								break;
 8000430:	bf00      	nop
	}
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	2000002f 	.word	0x2000002f
 8000440:	20000030 	.word	0x20000030
 8000444:	2000002c 	.word	0x2000002c
 8000448:	20000034 	.word	0x20000034

0800044c <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
	while (*String)
 8000456:	e04a      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
	{
	CurrentWriteChar=0;
 8000458:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <CLCD_I2C_WriteString+0xbc>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	e00e      	b.n	8000482 <CLCD_I2C_WriteString+0x36>
		{
			if (*String)
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d012      	beq.n	8000492 <CLCD_I2C_WriteString+0x46>
			{
				CLCD_I2C_WriteChar(LCD, *String++);
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	1c5a      	adds	r2, r3, #1
 8000470:	603a      	str	r2, [r7, #0]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4619      	mov	r1, r3
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f7ff ff96 	bl	80003a8 <CLCD_I2C_WriteChar>
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	3301      	adds	r3, #1
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	7bfa      	ldrb	r2, [r7, #15]
 8000484:	4b21      	ldr	r3, [pc, #132]	; (800050c <CLCD_I2C_WriteString+0xc0>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f1c3 0314 	rsb	r3, r3, #20
 800048c:	429a      	cmp	r2, r3
 800048e:	dbe9      	blt.n	8000464 <CLCD_I2C_WriteString+0x18>
 8000490:	e000      	b.n	8000494 <CLCD_I2C_WriteString+0x48>
			}
			else break;
 8000492:	bf00      	nop
		}
		if (*String)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d02d      	beq.n	80004f8 <CLCD_I2C_WriteString+0xac>
		{
			switch(currentline)
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <CLCD_I2C_WriteString+0xc4>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d823      	bhi.n	80004ec <CLCD_I2C_WriteString+0xa0>
 80004a4:	a201      	add	r2, pc, #4	; (adr r2, 80004ac <CLCD_I2C_WriteString+0x60>)
 80004a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004aa:	bf00      	nop
 80004ac:	080004bd 	.word	0x080004bd
 80004b0:	080004c9 	.word	0x080004c9
 80004b4:	080004d5 	.word	0x080004d5
 80004b8:	080004e1 	.word	0x080004e1
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2100      	movs	r1, #0
 80004c0:	4814      	ldr	r0, [pc, #80]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004c2:	f7ff ff17 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004c6:	e012      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 80004c8:	2202      	movs	r2, #2
 80004ca:	2100      	movs	r1, #0
 80004cc:	4811      	ldr	r0, [pc, #68]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004ce:	f7ff ff11 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004d2:	e00c      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 80004d4:	2203      	movs	r2, #3
 80004d6:	2100      	movs	r1, #0
 80004d8:	480e      	ldr	r0, [pc, #56]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004da:	f7ff ff0b 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004de:	e006      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2100      	movs	r1, #0
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004e6:	f7ff ff05 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004ea:	e000      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				default:
								break;
 80004ec:	bf00      	nop
	while (*String)
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d1b0      	bne.n	8000458 <CLCD_I2C_WriteString+0xc>
 80004f6:	e000      	b.n	80004fa <CLCD_I2C_WriteString+0xae>
			}
		}
		else break;
 80004f8:	bf00      	nop

		}
	CurrentWriteChar=1;
 80004fa:	4b03      	ldr	r3, [pc, #12]	; (8000508 <CLCD_I2C_WriteString+0xbc>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000030 	.word	0x20000030
 800050c:	2000002d 	.word	0x2000002d
 8000510:	2000002c 	.word	0x2000002c
 8000514:	20000034 	.word	0x20000034

08000518 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000520:	2200      	movs	r2, #0
 8000522:	2101      	movs	r1, #1
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff fe1e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800052a:	2005      	movs	r0, #5
 800052c:	f7ff fe0e 	bl	800014c <CLCD_Delay>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <KeyPad_Init>:
void KeyPad_Init(	GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD,
					GPIO_TypeDef* C_port0, GPIO_TypeDef* C_port1, GPIO_TypeDef* C_port2, GPIO_TypeDef* C_port3,\
					uint16_t C_pin0, uint16_t C_pin1, uint16_t C_pin2, uint16_t C_pin3,\
					GPIO_TypeDef* R_port0, GPIO_TypeDef* R_port1, GPIO_TypeDef* R_port2, GPIO_TypeDef* R_port3,\
					uint16_t R_pin0, uint16_t R_pin1, uint16_t R_pin2, uint16_t R_pin3)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	603b      	str	r3, [r7, #0]
	//OUTPUT
  COL_KEY_PAD->PORT.GPIO0 = C_port0;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
  COL_KEY_PAD->PORT.GPIO1 = C_port1;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	683a      	ldr	r2, [r7, #0]
 8000550:	605a      	str	r2, [r3, #4]
  COL_KEY_PAD->PORT.GPIO2 = C_port2;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	69ba      	ldr	r2, [r7, #24]
 8000556:	609a      	str	r2, [r3, #8]
  COL_KEY_PAD->PORT.GPIO3 = C_port3;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	69fa      	ldr	r2, [r7, #28]
 800055c:	60da      	str	r2, [r3, #12]

  COL_KEY_PAD->PIN.GPIO_PIN_A = C_pin0;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	8c3a      	ldrh	r2, [r7, #32]
 8000562:	821a      	strh	r2, [r3, #16]
  COL_KEY_PAD->PIN.GPIO_PIN_B = C_pin1;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000568:	825a      	strh	r2, [r3, #18]
  COL_KEY_PAD->PIN.GPIO_PIN_C = C_pin2;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800056e:	829a      	strh	r2, [r3, #20]
  COL_KEY_PAD->PIN.GPIO_PIN_D = C_pin3;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000574:	82da      	strh	r2, [r3, #22]
  //INPUT
  ROW_KEY_PAD->PORT.GPIO0 = R_port0;
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800057a:	601a      	str	r2, [r3, #0]
  ROW_KEY_PAD->PORT.GPIO1 = R_port1;
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000580:	605a      	str	r2, [r3, #4]
  ROW_KEY_PAD->PORT.GPIO2 = R_port2;
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000586:	609a      	str	r2, [r3, #8]
  ROW_KEY_PAD->PORT.GPIO3 = R_port3;
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800058c:	60da      	str	r2, [r3, #12]

  ROW_KEY_PAD->PIN.GPIO_PIN_A = R_pin0;
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000594:	821a      	strh	r2, [r3, #16]
  ROW_KEY_PAD->PIN.GPIO_PIN_B = R_pin1;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800059c:	825a      	strh	r2, [r3, #18]
  ROW_KEY_PAD->PIN.GPIO_PIN_C = R_pin2;
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80005a4:	829a      	strh	r2, [r3, #20]
  ROW_KEY_PAD->PIN.GPIO_PIN_D = R_pin3;
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80005ac:	82da      	strh	r2, [r3, #22]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <Check_Keypad_Column>:

/*		For specific row value sent , check all the cloumns
 * 		keypad_readWrite_CRPin(COL_KEY_PAD, ROW_KEY_PAD, C0_OUT_SET);
 * */
static char Check_Keypad_Column(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD, uint8_t Row)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	4613      	mov	r3, r2
 80005c4:	71fb      	strb	r3, [r7, #7]
	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD->PORT.GPIO0, ROW_KEY_PAD->PIN.GPIO_PIN_A)) //If ROW_1 is LOW
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	8a1b      	ldrh	r3, [r3, #16]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4610      	mov	r0, r2
 80005d2:	f001 f98b 	bl	80018ec <HAL_GPIO_ReadPin>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d105      	bne.n	80005e8 <Check_Keypad_Column+0x30>
	{
		return Keypad_Button_Values[Row-1][0];
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	3b01      	subs	r3, #1
 80005e0:	4a3f      	ldr	r2, [pc, #252]	; (80006e0 <Check_Keypad_Column+0x128>)
 80005e2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80005e6:	e076      	b.n	80006d6 <Check_Keypad_Column+0x11e>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD->PORT.GPIO1, ROW_KEY_PAD->PIN.GPIO_PIN_B)) //If ROW_2 is LOW
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	8a5b      	ldrh	r3, [r3, #18]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4610      	mov	r0, r2
 80005f4:	f001 f97a 	bl	80018ec <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d106      	bne.n	800060c <Check_Keypad_Column+0x54>
	{
		return Keypad_Button_Values[Row-1][1];
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	3b01      	subs	r3, #1
 8000602:	4a37      	ldr	r2, [pc, #220]	; (80006e0 <Check_Keypad_Column+0x128>)
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	4413      	add	r3, r2
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	e064      	b.n	80006d6 <Check_Keypad_Column+0x11e>
	}

    if(!HAL_GPIO_ReadPin(ROW_KEY_PAD->PORT.GPIO2, ROW_KEY_PAD->PIN.GPIO_PIN_C)) //If ROW_3 is LOW
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	689a      	ldr	r2, [r3, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	8a9b      	ldrh	r3, [r3, #20]
 8000614:	4619      	mov	r1, r3
 8000616:	4610      	mov	r0, r2
 8000618:	f001 f968 	bl	80018ec <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d106      	bne.n	8000630 <Check_Keypad_Column+0x78>
	{
		return Keypad_Button_Values[Row-1][2];
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	3b01      	subs	r3, #1
 8000626:	4a2e      	ldr	r2, [pc, #184]	; (80006e0 <Check_Keypad_Column+0x128>)
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	789b      	ldrb	r3, [r3, #2]
 800062e:	e052      	b.n	80006d6 <Check_Keypad_Column+0x11e>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD->PORT.GPIO3, ROW_KEY_PAD->PIN.GPIO_PIN_D)) //If ROW_4 is LOW
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	68da      	ldr	r2, [r3, #12]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	8adb      	ldrh	r3, [r3, #22]
 8000638:	4619      	mov	r1, r3
 800063a:	4610      	mov	r0, r2
 800063c:	f001 f956 	bl	80018ec <HAL_GPIO_ReadPin>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d106      	bne.n	8000654 <Check_Keypad_Column+0x9c>
	{
		return Keypad_Button_Values[Row-1][3];
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	3b01      	subs	r3, #1
 800064a:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <Check_Keypad_Column+0x128>)
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4413      	add	r3, r2
 8000650:	78db      	ldrb	r3, [r3, #3]
 8000652:	e040      	b.n	80006d6 <Check_Keypad_Column+0x11e>
	}
//	HAL_Delay(50);
//	TimeBegin = HAL_GetTick();
	while(		(!HAL_GPIO_ReadPin(ROW_KEY_PAD->PORT.GPIO0, ROW_KEY_PAD->PIN.GPIO_PIN_A)) 	\
 8000654:	bf00      	nop
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	8a1b      	ldrh	r3, [r3, #16]
 800065e:	4619      	mov	r1, r3
 8000660:	4610      	mov	r0, r2
 8000662:	f001 f943 	bl	80018ec <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
			| 	(!HAL_GPIO_ReadPin(ROW_KEY_PAD->PORT.GPIO1, ROW_KEY_PAD->PIN.GPIO_PIN_B)) 	\
 8000668:	2b00      	cmp	r3, #0
 800066a:	bf0c      	ite	eq
 800066c:	2301      	moveq	r3, #1
 800066e:	2300      	movne	r3, #0
 8000670:	b2dc      	uxtb	r4, r3
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	685a      	ldr	r2, [r3, #4]
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	8a5b      	ldrh	r3, [r3, #18]
 800067a:	4619      	mov	r1, r3
 800067c:	4610      	mov	r0, r2
 800067e:	f001 f935 	bl	80018ec <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	bf0c      	ite	eq
 8000688:	2301      	moveq	r3, #1
 800068a:	2300      	movne	r3, #0
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4323      	orrs	r3, r4
 8000690:	b2db      	uxtb	r3, r3
 8000692:	461c      	mov	r4, r3
			|  	(!HAL_GPIO_ReadPin(ROW_KEY_PAD->PORT.GPIO2, ROW_KEY_PAD->PIN.GPIO_PIN_C)) 	\
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	689a      	ldr	r2, [r3, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	8a9b      	ldrh	r3, [r3, #20]
 800069c:	4619      	mov	r1, r3
 800069e:	4610      	mov	r0, r2
 80006a0:	f001 f924 	bl	80018ec <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	bf0c      	ite	eq
 80006aa:	2301      	moveq	r3, #1
 80006ac:	2300      	movne	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	431c      	orrs	r4, r3
			|	(!HAL_GPIO_ReadPin(ROW_KEY_PAD->PORT.GPIO3, ROW_KEY_PAD->PIN.GPIO_PIN_D)))
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	8adb      	ldrh	r3, [r3, #22]
 80006ba:	4619      	mov	r1, r3
 80006bc:	4610      	mov	r0, r2
 80006be:	f001 f915 	bl	80018ec <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	bf0c      	ite	eq
 80006c8:	2301      	moveq	r3, #1
 80006ca:	2300      	movne	r3, #0
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4323      	orrs	r3, r4
	while(		(!HAL_GPIO_ReadPin(ROW_KEY_PAD->PORT.GPIO0, ROW_KEY_PAD->PIN.GPIO_PIN_A)) 	\
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1c0      	bne.n	8000656 <Check_Keypad_Column+0x9e>
////			ButtonError = 1;
//			break;
//		}
	}
//	HAL_Delay(50);
	return KEYPAD_NOT_PRESSED;                   //If NO Key is pressed
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	bf00      	nop
 80006e0:	08002c40 	.word	0x08002c40

080006e4 <KEYPAD_Read>:
/* Read the keypad */
char KEYPAD_Read(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
    char check = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
    /*Set COL_1 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_RESET);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6818      	ldr	r0, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	8a1b      	ldrh	r3, [r3, #16]
 80006fa:	2200      	movs	r2, #0
 80006fc:	4619      	mov	r1, r3
 80006fe:	f001 f90c 	bl	800191a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6858      	ldr	r0, [r3, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	8a5b      	ldrh	r3, [r3, #18]
 800070a:	2201      	movs	r2, #1
 800070c:	4619      	mov	r1, r3
 800070e:	f001 f904 	bl	800191a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6898      	ldr	r0, [r3, #8]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	8a9b      	ldrh	r3, [r3, #20]
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	f001 f8fc 	bl	800191a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68d8      	ldr	r0, [r3, #12]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	8adb      	ldrh	r3, [r3, #22]
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	f001 f8f4 	bl	800191a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(COL_KEY_PAD, ROW_KEY_PAD, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	6839      	ldr	r1, [r7, #0]
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ff3e 	bl	80005b8 <Check_Keypad_Column>
 800073c:	4603      	mov	r3, r0
 800073e:	73fb      	strb	r3, [r7, #15]
    if(check)
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <KEYPAD_Read+0x66>
    	return check;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	e084      	b.n	8000854 <KEYPAD_Read+0x170>

    /*Set COL_2 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6818      	ldr	r0, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	8a1b      	ldrh	r3, [r3, #16]
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	f001 f8e0 	bl	800191a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_RESET);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6858      	ldr	r0, [r3, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	8a5b      	ldrh	r3, [r3, #18]
 8000762:	2200      	movs	r2, #0
 8000764:	4619      	mov	r1, r3
 8000766:	f001 f8d8 	bl	800191a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6898      	ldr	r0, [r3, #8]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	8a9b      	ldrh	r3, [r3, #20]
 8000772:	2201      	movs	r2, #1
 8000774:	4619      	mov	r1, r3
 8000776:	f001 f8d0 	bl	800191a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	68d8      	ldr	r0, [r3, #12]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	8adb      	ldrh	r3, [r3, #22]
 8000782:	2201      	movs	r2, #1
 8000784:	4619      	mov	r1, r3
 8000786:	f001 f8c8 	bl	800191a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(COL_KEY_PAD, ROW_KEY_PAD, 2);
 800078a:	2202      	movs	r2, #2
 800078c:	6839      	ldr	r1, [r7, #0]
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ff12 	bl	80005b8 <Check_Keypad_Column>
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]
    if(check)
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <KEYPAD_Read+0xbe>
    	return check;
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	e058      	b.n	8000854 <KEYPAD_Read+0x170>
    /*Set COL_3 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6818      	ldr	r0, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	8a1b      	ldrh	r3, [r3, #16]
 80007aa:	2201      	movs	r2, #1
 80007ac:	4619      	mov	r1, r3
 80007ae:	f001 f8b4 	bl	800191a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6858      	ldr	r0, [r3, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	8a5b      	ldrh	r3, [r3, #18]
 80007ba:	2201      	movs	r2, #1
 80007bc:	4619      	mov	r1, r3
 80007be:	f001 f8ac 	bl	800191a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_RESET);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6898      	ldr	r0, [r3, #8]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	8a9b      	ldrh	r3, [r3, #20]
 80007ca:	2200      	movs	r2, #0
 80007cc:	4619      	mov	r1, r3
 80007ce:	f001 f8a4 	bl	800191a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	68d8      	ldr	r0, [r3, #12]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	8adb      	ldrh	r3, [r3, #22]
 80007da:	2201      	movs	r2, #1
 80007dc:	4619      	mov	r1, r3
 80007de:	f001 f89c 	bl	800191a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(COL_KEY_PAD, ROW_KEY_PAD, 3);
 80007e2:	2203      	movs	r2, #3
 80007e4:	6839      	ldr	r1, [r7, #0]
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff fee6 	bl	80005b8 <Check_Keypad_Column>
 80007ec:	4603      	mov	r3, r0
 80007ee:	73fb      	strb	r3, [r7, #15]
    if(check)
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <KEYPAD_Read+0x116>
    	return check;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	e02c      	b.n	8000854 <KEYPAD_Read+0x170>
    /*Set COL_4 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	8a1b      	ldrh	r3, [r3, #16]
 8000802:	2201      	movs	r2, #1
 8000804:	4619      	mov	r1, r3
 8000806:	f001 f888 	bl	800191a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6858      	ldr	r0, [r3, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	8a5b      	ldrh	r3, [r3, #18]
 8000812:	2201      	movs	r2, #1
 8000814:	4619      	mov	r1, r3
 8000816:	f001 f880 	bl	800191a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6898      	ldr	r0, [r3, #8]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	8a9b      	ldrh	r3, [r3, #20]
 8000822:	2201      	movs	r2, #1
 8000824:	4619      	mov	r1, r3
 8000826:	f001 f878 	bl	800191a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_RESET);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	68d8      	ldr	r0, [r3, #12]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	8adb      	ldrh	r3, [r3, #22]
 8000832:	2200      	movs	r2, #0
 8000834:	4619      	mov	r1, r3
 8000836:	f001 f870 	bl	800191a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(COL_KEY_PAD, ROW_KEY_PAD, 4);
 800083a:	2204      	movs	r2, #4
 800083c:	6839      	ldr	r1, [r7, #0]
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff feba 	bl	80005b8 <Check_Keypad_Column>
 8000844:	4603      	mov	r3, r0
 8000846:	73fb      	strb	r3, [r7, #15]
    if(check)
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <KEYPAD_Read+0x16e>
    	return check;
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	e000      	b.n	8000854 <KEYPAD_Read+0x170>
    /*Key not pressed */
    return KEYPAD_NOT_PRESSED;
 8000852:	2300      	movs	r3, #0
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <lcd_user_display>:
static INDEX_MODE_TYPEDEF Index_mode = 0;
static uint8_t Status_Display = 0;
static LANGUAGE_TYPEDEF language = VIETNAMESE;

static void lcd_user_display(CLCD_I2C_Name* LCD_user, STATUS_DISPLAY_TYPEDEF status_display)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
	if(status_display == STATUS_1)
 8000868:	78fb      	ldrb	r3, [r7, #3]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d124      	bne.n	80008b8 <lcd_user_display+0x5c>
	{
		// dislay hello ! Status_Display=0
		CLCD_I2C_SetCursor(LCD_user, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff fd3e 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 8000878:	4977      	ldr	r1, [pc, #476]	; (8000a58 <lcd_user_display+0x1fc>)
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff fde6 	bl	800044c <CLCD_I2C_WriteString>

		CLCD_I2C_SetCursor(LCD_user, 3, 1);
 8000880:	2201      	movs	r2, #1
 8000882:	2103      	movs	r1, #3
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff fd35 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"KHOA CO KHI");
 800088a:	4974      	ldr	r1, [pc, #464]	; (8000a5c <lcd_user_display+0x200>)
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fddd 	bl	800044c <CLCD_I2C_WriteString>

		CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000892:	2202      	movs	r2, #2
 8000894:	2104      	movs	r1, #4
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff fd2c 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 800089c:	4970      	ldr	r1, [pc, #448]	; (8000a60 <lcd_user_display+0x204>)
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff fdd4 	bl	800044c <CLCD_I2C_WriteString>

		CLCD_I2C_SetCursor(LCD_user, 0, 3);
 80008a4:	2203      	movs	r2, #3
 80008a6:	2100      	movs	r1, #0
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff fd23 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"Please Set Mode!");
 80008ae:	496d      	ldr	r1, [pc, #436]	; (8000a64 <lcd_user_display+0x208>)
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff fdcb 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_WriteString(LCD_user,"\"Enter\" to enter");

	  CLCD_I2C_SetCursor(LCD_user, 4, 2);
	  CLCD_I2C_WriteString(LCD_user,"new password :<");
	}
}
 80008b6:	e0ca      	b.n	8000a4e <lcd_user_display+0x1f2>
	else if(status_display == STATUS_2)
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d124      	bne.n	8000908 <lcd_user_display+0xac>
		CLCD_I2C_SetCursor(LCD_user, 3, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2103      	movs	r1, #3
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff fd16 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"SELECT MODE");
 80008c8:	4967      	ldr	r1, [pc, #412]	; (8000a68 <lcd_user_display+0x20c>)
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff fdbe 	bl	800044c <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2100      	movs	r1, #0
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff fd0d 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"-Language");
 80008da:	4964      	ldr	r1, [pc, #400]	; (8000a6c <lcd_user_display+0x210>)
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff fdb5 	bl	800044c <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(LCD_user, 0, 2);
 80008e2:	2202      	movs	r2, #2
 80008e4:	2100      	movs	r1, #0
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff fd04 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"-Enter password");
 80008ec:	4960      	ldr	r1, [pc, #384]	; (8000a70 <lcd_user_display+0x214>)
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fdac 	bl	800044c <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(LCD_user, 0, 3);
 80008f4:	2203      	movs	r2, #3
 80008f6:	2100      	movs	r1, #0
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff fcfb 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"-Exit");
 80008fe:	495d      	ldr	r1, [pc, #372]	; (8000a74 <lcd_user_display+0x218>)
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff fda3 	bl	800044c <CLCD_I2C_WriteString>
}
 8000906:	e0a2      	b.n	8000a4e <lcd_user_display+0x1f2>
	else if(status_display == STATUS_3)
 8000908:	78fb      	ldrb	r3, [r7, #3]
 800090a:	2b03      	cmp	r3, #3
 800090c:	d11b      	bne.n	8000946 <lcd_user_display+0xea>
		CLCD_I2C_SetCursor(LCD_user, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff fcee 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"Enter ur number:");
 8000918:	4957      	ldr	r1, [pc, #348]	; (8000a78 <lcd_user_display+0x21c>)
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff fd96 	bl	800044c <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000920:	2202      	movs	r2, #2
 8000922:	2100      	movs	r1, #0
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fce5 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"Password: ");
 800092a:	4954      	ldr	r1, [pc, #336]	; (8000a7c <lcd_user_display+0x220>)
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff fd8d 	bl	800044c <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000932:	2203      	movs	r2, #3
 8000934:	2100      	movs	r1, #0
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff fcdc 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"Exit");
 800093c:	4950      	ldr	r1, [pc, #320]	; (8000a80 <lcd_user_display+0x224>)
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff fd84 	bl	800044c <CLCD_I2C_WriteString>
}
 8000944:	e083      	b.n	8000a4e <lcd_user_display+0x1f2>
	else if(status_display == STATUS_4)
 8000946:	78fb      	ldrb	r3, [r7, #3]
 8000948:	2b04      	cmp	r3, #4
 800094a:	d11b      	bne.n	8000984 <lcd_user_display+0x128>
		CLCD_I2C_SetCursor(LCD_user, 0, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff fccf 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"Password OKE!");
 8000956:	494b      	ldr	r1, [pc, #300]	; (8000a84 <lcd_user_display+0x228>)
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fd77 	bl	800044c <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(LCD_user, 0, 1);
 800095e:	2201      	movs	r2, #1
 8000960:	2100      	movs	r1, #0
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fcc6 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"Wait few ");
 8000968:	4947      	ldr	r1, [pc, #284]	; (8000a88 <lcd_user_display+0x22c>)
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff fd6e 	bl	800044c <CLCD_I2C_WriteString>
		CLCD_I2C_SetCursor(LCD_user, 3, 2);
 8000970:	2202      	movs	r2, #2
 8000972:	2103      	movs	r1, #3
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff fcbd 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"minutes...");
 800097a:	4944      	ldr	r1, [pc, #272]	; (8000a8c <lcd_user_display+0x230>)
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fd65 	bl	800044c <CLCD_I2C_WriteString>
}
 8000982:	e064      	b.n	8000a4e <lcd_user_display+0x1f2>
	else if(status_display == STATUS_5)
 8000984:	78fb      	ldrb	r3, [r7, #3]
 8000986:	2b05      	cmp	r3, #5
 8000988:	d11b      	bne.n	80009c2 <lcd_user_display+0x166>
	  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff fcb0 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"Password FAIL!");
 8000994:	493e      	ldr	r1, [pc, #248]	; (8000a90 <lcd_user_display+0x234>)
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fd58 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 800099c:	2201      	movs	r2, #1
 800099e:	2100      	movs	r1, #0
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff fca7 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"\"Enter\" to enter");
 80009a6:	493b      	ldr	r1, [pc, #236]	; (8000a94 <lcd_user_display+0x238>)
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fd4f 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 80009ae:	2202      	movs	r2, #2
 80009b0:	2104      	movs	r1, #4
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fc9e 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"new password :<");
 80009b8:	4937      	ldr	r1, [pc, #220]	; (8000a98 <lcd_user_display+0x23c>)
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff fd46 	bl	800044c <CLCD_I2C_WriteString>
}
 80009c0:	e045      	b.n	8000a4e <lcd_user_display+0x1f2>
	else if(status_display == STATUS_6)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2b06      	cmp	r3, #6
 80009c6:	d124      	bne.n	8000a12 <lcd_user_display+0x1b6>
		CLCD_I2C_SetCursor(LCD_user, 3, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2103      	movs	r1, #3
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff fc91 	bl	80002f4 <CLCD_I2C_SetCursor>
		CLCD_I2C_WriteString(LCD_user,"Language");
 80009d2:	4932      	ldr	r1, [pc, #200]	; (8000a9c <lcd_user_display+0x240>)
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff fd39 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80009da:	2201      	movs	r2, #1
 80009dc:	2100      	movs	r1, #0
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff fc88 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 80009e4:	492e      	ldr	r1, [pc, #184]	; (8000aa0 <lcd_user_display+0x244>)
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fd30 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(LCD_user, 0, 2);
 80009ec:	2202      	movs	r2, #2
 80009ee:	2100      	movs	r1, #0
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fc7f 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"-English");
 80009f6:	492b      	ldr	r1, [pc, #172]	; (8000aa4 <lcd_user_display+0x248>)
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fd27 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(LCD_user, 0, 3);
 80009fe:	2203      	movs	r2, #3
 8000a00:	2100      	movs	r1, #0
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff fc76 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"-EXIT");
 8000a08:	4927      	ldr	r1, [pc, #156]	; (8000aa8 <lcd_user_display+0x24c>)
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff fd1e 	bl	800044c <CLCD_I2C_WriteString>
}
 8000a10:	e01d      	b.n	8000a4e <lcd_user_display+0x1f2>
	else if(status_display == STATUS_7)
 8000a12:	78fb      	ldrb	r3, [r7, #3]
 8000a14:	2b07      	cmp	r3, #7
 8000a16:	d11a      	bne.n	8000a4e <lcd_user_display+0x1f2>
	  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff fc69 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"Password FAIL!");
 8000a22:	491b      	ldr	r1, [pc, #108]	; (8000a90 <lcd_user_display+0x234>)
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff fd11 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fc60 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"\"Enter\" to enter");
 8000a34:	4917      	ldr	r1, [pc, #92]	; (8000a94 <lcd_user_display+0x238>)
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff fd08 	bl	800044c <CLCD_I2C_WriteString>
	  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	2104      	movs	r1, #4
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff fc57 	bl	80002f4 <CLCD_I2C_SetCursor>
	  CLCD_I2C_WriteString(LCD_user,"new password :<");
 8000a46:	4914      	ldr	r1, [pc, #80]	; (8000a98 <lcd_user_display+0x23c>)
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff fcff 	bl	800044c <CLCD_I2C_WriteString>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	08002b1c 	.word	0x08002b1c
 8000a5c:	08002b30 	.word	0x08002b30
 8000a60:	08002b3c 	.word	0x08002b3c
 8000a64:	08002b48 	.word	0x08002b48
 8000a68:	08002b5c 	.word	0x08002b5c
 8000a6c:	08002b68 	.word	0x08002b68
 8000a70:	08002b74 	.word	0x08002b74
 8000a74:	08002b84 	.word	0x08002b84
 8000a78:	08002b8c 	.word	0x08002b8c
 8000a7c:	08002ba0 	.word	0x08002ba0
 8000a80:	08002bac 	.word	0x08002bac
 8000a84:	08002bb4 	.word	0x08002bb4
 8000a88:	08002bc4 	.word	0x08002bc4
 8000a8c:	08002bd0 	.word	0x08002bd0
 8000a90:	08002bdc 	.word	0x08002bdc
 8000a94:	08002bec 	.word	0x08002bec
 8000a98:	08002c00 	.word	0x08002c00
 8000a9c:	08002c10 	.word	0x08002c10
 8000aa0:	08002c1c 	.word	0x08002c1c
 8000aa4:	08002c28 	.word	0x08002c28
 8000aa8:	08002c34 	.word	0x08002c34

08000aac <lcd_system_handler>:

void lcd_system_handler(CLCD_I2C_Name* LCD_user)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	if(delete)
 8000ab4:	4b9e      	ldr	r3, [pc, #632]	; (8000d30 <lcd_system_handler+0x284>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d005      	beq.n	8000ac8 <lcd_system_handler+0x1c>
	{
		CLCD_I2C_Clear(LCD_user);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff fd2b 	bl	8000518 <CLCD_I2C_Clear>
		delete = 0;
 8000ac2:	4b9b      	ldr	r3, [pc, #620]	; (8000d30 <lcd_system_handler+0x284>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
	}
	if(Mode == 0)
 8000ac8:	4b9a      	ldr	r3, [pc, #616]	; (8000d34 <lcd_system_handler+0x288>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d112      	bne.n	8000af8 <lcd_system_handler+0x4c>
	{
		Config = CONFIG_NONE;
 8000ad2:	4b99      	ldr	r3, [pc, #612]	; (8000d38 <lcd_system_handler+0x28c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
		Enter = 0;
 8000ad8:	4b98      	ldr	r3, [pc, #608]	; (8000d3c <lcd_system_handler+0x290>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
		Status_Display = STATUS_1;
 8000ade:	4b98      	ldr	r3, [pc, #608]	; (8000d40 <lcd_system_handler+0x294>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
		lcd_user_display(LCD_user, Status_Display);
 8000ae4:	4b96      	ldr	r3, [pc, #600]	; (8000d40 <lcd_system_handler+0x294>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff feb6 	bl	800085c <lcd_user_display>
		Index_mode = INDEX_MODE_NONE;
 8000af0:	4b94      	ldr	r3, [pc, #592]	; (8000d44 <lcd_system_handler+0x298>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
				Enter = 0;
			}
			lcd_user_display(LCD_user, Status_Display);
		} /*END if(Index_mode == INDEX_MODE2)*/
	}/*END if(Mode == 1)*/
}
 8000af6:	e139      	b.n	8000d6c <lcd_system_handler+0x2c0>
	else if(Mode == 1)
 8000af8:	4b8e      	ldr	r3, [pc, #568]	; (8000d34 <lcd_system_handler+0x288>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	f040 8134 	bne.w	8000d6c <lcd_system_handler+0x2c0>
		if(Index_mode == INDEX_MODE_NONE)
 8000b04:	4b8f      	ldr	r3, [pc, #572]	; (8000d44 <lcd_system_handler+0x298>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d164      	bne.n	8000bd6 <lcd_system_handler+0x12a>
			if (flag_button)
 8000b0c:	4b8e      	ldr	r3, [pc, #568]	; (8000d48 <lcd_system_handler+0x29c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d005      	beq.n	8000b22 <lcd_system_handler+0x76>
				CLCD_I2C_Clear(LCD_user);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fcfe 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8000b1c:	4b8a      	ldr	r3, [pc, #552]	; (8000d48 <lcd_system_handler+0x29c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
			Status_Display = STATUS_2;
 8000b22:	4b87      	ldr	r3, [pc, #540]	; (8000d40 <lcd_system_handler+0x294>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000b28:	4b83      	ldr	r3, [pc, #524]	; (8000d38 <lcd_system_handler+0x28c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d044      	beq.n	8000bbc <lcd_system_handler+0x110>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8000b32:	4b81      	ldr	r3, [pc, #516]	; (8000d38 <lcd_system_handler+0x28c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	461a      	mov	r2, r3
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff fbd9 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8000b42:	4982      	ldr	r1, [pc, #520]	; (8000d4c <lcd_system_handler+0x2a0>)
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff fc81 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000b4a:	4b7c      	ldr	r3, [pc, #496]	; (8000d3c <lcd_system_handler+0x290>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d039      	beq.n	8000bc8 <lcd_system_handler+0x11c>
					Enter = 0;
 8000b54:	4b79      	ldr	r3, [pc, #484]	; (8000d3c <lcd_system_handler+0x290>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8000b5a:	4b77      	ldr	r3, [pc, #476]	; (8000d38 <lcd_system_handler+0x28c>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d108      	bne.n	8000b76 <lcd_system_handler+0xca>
                        Index_mode = INDEX_MODE1;
 8000b64:	4b77      	ldr	r3, [pc, #476]	; (8000d44 <lcd_system_handler+0x298>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8000b6a:	4b73      	ldr	r3, [pc, #460]	; (8000d38 <lcd_system_handler+0x28c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000b70:	4b6f      	ldr	r3, [pc, #444]	; (8000d30 <lcd_system_handler+0x284>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 8000b76:	4b70      	ldr	r3, [pc, #448]	; (8000d38 <lcd_system_handler+0x28c>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d108      	bne.n	8000b92 <lcd_system_handler+0xe6>
                        Index_mode = INDEX_MODE2;
 8000b80:	4b70      	ldr	r3, [pc, #448]	; (8000d44 <lcd_system_handler+0x298>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8000b86:	4b6c      	ldr	r3, [pc, #432]	; (8000d38 <lcd_system_handler+0x28c>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000b8c:	4b68      	ldr	r3, [pc, #416]	; (8000d30 <lcd_system_handler+0x284>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000b92:	4b69      	ldr	r3, [pc, #420]	; (8000d38 <lcd_system_handler+0x28c>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d115      	bne.n	8000bc8 <lcd_system_handler+0x11c>
                        Index_mode = INDEX_MODE1;
 8000b9c:	4b69      	ldr	r3, [pc, #420]	; (8000d44 <lcd_system_handler+0x298>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
                        Mode = 0;
 8000ba2:	4b64      	ldr	r3, [pc, #400]	; (8000d34 <lcd_system_handler+0x288>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000ba8:	4b63      	ldr	r3, [pc, #396]	; (8000d38 <lcd_system_handler+0x28c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_1;
 8000bae:	4b64      	ldr	r3, [pc, #400]	; (8000d40 <lcd_system_handler+0x294>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000bb4:	4b5e      	ldr	r3, [pc, #376]	; (8000d30 <lcd_system_handler+0x284>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e005      	b.n	8000bc8 <lcd_system_handler+0x11c>
				Config = CONFIG_ROW1;
 8000bbc:	4b5e      	ldr	r3, [pc, #376]	; (8000d38 <lcd_system_handler+0x28c>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8000bc2:	4b5e      	ldr	r3, [pc, #376]	; (8000d3c <lcd_system_handler+0x290>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000bc8:	4b5d      	ldr	r3, [pc, #372]	; (8000d40 <lcd_system_handler+0x294>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fe44 	bl	800085c <lcd_user_display>
}
 8000bd4:	e0ca      	b.n	8000d6c <lcd_system_handler+0x2c0>
		else if(INDEX_MODE1 == Index_mode)	// Languge
 8000bd6:	4b5b      	ldr	r3, [pc, #364]	; (8000d44 <lcd_system_handler+0x298>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d161      	bne.n	8000ca2 <lcd_system_handler+0x1f6>
			Status_Display = STATUS_6;
 8000bde:	4b58      	ldr	r3, [pc, #352]	; (8000d40 <lcd_system_handler+0x294>)
 8000be0:	2206      	movs	r2, #6
 8000be2:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000be4:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <lcd_system_handler+0x294>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fe36 	bl	800085c <lcd_user_display>
			if (flag_button)
 8000bf0:	4b55      	ldr	r3, [pc, #340]	; (8000d48 <lcd_system_handler+0x29c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d005      	beq.n	8000c06 <lcd_system_handler+0x15a>
				CLCD_I2C_Clear(LCD_user);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fc8c 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8000c00:	4b51      	ldr	r3, [pc, #324]	; (8000d48 <lcd_system_handler+0x29c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000c06:	4b4c      	ldr	r3, [pc, #304]	; (8000d38 <lcd_system_handler+0x28c>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d03b      	beq.n	8000c88 <lcd_system_handler+0x1dc>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8000c10:	4b49      	ldr	r3, [pc, #292]	; (8000d38 <lcd_system_handler+0x28c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	210f      	movs	r1, #15
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fb6a 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8000c20:	494a      	ldr	r1, [pc, #296]	; (8000d4c <lcd_system_handler+0x2a0>)
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff fc12 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000c28:	4b44      	ldr	r3, [pc, #272]	; (8000d3c <lcd_system_handler+0x290>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d030      	beq.n	8000c94 <lcd_system_handler+0x1e8>
					Enter = 0;
 8000c32:	4b42      	ldr	r3, [pc, #264]	; (8000d3c <lcd_system_handler+0x290>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8000c38:	4b3f      	ldr	r3, [pc, #252]	; (8000d38 <lcd_system_handler+0x28c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d105      	bne.n	8000c4e <lcd_system_handler+0x1a2>
						language = VIETNAMESE;
 8000c42:	4b43      	ldr	r3, [pc, #268]	; (8000d50 <lcd_system_handler+0x2a4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 8000c48:	4b3b      	ldr	r3, [pc, #236]	; (8000d38 <lcd_system_handler+0x28c>)
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 8000c4e:	4b3a      	ldr	r3, [pc, #232]	; (8000d38 <lcd_system_handler+0x28c>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d105      	bne.n	8000c64 <lcd_system_handler+0x1b8>
						language = ENGLISH;
 8000c58:	4b3d      	ldr	r3, [pc, #244]	; (8000d50 <lcd_system_handler+0x2a4>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 8000c5e:	4b36      	ldr	r3, [pc, #216]	; (8000d38 <lcd_system_handler+0x28c>)
 8000c60:	2203      	movs	r2, #3
 8000c62:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000c64:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <lcd_system_handler+0x28c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d112      	bne.n	8000c94 <lcd_system_handler+0x1e8>
                        Index_mode = INDEX_MODE_NONE;
 8000c6e:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <lcd_system_handler+0x298>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <lcd_system_handler+0x28c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_2;
 8000c7a:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <lcd_system_handler+0x294>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <lcd_system_handler+0x284>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
 8000c86:	e005      	b.n	8000c94 <lcd_system_handler+0x1e8>
				Config = CONFIG_ROW1;
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <lcd_system_handler+0x28c>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <lcd_system_handler+0x290>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <lcd_system_handler+0x294>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fdde 	bl	800085c <lcd_user_display>
}
 8000ca0:	e064      	b.n	8000d6c <lcd_system_handler+0x2c0>
		else if(INDEX_MODE2 == Index_mode)	// Enter Password
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <lcd_system_handler+0x298>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d160      	bne.n	8000d6c <lcd_system_handler+0x2c0>
			Status_Display = STATUS_3;
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <lcd_system_handler+0x294>)
 8000cac:	2203      	movs	r2, #3
 8000cae:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <lcd_system_handler+0x294>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fdd0 	bl	800085c <lcd_user_display>
			if (flag_button)
 8000cbc:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <lcd_system_handler+0x29c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d005      	beq.n	8000cd2 <lcd_system_handler+0x226>
				CLCD_I2C_Clear(LCD_user);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff fc26 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <lcd_system_handler+0x29c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <lcd_system_handler+0x28c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d03b      	beq.n	8000d54 <lcd_system_handler+0x2a8>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <lcd_system_handler+0x28c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	210f      	movs	r1, #15
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fb04 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8000cec:	4917      	ldr	r1, [pc, #92]	; (8000d4c <lcd_system_handler+0x2a0>)
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fbac 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <lcd_system_handler+0x290>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d030      	beq.n	8000d60 <lcd_system_handler+0x2b4>
					Enter = 0;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <lcd_system_handler+0x290>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <lcd_system_handler+0x28c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
					if(Config == CONFIG_ROW2)
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <lcd_system_handler+0x28c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <lcd_system_handler+0x28c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d124      	bne.n	8000d60 <lcd_system_handler+0x2b4>
                        Index_mode = INDEX_MODE_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <lcd_system_handler+0x298>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <lcd_system_handler+0x28c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_2;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <lcd_system_handler+0x294>)
 8000d24:	2202      	movs	r2, #2
 8000d26:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000d28:	4b01      	ldr	r3, [pc, #4]	; (8000d30 <lcd_system_handler+0x284>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	e017      	b.n	8000d60 <lcd_system_handler+0x2b4>
 8000d30:	20000040 	.word	0x20000040
 8000d34:	20000041 	.word	0x20000041
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000042 	.word	0x20000042
 8000d40:	20000045 	.word	0x20000045
 8000d44:	20000044 	.word	0x20000044
 8000d48:	20000043 	.word	0x20000043
 8000d4c:	08002c3c 	.word	0x08002c3c
 8000d50:	20000046 	.word	0x20000046
				Config = CONFIG_ROW1;
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <lcd_system_handler+0x2c8>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <lcd_system_handler+0x2cc>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <lcd_system_handler+0x2d0>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fd78 	bl	800085c <lcd_user_display>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000042 	.word	0x20000042
 8000d7c:	20000045 	.word	0x20000045

08000d80 <HAL_GPIO_EXTI_Callback>:
GPIO_COLUMN_TYPEDEF COL_KEY_PAD_main;
GPIO_ROW_TYPEDEF ROW_KEY_PAD_main;
char key = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	80fb      	strh	r3, [r7, #6]
	static uint32_t TimeBegin = 0;
	static uint32_t TimeNow = 0;
	/*CODE ISR*/
	flag_button = 1;
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	; (8000e74 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
	if(UP_EXTI11_Pin == GPIO_Pin)
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d96:	d10e      	bne.n	8000db6 <HAL_GPIO_EXTI_Callback+0x36>
	{
//		flag_button = 1;
		Config++;
 8000d98:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	3301      	adds	r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000da4:	701a      	strb	r2, [r3, #0]
		if(Config > CONFIG_ROW3) Config = CONFIG_ROW1;
 8000da6:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	d902      	bls.n	8000db6 <HAL_GPIO_EXTI_Callback+0x36>
 8000db0:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
	}
	if(DOWN_EXTI12_Pin == GPIO_Pin)
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dbc:	d10e      	bne.n	8000ddc <HAL_GPIO_EXTI_Callback+0x5c>
	{
//		flag_button = 1;
		Config--;
 8000dbe:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000dca:	701a      	strb	r2, [r3, #0]
		if(Config < CONFIG_ROW1) Config = CONFIG_ROW3;
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d102      	bne.n	8000ddc <HAL_GPIO_EXTI_Callback+0x5c>
 8000dd6:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000dd8:	2203      	movs	r2, #3
 8000dda:	701a      	strb	r2, [r3, #0]
	}
	if(ENTER_EXTI15_Pin == GPIO_Pin)
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000de2:	d10b      	bne.n	8000dfc <HAL_GPIO_EXTI_Callback+0x7c>
	{
		if(1 == Mode)
 8000de4:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d103      	bne.n	8000df6 <HAL_GPIO_EXTI_Callback+0x76>
		{
			Enter = 1;
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <HAL_GPIO_EXTI_Callback+0x100>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	e002      	b.n	8000dfc <HAL_GPIO_EXTI_Callback+0x7c>
		}
		else
		{
			Mode = 1;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
		}

	}
	/*END CODE ISR*/
	HAL_Delay(70);
 8000dfc:	2046      	movs	r0, #70	; 0x46
 8000dfe:	f000 fabf 	bl	8001380 <HAL_Delay>
	TimeBegin = HAL_GetTick();
 8000e02:	f000 fab3 	bl	800136c <HAL_GetTick>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e0a:	6013      	str	r3, [r2, #0]
	while(		HAL_GPIO_ReadPin(GPIOA, UP_EXTI11_Pin) == GPIO_PIN_RESET		\
 8000e0c:	e00d      	b.n	8000e2a <HAL_GPIO_EXTI_Callback+0xaa>
			|| 	HAL_GPIO_ReadPin(GPIOA, DOWN_EXTI12_Pin) == GPIO_PIN_RESET 		\
			|| 	HAL_GPIO_ReadPin(GPIOA, ENTER_EXTI15_Pin) == GPIO_PIN_RESET)	\
	{
		TimeNow = HAL_GetTick();
 8000e0e:	f000 faad 	bl	800136c <HAL_GetTick>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <HAL_GPIO_EXTI_Callback+0x108>)
 8000e16:	6013      	str	r3, [r2, #0]
		if(TimeNow - TimeBegin == 5000)
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_GPIO_EXTI_Callback+0x108>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d018      	beq.n	8000e5c <HAL_GPIO_EXTI_Callback+0xdc>
	while(		HAL_GPIO_ReadPin(GPIOA, UP_EXTI11_Pin) == GPIO_PIN_RESET		\
 8000e2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e2e:	4817      	ldr	r0, [pc, #92]	; (8000e8c <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e30:	f000 fd5c 	bl	80018ec <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0e9      	beq.n	8000e0e <HAL_GPIO_EXTI_Callback+0x8e>
			|| 	HAL_GPIO_ReadPin(GPIOA, DOWN_EXTI12_Pin) == GPIO_PIN_RESET 		\
 8000e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3e:	4813      	ldr	r0, [pc, #76]	; (8000e8c <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e40:	f000 fd54 	bl	80018ec <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0e1      	beq.n	8000e0e <HAL_GPIO_EXTI_Callback+0x8e>
			|| 	HAL_GPIO_ReadPin(GPIOA, ENTER_EXTI15_Pin) == GPIO_PIN_RESET)	\
 8000e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e4e:	480f      	ldr	r0, [pc, #60]	; (8000e8c <HAL_GPIO_EXTI_Callback+0x10c>)
 8000e50:	f000 fd4c 	bl	80018ec <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0d9      	beq.n	8000e0e <HAL_GPIO_EXTI_Callback+0x8e>
 8000e5a:	e000      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xde>
		{
//			ButtonError = 1;
			break;
 8000e5c:	bf00      	nop
		}
	}
	HAL_Delay(70);
 8000e5e:	2046      	movs	r0, #70	; 0x46
 8000e60:	f000 fa8e 	bl	8001380 <HAL_Delay>
	EXTI->PR = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x110>)
 8000e66:	f44f 4218 	mov.w	r2, #38912	; 0x9800
 8000e6a:	615a      	str	r2, [r3, #20]
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000043 	.word	0x20000043
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000041 	.word	0x20000041
 8000e80:	20000042 	.word	0x20000042
 8000e84:	200000d0 	.word	0x200000d0
 8000e88:	200000d4 	.word	0x200000d4
 8000e8c:	40010800 	.word	0x40010800
 8000e90:	40010400 	.word	0x40010400

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b092      	sub	sp, #72	; 0x48
 8000e98:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9a:	f000 fa0f 	bl	80012bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9e:	f000 f84f 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea2:	f000 f8b7 	bl	8001014 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ea6:	f000 f887 	bl	8000fb8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  KeyPad_Init(		&COL_KEY_PAD_main, &ROW_KEY_PAD_main,												\
 8000eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eae:	930d      	str	r3, [sp, #52]	; 0x34
 8000eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eb4:	930c      	str	r3, [sp, #48]	; 0x30
 8000eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eba:	930b      	str	r3, [sp, #44]	; 0x2c
 8000ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <main+0x94>)
 8000ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <main+0x94>)
 8000ec8:	9308      	str	r3, [sp, #32]
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <main+0x94>)
 8000ecc:	9307      	str	r3, [sp, #28]
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <main+0x94>)
 8000ed0:	9306      	str	r3, [sp, #24]
 8000ed2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ed6:	9305      	str	r3, [sp, #20]
 8000ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000edc:	9304      	str	r3, [sp, #16]
 8000ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee2:	9303      	str	r3, [sp, #12]
 8000ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <main+0x94>)
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <main+0x94>)
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <main+0x98>)
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <main+0x98>)
 8000ef6:	490e      	ldr	r1, [pc, #56]	; (8000f30 <main+0x9c>)
 8000ef8:	480e      	ldr	r0, [pc, #56]	; (8000f34 <main+0xa0>)
 8000efa:	f7ff fb1d 	bl	8000538 <KeyPad_Init>
					C1_OUT_GPIO_Port, C2_OUT_GPIO_Port, C3_OUT_GPIO_Port, C4_OUT_GPIO_Port,		\
					C1_OUT_Pin, C2_OUT_Pin, C3_OUT_Pin, C4_OUT_Pin,								\
					R1_IN_GPIO_Port, R2_IN_GPIO_Port, R3_IN_GPIO_Port, R4_IN_GPIO_Port,					\
					R1_IN_Pin, R2_IN_Pin, R3_IN_Pin, R4_IN_Pin);
  CLCD_I2C_Init(&LCD1, &hi2c1, (0x27 << 1), 16, 4);
 8000efe:	1d38      	adds	r0, r7, #4
 8000f00:	2304      	movs	r3, #4
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2310      	movs	r3, #16
 8000f06:	224e      	movs	r2, #78	; 0x4e
 8000f08:	490b      	ldr	r1, [pc, #44]	; (8000f38 <main+0xa4>)
 8000f0a:	f7ff f983 	bl	8000214 <CLCD_I2C_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  key = KEYPAD_Read(&COL_KEY_PAD_main, &ROW_KEY_PAD_main);
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <main+0x9c>)
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <main+0xa0>)
 8000f12:	f7ff fbe7 	bl	80006e4 <KEYPAD_Read>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <main+0xa8>)
 8000f1c:	701a      	strb	r2, [r3, #0]
	  lcd_system_handler(&LCD1);
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fdc3 	bl	8000aac <lcd_system_handler>
	  key = KEYPAD_Read(&COL_KEY_PAD_main, &ROW_KEY_PAD_main);
 8000f26:	e7f2      	b.n	8000f0e <main+0x7a>
 8000f28:	40010c00 	.word	0x40010c00
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	200000b4 	.word	0x200000b4
 8000f34:	2000009c 	.word	0x2000009c
 8000f38:	20000048 	.word	0x20000048
 8000f3c:	200000cc 	.word	0x200000cc

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b090      	sub	sp, #64	; 0x40
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0318 	add.w	r3, r7, #24
 8000f4a:	2228      	movs	r2, #40	; 0x28
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 fdd0 	bl	8002af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f66:	2301      	movs	r3, #1
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 f99c 	bl	80022b4 <HAL_RCC_OscConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f82:	f000 f8c1 	bl	8001108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f86:	230f      	movs	r3, #15
 8000f88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fc0a 	bl	80027b8 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000faa:	f000 f8ad 	bl	8001108 <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3740      	adds	r7, #64	; 0x40
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fbe:	4a13      	ldr	r2, [pc, #76]	; (800100c <MX_I2C1_Init+0x54>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fc4:	4a12      	ldr	r2, [pc, #72]	; (8001010 <MX_I2C1_Init+0x58>)
 8000fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_I2C1_Init+0x50>)
 8000ff6:	f000 fcc1 	bl	800197c <HAL_I2C_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001000:	f000 f882 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000048 	.word	0x20000048
 800100c:	40005400 	.word	0x40005400
 8001010:	000186a0 	.word	0x000186a0

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <MX_GPIO_Init+0xe4>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a32      	ldr	r2, [pc, #200]	; (80010f8 <MX_GPIO_Init+0xe4>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <MX_GPIO_Init+0xe4>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <MX_GPIO_Init+0xe4>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a2c      	ldr	r2, [pc, #176]	; (80010f8 <MX_GPIO_Init+0xe4>)
 8001046:	f043 0304 	orr.w	r3, r3, #4
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <MX_GPIO_Init+0xe4>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C4_OUT_Pin|C3_OUT_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800105e:	4827      	ldr	r0, [pc, #156]	; (80010fc <MX_GPIO_Init+0xe8>)
 8001060:	f000 fc5b 	bl	800191a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C2_OUT_Pin|C1_OUT_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7140 	mov.w	r1, #768	; 0x300
 800106a:	4825      	ldr	r0, [pc, #148]	; (8001100 <MX_GPIO_Init+0xec>)
 800106c:	f000 fc55 	bl	800191a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R4_IN_Pin R3_IN_Pin R2_IN_Pin R1_IN_Pin */
  GPIO_InitStruct.Pin = R4_IN_Pin|R3_IN_Pin|R2_IN_Pin|R1_IN_Pin;
 8001070:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001074:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107a:	2301      	movs	r3, #1
 800107c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	4619      	mov	r1, r3
 8001084:	481d      	ldr	r0, [pc, #116]	; (80010fc <MX_GPIO_Init+0xe8>)
 8001086:	f000 faad 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_OUT_Pin C3_OUT_Pin */
  GPIO_InitStruct.Pin = C4_OUT_Pin|C3_OUT_Pin;
 800108a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800108e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2302      	movs	r3, #2
 800109a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	4619      	mov	r1, r3
 80010a2:	4816      	ldr	r0, [pc, #88]	; (80010fc <MX_GPIO_Init+0xe8>)
 80010a4:	f000 fa9e 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_OUT_Pin C1_OUT_Pin */
  GPIO_InitStruct.Pin = C2_OUT_Pin|C1_OUT_Pin;
 80010a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2302      	movs	r3, #2
 80010b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	4619      	mov	r1, r3
 80010c0:	480f      	ldr	r0, [pc, #60]	; (8001100 <MX_GPIO_Init+0xec>)
 80010c2:	f000 fa8f 	bl	80015e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_EXTI11_Pin DOWN_EXTI12_Pin ENTER_EXTI15_Pin */
  GPIO_InitStruct.Pin = UP_EXTI11_Pin|DOWN_EXTI12_Pin|ENTER_EXTI15_Pin;
 80010c6:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80010ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <MX_GPIO_Init+0xf0>)
 80010ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	4619      	mov	r1, r3
 80010da:	4809      	ldr	r0, [pc, #36]	; (8001100 <MX_GPIO_Init+0xec>)
 80010dc:	f000 fa82 	bl	80015e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2028      	movs	r0, #40	; 0x28
 80010e6:	f000 fa46 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ea:	2028      	movs	r0, #40	; 0x28
 80010ec:	f000 fa5f 	bl	80015ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010c00 	.word	0x40010c00
 8001100:	40010800 	.word	0x40010800
 8001104:	10210000 	.word	0x10210000

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	e7fe      	b.n	8001110 <Error_Handler+0x8>
	...

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_MspInit+0x5c>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	4a14      	ldr	r2, [pc, #80]	; (8001170 <HAL_MspInit+0x5c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6193      	str	r3, [r2, #24]
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_MspInit+0x5c>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_MspInit+0x5c>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <HAL_MspInit+0x5c>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_MspInit+0x5c>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_MspInit+0x60>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_MspInit+0x60>)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	40021000 	.word	0x40021000
 8001174:	40010000 	.word	0x40010000

08001178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <HAL_I2C_MspInit+0x70>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d123      	bne.n	80011e0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_I2C_MspInit+0x74>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a13      	ldr	r2, [pc, #76]	; (80011ec <HAL_I2C_MspInit+0x74>)
 800119e:	f043 0308 	orr.w	r3, r3, #8
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_I2C_MspInit+0x74>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b0:	23c0      	movs	r3, #192	; 0xc0
 80011b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b4:	2312      	movs	r3, #18
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <HAL_I2C_MspInit+0x78>)
 80011c4:	f000 fa0e 	bl	80015e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_I2C_MspInit+0x74>)
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_I2C_MspInit+0x74>)
 80011ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d2:	61d3      	str	r3, [r2, #28]
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_I2C_MspInit+0x74>)
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40005400 	.word	0x40005400
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010c00 	.word	0x40010c00

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123a:	f000 f885 	bl	8001348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}

08001242 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_EXTI11_Pin);
 8001246:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800124a:	f000 fb7f 	bl	800194c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_EXTI12_Pin);
 800124e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001252:	f000 fb7b 	bl	800194c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENTER_EXTI15_Pin);
 8001256:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800125a:	f000 fb77 	bl	800194c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}

08001262 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
	...

08001270 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001270:	f7ff fff7 	bl	8001262 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001276:	490c      	ldr	r1, [pc, #48]	; (80012a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001278:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800128c:	4c09      	ldr	r4, [pc, #36]	; (80012b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129a:	f001 fc07 	bl	8002aac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800129e:	f7ff fdf9 	bl	8000e94 <main>
  bx lr
 80012a2:	4770      	bx	lr
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80012ac:	08002c84 	.word	0x08002c84
  ldr r2, =_sbss
 80012b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80012b4:	200000dc 	.word	0x200000dc

080012b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC1_2_IRQHandler>
	...

080012bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_Init+0x28>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_Init+0x28>)
 80012c6:	f043 0310 	orr.w	r3, r3, #16
 80012ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 f947 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	200f      	movs	r0, #15
 80012d4:	f000 f808 	bl	80012e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f7ff ff1c 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40022000 	.word	0x40022000

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x54>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x58>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f95f 	bl	80015ca <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e00e      	b.n	8001334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d80a      	bhi.n	8001332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f000 f927 	bl	8001576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <HAL_InitTick+0x5c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000004 	.word	0x20000004
 8001340:	2000000c 	.word	0x2000000c
 8001344:	20000008 	.word	0x20000008

08001348 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_IncTick+0x1c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_IncTick+0x20>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a03      	ldr	r2, [pc, #12]	; (8001368 <HAL_IncTick+0x20>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	2000000c 	.word	0x2000000c
 8001368:	200000d8 	.word	0x200000d8

0800136c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b02      	ldr	r3, [pc, #8]	; (800137c <HAL_GetTick+0x10>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	200000d8 	.word	0x200000d8

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff fff0 	bl	800136c <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffe0 	bl	800136c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000000c 	.word	0x2000000c

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4906      	ldr	r1, [pc, #24]	; (8001460 <__NVIC_EnableIRQ+0x34>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff90 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff2d 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff42 	bl	8001410 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff90 	bl	80014b8 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5f 	bl	8001464 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff35 	bl	800142c <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa2 	bl	800151c <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b08b      	sub	sp, #44	; 0x2c
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f6:	e169      	b.n	80018cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015f8:	2201      	movs	r2, #1
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	429a      	cmp	r2, r3
 8001612:	f040 8158 	bne.w	80018c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4a9a      	ldr	r2, [pc, #616]	; (8001884 <HAL_GPIO_Init+0x2a0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d05e      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 8001620:	4a98      	ldr	r2, [pc, #608]	; (8001884 <HAL_GPIO_Init+0x2a0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d875      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 8001626:	4a98      	ldr	r2, [pc, #608]	; (8001888 <HAL_GPIO_Init+0x2a4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d058      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 800162c:	4a96      	ldr	r2, [pc, #600]	; (8001888 <HAL_GPIO_Init+0x2a4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d86f      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 8001632:	4a96      	ldr	r2, [pc, #600]	; (800188c <HAL_GPIO_Init+0x2a8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d052      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 8001638:	4a94      	ldr	r2, [pc, #592]	; (800188c <HAL_GPIO_Init+0x2a8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d869      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 800163e:	4a94      	ldr	r2, [pc, #592]	; (8001890 <HAL_GPIO_Init+0x2ac>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d04c      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 8001644:	4a92      	ldr	r2, [pc, #584]	; (8001890 <HAL_GPIO_Init+0x2ac>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d863      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 800164a:	4a92      	ldr	r2, [pc, #584]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d046      	beq.n	80016de <HAL_GPIO_Init+0xfa>
 8001650:	4a90      	ldr	r2, [pc, #576]	; (8001894 <HAL_GPIO_Init+0x2b0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d85d      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 8001656:	2b12      	cmp	r3, #18
 8001658:	d82a      	bhi.n	80016b0 <HAL_GPIO_Init+0xcc>
 800165a:	2b12      	cmp	r3, #18
 800165c:	d859      	bhi.n	8001712 <HAL_GPIO_Init+0x12e>
 800165e:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <HAL_GPIO_Init+0x80>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	080016df 	.word	0x080016df
 8001668:	080016b9 	.word	0x080016b9
 800166c:	080016cb 	.word	0x080016cb
 8001670:	0800170d 	.word	0x0800170d
 8001674:	08001713 	.word	0x08001713
 8001678:	08001713 	.word	0x08001713
 800167c:	08001713 	.word	0x08001713
 8001680:	08001713 	.word	0x08001713
 8001684:	08001713 	.word	0x08001713
 8001688:	08001713 	.word	0x08001713
 800168c:	08001713 	.word	0x08001713
 8001690:	08001713 	.word	0x08001713
 8001694:	08001713 	.word	0x08001713
 8001698:	08001713 	.word	0x08001713
 800169c:	08001713 	.word	0x08001713
 80016a0:	08001713 	.word	0x08001713
 80016a4:	08001713 	.word	0x08001713
 80016a8:	080016c1 	.word	0x080016c1
 80016ac:	080016d5 	.word	0x080016d5
 80016b0:	4a79      	ldr	r2, [pc, #484]	; (8001898 <HAL_GPIO_Init+0x2b4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016b6:	e02c      	b.n	8001712 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	623b      	str	r3, [r7, #32]
          break;
 80016be:	e029      	b.n	8001714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	3304      	adds	r3, #4
 80016c6:	623b      	str	r3, [r7, #32]
          break;
 80016c8:	e024      	b.n	8001714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	3308      	adds	r3, #8
 80016d0:	623b      	str	r3, [r7, #32]
          break;
 80016d2:	e01f      	b.n	8001714 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	330c      	adds	r3, #12
 80016da:	623b      	str	r3, [r7, #32]
          break;
 80016dc:	e01a      	b.n	8001714 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d102      	bne.n	80016ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016e6:	2304      	movs	r3, #4
 80016e8:	623b      	str	r3, [r7, #32]
          break;
 80016ea:	e013      	b.n	8001714 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d105      	bne.n	8001700 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f4:	2308      	movs	r3, #8
 80016f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	611a      	str	r2, [r3, #16]
          break;
 80016fe:	e009      	b.n	8001714 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001700:	2308      	movs	r3, #8
 8001702:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	615a      	str	r2, [r3, #20]
          break;
 800170a:	e003      	b.n	8001714 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
          break;
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x130>
          break;
 8001712:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2bff      	cmp	r3, #255	; 0xff
 8001718:	d801      	bhi.n	800171e <HAL_GPIO_Init+0x13a>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	e001      	b.n	8001722 <HAL_GPIO_Init+0x13e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3304      	adds	r3, #4
 8001722:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2bff      	cmp	r3, #255	; 0xff
 8001728:	d802      	bhi.n	8001730 <HAL_GPIO_Init+0x14c>
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	e002      	b.n	8001736 <HAL_GPIO_Init+0x152>
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	3b08      	subs	r3, #8
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	210f      	movs	r1, #15
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	401a      	ands	r2, r3
 8001748:	6a39      	ldr	r1, [r7, #32]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	431a      	orrs	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80b1 	beq.w	80018c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001764:	4b4d      	ldr	r3, [pc, #308]	; (800189c <HAL_GPIO_Init+0x2b8>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a4c      	ldr	r2, [pc, #304]	; (800189c <HAL_GPIO_Init+0x2b8>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b4a      	ldr	r3, [pc, #296]	; (800189c <HAL_GPIO_Init+0x2b8>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800177c:	4a48      	ldr	r2, [pc, #288]	; (80018a0 <HAL_GPIO_Init+0x2bc>)
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a40      	ldr	r2, [pc, #256]	; (80018a4 <HAL_GPIO_Init+0x2c0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d013      	beq.n	80017d0 <HAL_GPIO_Init+0x1ec>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a3f      	ldr	r2, [pc, #252]	; (80018a8 <HAL_GPIO_Init+0x2c4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00d      	beq.n	80017cc <HAL_GPIO_Init+0x1e8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a3e      	ldr	r2, [pc, #248]	; (80018ac <HAL_GPIO_Init+0x2c8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d007      	beq.n	80017c8 <HAL_GPIO_Init+0x1e4>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a3d      	ldr	r2, [pc, #244]	; (80018b0 <HAL_GPIO_Init+0x2cc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d101      	bne.n	80017c4 <HAL_GPIO_Init+0x1e0>
 80017c0:	2303      	movs	r3, #3
 80017c2:	e006      	b.n	80017d2 <HAL_GPIO_Init+0x1ee>
 80017c4:	2304      	movs	r3, #4
 80017c6:	e004      	b.n	80017d2 <HAL_GPIO_Init+0x1ee>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e002      	b.n	80017d2 <HAL_GPIO_Init+0x1ee>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_GPIO_Init+0x1ee>
 80017d0:	2300      	movs	r3, #0
 80017d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d4:	f002 0203 	and.w	r2, r2, #3
 80017d8:	0092      	lsls	r2, r2, #2
 80017da:	4093      	lsls	r3, r2
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017e2:	492f      	ldr	r1, [pc, #188]	; (80018a0 <HAL_GPIO_Init+0x2bc>)
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017fc:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	492c      	ldr	r1, [pc, #176]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	608b      	str	r3, [r1, #8]
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	43db      	mvns	r3, r3
 8001812:	4928      	ldr	r1, [pc, #160]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001814:	4013      	ands	r3, r2
 8001816:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001824:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	4922      	ldr	r1, [pc, #136]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	60cb      	str	r3, [r1, #12]
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	43db      	mvns	r3, r3
 800183a:	491e      	ldr	r1, [pc, #120]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 800183c:	4013      	ands	r3, r2
 800183e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	4918      	ldr	r1, [pc, #96]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	43db      	mvns	r3, r3
 8001862:	4914      	ldr	r1, [pc, #80]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001864:	4013      	ands	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d021      	beq.n	80018b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	490e      	ldr	r1, [pc, #56]	; (80018b4 <HAL_GPIO_Init+0x2d0>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
 8001880:	e021      	b.n	80018c6 <HAL_GPIO_Init+0x2e2>
 8001882:	bf00      	nop
 8001884:	10320000 	.word	0x10320000
 8001888:	10310000 	.word	0x10310000
 800188c:	10220000 	.word	0x10220000
 8001890:	10210000 	.word	0x10210000
 8001894:	10120000 	.word	0x10120000
 8001898:	10110000 	.word	0x10110000
 800189c:	40021000 	.word	0x40021000
 80018a0:	40010000 	.word	0x40010000
 80018a4:	40010800 	.word	0x40010800
 80018a8:	40010c00 	.word	0x40010c00
 80018ac:	40011000 	.word	0x40011000
 80018b0:	40011400 	.word	0x40011400
 80018b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_GPIO_Init+0x304>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	43db      	mvns	r3, r3
 80018c0:	4909      	ldr	r1, [pc, #36]	; (80018e8 <HAL_GPIO_Init+0x304>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	3301      	adds	r3, #1
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	fa22 f303 	lsr.w	r3, r2, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f47f ae8e 	bne.w	80015f8 <HAL_GPIO_Init+0x14>
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	372c      	adds	r7, #44	; 0x2c
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	40010400 	.word	0x40010400

080018ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	887b      	ldrh	r3, [r7, #2]
 80018fe:	4013      	ands	r3, r2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	e001      	b.n	800190e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	460b      	mov	r3, r1
 8001924:	807b      	strh	r3, [r7, #2]
 8001926:	4613      	mov	r3, r2
 8001928:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800192a:	787b      	ldrb	r3, [r7, #1]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001930:	887a      	ldrh	r2, [r7, #2]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001936:	e003      	b.n	8001940 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	041a      	lsls	r2, r3, #16
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	611a      	str	r2, [r3, #16]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
	...

0800194c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	4013      	ands	r3, r2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d006      	beq.n	8001970 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fa08 	bl	8000d80 <HAL_GPIO_EXTI_Callback>
  }
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e12b      	b.n	8001be6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d106      	bne.n	80019a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fbe8 	bl	8001178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2224      	movs	r2, #36	; 0x24
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019e0:	f001 f832 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 80019e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4a81      	ldr	r2, [pc, #516]	; (8001bf0 <HAL_I2C_Init+0x274>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d807      	bhi.n	8001a00 <HAL_I2C_Init+0x84>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4a80      	ldr	r2, [pc, #512]	; (8001bf4 <HAL_I2C_Init+0x278>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	bf94      	ite	ls
 80019f8:	2301      	movls	r3, #1
 80019fa:	2300      	movhi	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	e006      	b.n	8001a0e <HAL_I2C_Init+0x92>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a7d      	ldr	r2, [pc, #500]	; (8001bf8 <HAL_I2C_Init+0x27c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	bf94      	ite	ls
 8001a08:	2301      	movls	r3, #1
 8001a0a:	2300      	movhi	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0e7      	b.n	8001be6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4a78      	ldr	r2, [pc, #480]	; (8001bfc <HAL_I2C_Init+0x280>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	0c9b      	lsrs	r3, r3, #18
 8001a20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4a6a      	ldr	r2, [pc, #424]	; (8001bf0 <HAL_I2C_Init+0x274>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d802      	bhi.n	8001a50 <HAL_I2C_Init+0xd4>
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	e009      	b.n	8001a64 <HAL_I2C_Init+0xe8>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	4a69      	ldr	r2, [pc, #420]	; (8001c00 <HAL_I2C_Init+0x284>)
 8001a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a60:	099b      	lsrs	r3, r3, #6
 8001a62:	3301      	adds	r3, #1
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	495c      	ldr	r1, [pc, #368]	; (8001bf0 <HAL_I2C_Init+0x274>)
 8001a80:	428b      	cmp	r3, r1
 8001a82:	d819      	bhi.n	8001ab8 <HAL_I2C_Init+0x13c>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1e59      	subs	r1, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a92:	1c59      	adds	r1, r3, #1
 8001a94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a98:	400b      	ands	r3, r1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00a      	beq.n	8001ab4 <HAL_I2C_Init+0x138>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1e59      	subs	r1, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab2:	e051      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	e04f      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d111      	bne.n	8001ae4 <HAL_I2C_Init+0x168>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1e58      	subs	r0, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	440b      	add	r3, r1
 8001ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	e012      	b.n	8001b0a <HAL_I2C_Init+0x18e>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1e58      	subs	r0, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6859      	ldr	r1, [r3, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	0099      	lsls	r1, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afa:	3301      	adds	r3, #1
 8001afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_I2C_Init+0x196>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e022      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10e      	bne.n	8001b38 <HAL_I2C_Init+0x1bc>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1e58      	subs	r0, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6859      	ldr	r1, [r3, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	440b      	add	r3, r1
 8001b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b36:	e00f      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1e58      	subs	r0, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	0099      	lsls	r1, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	6809      	ldr	r1, [r1, #0]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69da      	ldr	r2, [r3, #28]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6911      	ldr	r1, [r2, #16]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68d2      	ldr	r2, [r2, #12]
 8001b92:	4311      	orrs	r1, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	000186a0 	.word	0x000186a0
 8001bf4:	001e847f 	.word	0x001e847f
 8001bf8:	003d08ff 	.word	0x003d08ff
 8001bfc:	431bde83 	.word	0x431bde83
 8001c00:	10624dd3 	.word	0x10624dd3

08001c04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	460b      	mov	r3, r1
 8001c12:	817b      	strh	r3, [r7, #10]
 8001c14:	4613      	mov	r3, r2
 8001c16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff fba8 	bl	800136c <HAL_GetTick>
 8001c1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	f040 80e0 	bne.w	8001dec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2319      	movs	r3, #25
 8001c32:	2201      	movs	r2, #1
 8001c34:	4970      	ldr	r1, [pc, #448]	; (8001df8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f964 	bl	8001f04 <I2C_WaitOnFlagUntilTimeout>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c42:	2302      	movs	r3, #2
 8001c44:	e0d3      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_I2C_Master_Transmit+0x50>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e0cc      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d007      	beq.n	8001c7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2221      	movs	r2, #33	; 0x21
 8001c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2210      	movs	r2, #16
 8001c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	893a      	ldrh	r2, [r7, #8]
 8001caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4a50      	ldr	r2, [pc, #320]	; (8001dfc <HAL_I2C_Master_Transmit+0x1f8>)
 8001cba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cbc:	8979      	ldrh	r1, [r7, #10]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	6a3a      	ldr	r2, [r7, #32]
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 f89c 	bl	8001e00 <I2C_MasterRequestWrite>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e08d      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ce8:	e066      	b.n	8001db8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	6a39      	ldr	r1, [r7, #32]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fa22 	bl	8002138 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00d      	beq.n	8001d16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d107      	bne.n	8001d12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06b      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d11b      	bne.n	8001d8c <HAL_I2C_Master_Transmit+0x188>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d017      	beq.n	8001d8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	781a      	ldrb	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	6a39      	ldr	r1, [r7, #32]
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fa19 	bl	80021c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00d      	beq.n	8001db8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d107      	bne.n	8001db4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e01a      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d194      	bne.n	8001cea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e000      	b.n	8001dee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dec:	2302      	movs	r3, #2
  }
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	00100002 	.word	0x00100002
 8001dfc:	ffff0000 	.word	0xffff0000

08001e00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d006      	beq.n	8001e2a <I2C_MasterRequestWrite+0x2a>
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d003      	beq.n	8001e2a <I2C_MasterRequestWrite+0x2a>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e28:	d108      	bne.n	8001e3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e00b      	b.n	8001e54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	2b12      	cmp	r3, #18
 8001e42:	d107      	bne.n	8001e54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f84f 	bl	8001f04 <I2C_WaitOnFlagUntilTimeout>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00d      	beq.n	8001e88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e7a:	d103      	bne.n	8001e84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e035      	b.n	8001ef4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e90:	d108      	bne.n	8001ea4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e92:	897b      	ldrh	r3, [r7, #10]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ea0:	611a      	str	r2, [r3, #16]
 8001ea2:	e01b      	b.n	8001edc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ea4:	897b      	ldrh	r3, [r7, #10]
 8001ea6:	11db      	asrs	r3, r3, #7
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	f003 0306 	and.w	r3, r3, #6
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f063 030f 	orn	r3, r3, #15
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	490e      	ldr	r1, [pc, #56]	; (8001efc <I2C_MasterRequestWrite+0xfc>)
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f898 	bl	8001ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e010      	b.n	8001ef4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ed2:	897b      	ldrh	r3, [r7, #10]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4907      	ldr	r1, [pc, #28]	; (8001f00 <I2C_MasterRequestWrite+0x100>)
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f888 	bl	8001ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	00010008 	.word	0x00010008
 8001f00:	00010002 	.word	0x00010002

08001f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	4613      	mov	r3, r2
 8001f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f14:	e048      	b.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d044      	beq.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f1e:	f7ff fa25 	bl	800136c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d302      	bcc.n	8001f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d139      	bne.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	0c1b      	lsrs	r3, r3, #16
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d10d      	bne.n	8001f5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	43da      	mvns	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	e00c      	b.n	8001f74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	43da      	mvns	r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	4013      	ands	r3, r2
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d116      	bne.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f043 0220 	orr.w	r2, r3, #32
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e023      	b.n	8001ff0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	0c1b      	lsrs	r3, r3, #16
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10d      	bne.n	8001fce <I2C_WaitOnFlagUntilTimeout+0xca>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	e00c      	b.n	8001fe8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	43da      	mvns	r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d093      	beq.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002006:	e071      	b.n	80020ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002016:	d123      	bne.n	8002060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002026:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002030:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f043 0204 	orr.w	r2, r3, #4
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e067      	b.n	8002130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002066:	d041      	beq.n	80020ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002068:	f7ff f980 	bl	800136c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	d302      	bcc.n	800207e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d136      	bne.n	80020ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	0c1b      	lsrs	r3, r3, #16
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d10c      	bne.n	80020a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4013      	ands	r3, r2
 8002094:	b29b      	uxth	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	bf14      	ite	ne
 800209a:	2301      	movne	r3, #1
 800209c:	2300      	moveq	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	e00b      	b.n	80020ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	43da      	mvns	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4013      	ands	r3, r2
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d016      	beq.n	80020ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f043 0220 	orr.w	r2, r3, #32
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e021      	b.n	8002130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	0c1b      	lsrs	r3, r3, #16
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d10c      	bne.n	8002110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	43da      	mvns	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	4013      	ands	r3, r2
 8002102:	b29b      	uxth	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf14      	ite	ne
 8002108:	2301      	movne	r3, #1
 800210a:	2300      	moveq	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e00b      	b.n	8002128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4013      	ands	r3, r2
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf14      	ite	ne
 8002122:	2301      	movne	r3, #1
 8002124:	2300      	moveq	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	f47f af6d 	bne.w	8002008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002144:	e034      	b.n	80021b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f886 	bl	8002258 <I2C_IsAcknowledgeFailed>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e034      	b.n	80021c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d028      	beq.n	80021b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215e:	f7ff f905 	bl	800136c <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	429a      	cmp	r2, r3
 800216c:	d302      	bcc.n	8002174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d11d      	bne.n	80021b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	2b80      	cmp	r3, #128	; 0x80
 8002180:	d016      	beq.n	80021b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e007      	b.n	80021c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ba:	2b80      	cmp	r3, #128	; 0x80
 80021bc:	d1c3      	bne.n	8002146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021d4:	e034      	b.n	8002240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f83e 	bl	8002258 <I2C_IsAcknowledgeFailed>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e034      	b.n	8002250 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d028      	beq.n	8002240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ee:	f7ff f8bd 	bl	800136c <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d302      	bcc.n	8002204 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d11d      	bne.n	8002240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b04      	cmp	r3, #4
 8002210:	d016      	beq.n	8002240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f043 0220 	orr.w	r2, r3, #32
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e007      	b.n	8002250 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b04      	cmp	r3, #4
 800224c:	d1c3      	bne.n	80021d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800226e:	d11b      	bne.n	80022a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002278:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f043 0204 	orr.w	r2, r3, #4
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e272      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8087 	beq.w	80023e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022d4:	4b92      	ldr	r3, [pc, #584]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d00c      	beq.n	80022fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022e0:	4b8f      	ldr	r3, [pc, #572]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d112      	bne.n	8002312 <HAL_RCC_OscConfig+0x5e>
 80022ec:	4b8c      	ldr	r3, [pc, #560]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f8:	d10b      	bne.n	8002312 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fa:	4b89      	ldr	r3, [pc, #548]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d06c      	beq.n	80023e0 <HAL_RCC_OscConfig+0x12c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d168      	bne.n	80023e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e24c      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x76>
 800231c:	4b80      	ldr	r3, [pc, #512]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a7f      	ldr	r2, [pc, #508]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	e02e      	b.n	8002388 <HAL_RCC_OscConfig+0xd4>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10c      	bne.n	800234c <HAL_RCC_OscConfig+0x98>
 8002332:	4b7b      	ldr	r3, [pc, #492]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7a      	ldr	r2, [pc, #488]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	4b78      	ldr	r3, [pc, #480]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a77      	ldr	r2, [pc, #476]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e01d      	b.n	8002388 <HAL_RCC_OscConfig+0xd4>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0xbc>
 8002356:	4b72      	ldr	r3, [pc, #456]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a71      	ldr	r2, [pc, #452]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800235c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a6e      	ldr	r2, [pc, #440]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e00b      	b.n	8002388 <HAL_RCC_OscConfig+0xd4>
 8002370:	4b6b      	ldr	r3, [pc, #428]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a6a      	ldr	r2, [pc, #424]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b68      	ldr	r3, [pc, #416]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a67      	ldr	r2, [pc, #412]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002386:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7fe ffec 	bl	800136c <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7fe ffe8 	bl	800136c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e200      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b5d      	ldr	r3, [pc, #372]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0xe4>
 80023b6:	e014      	b.n	80023e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe ffd8 	bl	800136c <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c0:	f7fe ffd4 	bl	800136c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e1ec      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x10c>
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d063      	beq.n	80024b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ee:	4b4c      	ldr	r3, [pc, #304]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023fa:	4b49      	ldr	r3, [pc, #292]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b08      	cmp	r3, #8
 8002404:	d11c      	bne.n	8002440 <HAL_RCC_OscConfig+0x18c>
 8002406:	4b46      	ldr	r3, [pc, #280]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d116      	bne.n	8002440 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_RCC_OscConfig+0x176>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e1c0      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4939      	ldr	r1, [pc, #228]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243e:	e03a      	b.n	80024b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002448:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 800244a:	2201      	movs	r2, #1
 800244c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244e:	f7fe ff8d 	bl	800136c <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002456:	f7fe ff89 	bl	800136c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e1a1      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4927      	ldr	r1, [pc, #156]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]
 8002488:	e015      	b.n	80024b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248a:	4b26      	ldr	r3, [pc, #152]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7fe ff6c 	bl	800136c <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002498:	f7fe ff68 	bl	800136c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e180      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d03a      	beq.n	8002538 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d019      	beq.n	80024fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_RCC_OscConfig+0x274>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7fe ff4c 	bl	800136c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d8:	f7fe ff48 	bl	800136c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e160      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024f6:	2001      	movs	r0, #1
 80024f8:	f000 faba 	bl	8002a70 <RCC_Delay>
 80024fc:	e01c      	b.n	8002538 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <HAL_RCC_OscConfig+0x274>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002504:	f7fe ff32 	bl	800136c <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250a:	e00f      	b.n	800252c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250c:	f7fe ff2e 	bl	800136c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d908      	bls.n	800252c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e146      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	42420000 	.word	0x42420000
 8002528:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	4b92      	ldr	r3, [pc, #584]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1e9      	bne.n	800250c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80a6 	beq.w	8002692 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254a:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10d      	bne.n	8002572 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a87      	ldr	r2, [pc, #540]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	61d3      	str	r3, [r2, #28]
 8002562:	4b85      	ldr	r3, [pc, #532]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b82      	ldr	r3, [pc, #520]	; (800277c <HAL_RCC_OscConfig+0x4c8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d118      	bne.n	80025b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257e:	4b7f      	ldr	r3, [pc, #508]	; (800277c <HAL_RCC_OscConfig+0x4c8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a7e      	ldr	r2, [pc, #504]	; (800277c <HAL_RCC_OscConfig+0x4c8>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7fe feef 	bl	800136c <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002592:	f7fe feeb 	bl	800136c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b64      	cmp	r3, #100	; 0x64
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e103      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	4b75      	ldr	r3, [pc, #468]	; (800277c <HAL_RCC_OscConfig+0x4c8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_OscConfig+0x312>
 80025b8:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4a6e      	ldr	r2, [pc, #440]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6213      	str	r3, [r2, #32]
 80025c4:	e02d      	b.n	8002622 <HAL_RCC_OscConfig+0x36e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x334>
 80025ce:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4a69      	ldr	r2, [pc, #420]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	6213      	str	r3, [r2, #32]
 80025da:	4b67      	ldr	r3, [pc, #412]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	4a66      	ldr	r2, [pc, #408]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	f023 0304 	bic.w	r3, r3, #4
 80025e4:	6213      	str	r3, [r2, #32]
 80025e6:	e01c      	b.n	8002622 <HAL_RCC_OscConfig+0x36e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d10c      	bne.n	800260a <HAL_RCC_OscConfig+0x356>
 80025f0:	4b61      	ldr	r3, [pc, #388]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4a60      	ldr	r2, [pc, #384]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	f043 0304 	orr.w	r3, r3, #4
 80025fa:	6213      	str	r3, [r2, #32]
 80025fc:	4b5e      	ldr	r3, [pc, #376]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4a5d      	ldr	r2, [pc, #372]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6213      	str	r3, [r2, #32]
 8002608:	e00b      	b.n	8002622 <HAL_RCC_OscConfig+0x36e>
 800260a:	4b5b      	ldr	r3, [pc, #364]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4a5a      	ldr	r2, [pc, #360]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	6213      	str	r3, [r2, #32]
 8002616:	4b58      	ldr	r3, [pc, #352]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4a57      	ldr	r2, [pc, #348]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	f023 0304 	bic.w	r3, r3, #4
 8002620:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d015      	beq.n	8002656 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262a:	f7fe fe9f 	bl	800136c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7fe fe9b 	bl	800136c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e0b1      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002648:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ee      	beq.n	8002632 <HAL_RCC_OscConfig+0x37e>
 8002654:	e014      	b.n	8002680 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002656:	f7fe fe89 	bl	800136c <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265e:	f7fe fe85 	bl	800136c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f241 3288 	movw	r2, #5000	; 0x1388
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e09b      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	4b40      	ldr	r3, [pc, #256]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ee      	bne.n	800265e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d105      	bne.n	8002692 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002686:	4b3c      	ldr	r3, [pc, #240]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a3b      	ldr	r2, [pc, #236]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002690:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8087 	beq.w	80027aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269c:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d061      	beq.n	800276c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d146      	bne.n	800273e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b0:	4b33      	ldr	r3, [pc, #204]	; (8002780 <HAL_RCC_OscConfig+0x4cc>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b6:	f7fe fe59 	bl	800136c <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026be:	f7fe fe55 	bl	800136c <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e06d      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d0:	4b29      	ldr	r3, [pc, #164]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d108      	bne.n	80026f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4921      	ldr	r1, [pc, #132]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f8:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a19      	ldr	r1, [r3, #32]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	430b      	orrs	r3, r1
 800270a:	491b      	ldr	r1, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002710:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x4cc>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002716:	f7fe fe29 	bl	800136c <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271e:	f7fe fe25 	bl	800136c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e03d      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x46a>
 800273c:	e035      	b.n	80027aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_RCC_OscConfig+0x4cc>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe fe12 	bl	800136c <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe fe0e 	bl	800136c <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e026      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x498>
 800276a:	e01e      	b.n	80027aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d107      	bne.n	8002784 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e019      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
 8002778:	40021000 	.word	0x40021000
 800277c:	40007000 	.word	0x40007000
 8002780:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_OscConfig+0x500>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	429a      	cmp	r2, r3
 8002796:	d106      	bne.n	80027a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000

080027b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0d0      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027cc:	4b6a      	ldr	r3, [pc, #424]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d910      	bls.n	80027fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b67      	ldr	r3, [pc, #412]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 0207 	bic.w	r2, r3, #7
 80027e2:	4965      	ldr	r1, [pc, #404]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ea:	4b63      	ldr	r3, [pc, #396]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d001      	beq.n	80027fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0b8      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d020      	beq.n	800284a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002814:	4b59      	ldr	r3, [pc, #356]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a58      	ldr	r2, [pc, #352]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800281e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800282c:	4b53      	ldr	r3, [pc, #332]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a52      	ldr	r2, [pc, #328]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002836:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002838:	4b50      	ldr	r3, [pc, #320]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	494d      	ldr	r1, [pc, #308]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d040      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b47      	ldr	r3, [pc, #284]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d115      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e07f      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	4b41      	ldr	r3, [pc, #260]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e073      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	4b3d      	ldr	r3, [pc, #244]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e06b      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002896:	4b39      	ldr	r3, [pc, #228]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f023 0203 	bic.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4936      	ldr	r1, [pc, #216]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a8:	f7fe fd60 	bl	800136c <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b0:	f7fe fd5c 	bl	800136c <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e053      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 020c 	and.w	r2, r3, #12
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d1eb      	bne.n	80028b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d210      	bcs.n	8002908 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	4922      	ldr	r1, [pc, #136]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e032      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4916      	ldr	r1, [pc, #88]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	490e      	ldr	r1, [pc, #56]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	4313      	orrs	r3, r2
 8002944:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002946:	f000 f821 	bl	800298c <HAL_RCC_GetSysClockFreq>
 800294a:	4602      	mov	r2, r0
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	490a      	ldr	r1, [pc, #40]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 8002958:	5ccb      	ldrb	r3, [r1, r3]
 800295a:	fa22 f303 	lsr.w	r3, r2, r3
 800295e:	4a09      	ldr	r2, [pc, #36]	; (8002984 <HAL_RCC_ClockConfig+0x1cc>)
 8002960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_RCC_ClockConfig+0x1d0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fcbe 	bl	80012e8 <HAL_InitTick>

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40022000 	.word	0x40022000
 800297c:	40021000 	.word	0x40021000
 8002980:	08002c50 	.word	0x08002c50
 8002984:	20000004 	.word	0x20000004
 8002988:	20000008 	.word	0x20000008

0800298c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029a6:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x94>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d002      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x30>
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d003      	beq.n	80029c2 <HAL_RCC_GetSysClockFreq+0x36>
 80029ba:	e027      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x98>)
 80029be:	613b      	str	r3, [r7, #16]
      break;
 80029c0:	e027      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	0c9b      	lsrs	r3, r3, #18
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029cc:	5cd3      	ldrb	r3, [r2, r3]
 80029ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d010      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x94>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	0c5b      	lsrs	r3, r3, #17
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xa0>)
 80029e6:	5cd3      	ldrb	r3, [r2, r3]
 80029e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ee:	fb03 f202 	mul.w	r2, r3, r2
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	e004      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	613b      	str	r3, [r7, #16]
      break;
 8002a0a:	e002      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a0e:	613b      	str	r3, [r7, #16]
      break;
 8002a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a12:	693b      	ldr	r3, [r7, #16]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	371c      	adds	r7, #28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000
 8002a24:	007a1200 	.word	0x007a1200
 8002a28:	08002c68 	.word	0x08002c68
 8002a2c:	08002c78 	.word	0x08002c78
 8002a30:	003d0900 	.word	0x003d0900

08002a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a38:	4b02      	ldr	r3, [pc, #8]	; (8002a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	20000004 	.word	0x20000004

08002a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a4c:	f7ff fff2 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	08002c60 	.word	0x08002c60

08002a70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <RCC_Delay+0x34>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <RCC_Delay+0x38>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	0a5b      	lsrs	r3, r3, #9
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a8c:	bf00      	nop
  }
  while (Delay --);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1e5a      	subs	r2, r3, #1
 8002a92:	60fa      	str	r2, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f9      	bne.n	8002a8c <RCC_Delay+0x1c>
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	20000004 	.word	0x20000004
 8002aa8:	10624dd3 	.word	0x10624dd3

08002aac <__libc_init_array>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	2600      	movs	r6, #0
 8002ab0:	4d0c      	ldr	r5, [pc, #48]	; (8002ae4 <__libc_init_array+0x38>)
 8002ab2:	4c0d      	ldr	r4, [pc, #52]	; (8002ae8 <__libc_init_array+0x3c>)
 8002ab4:	1b64      	subs	r4, r4, r5
 8002ab6:	10a4      	asrs	r4, r4, #2
 8002ab8:	42a6      	cmp	r6, r4
 8002aba:	d109      	bne.n	8002ad0 <__libc_init_array+0x24>
 8002abc:	f000 f822 	bl	8002b04 <_init>
 8002ac0:	2600      	movs	r6, #0
 8002ac2:	4d0a      	ldr	r5, [pc, #40]	; (8002aec <__libc_init_array+0x40>)
 8002ac4:	4c0a      	ldr	r4, [pc, #40]	; (8002af0 <__libc_init_array+0x44>)
 8002ac6:	1b64      	subs	r4, r4, r5
 8002ac8:	10a4      	asrs	r4, r4, #2
 8002aca:	42a6      	cmp	r6, r4
 8002acc:	d105      	bne.n	8002ada <__libc_init_array+0x2e>
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
 8002ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad4:	4798      	blx	r3
 8002ad6:	3601      	adds	r6, #1
 8002ad8:	e7ee      	b.n	8002ab8 <__libc_init_array+0xc>
 8002ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ade:	4798      	blx	r3
 8002ae0:	3601      	adds	r6, #1
 8002ae2:	e7f2      	b.n	8002aca <__libc_init_array+0x1e>
 8002ae4:	08002c7c 	.word	0x08002c7c
 8002ae8:	08002c7c 	.word	0x08002c7c
 8002aec:	08002c7c 	.word	0x08002c7c
 8002af0:	08002c80 	.word	0x08002c80

08002af4 <memset>:
 8002af4:	4603      	mov	r3, r0
 8002af6:	4402      	add	r2, r0
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d100      	bne.n	8002afe <memset+0xa>
 8002afc:	4770      	bx	lr
 8002afe:	f803 1b01 	strb.w	r1, [r3], #1
 8002b02:	e7f9      	b.n	8002af8 <memset+0x4>

08002b04 <_init>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr

08002b10 <_fini>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr
