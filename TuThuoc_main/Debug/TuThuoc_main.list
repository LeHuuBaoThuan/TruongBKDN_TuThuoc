
TuThuoc_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080032d8  080032d8  000132d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f4  080034f4  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  080034f4  080034f4  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034f4  080034f4  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034f4  080034f4  000134f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  080034fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000038  08003534  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003534  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008862  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001919  00000000  00000000  000288c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0002a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002a9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170e7  00000000  00000000  0002b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0a9  00000000  00000000  00042187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000820c4  00000000  00000000  0004d230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf2f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e10  00000000  00000000  000cf344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	080032c0 	.word	0x080032c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	080032c0 	.word	0x080032c0

0800014c <CLCD_Delay>:
//************************** Low Level Function ****************************************************************//
uint8_t currentline;
uint8_t Xcursor,Ycursor,countWriteChar,CurrentWriteChar;
CLCD_I2C_Name LCD1;
static void CLCD_Delay(uint16_t Time)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	4618      	mov	r0, r3
 800015a:	f001 fcc1 	bl	8001ae0 <HAL_Delay>
}
 800015e:	bf00      	nop
 8000160:	3708      	adds	r7, #8
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}

08000166 <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b086      	sub	sp, #24
 800016a:	af02      	add	r7, sp, #8
 800016c:	6078      	str	r0, [r7, #4]
 800016e:	460b      	mov	r3, r1
 8000170:	70fb      	strb	r3, [r7, #3]
 8000172:	4613      	mov	r3, r2
 8000174:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000176:	78fb      	ldrb	r3, [r7, #3]
 8000178:	f023 030f 	bic.w	r3, r3, #15
 800017c:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 800017e:	78fb      	ldrb	r3, [r7, #3]
 8000180:	011b      	lsls	r3, r3, #4
 8000182:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	7adb      	ldrb	r3, [r3, #11]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d007      	beq.n	800019c <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	f043 0308 	orr.w	r3, r3, #8
 8000192:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 8000194:	7bbb      	ldrb	r3, [r7, #14]
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 800019c:	78bb      	ldrb	r3, [r7, #2]
 800019e:	2b01      	cmp	r3, #1
 80001a0:	d108      	bne.n	80001b4 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001a2:	7bfb      	ldrb	r3, [r7, #15]
 80001a4:	f043 0301 	orr.w	r3, r3, #1
 80001a8:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001aa:	7bbb      	ldrb	r3, [r7, #14]
 80001ac:	f043 0301 	orr.w	r3, r3, #1
 80001b0:	73bb      	strb	r3, [r7, #14]
 80001b2:	e00a      	b.n	80001ca <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001b4:	78bb      	ldrb	r3, [r7, #2]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d107      	bne.n	80001ca <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	f023 0301 	bic.w	r3, r3, #1
 80001c0:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001c2:	7bbb      	ldrb	r3, [r7, #14]
 80001c4:	f023 0301 	bic.w	r3, r3, #1
 80001c8:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f043 0304 	orr.w	r3, r3, #4
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f7ff ffb9 	bl	800014c <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001da:	7bfb      	ldrb	r3, [r7, #15]
 80001dc:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001de:	7bbb      	ldrb	r3, [r7, #14]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffaf 	bl	800014c <CLCD_Delay>
	Data_I2C[3] = Data_L;
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	6818      	ldr	r0, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	791b      	ldrb	r3, [r3, #4]
 80001fa:	b299      	uxth	r1, r3
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2304      	movs	r3, #4
 8000208:	f002 f8c4 	bl	8002394 <HAL_I2C_Master_Transmit>

}
 800020c:	bf00      	nop
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <CLCD_I2C_Init>:
//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	4611      	mov	r1, r2
 8000220:	461a      	mov	r2, r3
 8000222:	460b      	mov	r3, r1
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	4613      	mov	r3, r2
 8000228:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	68ba      	ldr	r2, [r7, #8]
 800022e:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	79fa      	ldrb	r2, [r7, #7]
 8000234:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	79ba      	ldrb	r2, [r7, #6]
 800023a:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	7e3a      	ldrb	r2, [r7, #24]
 8000240:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2228      	movs	r2, #40	; 0x28
 8000246:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2206      	movs	r2, #6
 800024c:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	220c      	movs	r2, #12
 8000252:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	2214      	movs	r2, #20
 8000258:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	2208      	movs	r2, #8
 800025e:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000260:	2032      	movs	r0, #50	; 0x32
 8000262:	f7ff ff73 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000266:	2200      	movs	r2, #0
 8000268:	2133      	movs	r1, #51	; 0x33
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f7ff ff7b 	bl	8000166 <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000270:	2200      	movs	r2, #0
 8000272:	2133      	movs	r1, #51	; 0x33
 8000274:	68f8      	ldr	r0, [r7, #12]
 8000276:	f7ff ff76 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800027a:	2005      	movs	r0, #5
 800027c:	f7ff ff66 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000280:	2200      	movs	r2, #0
 8000282:	2132      	movs	r1, #50	; 0x32
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	f7ff ff6e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028a:	2005      	movs	r0, #5
 800028c:	f7ff ff5e 	bl	800014c <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8000290:	2200      	movs	r2, #0
 8000292:	2120      	movs	r1, #32
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f7ff ff66 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029a:	2005      	movs	r0, #5
 800029c:	f7ff ff56 	bl	800014c <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	79db      	ldrb	r3, [r3, #7]
 80002a4:	2200      	movs	r2, #0
 80002a6:	4619      	mov	r1, r3
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff5c 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	7a1b      	ldrb	r3, [r3, #8]
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	68f8      	ldr	r0, [r7, #12]
 80002b8:	f7ff ff55 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	7a5b      	ldrb	r3, [r3, #9]
 80002c0:	2200      	movs	r2, #0
 80002c2:	4619      	mov	r1, r3
 80002c4:	68f8      	ldr	r0, [r7, #12]
 80002c6:	f7ff ff4e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	7a9b      	ldrb	r3, [r3, #10]
 80002ce:	2200      	movs	r2, #0
 80002d0:	4619      	mov	r1, r3
 80002d2:	68f8      	ldr	r0, [r7, #12]
 80002d4:	f7ff ff47 	bl	8000166 <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002d8:	2200      	movs	r2, #0
 80002da:	2101      	movs	r1, #1
 80002dc:	68f8      	ldr	r0, [r7, #12]
 80002de:	f7ff ff42 	bl	8000166 <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2102      	movs	r1, #2
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff3d 	bl	8000166 <CLCD_WriteI2C>
}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
 8000300:	4613      	mov	r3, r2
 8000302:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 8000304:	2300      	movs	r3, #0
 8000306:	73fb      	strb	r3, [r7, #15]
	if(Xpos >= LCD->COLUMS)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	78fa      	ldrb	r2, [r7, #3]
 800030e:	429a      	cmp	r2, r3
 8000310:	d303      	bcc.n	800031a <CLCD_I2C_SetCursor+0x26>
	{
		Xpos = LCD->COLUMS - 1;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	795b      	ldrb	r3, [r3, #5]
 8000316:	3b01      	subs	r3, #1
 8000318:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	799b      	ldrb	r3, [r3, #6]
 800031e:	78ba      	ldrb	r2, [r7, #2]
 8000320:	429a      	cmp	r2, r3
 8000322:	d303      	bcc.n	800032c <CLCD_I2C_SetCursor+0x38>
	{
		Ypos = LCD->ROWS -1;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	799b      	ldrb	r3, [r3, #6]
 8000328:	3b01      	subs	r3, #1
 800032a:	70bb      	strb	r3, [r7, #2]
	}
	if(Ypos == 0)
 800032c:	78bb      	ldrb	r3, [r7, #2]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d102      	bne.n	8000338 <CLCD_I2C_SetCursor+0x44>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	e013      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 1)
 8000338:	78bb      	ldrb	r3, [r7, #2]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d103      	bne.n	8000346 <CLCD_I2C_SetCursor+0x52>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800033e:	78fb      	ldrb	r3, [r7, #3]
 8000340:	3340      	adds	r3, #64	; 0x40
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	e00c      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 2)
 8000346:	78bb      	ldrb	r3, [r7, #2]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d103      	bne.n	8000354 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x10 + Xpos;
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	3310      	adds	r3, #16
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	e005      	b.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	}
	else if(Ypos == 3)
 8000354:	78bb      	ldrb	r3, [r7, #2]
 8000356:	2b03      	cmp	r3, #3
 8000358:	d102      	bne.n	8000360 <CLCD_I2C_SetCursor+0x6c>
	{
		DRAM_ADDRESS = 0x50 + Xpos;
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	3350      	adds	r3, #80	; 0x50
 800035e:	73fb      	strb	r3, [r7, #15]
	}
	Xcursor = Xpos;
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <CLCD_I2C_SetCursor+0xa4>)
 8000362:	78fb      	ldrb	r3, [r7, #3]
 8000364:	7013      	strb	r3, [r2, #0]

	Ycursor = Ypos;
 8000366:	4a0d      	ldr	r2, [pc, #52]	; (800039c <CLCD_I2C_SetCursor+0xa8>)
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	7013      	strb	r3, [r2, #0]
	currentline = Ycursor;
 800036c:	4b0b      	ldr	r3, [pc, #44]	; (800039c <CLCD_I2C_SetCursor+0xa8>)
 800036e:	781a      	ldrb	r2, [r3, #0]
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <CLCD_I2C_SetCursor+0xac>)
 8000372:	701a      	strb	r2, [r3, #0]
	countWriteChar = Xcursor;
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <CLCD_I2C_SetCursor+0xa4>)
 8000376:	781a      	ldrb	r2, [r3, #0]
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <CLCD_I2C_SetCursor+0xb0>)
 800037a:	701a      	strb	r2, [r3, #0]
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2200      	movs	r2, #0
 8000386:	4619      	mov	r1, r3
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff feec 	bl	8000166 <CLCD_WriteI2C>
}
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000055 	.word	0x20000055
 800039c:	20000056 	.word	0x20000056
 80003a0:	20000054 	.word	0x20000054
 80003a4:	20000057 	.word	0x20000057

080003a8 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2201      	movs	r2, #1
 80003b8:	4619      	mov	r1, r3
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f7ff fed3 	bl	8000166 <CLCD_WriteI2C>
	countWriteChar++;
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003ca:	701a      	strb	r2, [r3, #0]
	if (CurrentWriteChar)
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <CLCD_I2C_WriteChar+0x98>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d02b      	beq.n	800042c <CLCD_I2C_WriteChar+0x84>
	{
	if (countWriteChar ==20)
 80003d4:	4b19      	ldr	r3, [pc, #100]	; (800043c <CLCD_I2C_WriteChar+0x94>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b14      	cmp	r3, #20
 80003da:	d127      	bne.n	800042c <CLCD_I2C_WriteChar+0x84>
	{
	switch(currentline)
 80003dc:	4b19      	ldr	r3, [pc, #100]	; (8000444 <CLCD_I2C_WriteChar+0x9c>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d825      	bhi.n	8000430 <CLCD_I2C_WriteChar+0x88>
 80003e4:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <CLCD_I2C_WriteChar+0x44>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	080003fd 	.word	0x080003fd
 80003f0:	08000409 	.word	0x08000409
 80003f4:	08000415 	.word	0x08000415
 80003f8:	08000421 	.word	0x08000421
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2100      	movs	r1, #0
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 8000402:	f7ff ff77 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 8000406:	e014      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 8000408:	2202      	movs	r2, #2
 800040a:	2100      	movs	r1, #0
 800040c:	480e      	ldr	r0, [pc, #56]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 800040e:	f7ff ff71 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 8000412:	e00e      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 8000414:	2203      	movs	r2, #3
 8000416:	2100      	movs	r1, #0
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 800041a:	f7ff ff6b 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 800041e:	e008      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	2100      	movs	r1, #0
 8000424:	4808      	ldr	r0, [pc, #32]	; (8000448 <CLCD_I2C_WriteChar+0xa0>)
 8000426:	f7ff ff65 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 800042a:	e002      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
				default:
								break;
			}
		}
 800042c:	bf00      	nop
 800042e:	e000      	b.n	8000432 <CLCD_I2C_WriteChar+0x8a>
								break;
 8000430:	bf00      	nop
	}
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000057 	.word	0x20000057
 8000440:	20000058 	.word	0x20000058
 8000444:	20000054 	.word	0x20000054
 8000448:	2000005c 	.word	0x2000005c

0800044c <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
	while (*String)
 8000456:	e04a      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
	{
	CurrentWriteChar=0;
 8000458:	4b2b      	ldr	r3, [pc, #172]	; (8000508 <CLCD_I2C_WriteString+0xbc>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	e00e      	b.n	8000482 <CLCD_I2C_WriteString+0x36>
		{
			if (*String)
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d012      	beq.n	8000492 <CLCD_I2C_WriteString+0x46>
			{
				CLCD_I2C_WriteChar(LCD, *String++);
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	1c5a      	adds	r2, r3, #1
 8000470:	603a      	str	r2, [r7, #0]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4619      	mov	r1, r3
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f7ff ff96 	bl	80003a8 <CLCD_I2C_WriteChar>
	for (uint8_t i=0;i<19-Xcursor+1;i++)
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	3301      	adds	r3, #1
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	7bfa      	ldrb	r2, [r7, #15]
 8000484:	4b21      	ldr	r3, [pc, #132]	; (800050c <CLCD_I2C_WriteString+0xc0>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f1c3 0314 	rsb	r3, r3, #20
 800048c:	429a      	cmp	r2, r3
 800048e:	dbe9      	blt.n	8000464 <CLCD_I2C_WriteString+0x18>
 8000490:	e000      	b.n	8000494 <CLCD_I2C_WriteString+0x48>
			}
			else break;
 8000492:	bf00      	nop
		}
		if (*String)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d02d      	beq.n	80004f8 <CLCD_I2C_WriteString+0xac>
		{
			switch(currentline)
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <CLCD_I2C_WriteString+0xc4>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d823      	bhi.n	80004ec <CLCD_I2C_WriteString+0xa0>
 80004a4:	a201      	add	r2, pc, #4	; (adr r2, 80004ac <CLCD_I2C_WriteString+0x60>)
 80004a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004aa:	bf00      	nop
 80004ac:	080004bd 	.word	0x080004bd
 80004b0:	080004c9 	.word	0x080004c9
 80004b4:	080004d5 	.word	0x080004d5
 80004b8:	080004e1 	.word	0x080004e1
			{
				case 0:	CLCD_I2C_SetCursor(&LCD1, 0, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2100      	movs	r1, #0
 80004c0:	4814      	ldr	r0, [pc, #80]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004c2:	f7ff ff17 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004c6:	e012      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 1:	CLCD_I2C_SetCursor(&LCD1, 0, 2);
 80004c8:	2202      	movs	r2, #2
 80004ca:	2100      	movs	r1, #0
 80004cc:	4811      	ldr	r0, [pc, #68]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004ce:	f7ff ff11 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004d2:	e00c      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 2:	CLCD_I2C_SetCursor(&LCD1, 0, 3);
 80004d4:	2203      	movs	r2, #3
 80004d6:	2100      	movs	r1, #0
 80004d8:	480e      	ldr	r0, [pc, #56]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004da:	f7ff ff0b 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004de:	e006      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				case 3:	CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2100      	movs	r1, #0
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <CLCD_I2C_WriteString+0xc8>)
 80004e6:	f7ff ff05 	bl	80002f4 <CLCD_I2C_SetCursor>
								break;
 80004ea:	e000      	b.n	80004ee <CLCD_I2C_WriteString+0xa2>
				default:
								break;
 80004ec:	bf00      	nop
	while (*String)
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d1b0      	bne.n	8000458 <CLCD_I2C_WriteString+0xc>
 80004f6:	e000      	b.n	80004fa <CLCD_I2C_WriteString+0xae>
			}
		}
		else break;
 80004f8:	bf00      	nop

		}
	CurrentWriteChar=1;
 80004fa:	4b03      	ldr	r3, [pc, #12]	; (8000508 <CLCD_I2C_WriteString+0xbc>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000058 	.word	0x20000058
 800050c:	20000055 	.word	0x20000055
 8000510:	20000054 	.word	0x20000054
 8000514:	2000005c 	.word	0x2000005c

08000518 <CLCD_I2C_Clear>:
void CLCD_I2C_Clear(CLCD_I2C_Name* LCD)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8000520:	2200      	movs	r2, #0
 8000522:	2101      	movs	r1, #1
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff fe1e 	bl	8000166 <CLCD_WriteI2C>
	CLCD_Delay(5);
 800052a:	2005      	movs	r0, #5
 800052c:	f7ff fe0e 	bl	800014c <CLCD_Delay>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <KeyPad_Init>:
void KeyPad_Init(	GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD,
					GPIO_TypeDef* C_port0, GPIO_TypeDef* C_port1, GPIO_TypeDef* C_port2, GPIO_TypeDef* C_port3,\
					uint16_t C_pin0, uint16_t C_pin1, uint16_t C_pin2, uint16_t C_pin3,\
					GPIO_TypeDef* R_port0, GPIO_TypeDef* R_port1, GPIO_TypeDef* R_port2, GPIO_TypeDef* R_port3,\
					uint16_t R_pin0, uint16_t R_pin1, uint16_t R_pin2, uint16_t R_pin3)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	603b      	str	r3, [r7, #0]
	//OUTPUT
  COL_KEY_PAD->PORT.GPIO0 = C_port0;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
  COL_KEY_PAD->PORT.GPIO1 = C_port1;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	683a      	ldr	r2, [r7, #0]
 8000550:	605a      	str	r2, [r3, #4]
  COL_KEY_PAD->PORT.GPIO2 = C_port2;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	69ba      	ldr	r2, [r7, #24]
 8000556:	609a      	str	r2, [r3, #8]
  COL_KEY_PAD->PORT.GPIO3 = C_port3;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	69fa      	ldr	r2, [r7, #28]
 800055c:	60da      	str	r2, [r3, #12]

  COL_KEY_PAD->PIN.GPIO_PIN_A = C_pin0;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	8c3a      	ldrh	r2, [r7, #32]
 8000562:	821a      	strh	r2, [r3, #16]
  COL_KEY_PAD->PIN.GPIO_PIN_B = C_pin1;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000568:	825a      	strh	r2, [r3, #18]
  COL_KEY_PAD->PIN.GPIO_PIN_C = C_pin2;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800056e:	829a      	strh	r2, [r3, #20]
  COL_KEY_PAD->PIN.GPIO_PIN_D = C_pin3;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000574:	82da      	strh	r2, [r3, #22]
  //INPUT
  ROW_KEY_PAD->PORT.GPIO0 = R_port0;
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800057a:	601a      	str	r2, [r3, #0]
  ROW_KEY_PAD->PORT.GPIO1 = R_port1;
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000580:	605a      	str	r2, [r3, #4]
  ROW_KEY_PAD->PORT.GPIO2 = R_port2;
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000586:	609a      	str	r2, [r3, #8]
  ROW_KEY_PAD->PORT.GPIO3 = R_port3;
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800058c:	60da      	str	r2, [r3, #12]

  ROW_KEY_PAD->PIN.GPIO_PIN_A = R_pin0;
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000594:	821a      	strh	r2, [r3, #16]
  ROW_KEY_PAD->PIN.GPIO_PIN_B = R_pin1;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800059c:	825a      	strh	r2, [r3, #18]
  ROW_KEY_PAD->PIN.GPIO_PIN_C = R_pin2;
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80005a4:	829a      	strh	r2, [r3, #20]
  ROW_KEY_PAD->PIN.GPIO_PIN_D = R_pin3;
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80005ac:	82da      	strh	r2, [r3, #22]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <Check_Keypad_Column>:
  +) RETURN:
    -Keypad_Button_Values[Row-x][x+1]   : Keypad_Button_Values
    -KEYPAD_NOT_PRESSED                 : "\0" (Không ấn nút)
*/
static char Check_Keypad_Column(GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main, uint8_t Row)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	70fb      	strb	r3, [r7, #3]
	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO0, ROW_KEY_PAD_main->PIN.GPIO_PIN_A)) //If ROW_1 is LOW
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	8a1b      	ldrh	r3, [r3, #16]
 80005cc:	4619      	mov	r1, r3
 80005ce:	4610      	mov	r0, r2
 80005d0:	f001 fd3c 	bl	800204c <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d105      	bne.n	80005e6 <Check_Keypad_Column+0x2e>
	{
		return Keypad_Button_Values[Row-1][0];
 80005da:	78fb      	ldrb	r3, [r7, #3]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a1f      	ldr	r2, [pc, #124]	; (800065c <Check_Keypad_Column+0xa4>)
 80005e0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80005e4:	e036      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO1, ROW_KEY_PAD_main->PIN.GPIO_PIN_B)) //If ROW_2 is LOW
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	8a5b      	ldrh	r3, [r3, #18]
 80005ee:	4619      	mov	r1, r3
 80005f0:	4610      	mov	r0, r2
 80005f2:	f001 fd2b 	bl	800204c <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d106      	bne.n	800060a <Check_Keypad_Column+0x52>
	{
		return Keypad_Button_Values[Row-1][1];
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	3b01      	subs	r3, #1
 8000600:	4a16      	ldr	r2, [pc, #88]	; (800065c <Check_Keypad_Column+0xa4>)
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	785b      	ldrb	r3, [r3, #1]
 8000608:	e024      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}

    if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO2, ROW_KEY_PAD_main->PIN.GPIO_PIN_C)) //If ROW_3 is LOW
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689a      	ldr	r2, [r3, #8]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	8a9b      	ldrh	r3, [r3, #20]
 8000612:	4619      	mov	r1, r3
 8000614:	4610      	mov	r0, r2
 8000616:	f001 fd19 	bl	800204c <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d106      	bne.n	800062e <Check_Keypad_Column+0x76>
	{
		return Keypad_Button_Values[Row-1][2];
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	3b01      	subs	r3, #1
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <Check_Keypad_Column+0xa4>)
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	4413      	add	r3, r2
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	e012      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}

	if(!HAL_GPIO_ReadPin(ROW_KEY_PAD_main->PORT.GPIO3, ROW_KEY_PAD_main->PIN.GPIO_PIN_D)) //If ROW_4 is LOW
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	68da      	ldr	r2, [r3, #12]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	8adb      	ldrh	r3, [r3, #22]
 8000636:	4619      	mov	r1, r3
 8000638:	4610      	mov	r0, r2
 800063a:	f001 fd07 	bl	800204c <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d106      	bne.n	8000652 <Check_Keypad_Column+0x9a>
	{
		return Keypad_Button_Values[Row-1][3];
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <Check_Keypad_Column+0xa4>)
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	78db      	ldrb	r3, [r3, #3]
 8000650:	e000      	b.n	8000654 <Check_Keypad_Column+0x9c>
	}
	return KEYPAD_NOT_PRESSED;                   //If NO Key is pressed
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	080034b8 	.word	0x080034b8

08000660 <KEYPAD_Read>:
  +) RETURN:
    -char check                                  	: const char Keypad_Button_Values[x][y]
    -KEYPAD_NOT_PRESSED                     		: '\0' {reason of failed)
*/
static char KEYPAD_Read(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
    char check = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]
    /*Set COL_1 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_RESET);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	8a1b      	ldrh	r3, [r3, #16]
 8000676:	2200      	movs	r2, #0
 8000678:	4619      	mov	r1, r3
 800067a:	f001 fcfe 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6858      	ldr	r0, [r3, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	8a5b      	ldrh	r3, [r3, #18]
 8000686:	2201      	movs	r2, #1
 8000688:	4619      	mov	r1, r3
 800068a:	f001 fcf6 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6898      	ldr	r0, [r3, #8]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	8a9b      	ldrh	r3, [r3, #20]
 8000696:	2201      	movs	r2, #1
 8000698:	4619      	mov	r1, r3
 800069a:	f001 fcee 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	68d8      	ldr	r0, [r3, #12]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	8adb      	ldrh	r3, [r3, #22]
 80006a6:	2201      	movs	r2, #1
 80006a8:	4619      	mov	r1, r3
 80006aa:	f001 fce6 	bl	800207a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 1);
 80006ae:	2101      	movs	r1, #1
 80006b0:	6838      	ldr	r0, [r7, #0]
 80006b2:	f7ff ff81 	bl	80005b8 <Check_Keypad_Column>
 80006b6:	4603      	mov	r3, r0
 80006b8:	73fb      	strb	r3, [r7, #15]
    if(check)
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <KEYPAD_Read+0x64>
    {
    	return check;
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	e081      	b.n	80007c8 <KEYPAD_Read+0x168>
    }
    /*Set COL_2 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	8a1b      	ldrh	r3, [r3, #16]
 80006cc:	2201      	movs	r2, #1
 80006ce:	4619      	mov	r1, r3
 80006d0:	f001 fcd3 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_RESET);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6858      	ldr	r0, [r3, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	8a5b      	ldrh	r3, [r3, #18]
 80006dc:	2200      	movs	r2, #0
 80006de:	4619      	mov	r1, r3
 80006e0:	f001 fccb 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6898      	ldr	r0, [r3, #8]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	8a9b      	ldrh	r3, [r3, #20]
 80006ec:	2201      	movs	r2, #1
 80006ee:	4619      	mov	r1, r3
 80006f0:	f001 fcc3 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	68d8      	ldr	r0, [r3, #12]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	8adb      	ldrh	r3, [r3, #22]
 80006fc:	2201      	movs	r2, #1
 80006fe:	4619      	mov	r1, r3
 8000700:	f001 fcbb 	bl	800207a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 2);
 8000704:	2102      	movs	r1, #2
 8000706:	6838      	ldr	r0, [r7, #0]
 8000708:	f7ff ff56 	bl	80005b8 <Check_Keypad_Column>
 800070c:	4603      	mov	r3, r0
 800070e:	73fb      	strb	r3, [r7, #15]
    if(check)
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <KEYPAD_Read+0xba>
    {
    	return check;
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	e056      	b.n	80007c8 <KEYPAD_Read+0x168>
    }
    /*Set COL_3 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	8a1b      	ldrh	r3, [r3, #16]
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	f001 fca8 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6858      	ldr	r0, [r3, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	8a5b      	ldrh	r3, [r3, #18]
 8000732:	2201      	movs	r2, #1
 8000734:	4619      	mov	r1, r3
 8000736:	f001 fca0 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_RESET);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6898      	ldr	r0, [r3, #8]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	8a9b      	ldrh	r3, [r3, #20]
 8000742:	2200      	movs	r2, #0
 8000744:	4619      	mov	r1, r3
 8000746:	f001 fc98 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_SET);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	68d8      	ldr	r0, [r3, #12]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	8adb      	ldrh	r3, [r3, #22]
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	f001 fc90 	bl	800207a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 3);
 800075a:	2103      	movs	r1, #3
 800075c:	6838      	ldr	r0, [r7, #0]
 800075e:	f7ff ff2b 	bl	80005b8 <Check_Keypad_Column>
 8000762:	4603      	mov	r3, r0
 8000764:	73fb      	strb	r3, [r7, #15]
    if(check)
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <KEYPAD_Read+0x110>
    {
    	return check;
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	e02b      	b.n	80007c8 <KEYPAD_Read+0x168>
    }
    /*Set COL_4 LOW and scan all the columns*/
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_SET);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	8a1b      	ldrh	r3, [r3, #16]
 8000778:	2201      	movs	r2, #1
 800077a:	4619      	mov	r1, r3
 800077c:	f001 fc7d 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_SET);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6858      	ldr	r0, [r3, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	8a5b      	ldrh	r3, [r3, #18]
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	f001 fc75 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_SET);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6898      	ldr	r0, [r3, #8]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	8a9b      	ldrh	r3, [r3, #20]
 8000798:	2201      	movs	r2, #1
 800079a:	4619      	mov	r1, r3
 800079c:	f001 fc6d 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_RESET);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68d8      	ldr	r0, [r3, #12]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	8adb      	ldrh	r3, [r3, #22]
 80007a8:	2200      	movs	r2, #0
 80007aa:	4619      	mov	r1, r3
 80007ac:	f001 fc65 	bl	800207a <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(ROW_KEY_PAD_main, 4);
 80007b0:	2104      	movs	r1, #4
 80007b2:	6838      	ldr	r0, [r7, #0]
 80007b4:	f7ff ff00 	bl	80005b8 <Check_Keypad_Column>
 80007b8:	4603      	mov	r3, r0
 80007ba:	73fb      	strb	r3, [r7, #15]
    if(check)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <KEYPAD_Read+0x166>
    {
    	return check;
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	e000      	b.n	80007c8 <KEYPAD_Read+0x168>
    }
    /*Key not pressed */
    return KEYPAD_NOT_PRESSED;
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <KEYPAD_Handler>:
  +) RETURN:
    -char check                                  	: const char Keypad_Button_Values[x][y]
    -KEYPAD_NOT_PRESSED                     		: '\0' {reason of failed)
*/
char KEYPAD_Handler(GPIO_COLUMN_TYPEDEF* COL_KEY_PAD, GPIO_ROW_TYPEDEF* ROW_KEY_PAD_main)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	char key = KEYPAD_Read(COL_KEY_PAD, ROW_KEY_PAD_main);;
 80007da:	6839      	ldr	r1, [r7, #0]
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff3f 	bl	8000660 <KEYPAD_Read>
 80007e2:	4603      	mov	r3, r0
 80007e4:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO0, COL_KEY_PAD->PIN.GPIO_PIN_A, GPIO_PIN_RESET);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	8a1b      	ldrh	r3, [r3, #16]
 80007ee:	2200      	movs	r2, #0
 80007f0:	4619      	mov	r1, r3
 80007f2:	f001 fc42 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO1, COL_KEY_PAD->PIN.GPIO_PIN_B, GPIO_PIN_RESET);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6858      	ldr	r0, [r3, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	8a5b      	ldrh	r3, [r3, #18]
 80007fe:	2200      	movs	r2, #0
 8000800:	4619      	mov	r1, r3
 8000802:	f001 fc3a 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO2, COL_KEY_PAD->PIN.GPIO_PIN_C, GPIO_PIN_RESET);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6898      	ldr	r0, [r3, #8]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	8a9b      	ldrh	r3, [r3, #20]
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	f001 fc32 	bl	800207a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_KEY_PAD->PORT.GPIO3, COL_KEY_PAD->PIN.GPIO_PIN_D, GPIO_PIN_RESET);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	68d8      	ldr	r0, [r3, #12]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	8adb      	ldrh	r3, [r3, #22]
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	f001 fc2a 	bl	800207a <HAL_GPIO_WritePin>
    return key;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <handler_keyIN_enterKey_DisplayLCD>:

uint8_t row_key_num = 1;
uint8_t row_key_password = 9;

STATE_KEY handler_keyIN_enterKey_DisplayLCD(CLCD_I2C_Name* LCD_user, STATE_SELECT_BUTTON_HANDLER_TYPEDEF state_button, char* key, char* password)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	460b      	mov	r3, r1
 800083e:	72fb      	strb	r3, [r7, #11]
	  if(*key != KEYPAD_NOT_PRESSED)	//when state_button = KEYPAD
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d06d      	beq.n	8000924 <handler_keyIN_enterKey_DisplayLCD+0xf4>
	  {
		  if(enter_num_pass.signal_enter_pass == PROCESSING)	// Được thay đổi trong lcd_user.c
 8000848:	4b39      	ldr	r3, [pc, #228]	; (8000930 <handler_keyIN_enterKey_DisplayLCD+0x100>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d130      	bne.n	80008b4 <handler_keyIN_enterKey_DisplayLCD+0x84>
		  {
			  CLCD_I2C_SetCursor(LCD_user, row_key_password, 2);
 8000852:	4b38      	ldr	r3, [pc, #224]	; (8000934 <handler_keyIN_enterKey_DisplayLCD+0x104>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2202      	movs	r2, #2
 8000858:	4619      	mov	r1, r3
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f7ff fd4a 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteChar(LCD_user, *key);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f7ff fd9e 	bl	80003a8 <CLCD_I2C_WriteChar>

			  password[row_key_password - 9] = *key;
 800086c:	4b31      	ldr	r3, [pc, #196]	; (8000934 <handler_keyIN_enterKey_DisplayLCD+0x104>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	3b09      	subs	r3, #9
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	4413      	add	r3, r2
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	7812      	ldrb	r2, [r2, #0]
 800087a:	701a      	strb	r2, [r3, #0]
			  row_key_password++;
 800087c:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <handler_keyIN_enterKey_DisplayLCD+0x104>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <handler_keyIN_enterKey_DisplayLCD+0x104>)
 8000886:	701a      	strb	r2, [r3, #0]
			  *key = KEYPAD_NOT_PRESSED;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]

			  if(row_key_password > SIZE_ROW_PASS)
 800088e:	4b29      	ldr	r3, [pc, #164]	; (8000934 <handler_keyIN_enterKey_DisplayLCD+0x104>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b0d      	cmp	r3, #13
 8000894:	d90c      	bls.n	80008b0 <handler_keyIN_enterKey_DisplayLCD+0x80>
			  {
//				  enter_num_pass.signal_enter_pass = NOT_DONE;

				  state_button = BUTTON;
 8000896:	2301      	movs	r3, #1
 8000898:	72fb      	strb	r3, [r7, #11]
				  /*Neu Mang hinh nhap du 5 so*/
				  /*reset mang hinh*/
				  CLCD_I2C_Clear(LCD_user);
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff fe3c 	bl	8000518 <CLCD_I2C_Clear>

				  state_star_pass = STAR;
 80008a0:	4b25      	ldr	r3, [pc, #148]	; (8000938 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
				  row_key_password = 9;
 80008a6:	4b23      	ldr	r3, [pc, #140]	; (8000934 <handler_keyIN_enterKey_DisplayLCD+0x104>)
 80008a8:	2209      	movs	r2, #9
 80008aa:	701a      	strb	r2, [r3, #0]
				  return KEY_OK;
 80008ac:	2301      	movs	r3, #1
 80008ae:	e03a      	b.n	8000926 <handler_keyIN_enterKey_DisplayLCD+0xf6>
			  }
			  else
			  {
				  return KEY_NOT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	e038      	b.n	8000926 <handler_keyIN_enterKey_DisplayLCD+0xf6>
			  }
		  }/*END if(enter_num_pass.signal_enter_pass == PROCESSING)*/
		  else if(enter_num_pass.signal_enter_num == PROCESSING)
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <handler_keyIN_enterKey_DisplayLCD+0x100>)
 80008b6:	785b      	ldrb	r3, [r3, #1]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d130      	bne.n	8000920 <handler_keyIN_enterKey_DisplayLCD+0xf0>
		  {
			  CLCD_I2C_SetCursor(LCD_user, row_key_num, 1);
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <handler_keyIN_enterKey_DisplayLCD+0x10c>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2201      	movs	r2, #1
 80008c4:	4619      	mov	r1, r3
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f7ff fd14 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteChar(LCD_user, *key);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f7ff fd68 	bl	80003a8 <CLCD_I2C_WriteChar>

			  password[row_key_num - 1] = *key;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <handler_keyIN_enterKey_DisplayLCD+0x10c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	3b01      	subs	r3, #1
 80008de:	683a      	ldr	r2, [r7, #0]
 80008e0:	4413      	add	r3, r2
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	7812      	ldrb	r2, [r2, #0]
 80008e6:	701a      	strb	r2, [r3, #0]
			  row_key_num++;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <handler_keyIN_enterKey_DisplayLCD+0x10c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <handler_keyIN_enterKey_DisplayLCD+0x10c>)
 80008f2:	701a      	strb	r2, [r3, #0]
			  *key = KEYPAD_NOT_PRESSED;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]

			  if(row_key_num > SIZE_ROW_NUM)
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <handler_keyIN_enterKey_DisplayLCD+0x10c>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d90c      	bls.n	800091c <handler_keyIN_enterKey_DisplayLCD+0xec>
			  {
//				  enter_num_pass.signal_enter_num = NOT_DONE;

				  state_button = BUTTON;
 8000902:	2301      	movs	r3, #1
 8000904:	72fb      	strb	r3, [r7, #11]
				  /*Neu Mang hinh nhap du 5 so*/
				  /*reset mang hinh*/
				  CLCD_I2C_Clear(LCD_user);
 8000906:	68f8      	ldr	r0, [r7, #12]
 8000908:	f7ff fe06 	bl	8000518 <CLCD_I2C_Clear>

				  state_star_pass = STAR;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <handler_keyIN_enterKey_DisplayLCD+0x108>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
				  row_key_num = 1;
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <handler_keyIN_enterKey_DisplayLCD+0x10c>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
				  return KEY_OK;
 8000918:	2301      	movs	r3, #1
 800091a:	e004      	b.n	8000926 <handler_keyIN_enterKey_DisplayLCD+0xf6>
			  }
			  else
			  {
				  return KEY_NOT;
 800091c:	2300      	movs	r3, #0
 800091e:	e002      	b.n	8000926 <handler_keyIN_enterKey_DisplayLCD+0xf6>
			  }
		  }/*END if(enter_num_pass.signal_enter_num == PROCESSING)*/
		  else
		  {
			  return KEY_NOT;
 8000920:	2300      	movs	r3, #0
 8000922:	e000      	b.n	8000926 <handler_keyIN_enterKey_DisplayLCD+0xf6>
		  }
	  }/*END if(*key != KEYPAD_NOT_PRESSED)*/
	  else
	  {
		  return KEY_NOT;
 8000924:	2300      	movs	r3, #0
	  }
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000004 	.word	0x20000004
 8000934:	20000001 	.word	0x20000001
 8000938:	2000006c 	.word	0x2000006c
 800093c:	20000000 	.word	0x20000000

08000940 <lcd_user_display>:
    -STATUS_DISPLAY_TYPEDEF status_display         : STATUS_1 -> STATUS_7
  +) RETURN:
    -void
*/
void lcd_user_display(CLCD_I2C_Name* LCD_user, STATUS_DISPLAY_TYPEDEF status_display)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	70fb      	strb	r3, [r7, #3]
	if(language == ENGLISH)
 800094c:	4baf      	ldr	r3, [pc, #700]	; (8000c0c <lcd_user_display+0x2cc>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	f040 8106 	bne.w	8000b62 <lcd_user_display+0x222>
	{
		if(status_display == STATUS_1)
 8000956:	78fb      	ldrb	r3, [r7, #3]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d124      	bne.n	80009a6 <lcd_user_display+0x66>
			{
				// dislay hello ! Status_Display=0
				CLCD_I2C_SetCursor(LCD_user, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fcc7 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 8000966:	49aa      	ldr	r1, [pc, #680]	; (8000c10 <lcd_user_display+0x2d0>)
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff fd6f 	bl	800044c <CLCD_I2C_WriteString>

				CLCD_I2C_SetCursor(LCD_user, 3, 1);
 800096e:	2201      	movs	r2, #1
 8000970:	2103      	movs	r1, #3
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff fcbe 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"KHOA CO KHI");
 8000978:	49a6      	ldr	r1, [pc, #664]	; (8000c14 <lcd_user_display+0x2d4>)
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff fd66 	bl	800044c <CLCD_I2C_WriteString>

				CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000980:	2202      	movs	r2, #2
 8000982:	2104      	movs	r1, #4
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff fcb5 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 800098a:	49a3      	ldr	r1, [pc, #652]	; (8000c18 <lcd_user_display+0x2d8>)
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff fd5d 	bl	800044c <CLCD_I2C_WriteString>

				CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000992:	2203      	movs	r2, #3
 8000994:	2100      	movs	r1, #0
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fcac 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Please Set Mode!");
 800099c:	499f      	ldr	r1, [pc, #636]	; (8000c1c <lcd_user_display+0x2dc>)
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff fd54 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
			CLCD_I2C_WriteString(LCD_user,"-EXIT");
		}
	}/*END if(language == ENGLISH)*/

}
 80009a4:	e222      	b.n	8000dec <lcd_user_display+0x4ac>
			else if(status_display == STATUS_2)
 80009a6:	78fb      	ldrb	r3, [r7, #3]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d124      	bne.n	80009f6 <lcd_user_display+0xb6>
				CLCD_I2C_SetCursor(LCD_user, 3, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2103      	movs	r1, #3
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff fc9f 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"SELECT MODE");
 80009b6:	499a      	ldr	r1, [pc, #616]	; (8000c20 <lcd_user_display+0x2e0>)
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff fd47 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 1);
 80009be:	2201      	movs	r2, #1
 80009c0:	2100      	movs	r1, #0
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff fc96 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"-Language");
 80009c8:	4996      	ldr	r1, [pc, #600]	; (8000c24 <lcd_user_display+0x2e4>)
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff fd3e 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 2);
 80009d0:	2202      	movs	r2, #2
 80009d2:	2100      	movs	r1, #0
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff fc8d 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"-Enter password");
 80009da:	4993      	ldr	r1, [pc, #588]	; (8000c28 <lcd_user_display+0x2e8>)
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff fd35 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 3);
 80009e2:	2203      	movs	r2, #3
 80009e4:	2100      	movs	r1, #0
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fc84 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"-Exit");
 80009ec:	498f      	ldr	r1, [pc, #572]	; (8000c2c <lcd_user_display+0x2ec>)
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff fd2c 	bl	800044c <CLCD_I2C_WriteString>
}
 80009f4:	e1fa      	b.n	8000dec <lcd_user_display+0x4ac>
			else if(status_display == STATUS_3)
 80009f6:	78fb      	ldrb	r3, [r7, #3]
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d14b      	bne.n	8000a94 <lcd_user_display+0x154>
				CLCD_I2C_SetCursor(LCD_user, 0, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff fc77 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Enter ur number:");
 8000a06:	498a      	ldr	r1, [pc, #552]	; (8000c30 <lcd_user_display+0x2f0>)
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff fd1f 	bl	800044c <CLCD_I2C_WriteString>
				if(state_star_pass == STAR)
 8000a0e:	4b89      	ldr	r3, [pc, #548]	; (8000c34 <lcd_user_display+0x2f4>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d109      	bne.n	8000a2c <lcd_user_display+0xec>
					CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff fc69 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(LCD_user,">***");
 8000a22:	4985      	ldr	r1, [pc, #532]	; (8000c38 <lcd_user_display+0x2f8>)
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff fd11 	bl	800044c <CLCD_I2C_WriteString>
 8000a2a:	e008      	b.n	8000a3e <lcd_user_display+0xfe>
					CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2100      	movs	r1, #0
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff fc5f 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(LCD_user,">");
 8000a36:	4981      	ldr	r1, [pc, #516]	; (8000c3c <lcd_user_display+0x2fc>)
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff fd07 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000a3e:	2202      	movs	r2, #2
 8000a40:	2100      	movs	r1, #0
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fc56 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"PIN: ");
 8000a48:	497d      	ldr	r1, [pc, #500]	; (8000c40 <lcd_user_display+0x300>)
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fcfe 	bl	800044c <CLCD_I2C_WriteString>
				if(state_star_pass == STAR)
 8000a50:	4b78      	ldr	r3, [pc, #480]	; (8000c34 <lcd_user_display+0x2f4>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d109      	bne.n	8000a6e <lcd_user_display+0x12e>
					CLCD_I2C_SetCursor(LCD_user, 8, 2);
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	2108      	movs	r1, #8
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fc48 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(LCD_user,">*****");
 8000a64:	4977      	ldr	r1, [pc, #476]	; (8000c44 <lcd_user_display+0x304>)
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff fcf0 	bl	800044c <CLCD_I2C_WriteString>
 8000a6c:	e008      	b.n	8000a80 <lcd_user_display+0x140>
					CLCD_I2C_SetCursor(LCD_user, 8, 2);
 8000a6e:	2202      	movs	r2, #2
 8000a70:	2108      	movs	r1, #8
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff fc3e 	bl	80002f4 <CLCD_I2C_SetCursor>
					CLCD_I2C_WriteString(LCD_user,">");
 8000a78:	4970      	ldr	r1, [pc, #448]	; (8000c3c <lcd_user_display+0x2fc>)
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff fce6 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000a80:	2203      	movs	r2, #3
 8000a82:	2100      	movs	r1, #0
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff fc35 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Exit");
 8000a8a:	496f      	ldr	r1, [pc, #444]	; (8000c48 <lcd_user_display+0x308>)
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff fcdd 	bl	800044c <CLCD_I2C_WriteString>
}
 8000a92:	e1ab      	b.n	8000dec <lcd_user_display+0x4ac>
			else if(status_display == STATUS_4)
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	d11b      	bne.n	8000ad2 <lcd_user_display+0x192>
				CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff fc28 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Password OKE!");
 8000aa4:	4969      	ldr	r1, [pc, #420]	; (8000c4c <lcd_user_display+0x30c>)
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff fcd0 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2100      	movs	r1, #0
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff fc1f 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Wait few ");
 8000ab6:	4966      	ldr	r1, [pc, #408]	; (8000c50 <lcd_user_display+0x310>)
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fcc7 	bl	800044c <CLCD_I2C_WriteString>
				CLCD_I2C_SetCursor(LCD_user, 3, 2);
 8000abe:	2202      	movs	r2, #2
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fc16 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"minutes...");
 8000ac8:	4962      	ldr	r1, [pc, #392]	; (8000c54 <lcd_user_display+0x314>)
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fcbe 	bl	800044c <CLCD_I2C_WriteString>
}
 8000ad0:	e18c      	b.n	8000dec <lcd_user_display+0x4ac>
			else if(status_display == STATUS_5)
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	2b05      	cmp	r3, #5
 8000ad6:	d11b      	bne.n	8000b10 <lcd_user_display+0x1d0>
			  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff fc09 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"Password FAIL!");
 8000ae2:	495d      	ldr	r1, [pc, #372]	; (8000c58 <lcd_user_display+0x318>)
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fcb1 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000aea:	2201      	movs	r2, #1
 8000aec:	2100      	movs	r1, #0
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff fc00 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"\"Enter\" to enter");
 8000af4:	4959      	ldr	r1, [pc, #356]	; (8000c5c <lcd_user_display+0x31c>)
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff fca8 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000afc:	2202      	movs	r2, #2
 8000afe:	2104      	movs	r1, #4
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fbf7 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"new password :<");
 8000b06:	4956      	ldr	r1, [pc, #344]	; (8000c60 <lcd_user_display+0x320>)
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff fc9f 	bl	800044c <CLCD_I2C_WriteString>
}
 8000b0e:	e16d      	b.n	8000dec <lcd_user_display+0x4ac>
			else if(status_display == STATUS_6)
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	f040 816a 	bne.w	8000dec <lcd_user_display+0x4ac>
				CLCD_I2C_SetCursor(LCD_user, 3, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2103      	movs	r1, #3
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff fbe9 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,"Language");
 8000b22:	4950      	ldr	r1, [pc, #320]	; (8000c64 <lcd_user_display+0x324>)
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fc91 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fbe0 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 8000b34:	494c      	ldr	r1, [pc, #304]	; (8000c68 <lcd_user_display+0x328>)
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff fc88 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	2100      	movs	r1, #0
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff fbd7 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"-English");
 8000b46:	4949      	ldr	r1, [pc, #292]	; (8000c6c <lcd_user_display+0x32c>)
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fc7f 	bl	800044c <CLCD_I2C_WriteString>
			  CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000b4e:	2203      	movs	r2, #3
 8000b50:	2100      	movs	r1, #0
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff fbce 	bl	80002f4 <CLCD_I2C_SetCursor>
			  CLCD_I2C_WriteString(LCD_user,"-EXIT");
 8000b58:	4945      	ldr	r1, [pc, #276]	; (8000c70 <lcd_user_display+0x330>)
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff fc76 	bl	800044c <CLCD_I2C_WriteString>
}
 8000b60:	e144      	b.n	8000dec <lcd_user_display+0x4ac>
	else if(language == VIETNAMESE)
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <lcd_user_display+0x2cc>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8140 	bne.w	8000dec <lcd_user_display+0x4ac>
		if(status_display == STATUS_1)
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d124      	bne.n	8000bbc <lcd_user_display+0x27c>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff fbbc 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TRUONG DHBK-DHDN");
 8000b7c:	4924      	ldr	r1, [pc, #144]	; (8000c10 <lcd_user_display+0x2d0>)
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff fc64 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 3, 1);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2103      	movs	r1, #3
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fbb3 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"KHOA CO KHI");
 8000b8e:	4921      	ldr	r1, [pc, #132]	; (8000c14 <lcd_user_display+0x2d4>)
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff fc5b 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000b96:	2202      	movs	r2, #2
 8000b98:	2104      	movs	r1, #4
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fbaa 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"TU THUOC");
 8000ba0:	491d      	ldr	r1, [pc, #116]	; (8000c18 <lcd_user_display+0x2d8>)
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fc52 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000ba8:	2203      	movs	r2, #3
 8000baa:	2100      	movs	r1, #0
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fba1 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Please Set Mode!");
 8000bb2:	491a      	ldr	r1, [pc, #104]	; (8000c1c <lcd_user_display+0x2dc>)
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff fc49 	bl	800044c <CLCD_I2C_WriteString>
}
 8000bba:	e117      	b.n	8000dec <lcd_user_display+0x4ac>
		else if(status_display == STATUS_2)
 8000bbc:	78fb      	ldrb	r3, [r7, #3]
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d160      	bne.n	8000c84 <lcd_user_display+0x344>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff fb94 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Lua chon che do:");
 8000bcc:	4929      	ldr	r1, [pc, #164]	; (8000c74 <lcd_user_display+0x334>)
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fc3c 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fb8b 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Ngon ngu");
 8000bde:	4926      	ldr	r1, [pc, #152]	; (8000c78 <lcd_user_display+0x338>)
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff fc33 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000be6:	2202      	movs	r2, #2
 8000be8:	2100      	movs	r1, #0
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fb82 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Nhap ma pin");
 8000bf0:	4922      	ldr	r1, [pc, #136]	; (8000c7c <lcd_user_display+0x33c>)
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff fc2a 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fb79 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-Thoat");
 8000c02:	491f      	ldr	r1, [pc, #124]	; (8000c80 <lcd_user_display+0x340>)
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff fc21 	bl	800044c <CLCD_I2C_WriteString>
}
 8000c0a:	e0ef      	b.n	8000dec <lcd_user_display+0x4ac>
 8000c0c:	2000006f 	.word	0x2000006f
 8000c10:	080032d8 	.word	0x080032d8
 8000c14:	080032ec 	.word	0x080032ec
 8000c18:	080032f8 	.word	0x080032f8
 8000c1c:	08003304 	.word	0x08003304
 8000c20:	08003318 	.word	0x08003318
 8000c24:	08003324 	.word	0x08003324
 8000c28:	08003330 	.word	0x08003330
 8000c2c:	08003340 	.word	0x08003340
 8000c30:	08003348 	.word	0x08003348
 8000c34:	2000006c 	.word	0x2000006c
 8000c38:	0800335c 	.word	0x0800335c
 8000c3c:	08003364 	.word	0x08003364
 8000c40:	08003368 	.word	0x08003368
 8000c44:	08003370 	.word	0x08003370
 8000c48:	08003378 	.word	0x08003378
 8000c4c:	08003380 	.word	0x08003380
 8000c50:	08003390 	.word	0x08003390
 8000c54:	0800339c 	.word	0x0800339c
 8000c58:	080033a8 	.word	0x080033a8
 8000c5c:	080033b8 	.word	0x080033b8
 8000c60:	080033cc 	.word	0x080033cc
 8000c64:	080033dc 	.word	0x080033dc
 8000c68:	080033e8 	.word	0x080033e8
 8000c6c:	080033f4 	.word	0x080033f4
 8000c70:	08003400 	.word	0x08003400
 8000c74:	08003408 	.word	0x08003408
 8000c78:	0800341c 	.word	0x0800341c
 8000c7c:	08003428 	.word	0x08003428
 8000c80:	08003438 	.word	0x08003438
		else if(status_display == STATUS_3)
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d14b      	bne.n	8000d22 <lcd_user_display+0x3e2>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fb30 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Nhap stt cua ban");
 8000c94:	4957      	ldr	r1, [pc, #348]	; (8000df4 <lcd_user_display+0x4b4>)
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fbd8 	bl	800044c <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000c9c:	4b56      	ldr	r3, [pc, #344]	; (8000df8 <lcd_user_display+0x4b8>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d109      	bne.n	8000cba <lcd_user_display+0x37a>
				CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2100      	movs	r1, #0
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fb22 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">***");
 8000cb0:	4952      	ldr	r1, [pc, #328]	; (8000dfc <lcd_user_display+0x4bc>)
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff fbca 	bl	800044c <CLCD_I2C_WriteString>
 8000cb8:	e008      	b.n	8000ccc <lcd_user_display+0x38c>
				CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fb18 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8000cc4:	494e      	ldr	r1, [pc, #312]	; (8000e00 <lcd_user_display+0x4c0>)
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff fbc0 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000ccc:	2202      	movs	r2, #2
 8000cce:	2100      	movs	r1, #0
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fb0f 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"PIN: ");
 8000cd6:	494b      	ldr	r1, [pc, #300]	; (8000e04 <lcd_user_display+0x4c4>)
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff fbb7 	bl	800044c <CLCD_I2C_WriteString>
			if(state_star_pass == STAR)
 8000cde:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <lcd_user_display+0x4b8>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d109      	bne.n	8000cfc <lcd_user_display+0x3bc>
				CLCD_I2C_SetCursor(LCD_user, 8, 2);
 8000ce8:	2202      	movs	r2, #2
 8000cea:	2108      	movs	r1, #8
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fb01 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">*****");
 8000cf2:	4945      	ldr	r1, [pc, #276]	; (8000e08 <lcd_user_display+0x4c8>)
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff fba9 	bl	800044c <CLCD_I2C_WriteString>
 8000cfa:	e008      	b.n	8000d0e <lcd_user_display+0x3ce>
				CLCD_I2C_SetCursor(LCD_user, 8, 2);
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	2108      	movs	r1, #8
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff faf7 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user,">");
 8000d06:	493e      	ldr	r1, [pc, #248]	; (8000e00 <lcd_user_display+0x4c0>)
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff fb9f 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000d0e:	2203      	movs	r2, #3
 8000d10:	2100      	movs	r1, #0
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff faee 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Thoat");
 8000d18:	493c      	ldr	r1, [pc, #240]	; (8000e0c <lcd_user_display+0x4cc>)
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fb96 	bl	800044c <CLCD_I2C_WriteString>
}
 8000d20:	e064      	b.n	8000dec <lcd_user_display+0x4ac>
		else if(status_display == STATUS_4)
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	d11b      	bne.n	8000d60 <lcd_user_display+0x420>
			CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff fae1 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"PIN OKE!");
 8000d32:	4937      	ldr	r1, [pc, #220]	; (8000e10 <lcd_user_display+0x4d0>)
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff fb89 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff fad8 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Cho");
 8000d44:	4933      	ldr	r1, [pc, #204]	; (8000e14 <lcd_user_display+0x4d4>)
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff fb80 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 3, 2);
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	2103      	movs	r1, #3
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff facf 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"1 phut...");
 8000d56:	4930      	ldr	r1, [pc, #192]	; (8000e18 <lcd_user_display+0x4d8>)
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fb77 	bl	800044c <CLCD_I2C_WriteString>
}
 8000d5e:	e045      	b.n	8000dec <lcd_user_display+0x4ac>
		else if(status_display == STATUS_5)
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	2b05      	cmp	r3, #5
 8000d64:	d11b      	bne.n	8000d9e <lcd_user_display+0x45e>
		  CLCD_I2C_SetCursor(LCD_user, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff fac2 	bl	80002f4 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"PIN sai!");
 8000d70:	492a      	ldr	r1, [pc, #168]	; (8000e1c <lcd_user_display+0x4dc>)
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fb6a 	bl	800044c <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff fab9 	bl	80002f4 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"\"Nhap\" de nhap");
 8000d82:	4927      	ldr	r1, [pc, #156]	; (8000e20 <lcd_user_display+0x4e0>)
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fb61 	bl	800044c <CLCD_I2C_WriteString>
		  CLCD_I2C_SetCursor(LCD_user, 4, 2);
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fab0 	bl	80002f4 <CLCD_I2C_SetCursor>
		  CLCD_I2C_WriteString(LCD_user,"PIN moi :<");
 8000d94:	4923      	ldr	r1, [pc, #140]	; (8000e24 <lcd_user_display+0x4e4>)
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff fb58 	bl	800044c <CLCD_I2C_WriteString>
}
 8000d9c:	e026      	b.n	8000dec <lcd_user_display+0x4ac>
		else if(status_display == STATUS_6)
 8000d9e:	78fb      	ldrb	r3, [r7, #3]
 8000da0:	2b06      	cmp	r3, #6
 8000da2:	d123      	bne.n	8000dec <lcd_user_display+0x4ac>
			CLCD_I2C_SetCursor(LCD_user, 3, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2103      	movs	r1, #3
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff faa3 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"Ngon ngu");
 8000dae:	491e      	ldr	r1, [pc, #120]	; (8000e28 <lcd_user_display+0x4e8>)
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff fb4b 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 1);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2100      	movs	r1, #0
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fa9a 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-VietNamese");
 8000dc0:	491a      	ldr	r1, [pc, #104]	; (8000e2c <lcd_user_display+0x4ec>)
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff fb42 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 2);
 8000dc8:	2202      	movs	r2, #2
 8000dca:	2100      	movs	r1, #0
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fa91 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-English");
 8000dd2:	4917      	ldr	r1, [pc, #92]	; (8000e30 <lcd_user_display+0x4f0>)
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff fb39 	bl	800044c <CLCD_I2C_WriteString>
			CLCD_I2C_SetCursor(LCD_user, 0, 3);
 8000dda:	2203      	movs	r2, #3
 8000ddc:	2100      	movs	r1, #0
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff fa88 	bl	80002f4 <CLCD_I2C_SetCursor>
			CLCD_I2C_WriteString(LCD_user,"-EXIT");
 8000de4:	4913      	ldr	r1, [pc, #76]	; (8000e34 <lcd_user_display+0x4f4>)
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fb30 	bl	800044c <CLCD_I2C_WriteString>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	08003440 	.word	0x08003440
 8000df8:	2000006c 	.word	0x2000006c
 8000dfc:	0800335c 	.word	0x0800335c
 8000e00:	08003364 	.word	0x08003364
 8000e04:	08003368 	.word	0x08003368
 8000e08:	08003370 	.word	0x08003370
 8000e0c:	08003454 	.word	0x08003454
 8000e10:	0800345c 	.word	0x0800345c
 8000e14:	08003468 	.word	0x08003468
 8000e18:	0800346c 	.word	0x0800346c
 8000e1c:	08003478 	.word	0x08003478
 8000e20:	08003484 	.word	0x08003484
 8000e24:	08003494 	.word	0x08003494
 8000e28:	080034a0 	.word	0x080034a0
 8000e2c:	080033e8 	.word	0x080033e8
 8000e30:	080033f4 	.word	0x080033f4
 8000e34:	08003400 	.word	0x08003400

08000e38 <lcd_system_handler>:
    -CLCD_I2C_Name* LCD_user            : pointer lcd
  +) RETURN:
    -void
*/
void lcd_system_handler(CLCD_I2C_Name* LCD_user)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	if(delete)
 8000e40:	4ba4      	ldr	r3, [pc, #656]	; (80010d4 <lcd_system_handler+0x29c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d005      	beq.n	8000e54 <lcd_system_handler+0x1c>
	{
		CLCD_I2C_Clear(LCD_user);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff fb65 	bl	8000518 <CLCD_I2C_Clear>
		delete = 0;
 8000e4e:	4ba1      	ldr	r3, [pc, #644]	; (80010d4 <lcd_system_handler+0x29c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
	}
	if(Mode == 0)
 8000e54:	4ba0      	ldr	r3, [pc, #640]	; (80010d8 <lcd_system_handler+0x2a0>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d112      	bne.n	8000e84 <lcd_system_handler+0x4c>
	{
		Config = CONFIG_NONE;
 8000e5e:	4b9f      	ldr	r3, [pc, #636]	; (80010dc <lcd_system_handler+0x2a4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
		Enter = 0;
 8000e64:	4b9e      	ldr	r3, [pc, #632]	; (80010e0 <lcd_system_handler+0x2a8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
		Status_Display = STATUS_1;
 8000e6a:	4b9e      	ldr	r3, [pc, #632]	; (80010e4 <lcd_system_handler+0x2ac>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
		lcd_user_display(LCD_user, Status_Display);
 8000e70:	4b9c      	ldr	r3, [pc, #624]	; (80010e4 <lcd_system_handler+0x2ac>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fd62 	bl	8000940 <lcd_user_display>
		Index_mode = INDEX_MODE_NONE;
 8000e7c:	4b9a      	ldr	r3, [pc, #616]	; (80010e8 <lcd_system_handler+0x2b0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
                Status_Display = STATUS_2;
                delete = 1;
            }
		}
	}/*END if(Mode == 1)*/
}
 8000e82:	e185      	b.n	8001190 <lcd_system_handler+0x358>
	else if(Mode == 1)
 8000e84:	4b94      	ldr	r3, [pc, #592]	; (80010d8 <lcd_system_handler+0x2a0>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	f040 8180 	bne.w	8001190 <lcd_system_handler+0x358>
		if(Index_mode == INDEX_MODE_NONE)
 8000e90:	4b95      	ldr	r3, [pc, #596]	; (80010e8 <lcd_system_handler+0x2b0>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d164      	bne.n	8000f62 <lcd_system_handler+0x12a>
			if (flag_button)
 8000e98:	4b94      	ldr	r3, [pc, #592]	; (80010ec <lcd_system_handler+0x2b4>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <lcd_system_handler+0x76>
				CLCD_I2C_Clear(LCD_user);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fb38 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8000ea8:	4b90      	ldr	r3, [pc, #576]	; (80010ec <lcd_system_handler+0x2b4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
			Status_Display = STATUS_2;
 8000eae:	4b8d      	ldr	r3, [pc, #564]	; (80010e4 <lcd_system_handler+0x2ac>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000eb4:	4b89      	ldr	r3, [pc, #548]	; (80010dc <lcd_system_handler+0x2a4>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d044      	beq.n	8000f48 <lcd_system_handler+0x110>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8000ebe:	4b87      	ldr	r3, [pc, #540]	; (80010dc <lcd_system_handler+0x2a4>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fa13 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8000ece:	4988      	ldr	r1, [pc, #544]	; (80010f0 <lcd_system_handler+0x2b8>)
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff fabb 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000ed6:	4b82      	ldr	r3, [pc, #520]	; (80010e0 <lcd_system_handler+0x2a8>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d039      	beq.n	8000f54 <lcd_system_handler+0x11c>
					Enter = 0;
 8000ee0:	4b7f      	ldr	r3, [pc, #508]	; (80010e0 <lcd_system_handler+0x2a8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8000ee6:	4b7d      	ldr	r3, [pc, #500]	; (80010dc <lcd_system_handler+0x2a4>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d108      	bne.n	8000f02 <lcd_system_handler+0xca>
                        Index_mode = INDEX_MODE1;
 8000ef0:	4b7d      	ldr	r3, [pc, #500]	; (80010e8 <lcd_system_handler+0x2b0>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8000ef6:	4b79      	ldr	r3, [pc, #484]	; (80010dc <lcd_system_handler+0x2a4>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000efc:	4b75      	ldr	r3, [pc, #468]	; (80010d4 <lcd_system_handler+0x29c>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 8000f02:	4b76      	ldr	r3, [pc, #472]	; (80010dc <lcd_system_handler+0x2a4>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d108      	bne.n	8000f1e <lcd_system_handler+0xe6>
                        Index_mode = INDEX_MODE2;
 8000f0c:	4b76      	ldr	r3, [pc, #472]	; (80010e8 <lcd_system_handler+0x2b0>)
 8000f0e:	2202      	movs	r2, #2
 8000f10:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_ROW1;
 8000f12:	4b72      	ldr	r3, [pc, #456]	; (80010dc <lcd_system_handler+0x2a4>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000f18:	4b6e      	ldr	r3, [pc, #440]	; (80010d4 <lcd_system_handler+0x29c>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000f1e:	4b6f      	ldr	r3, [pc, #444]	; (80010dc <lcd_system_handler+0x2a4>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d115      	bne.n	8000f54 <lcd_system_handler+0x11c>
                        Index_mode = INDEX_MODE1;
 8000f28:	4b6f      	ldr	r3, [pc, #444]	; (80010e8 <lcd_system_handler+0x2b0>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
                        Mode = 0;
 8000f2e:	4b6a      	ldr	r3, [pc, #424]	; (80010d8 <lcd_system_handler+0x2a0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8000f34:	4b69      	ldr	r3, [pc, #420]	; (80010dc <lcd_system_handler+0x2a4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_1;
 8000f3a:	4b6a      	ldr	r3, [pc, #424]	; (80010e4 <lcd_system_handler+0x2ac>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 8000f40:	4b64      	ldr	r3, [pc, #400]	; (80010d4 <lcd_system_handler+0x29c>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e005      	b.n	8000f54 <lcd_system_handler+0x11c>
				Config = CONFIG_ROW1;
 8000f48:	4b64      	ldr	r3, [pc, #400]	; (80010dc <lcd_system_handler+0x2a4>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8000f4e:	4b64      	ldr	r3, [pc, #400]	; (80010e0 <lcd_system_handler+0x2a8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000f54:	4b63      	ldr	r3, [pc, #396]	; (80010e4 <lcd_system_handler+0x2ac>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff fcf0 	bl	8000940 <lcd_user_display>
}
 8000f60:	e116      	b.n	8001190 <lcd_system_handler+0x358>
		else if(INDEX_MODE1 == Index_mode)	// Languge
 8000f62:	4b61      	ldr	r3, [pc, #388]	; (80010e8 <lcd_system_handler+0x2b0>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d161      	bne.n	800102e <lcd_system_handler+0x1f6>
			Status_Display = STATUS_6;
 8000f6a:	4b5e      	ldr	r3, [pc, #376]	; (80010e4 <lcd_system_handler+0x2ac>)
 8000f6c:	2206      	movs	r2, #6
 8000f6e:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8000f70:	4b5c      	ldr	r3, [pc, #368]	; (80010e4 <lcd_system_handler+0x2ac>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff fce2 	bl	8000940 <lcd_user_display>
			if (flag_button)
 8000f7c:	4b5b      	ldr	r3, [pc, #364]	; (80010ec <lcd_system_handler+0x2b4>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d005      	beq.n	8000f92 <lcd_system_handler+0x15a>
				CLCD_I2C_Clear(LCD_user);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff fac6 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8000f8c:	4b57      	ldr	r3, [pc, #348]	; (80010ec <lcd_system_handler+0x2b4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 8000f92:	4b52      	ldr	r3, [pc, #328]	; (80010dc <lcd_system_handler+0x2a4>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d03b      	beq.n	8001014 <lcd_system_handler+0x1dc>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8000f9c:	4b4f      	ldr	r3, [pc, #316]	; (80010dc <lcd_system_handler+0x2a4>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff f9a4 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8000fac:	4950      	ldr	r1, [pc, #320]	; (80010f0 <lcd_system_handler+0x2b8>)
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fa4c 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <lcd_system_handler+0x2a8>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d030      	beq.n	8001020 <lcd_system_handler+0x1e8>
					Enter = 0;
 8000fbe:	4b48      	ldr	r3, [pc, #288]	; (80010e0 <lcd_system_handler+0x2a8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)
 8000fc4:	4b45      	ldr	r3, [pc, #276]	; (80010dc <lcd_system_handler+0x2a4>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d105      	bne.n	8000fda <lcd_system_handler+0x1a2>
						language = VIETNAMESE;
 8000fce:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <lcd_system_handler+0x2bc>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 8000fd4:	4b41      	ldr	r3, [pc, #260]	; (80010dc <lcd_system_handler+0x2a4>)
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW2)
 8000fda:	4b40      	ldr	r3, [pc, #256]	; (80010dc <lcd_system_handler+0x2a4>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d105      	bne.n	8000ff0 <lcd_system_handler+0x1b8>
						language = ENGLISH;
 8000fe4:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <lcd_system_handler+0x2bc>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
						Config = CONFIG_ROW3;
 8000fea:	4b3c      	ldr	r3, [pc, #240]	; (80010dc <lcd_system_handler+0x2a4>)
 8000fec:	2203      	movs	r2, #3
 8000fee:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 8000ff0:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <lcd_system_handler+0x2a4>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d112      	bne.n	8001020 <lcd_system_handler+0x1e8>
                        Index_mode = INDEX_MODE_NONE;
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <lcd_system_handler+0x2b0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 8001000:	4b36      	ldr	r3, [pc, #216]	; (80010dc <lcd_system_handler+0x2a4>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_2;
 8001006:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <lcd_system_handler+0x2ac>)
 8001008:	2202      	movs	r2, #2
 800100a:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 800100c:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <lcd_system_handler+0x29c>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	e005      	b.n	8001020 <lcd_system_handler+0x1e8>
				Config = CONFIG_ROW1;
 8001014:	4b31      	ldr	r3, [pc, #196]	; (80010dc <lcd_system_handler+0x2a4>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 800101a:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <lcd_system_handler+0x2a8>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8001020:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <lcd_system_handler+0x2ac>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff fc8a 	bl	8000940 <lcd_user_display>
}
 800102c:	e0b0      	b.n	8001190 <lcd_system_handler+0x358>
		else if(INDEX_MODE2 == Index_mode)	// Enter Password
 800102e:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <lcd_system_handler+0x2b0>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d16f      	bne.n	8001116 <lcd_system_handler+0x2de>
			Status_Display = STATUS_3;
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <lcd_system_handler+0x2ac>)
 8001038:	2203      	movs	r2, #3
 800103a:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 800103c:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <lcd_system_handler+0x2ac>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fc7c 	bl	8000940 <lcd_user_display>
			if (flag_button)
 8001048:	4b28      	ldr	r3, [pc, #160]	; (80010ec <lcd_system_handler+0x2b4>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <lcd_system_handler+0x226>
				CLCD_I2C_Clear(LCD_user);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fa60 	bl	8000518 <CLCD_I2C_Clear>
				flag_button = 0;
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <lcd_system_handler+0x2b4>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
			if(Config != CONFIG_NONE)
 800105e:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <lcd_system_handler+0x2a4>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d049      	beq.n	80010fc <lcd_system_handler+0x2c4>
				CLCD_I2C_SetCursor(LCD_user, 15, Config);
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <lcd_system_handler+0x2a4>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	461a      	mov	r2, r3
 8001070:	210f      	movs	r1, #15
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff f93e 	bl	80002f4 <CLCD_I2C_SetCursor>
				CLCD_I2C_WriteString(LCD_user, "<");
 8001078:	491d      	ldr	r1, [pc, #116]	; (80010f0 <lcd_system_handler+0x2b8>)
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff f9e6 	bl	800044c <CLCD_I2C_WriteString>
				if(Enter)
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <lcd_system_handler+0x2a8>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d03e      	beq.n	8001108 <lcd_system_handler+0x2d0>
					Enter = 0;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <lcd_system_handler+0x2a8>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW1)	// Nhap so thu tu
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <lcd_system_handler+0x2a4>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d102      	bne.n	80010a0 <lcd_system_handler+0x268>
						enter_num_pass.signal_enter_num = PROCESSING;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <lcd_system_handler+0x2c0>)
 800109c:	2200      	movs	r2, #0
 800109e:	705a      	strb	r2, [r3, #1]
					if(Config == CONFIG_ROW2)	// Nhap pass
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <lcd_system_handler+0x2a4>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d102      	bne.n	80010b0 <lcd_system_handler+0x278>
						enter_num_pass.signal_enter_pass = PROCESSING;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <lcd_system_handler+0x2c0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
					if(Config == CONFIG_ROW3)
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <lcd_system_handler+0x2a4>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d126      	bne.n	8001108 <lcd_system_handler+0x2d0>
                        Index_mode = INDEX_MODE_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <lcd_system_handler+0x2b0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
                        Config = CONFIG_NONE;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <lcd_system_handler+0x2a4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
                        Status_Display = STATUS_2;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <lcd_system_handler+0x2ac>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	701a      	strb	r2, [r3, #0]
                        delete = 1;
 80010cc:	4b01      	ldr	r3, [pc, #4]	; (80010d4 <lcd_system_handler+0x29c>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	e019      	b.n	8001108 <lcd_system_handler+0x2d0>
 80010d4:	20000068 	.word	0x20000068
 80010d8:	20000069 	.word	0x20000069
 80010dc:	20000002 	.word	0x20000002
 80010e0:	2000006a 	.word	0x2000006a
 80010e4:	2000006e 	.word	0x2000006e
 80010e8:	2000006d 	.word	0x2000006d
 80010ec:	2000006b 	.word	0x2000006b
 80010f0:	080034ac 	.word	0x080034ac
 80010f4:	2000006f 	.word	0x2000006f
 80010f8:	20000004 	.word	0x20000004
				Config = CONFIG_ROW1;
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <lcd_system_handler+0x360>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
				Enter = 0;
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <lcd_system_handler+0x364>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <lcd_system_handler+0x368>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fc16 	bl	8000940 <lcd_user_display>
}
 8001114:	e03c      	b.n	8001190 <lcd_system_handler+0x358>
		else if(INDEX_MODE_OKE_PASS == Index_mode)
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <lcd_system_handler+0x36c>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b04      	cmp	r3, #4
 800111c:	d11a      	bne.n	8001154 <lcd_system_handler+0x31c>
			Status_Display = STATUS_4;
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <lcd_system_handler+0x368>)
 8001120:	2204      	movs	r2, #4
 8001122:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <lcd_system_handler+0x368>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff fc08 	bl	8000940 <lcd_user_display>
			if(Enter)
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <lcd_system_handler+0x364>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d02a      	beq.n	8001190 <lcd_system_handler+0x358>
                Index_mode = INDEX_MODE_NONE;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <lcd_system_handler+0x36c>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
                Config = CONFIG_NONE;
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <lcd_system_handler+0x360>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
                Status_Display = STATUS_2;
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <lcd_system_handler+0x368>)
 8001148:	2202      	movs	r2, #2
 800114a:	701a      	strb	r2, [r3, #0]
                delete = 1;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <lcd_system_handler+0x370>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
}
 8001152:	e01d      	b.n	8001190 <lcd_system_handler+0x358>
		else if(INDEX_MODE_NO_OKE_PASS == Index_mode)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <lcd_system_handler+0x36c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b05      	cmp	r3, #5
 800115a:	d119      	bne.n	8001190 <lcd_system_handler+0x358>
			Status_Display = STATUS_5;
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <lcd_system_handler+0x368>)
 800115e:	2205      	movs	r2, #5
 8001160:	701a      	strb	r2, [r3, #0]
			lcd_user_display(LCD_user, Status_Display);
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <lcd_system_handler+0x368>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	4619      	mov	r1, r3
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff fbe9 	bl	8000940 <lcd_user_display>
			if(Enter)
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <lcd_system_handler+0x364>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00b      	beq.n	8001190 <lcd_system_handler+0x358>
                Index_mode = INDEX_MODE_NONE;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <lcd_system_handler+0x36c>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
                Config = CONFIG_NONE;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <lcd_system_handler+0x360>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
                Status_Display = STATUS_2;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <lcd_system_handler+0x368>)
 8001186:	2202      	movs	r2, #2
 8001188:	701a      	strb	r2, [r3, #0]
                delete = 1;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <lcd_system_handler+0x370>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000002 	.word	0x20000002
 800119c:	2000006a 	.word	0x2000006a
 80011a0:	2000006e 	.word	0x2000006e
 80011a4:	2000006d 	.word	0x2000006d
 80011a8:	20000068 	.word	0x20000068

080011ac <HAL_GPIO_EXTI_Callback>:
char pass3[5] = "13579";

volatile uint8_t flag_keypad = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
	static uint32_t TimeBegin = 0;
	static uint32_t TimeNow = 0;
	/*CODE ISR*/
	/*flag keypad*/
	if(((R1_IN_Pin == GPIO_Pin) | (R2_IN_Pin == GPIO_Pin) | (R3_IN_Pin == GPIO_Pin) | (R4_IN_Pin == GPIO_Pin)) && (state_button == KEYPAD))
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011bc:	bf0c      	ite	eq
 80011be:	2301      	moveq	r3, #1
 80011c0:	2300      	movne	r3, #0
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011ca:	bf0c      	ite	eq
 80011cc:	2301      	moveq	r3, #1
 80011ce:	2300      	movne	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011de:	bf0c      	ite	eq
 80011e0:	2301      	moveq	r3, #1
 80011e2:	2300      	movne	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	88fa      	ldrh	r2, [r7, #6]
 80011ea:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80011ee:	bf0c      	ite	eq
 80011f0:	2201      	moveq	r2, #1
 80011f2:	2200      	movne	r2, #0
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	4313      	orrs	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00e      	beq.n	800121a <HAL_GPIO_EXTI_Callback+0x6e>
 80011fc:	4b51      	ldr	r3, [pc, #324]	; (8001344 <HAL_GPIO_EXTI_Callback+0x198>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d10a      	bne.n	800121a <HAL_GPIO_EXTI_Callback+0x6e>
	{
		flag_keypad = 1;
 8001204:	4b50      	ldr	r3, [pc, #320]	; (8001348 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
		key = KEYPAD_Handler(&COL_KEY_PAD_main, &ROW_KEY_PAD_main);
 800120a:	4950      	ldr	r1, [pc, #320]	; (800134c <HAL_GPIO_EXTI_Callback+0x1a0>)
 800120c:	4850      	ldr	r0, [pc, #320]	; (8001350 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800120e:	f7ff fadf 	bl	80007d0 <KEYPAD_Handler>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b4f      	ldr	r3, [pc, #316]	; (8001354 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001218:	701a      	strb	r2, [r3, #0]
	}
	/*flag lcd*/
	if(state_button == BUTTON)
 800121a:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <HAL_GPIO_EXTI_Callback+0x198>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d137      	bne.n	8001292 <HAL_GPIO_EXTI_Callback+0xe6>
	{
		flag_button = 1;
 8001222:	4b4d      	ldr	r3, [pc, #308]	; (8001358 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
		if(UP_EXTI_3_Pin == GPIO_Pin)
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	2b08      	cmp	r3, #8
 800122c:	d10f      	bne.n	800124e <HAL_GPIO_EXTI_Callback+0xa2>
		{
			Config++;
 800122e:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	3301      	adds	r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b48      	ldr	r3, [pc, #288]	; (800135c <HAL_GPIO_EXTI_Callback+0x1b0>)
 800123a:	701a      	strb	r2, [r3, #0]
			if(Config > CONFIG_ROW3) Config = CONFIG_ROW1;
 800123c:	4b47      	ldr	r3, [pc, #284]	; (800135c <HAL_GPIO_EXTI_Callback+0x1b0>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b03      	cmp	r3, #3
 8001244:	d925      	bls.n	8001292 <HAL_GPIO_EXTI_Callback+0xe6>
 8001246:	4b45      	ldr	r3, [pc, #276]	; (800135c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	e021      	b.n	8001292 <HAL_GPIO_EXTI_Callback+0xe6>
		}
		else if(DOWN_EXTI_4_Pin == GPIO_Pin)
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	2b10      	cmp	r3, #16
 8001252:	d10f      	bne.n	8001274 <HAL_GPIO_EXTI_Callback+0xc8>
		{
			Config--;
 8001254:	4b41      	ldr	r3, [pc, #260]	; (800135c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	3b01      	subs	r3, #1
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b3f      	ldr	r3, [pc, #252]	; (800135c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001260:	701a      	strb	r2, [r3, #0]
			if(Config < CONFIG_ROW1) Config = CONFIG_ROW3;
 8001262:	4b3e      	ldr	r3, [pc, #248]	; (800135c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d112      	bne.n	8001292 <HAL_GPIO_EXTI_Callback+0xe6>
 800126c:	4b3b      	ldr	r3, [pc, #236]	; (800135c <HAL_GPIO_EXTI_Callback+0x1b0>)
 800126e:	2203      	movs	r2, #3
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	e00e      	b.n	8001292 <HAL_GPIO_EXTI_Callback+0xe6>
		}
		else if(ENTER_EXTI_5_Pin == GPIO_Pin)
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	2b20      	cmp	r3, #32
 8001278:	d10b      	bne.n	8001292 <HAL_GPIO_EXTI_Callback+0xe6>
		{
			if(1 == Mode)
 800127a:	4b39      	ldr	r3, [pc, #228]	; (8001360 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b01      	cmp	r3, #1
 8001282:	d103      	bne.n	800128c <HAL_GPIO_EXTI_Callback+0xe0>
			{
				Enter = 1;
 8001284:	4b37      	ldr	r3, [pc, #220]	; (8001364 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	e002      	b.n	8001292 <HAL_GPIO_EXTI_Callback+0xe6>
			}
			else
			{
				Mode = 1;
 800128c:	4b34      	ldr	r3, [pc, #208]	; (8001360 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	/*END CODE ISR*/
	HAL_Delay(20);
 8001292:	2014      	movs	r0, #20
 8001294:	f000 fc24 	bl	8001ae0 <HAL_Delay>
	TimeBegin = HAL_GetTick();
 8001298:	f000 fc18 	bl	8001acc <HAL_GetTick>
 800129c:	4603      	mov	r3, r0
 800129e:	4a32      	ldr	r2, [pc, #200]	; (8001368 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80012a0:	6013      	str	r3, [r2, #0]
	while(		HAL_GPIO_ReadPin(GPIOB, UP_EXTI_3_Pin) == GPIO_PIN_RESET		\
 80012a2:	e00d      	b.n	80012c0 <HAL_GPIO_EXTI_Callback+0x114>
			|| 	HAL_GPIO_ReadPin(R1_IN_GPIO_Port, R1_IN_Pin) == GPIO_PIN_RESET		\
			|| 	HAL_GPIO_ReadPin(R2_IN_GPIO_Port, R2_IN_Pin) == GPIO_PIN_RESET 		\
			|| 	HAL_GPIO_ReadPin(R3_IN_GPIO_Port, R3_IN_Pin) == GPIO_PIN_RESET		\
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
	{
		TimeNow = HAL_GetTick();
 80012a4:	f000 fc12 	bl	8001acc <HAL_GetTick>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a30      	ldr	r2, [pc, #192]	; (800136c <HAL_GPIO_EXTI_Callback+0x1c0>)
 80012ac:	6013      	str	r3, [r2, #0]
		if(TimeNow - TimeBegin == 5000)
 80012ae:	4b2f      	ldr	r3, [pc, #188]	; (800136c <HAL_GPIO_EXTI_Callback+0x1c0>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012bc:	4293      	cmp	r3, r2
 80012be:	d035      	beq.n	800132c <HAL_GPIO_EXTI_Callback+0x180>
	while(		HAL_GPIO_ReadPin(GPIOB, UP_EXTI_3_Pin) == GPIO_PIN_RESET		\
 80012c0:	2108      	movs	r1, #8
 80012c2:	482b      	ldr	r0, [pc, #172]	; (8001370 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80012c4:	f000 fec2 	bl	800204c <HAL_GPIO_ReadPin>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0ea      	beq.n	80012a4 <HAL_GPIO_EXTI_Callback+0xf8>
			|| 	HAL_GPIO_ReadPin(GPIOB, DOWN_EXTI_4_Pin) == GPIO_PIN_RESET 		\
 80012ce:	2110      	movs	r1, #16
 80012d0:	4827      	ldr	r0, [pc, #156]	; (8001370 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80012d2:	f000 febb 	bl	800204c <HAL_GPIO_ReadPin>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0e3      	beq.n	80012a4 <HAL_GPIO_EXTI_Callback+0xf8>
			|| 	HAL_GPIO_ReadPin(GPIOB, ENTER_EXTI_5_Pin) == GPIO_PIN_RESET		\
 80012dc:	2120      	movs	r1, #32
 80012de:	4824      	ldr	r0, [pc, #144]	; (8001370 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80012e0:	f000 feb4 	bl	800204c <HAL_GPIO_ReadPin>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0dc      	beq.n	80012a4 <HAL_GPIO_EXTI_Callback+0xf8>
			|| 	HAL_GPIO_ReadPin(R1_IN_GPIO_Port, R1_IN_Pin) == GPIO_PIN_RESET		\
 80012ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ee:	4820      	ldr	r0, [pc, #128]	; (8001370 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80012f0:	f000 feac 	bl	800204c <HAL_GPIO_ReadPin>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0d4      	beq.n	80012a4 <HAL_GPIO_EXTI_Callback+0xf8>
			|| 	HAL_GPIO_ReadPin(R2_IN_GPIO_Port, R2_IN_Pin) == GPIO_PIN_RESET 		\
 80012fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012fe:	481c      	ldr	r0, [pc, #112]	; (8001370 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001300:	f000 fea4 	bl	800204c <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0cc      	beq.n	80012a4 <HAL_GPIO_EXTI_Callback+0xf8>
			|| 	HAL_GPIO_ReadPin(R3_IN_GPIO_Port, R3_IN_Pin) == GPIO_PIN_RESET		\
 800130a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800130e:	4818      	ldr	r0, [pc, #96]	; (8001370 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001310:	f000 fe9c 	bl	800204c <HAL_GPIO_ReadPin>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0c4      	beq.n	80012a4 <HAL_GPIO_EXTI_Callback+0xf8>
			|| 	HAL_GPIO_ReadPin(R4_IN_GPIO_Port, R4_IN_Pin) == GPIO_PIN_RESET)
 800131a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001320:	f000 fe94 	bl	800204c <HAL_GPIO_ReadPin>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0bc      	beq.n	80012a4 <HAL_GPIO_EXTI_Callback+0xf8>
 800132a:	e000      	b.n	800132e <HAL_GPIO_EXTI_Callback+0x182>
		{
//			ButtonError = 1;
			break;
 800132c:	bf00      	nop
		}
	}
	HAL_Delay(20);
 800132e:	2014      	movs	r0, #20
 8001330:	f000 fbd6 	bl	8001ae0 <HAL_Delay>
	EXTI->PR = ENTER_EXTI_5_Pin | DOWN_EXTI_4_Pin | UP_EXTI_3_Pin \
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001336:	f24f 0238 	movw	r2, #61496	; 0xf038
 800133a:	615a      	str	r2, [r3, #20]
			| R1_IN_Pin | R2_IN_Pin |R3_IN_Pin | R4_IN_Pin;
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000006 	.word	0x20000006
 8001348:	20000152 	.word	0x20000152
 800134c:	20000130 	.word	0x20000130
 8001350:	20000118 	.word	0x20000118
 8001354:	20000148 	.word	0x20000148
 8001358:	2000006b 	.word	0x2000006b
 800135c:	20000002 	.word	0x20000002
 8001360:	20000069 	.word	0x20000069
 8001364:	2000006a 	.word	0x2000006a
 8001368:	20000154 	.word	0x20000154
 800136c:	20000158 	.word	0x20000158
 8001370:	40010c00 	.word	0x40010c00
 8001374:	40010400 	.word	0x40010400

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b092      	sub	sp, #72	; 0x48
 800137c:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f000 fb4d 	bl	8001a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001382:	f000 f8ff 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001386:	f000 f995 	bl	80016b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800138a:	f000 f937 	bl	80015fc <MX_I2C1_Init>
  MX_I2C2_Init();
 800138e:	f000 f963 	bl	8001658 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  KeyPad_Init(		// Cpl pin + port
 8001392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001396:	930d      	str	r3, [sp, #52]	; 0x34
 8001398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139c:	930c      	str	r3, [sp, #48]	; 0x30
 800139e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80013a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013a8:	930a      	str	r3, [sp, #40]	; 0x28
 80013aa:	4b61      	ldr	r3, [pc, #388]	; (8001530 <main+0x1b8>)
 80013ac:	9309      	str	r3, [sp, #36]	; 0x24
 80013ae:	4b60      	ldr	r3, [pc, #384]	; (8001530 <main+0x1b8>)
 80013b0:	9308      	str	r3, [sp, #32]
 80013b2:	4b5f      	ldr	r3, [pc, #380]	; (8001530 <main+0x1b8>)
 80013b4:	9307      	str	r3, [sp, #28]
 80013b6:	4b5e      	ldr	r3, [pc, #376]	; (8001530 <main+0x1b8>)
 80013b8:	9306      	str	r3, [sp, #24]
 80013ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013be:	9305      	str	r3, [sp, #20]
 80013c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c4:	9304      	str	r3, [sp, #16]
 80013c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ca:	9303      	str	r3, [sp, #12]
 80013cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	4b58      	ldr	r3, [pc, #352]	; (8001534 <main+0x1bc>)
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	4b57      	ldr	r3, [pc, #348]	; (8001534 <main+0x1bc>)
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4b56      	ldr	r3, [pc, #344]	; (8001534 <main+0x1bc>)
 80013dc:	4a55      	ldr	r2, [pc, #340]	; (8001534 <main+0x1bc>)
 80013de:	4956      	ldr	r1, [pc, #344]	; (8001538 <main+0x1c0>)
 80013e0:	4856      	ldr	r0, [pc, #344]	; (800153c <main+0x1c4>)
 80013e2:	f7ff f8a9 	bl	8000538 <KeyPad_Init>
					C1_OUT_Pin, C2_OUT_Pin, C3_OUT_Pin, C4_OUT_Pin,								\
					// Row pin + port
					R1_IN_GPIO_Port, R2_IN_GPIO_Port, R3_IN_GPIO_Port, R4_IN_GPIO_Port,					\
					R1_IN_Pin, R2_IN_Pin, R3_IN_Pin, R4_IN_Pin
			  );
  CLCD_I2C_Init(&LCD1, &hi2c1, (0x27 << 1), 16, 4);
 80013e6:	4638      	mov	r0, r7
 80013e8:	2304      	movs	r3, #4
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2310      	movs	r3, #16
 80013ee:	224e      	movs	r2, #78	; 0x4e
 80013f0:	4953      	ldr	r1, [pc, #332]	; (8001540 <main+0x1c8>)
 80013f2:	f7fe ff0f 	bl	8000214 <CLCD_I2C_Init>

  CLCD_I2C_SetCursor(&LCD1, 0, 0);
 80013f6:	463b      	mov	r3, r7
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7fe ff79 	bl	80002f4 <CLCD_I2C_SetCursor>
  CLCD_I2C_WriteString(&LCD1, "Hello");
 8001402:	463b      	mov	r3, r7
 8001404:	494f      	ldr	r1, [pc, #316]	; (8001544 <main+0x1cc>)
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f820 	bl	800044c <CLCD_I2C_WriteString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*Debug key*/
	  if(flag_keypad == 1)
 800140c:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <main+0x1d0>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b01      	cmp	r3, #1
 8001414:	d107      	bne.n	8001426 <main+0xae>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141a:	484c      	ldr	r0, [pc, #304]	; (800154c <main+0x1d4>)
 800141c:	f000 fe45 	bl	80020aa <HAL_GPIO_TogglePin>
		  flag_keypad = 0;
 8001420:	4b49      	ldr	r3, [pc, #292]	; (8001548 <main+0x1d0>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
	  }

	  /*Enter key and display on LCD pass/num*/
	  if(handler_keyIN_enterKey_DisplayLCD(&LCD1, state_button, &key, password) == KEY_OK)
 8001426:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <main+0x1d8>)
 8001428:	7819      	ldrb	r1, [r3, #0]
 800142a:	4638      	mov	r0, r7
 800142c:	4b49      	ldr	r3, [pc, #292]	; (8001554 <main+0x1dc>)
 800142e:	4a4a      	ldr	r2, [pc, #296]	; (8001558 <main+0x1e0>)
 8001430:	f7ff f9fe 	bl	8000830 <handler_keyIN_enterKey_DisplayLCD>
 8001434:	4603      	mov	r3, r0
 8001436:	2b01      	cmp	r3, #1
 8001438:	d160      	bne.n	80014fc <main+0x184>
	  {
		  if(enter_num_pass.signal_enter_num == PROCESSING)
 800143a:	4b48      	ldr	r3, [pc, #288]	; (800155c <main+0x1e4>)
 800143c:	785b      	ldrb	r3, [r3, #1]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d122      	bne.n	800148a <main+0x112>
		  {
			  enter_num_pass.signal_enter_num = NOT_DONE;
 8001444:	4b45      	ldr	r3, [pc, #276]	; (800155c <main+0x1e4>)
 8001446:	2201      	movs	r2, #1
 8001448:	705a      	strb	r2, [r3, #1]
			  if(strstr(password, num1) != NULL || strstr(password, num2) != NULL || strstr(password, num3) != NULL)
 800144a:	4945      	ldr	r1, [pc, #276]	; (8001560 <main+0x1e8>)
 800144c:	4841      	ldr	r0, [pc, #260]	; (8001554 <main+0x1dc>)
 800144e:	f001 ff21 	bl	8003294 <strstr>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10d      	bne.n	8001474 <main+0xfc>
 8001458:	4942      	ldr	r1, [pc, #264]	; (8001564 <main+0x1ec>)
 800145a:	483e      	ldr	r0, [pc, #248]	; (8001554 <main+0x1dc>)
 800145c:	f001 ff1a 	bl	8003294 <strstr>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d106      	bne.n	8001474 <main+0xfc>
 8001466:	4940      	ldr	r1, [pc, #256]	; (8001568 <main+0x1f0>)
 8001468:	483a      	ldr	r0, [pc, #232]	; (8001554 <main+0x1dc>)
 800146a:	f001 ff13 	bl	8003294 <strstr>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <main+0x104>
			  {
				  num_ok = 1;
 8001474:	4b3d      	ldr	r3, [pc, #244]	; (800156c <main+0x1f4>)
 8001476:	2201      	movs	r2, #1
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	e032      	b.n	80014e2 <main+0x16a>
			  }
			  else
			  {
				  num_ok = 0;
 800147c:	4b3b      	ldr	r3, [pc, #236]	; (800156c <main+0x1f4>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
				  Index_mode = INDEX_MODE_NO_OKE_PASS;
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <main+0x1f8>)
 8001484:	2205      	movs	r2, #5
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	e02b      	b.n	80014e2 <main+0x16a>
			  }
		  }
		  else if(enter_num_pass.signal_enter_pass == PROCESSING && num_ok == 1)
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <main+0x1e4>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d123      	bne.n	80014dc <main+0x164>
 8001494:	4b35      	ldr	r3, [pc, #212]	; (800156c <main+0x1f4>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d11f      	bne.n	80014dc <main+0x164>
		  {
			  enter_num_pass.signal_enter_pass = NOT_DONE;
 800149c:	4b2f      	ldr	r3, [pc, #188]	; (800155c <main+0x1e4>)
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
			  if(strstr(password, pass1) != NULL || strstr(password, pass2) != NULL || strstr(password, pass3) != NULL)
 80014a2:	4934      	ldr	r1, [pc, #208]	; (8001574 <main+0x1fc>)
 80014a4:	482b      	ldr	r0, [pc, #172]	; (8001554 <main+0x1dc>)
 80014a6:	f001 fef5 	bl	8003294 <strstr>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10d      	bne.n	80014cc <main+0x154>
 80014b0:	4931      	ldr	r1, [pc, #196]	; (8001578 <main+0x200>)
 80014b2:	4828      	ldr	r0, [pc, #160]	; (8001554 <main+0x1dc>)
 80014b4:	f001 feee 	bl	8003294 <strstr>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d106      	bne.n	80014cc <main+0x154>
 80014be:	492f      	ldr	r1, [pc, #188]	; (800157c <main+0x204>)
 80014c0:	4824      	ldr	r0, [pc, #144]	; (8001554 <main+0x1dc>)
 80014c2:	f001 fee7 	bl	8003294 <strstr>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <main+0x15c>
			  {
			  	  Index_mode = INDEX_MODE_OKE_PASS;
 80014cc:	4b28      	ldr	r3, [pc, #160]	; (8001570 <main+0x1f8>)
 80014ce:	2204      	movs	r2, #4
 80014d0:	701a      	strb	r2, [r3, #0]
			  if(strstr(password, pass1) != NULL || strstr(password, pass2) != NULL || strstr(password, pass3) != NULL)
 80014d2:	e006      	b.n	80014e2 <main+0x16a>
			  }
			  else
			  {
			  	  Index_mode = INDEX_MODE_NO_OKE_PASS;
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <main+0x1f8>)
 80014d6:	2205      	movs	r2, #5
 80014d8:	701a      	strb	r2, [r3, #0]
			  if(strstr(password, pass1) != NULL || strstr(password, pass2) != NULL || strstr(password, pass3) != NULL)
 80014da:	e002      	b.n	80014e2 <main+0x16a>
			  }
		  }
		  else
		  {
			  Index_mode = INDEX_MODE_NO_OKE_PASS;
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <main+0x1f8>)
 80014de:	2205      	movs	r2, #5
 80014e0:	701a      	strb	r2, [r3, #0]
		  }
		  /*Reset*/
		  for(uint8_t i = 0; i < sizeof(password); i++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
 80014e6:	e006      	b.n	80014f6 <main+0x17e>
		  {
			  password[i] = 0;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	4a1a      	ldr	r2, [pc, #104]	; (8001554 <main+0x1dc>)
 80014ec:	2100      	movs	r1, #0
 80014ee:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i = 0; i < sizeof(password); i++)
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	3301      	adds	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d9f5      	bls.n	80014e8 <main+0x170>
		  }
	  }

	  if((enter_num_pass.signal_enter_pass == PROCESSING) || (enter_num_pass.signal_enter_num == PROCESSING))
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <main+0x1e4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d004      	beq.n	8001510 <main+0x198>
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <main+0x1e4>)
 8001508:	785b      	ldrb	r3, [r3, #1]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d106      	bne.n	800151e <main+0x1a6>
	  {
		  state_star_pass = NONE_STAR;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <main+0x208>)
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
		  state_button = KEYPAD;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <main+0x1d8>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
 800151c:	e002      	b.n	8001524 <main+0x1ac>
	  }
	  else
	  {
		  state_button = BUTTON;
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <main+0x1d8>)
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
	  }

	  lcd_system_handler(&LCD1);
 8001524:	463b      	mov	r3, r7
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fc86 	bl	8000e38 <lcd_system_handler>
	  if(flag_keypad == 1)
 800152c:	e76e      	b.n	800140c <main+0x94>
 800152e:	bf00      	nop
 8001530:	40010c00 	.word	0x40010c00
 8001534:	40010800 	.word	0x40010800
 8001538:	20000130 	.word	0x20000130
 800153c:	20000118 	.word	0x20000118
 8001540:	20000070 	.word	0x20000070
 8001544:	080034b0 	.word	0x080034b0
 8001548:	20000152 	.word	0x20000152
 800154c:	40011000 	.word	0x40011000
 8001550:	20000006 	.word	0x20000006
 8001554:	2000014c 	.word	0x2000014c
 8001558:	20000148 	.word	0x20000148
 800155c:	20000004 	.word	0x20000004
 8001560:	20000008 	.word	0x20000008
 8001564:	20000014 	.word	0x20000014
 8001568:	20000020 	.word	0x20000020
 800156c:	20000151 	.word	0x20000151
 8001570:	2000006d 	.word	0x2000006d
 8001574:	2000000c 	.word	0x2000000c
 8001578:	20000018 	.word	0x20000018
 800157c:	20000024 	.word	0x20000024
 8001580:	2000006c 	.word	0x2000006c

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b090      	sub	sp, #64	; 0x40
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0318 	add.w	r3, r7, #24
 800158e:	2228      	movs	r2, #40	; 0x28
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f001 fe76 	bl	8003284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a6:	2302      	movs	r3, #2
 80015a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015aa:	2301      	movs	r3, #1
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ae:	2310      	movs	r3, #16
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	f107 0318 	add.w	r3, r7, #24
 80015ba:	4618      	mov	r0, r3
 80015bc:	f001 fa42 	bl	8002a44 <HAL_RCC_OscConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015c6:	f000 f909 	bl	80017dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fcb0 	bl	8002f48 <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015ee:	f000 f8f5 	bl	80017dc <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3740      	adds	r7, #64	; 0x40
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_I2C1_Init+0x50>)
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <MX_I2C1_Init+0x54>)
 8001604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_I2C1_Init+0x50>)
 8001608:	4a12      	ldr	r2, [pc, #72]	; (8001654 <MX_I2C1_Init+0x58>)
 800160a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_I2C1_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_I2C1_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_I2C1_Init+0x50>)
 800161a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800161e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <MX_I2C1_Init+0x50>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_I2C1_Init+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_I2C1_Init+0x50>)
 800163a:	f000 fd67 	bl	800210c <HAL_I2C_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001644:	f000 f8ca 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000070 	.word	0x20000070
 8001650:	40005400 	.word	0x40005400
 8001654:	000186a0 	.word	0x000186a0

08001658 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <MX_I2C2_Init+0x50>)
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <MX_I2C2_Init+0x54>)
 8001660:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_I2C2_Init+0x50>)
 8001664:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <MX_I2C2_Init+0x58>)
 8001666:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_I2C2_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_I2C2_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_I2C2_Init+0x50>)
 8001676:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800167a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <MX_I2C2_Init+0x50>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_I2C2_Init+0x50>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <MX_I2C2_Init+0x50>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_I2C2_Init+0x50>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001694:	4804      	ldr	r0, [pc, #16]	; (80016a8 <MX_I2C2_Init+0x50>)
 8001696:	f000 fd39 	bl	800210c <HAL_I2C_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016a0:	f000 f89c 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200000c4 	.word	0x200000c4
 80016ac:	40005800 	.word	0x40005800
 80016b0:	000186a0 	.word	0x000186a0

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c8:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a3e      	ldr	r2, [pc, #248]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016ce:	f043 0310 	orr.w	r3, r3, #16
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b3c      	ldr	r3, [pc, #240]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a38      	ldr	r2, [pc, #224]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a32      	ldr	r2, [pc, #200]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <MX_GPIO_Init+0x114>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001716:	482d      	ldr	r0, [pc, #180]	; (80017cc <MX_GPIO_Init+0x118>)
 8001718:	f000 fcaf 	bl	800207a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R7_Pin|R6_Pin|R5_Pin|R4_Pin
 800171c:	2200      	movs	r2, #0
 800171e:	f640 71fe 	movw	r1, #4094	; 0xffe
 8001722:	482b      	ldr	r0, [pc, #172]	; (80017d0 <MX_GPIO_Init+0x11c>)
 8001724:	f000 fca9 	bl	800207a <HAL_GPIO_WritePin>
                          |R3_Pin|R2_Pin|R1_Pin|C4_OUT_Pin
                          |C3_OUT_Pin|C2_OUT_Pin|C1_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2302      	movs	r3, #2
 8001738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	4619      	mov	r1, r3
 8001740:	4822      	ldr	r0, [pc, #136]	; (80017cc <MX_GPIO_Init+0x118>)
 8001742:	f000 faff 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin R6_Pin R5_Pin R4_Pin
                           R3_Pin R2_Pin R1_Pin C4_OUT_Pin
                           C3_OUT_Pin C2_OUT_Pin C1_OUT_Pin */
  GPIO_InitStruct.Pin = R7_Pin|R6_Pin|R5_Pin|R4_Pin
 8001746:	f640 73fe 	movw	r3, #4094	; 0xffe
 800174a:	613b      	str	r3, [r7, #16]
                          |R3_Pin|R2_Pin|R1_Pin|C4_OUT_Pin
                          |C3_OUT_Pin|C2_OUT_Pin|C1_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001750:	2302      	movs	r3, #2
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2302      	movs	r3, #2
 8001756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4619      	mov	r1, r3
 800175e:	481c      	ldr	r0, [pc, #112]	; (80017d0 <MX_GPIO_Init+0x11c>)
 8001760:	f000 faf0 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_IN_Pin R3_IN_Pin R2_IN_Pin R1_IN_Pin
                           UP_EXTI_3_Pin DOWN_EXTI_4_Pin ENTER_EXTI_5_Pin */
  GPIO_InitStruct.Pin = R4_IN_Pin|R3_IN_Pin|R2_IN_Pin|R1_IN_Pin
 8001764:	f24f 0338 	movw	r3, #61496	; 0xf038
 8001768:	613b      	str	r3, [r7, #16]
                          |UP_EXTI_3_Pin|DOWN_EXTI_4_Pin|ENTER_EXTI_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_GPIO_Init+0x120>)
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176e:	2301      	movs	r3, #1
 8001770:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	4619      	mov	r1, r3
 8001778:	4817      	ldr	r0, [pc, #92]	; (80017d8 <MX_GPIO_Init+0x124>)
 800177a:	f000 fae3 	bl	8001d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2105      	movs	r1, #5
 8001782:	2009      	movs	r0, #9
 8001784:	f000 faa7 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001788:	2009      	movs	r0, #9
 800178a:	f000 fac0 	bl	8001d0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2105      	movs	r1, #5
 8001792:	200a      	movs	r0, #10
 8001794:	f000 fa9f 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001798:	200a      	movs	r0, #10
 800179a:	f000 fab8 	bl	8001d0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2105      	movs	r1, #5
 80017a2:	2017      	movs	r0, #23
 80017a4:	f000 fa97 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017a8:	2017      	movs	r0, #23
 80017aa:	f000 fab0 	bl	8001d0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2105      	movs	r1, #5
 80017b2:	2028      	movs	r0, #40	; 0x28
 80017b4:	f000 fa8f 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017b8:	2028      	movs	r0, #40	; 0x28
 80017ba:	f000 faa8 	bl	8001d0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017be:	bf00      	nop
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40011000 	.word	0x40011000
 80017d0:	40010800 	.word	0x40010800
 80017d4:	10210000 	.word	0x10210000
 80017d8:	40010c00 	.word	0x40010c00

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <Error_Handler+0x8>
	...

080017e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_MspInit+0x5c>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	4a14      	ldr	r2, [pc, #80]	; (8001844 <HAL_MspInit+0x5c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6193      	str	r3, [r2, #24]
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_MspInit+0x5c>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_MspInit+0x5c>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_MspInit+0x5c>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	61d3      	str	r3, [r2, #28]
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_MspInit+0x5c>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_MspInit+0x60>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_MspInit+0x60>)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	40021000 	.word	0x40021000
 8001848:	40010000 	.word	0x40010000

0800184c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0318 	add.w	r3, r7, #24
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a2b      	ldr	r2, [pc, #172]	; (8001914 <HAL_I2C_MspInit+0xc8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d124      	bne.n	80018b6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186c:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <HAL_I2C_MspInit+0xcc>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a29      	ldr	r2, [pc, #164]	; (8001918 <HAL_I2C_MspInit+0xcc>)
 8001872:	f043 0308 	orr.w	r3, r3, #8
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b27      	ldr	r3, [pc, #156]	; (8001918 <HAL_I2C_MspInit+0xcc>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001884:	23c0      	movs	r3, #192	; 0xc0
 8001886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001888:	2312      	movs	r3, #18
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001890:	f107 0318 	add.w	r3, r7, #24
 8001894:	4619      	mov	r1, r3
 8001896:	4821      	ldr	r0, [pc, #132]	; (800191c <HAL_I2C_MspInit+0xd0>)
 8001898:	f000 fa54 	bl	8001d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <HAL_I2C_MspInit+0xcc>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	4a1d      	ldr	r2, [pc, #116]	; (8001918 <HAL_I2C_MspInit+0xcc>)
 80018a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a6:	61d3      	str	r3, [r2, #28]
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_I2C_MspInit+0xcc>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018b4:	e029      	b.n	800190a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a19      	ldr	r2, [pc, #100]	; (8001920 <HAL_I2C_MspInit+0xd4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d124      	bne.n	800190a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_I2C_MspInit+0xcc>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <HAL_I2C_MspInit+0xcc>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_I2C_MspInit+0xcc>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018de:	2312      	movs	r3, #18
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 0318 	add.w	r3, r7, #24
 80018ea:	4619      	mov	r1, r3
 80018ec:	480b      	ldr	r0, [pc, #44]	; (800191c <HAL_I2C_MspInit+0xd0>)
 80018ee:	f000 fa29 	bl	8001d44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_I2C_MspInit+0xcc>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a08      	ldr	r2, [pc, #32]	; (8001918 <HAL_I2C_MspInit+0xcc>)
 80018f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_I2C_MspInit+0xcc>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	; 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40005400 	.word	0x40005400
 8001918:	40021000 	.word	0x40021000
 800191c:	40010c00 	.word	0x40010c00
 8001920:	40005800 	.word	0x40005800

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <NMI_Handler+0x4>

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196a:	f000 f89d 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}

08001972 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_EXTI_3_Pin);
 8001976:	2008      	movs	r0, #8
 8001978:	f000 fbb0 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOWN_EXTI_4_Pin);
 8001984:	2010      	movs	r0, #16
 8001986:	f000 fba9 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}

0800198e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENTER_EXTI_5_Pin);
 8001992:	2020      	movs	r0, #32
 8001994:	f000 fba2 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(R4_IN_Pin);
 80019a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019a4:	f000 fb9a 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R3_IN_Pin);
 80019a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019ac:	f000 fb96 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R2_IN_Pin);
 80019b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019b4:	f000 fb92 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(R1_IN_Pin);
 80019b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80019bc:	f000 fb8e 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019d0:	f7ff fff8 	bl	80019c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d4:	480b      	ldr	r0, [pc, #44]	; (8001a04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019d6:	490c      	ldr	r1, [pc, #48]	; (8001a08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <LoopFillZerobss+0x16>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019ec:	4c09      	ldr	r4, [pc, #36]	; (8001a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019fa:	f001 fc1f 	bl	800323c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019fe:	f7ff fcbb 	bl	8001378 <main>
  bx lr
 8001a02:	4770      	bx	lr
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001a0c:	080034fc 	.word	0x080034fc
  ldr r2, =_sbss
 8001a10:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001a14:	20000160 	.word	0x20000160

08001a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC1_2_IRQHandler>
	...

08001a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_Init+0x28>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_Init+0x28>)
 8001a26:	f043 0310 	orr.w	r3, r3, #16
 8001a2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 f947 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	2004      	movs	r0, #4
 8001a34:	f000 f808 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff fed6 	bl	80017e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40022000 	.word	0x40022000

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x54>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x58>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f95f 	bl	8001d2a <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00e      	b.n	8001a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d80a      	bhi.n	8001a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f000 f927 	bl	8001cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_InitTick+0x5c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2000002c 	.word	0x2000002c
 8001aa0:	20000034 	.word	0x20000034
 8001aa4:	20000030 	.word	0x20000030

08001aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_IncTick+0x1c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_IncTick+0x20>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a03      	ldr	r2, [pc, #12]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	20000034 	.word	0x20000034
 8001ac8:	2000015c 	.word	0x2000015c

08001acc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b02      	ldr	r3, [pc, #8]	; (8001adc <HAL_GetTick+0x10>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	2000015c 	.word	0x2000015c

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff fff0 	bl	8001acc <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffe0 	bl	8001acc <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000034 	.word	0x20000034

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4906      	ldr	r1, [pc, #24]	; (8001bc0 <__NVIC_EnableIRQ+0x34>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c8c:	d301      	bcc.n	8001c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00f      	b.n	8001cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <SysTick_Config+0x40>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f7ff ff90 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <SysTick_Config+0x40>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <SysTick_Config+0x40>)
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff2d 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce8:	f7ff ff42 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7ff ff90 	bl	8001c18 <NVIC_EncodePriority>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff5f 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff35 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffa2 	bl	8001c7c <SysTick_Config>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b08b      	sub	sp, #44	; 0x2c
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	e169      	b.n	800202c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8158 	bne.w	8002026 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a9a      	ldr	r2, [pc, #616]	; (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d05e      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d80:	4a98      	ldr	r2, [pc, #608]	; (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d875      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d86:	4a98      	ldr	r2, [pc, #608]	; (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d058      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d8c:	4a96      	ldr	r2, [pc, #600]	; (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d86f      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d92:	4a96      	ldr	r2, [pc, #600]	; (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d052      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d98:	4a94      	ldr	r2, [pc, #592]	; (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d869      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d9e:	4a94      	ldr	r2, [pc, #592]	; (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d04c      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001da4:	4a92      	ldr	r2, [pc, #584]	; (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d863      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001daa:	4a92      	ldr	r2, [pc, #584]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d046      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001db0:	4a90      	ldr	r2, [pc, #576]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d85d      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d82a      	bhi.n	8001e10 <HAL_GPIO_Init+0xcc>
 8001dba:	2b12      	cmp	r3, #18
 8001dbc:	d859      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001dbe:	a201      	add	r2, pc, #4	; (adr r2, 8001dc4 <HAL_GPIO_Init+0x80>)
 8001dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e19 	.word	0x08001e19
 8001dcc:	08001e2b 	.word	0x08001e2b
 8001dd0:	08001e6d 	.word	0x08001e6d
 8001dd4:	08001e73 	.word	0x08001e73
 8001dd8:	08001e73 	.word	0x08001e73
 8001ddc:	08001e73 	.word	0x08001e73
 8001de0:	08001e73 	.word	0x08001e73
 8001de4:	08001e73 	.word	0x08001e73
 8001de8:	08001e73 	.word	0x08001e73
 8001dec:	08001e73 	.word	0x08001e73
 8001df0:	08001e73 	.word	0x08001e73
 8001df4:	08001e73 	.word	0x08001e73
 8001df8:	08001e73 	.word	0x08001e73
 8001dfc:	08001e73 	.word	0x08001e73
 8001e00:	08001e73 	.word	0x08001e73
 8001e04:	08001e73 	.word	0x08001e73
 8001e08:	08001e21 	.word	0x08001e21
 8001e0c:	08001e35 	.word	0x08001e35
 8001e10:	4a79      	ldr	r2, [pc, #484]	; (8001ff8 <HAL_GPIO_Init+0x2b4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e16:	e02c      	b.n	8001e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e029      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	3304      	adds	r3, #4
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e024      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	3308      	adds	r3, #8
 8001e30:	623b      	str	r3, [r7, #32]
          break;
 8001e32:	e01f      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e01a      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e46:	2304      	movs	r3, #4
 8001e48:	623b      	str	r3, [r7, #32]
          break;
 8001e4a:	e013      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e54:	2308      	movs	r3, #8
 8001e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	611a      	str	r2, [r3, #16]
          break;
 8001e5e:	e009      	b.n	8001e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e60:	2308      	movs	r3, #8
 8001e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	615a      	str	r2, [r3, #20]
          break;
 8001e6a:	e003      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
          break;
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          break;
 8001e72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2bff      	cmp	r3, #255	; 0xff
 8001e78:	d801      	bhi.n	8001e7e <HAL_GPIO_Init+0x13a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	e001      	b.n	8001e82 <HAL_GPIO_Init+0x13e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3304      	adds	r3, #4
 8001e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2bff      	cmp	r3, #255	; 0xff
 8001e88:	d802      	bhi.n	8001e90 <HAL_GPIO_Init+0x14c>
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	e002      	b.n	8001e96 <HAL_GPIO_Init+0x152>
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	3b08      	subs	r3, #8
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	210f      	movs	r1, #15
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	6a39      	ldr	r1, [r7, #32]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80b1 	beq.w	8002026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec4:	4b4d      	ldr	r3, [pc, #308]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a4c      	ldr	r2, [pc, #304]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001edc:	4a48      	ldr	r2, [pc, #288]	; (8002000 <HAL_GPIO_Init+0x2bc>)
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a40      	ldr	r2, [pc, #256]	; (8002004 <HAL_GPIO_Init+0x2c0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_GPIO_Init+0x1ec>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3f      	ldr	r2, [pc, #252]	; (8002008 <HAL_GPIO_Init+0x2c4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00d      	beq.n	8001f2c <HAL_GPIO_Init+0x1e8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3e      	ldr	r2, [pc, #248]	; (800200c <HAL_GPIO_Init+0x2c8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <HAL_GPIO_Init+0x1e4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3d      	ldr	r2, [pc, #244]	; (8002010 <HAL_GPIO_Init+0x2cc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_GPIO_Init+0x1e0>
 8001f20:	2303      	movs	r3, #3
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f24:	2304      	movs	r3, #4
 8001f26:	e004      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f30:	2300      	movs	r3, #0
 8001f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f34:	f002 0203 	and.w	r2, r2, #3
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f42:	492f      	ldr	r1, [pc, #188]	; (8002000 <HAL_GPIO_Init+0x2bc>)
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	492c      	ldr	r1, [pc, #176]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4928      	ldr	r1, [pc, #160]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f84:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	4922      	ldr	r1, [pc, #136]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	491e      	ldr	r1, [pc, #120]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4918      	ldr	r1, [pc, #96]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4914      	ldr	r1, [pc, #80]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d021      	beq.n	8002018 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e021      	b.n	8002026 <HAL_GPIO_Init+0x2e2>
 8001fe2:	bf00      	nop
 8001fe4:	10320000 	.word	0x10320000
 8001fe8:	10310000 	.word	0x10310000
 8001fec:	10220000 	.word	0x10220000
 8001ff0:	10210000 	.word	0x10210000
 8001ff4:	10120000 	.word	0x10120000
 8001ff8:	10110000 	.word	0x10110000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010000 	.word	0x40010000
 8002004:	40010800 	.word	0x40010800
 8002008:	40010c00 	.word	0x40010c00
 800200c:	40011000 	.word	0x40011000
 8002010:	40011400 	.word	0x40011400
 8002014:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_GPIO_Init+0x304>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	43db      	mvns	r3, r3
 8002020:	4909      	ldr	r1, [pc, #36]	; (8002048 <HAL_GPIO_Init+0x304>)
 8002022:	4013      	ands	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	3301      	adds	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f ae8e 	bne.w	8001d58 <HAL_GPIO_Init+0x14>
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	372c      	adds	r7, #44	; 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	e001      	b.n	800206e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	807b      	strh	r3, [r7, #2]
 8002086:	4613      	mov	r3, r2
 8002088:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800208a:	787b      	ldrb	r3, [r7, #1]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002090:	887a      	ldrh	r2, [r7, #2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002096:	e003      	b.n	80020a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	041a      	lsls	r2, r3, #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	611a      	str	r2, [r3, #16]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020bc:	887a      	ldrh	r2, [r7, #2]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	041a      	lsls	r2, r3, #16
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	400b      	ands	r3, r1
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	611a      	str	r2, [r3, #16]
}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff f856 	bl	80011ac <HAL_GPIO_EXTI_Callback>
  }
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40010400 	.word	0x40010400

0800210c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e12b      	b.n	8002376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fb8a 	bl	800184c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	; 0x24
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800215e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800216e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002170:	f001 f832 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8002174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4a81      	ldr	r2, [pc, #516]	; (8002380 <HAL_I2C_Init+0x274>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d807      	bhi.n	8002190 <HAL_I2C_Init+0x84>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a80      	ldr	r2, [pc, #512]	; (8002384 <HAL_I2C_Init+0x278>)
 8002184:	4293      	cmp	r3, r2
 8002186:	bf94      	ite	ls
 8002188:	2301      	movls	r3, #1
 800218a:	2300      	movhi	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e006      	b.n	800219e <HAL_I2C_Init+0x92>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4a7d      	ldr	r2, [pc, #500]	; (8002388 <HAL_I2C_Init+0x27c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	bf94      	ite	ls
 8002198:	2301      	movls	r3, #1
 800219a:	2300      	movhi	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0e7      	b.n	8002376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4a78      	ldr	r2, [pc, #480]	; (800238c <HAL_I2C_Init+0x280>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0c9b      	lsrs	r3, r3, #18
 80021b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a6a      	ldr	r2, [pc, #424]	; (8002380 <HAL_I2C_Init+0x274>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d802      	bhi.n	80021e0 <HAL_I2C_Init+0xd4>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	3301      	adds	r3, #1
 80021de:	e009      	b.n	80021f4 <HAL_I2C_Init+0xe8>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	4a69      	ldr	r2, [pc, #420]	; (8002390 <HAL_I2C_Init+0x284>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	3301      	adds	r3, #1
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002206:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	495c      	ldr	r1, [pc, #368]	; (8002380 <HAL_I2C_Init+0x274>)
 8002210:	428b      	cmp	r3, r1
 8002212:	d819      	bhi.n	8002248 <HAL_I2C_Init+0x13c>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1e59      	subs	r1, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002222:	1c59      	adds	r1, r3, #1
 8002224:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002228:	400b      	ands	r3, r1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_I2C_Init+0x138>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1e59      	subs	r1, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fbb1 f3f3 	udiv	r3, r1, r3
 800223c:	3301      	adds	r3, #1
 800223e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002242:	e051      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 8002244:	2304      	movs	r3, #4
 8002246:	e04f      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d111      	bne.n	8002274 <HAL_I2C_Init+0x168>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1e58      	subs	r0, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	440b      	add	r3, r1
 800225e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002262:	3301      	adds	r3, #1
 8002264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	e012      	b.n	800229a <HAL_I2C_Init+0x18e>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1e58      	subs	r0, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	0099      	lsls	r1, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	fbb0 f3f3 	udiv	r3, r0, r3
 800228a:	3301      	adds	r3, #1
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Init+0x196>
 800229e:	2301      	movs	r3, #1
 80022a0:	e022      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10e      	bne.n	80022c8 <HAL_I2C_Init+0x1bc>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1e58      	subs	r0, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	440b      	add	r3, r1
 80022b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c6:	e00f      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	0099      	lsls	r1, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	6809      	ldr	r1, [r1, #0]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002316:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6911      	ldr	r1, [r2, #16]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68d2      	ldr	r2, [r2, #12]
 8002322:	4311      	orrs	r1, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	430b      	orrs	r3, r1
 800232a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	000186a0 	.word	0x000186a0
 8002384:	001e847f 	.word	0x001e847f
 8002388:	003d08ff 	.word	0x003d08ff
 800238c:	431bde83 	.word	0x431bde83
 8002390:	10624dd3 	.word	0x10624dd3

08002394 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	461a      	mov	r2, r3
 80023a0:	460b      	mov	r3, r1
 80023a2:	817b      	strh	r3, [r7, #10]
 80023a4:	4613      	mov	r3, r2
 80023a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff fb90 	bl	8001acc <HAL_GetTick>
 80023ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	f040 80e0 	bne.w	800257c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2319      	movs	r3, #25
 80023c2:	2201      	movs	r2, #1
 80023c4:	4970      	ldr	r1, [pc, #448]	; (8002588 <HAL_I2C_Master_Transmit+0x1f4>)
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f964 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
 80023d4:	e0d3      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_I2C_Master_Transmit+0x50>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e0cc      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d007      	beq.n	800240a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002418:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2221      	movs	r2, #33	; 0x21
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2210      	movs	r2, #16
 8002426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	893a      	ldrh	r2, [r7, #8]
 800243a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4a50      	ldr	r2, [pc, #320]	; (800258c <HAL_I2C_Master_Transmit+0x1f8>)
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800244c:	8979      	ldrh	r1, [r7, #10]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6a3a      	ldr	r2, [r7, #32]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f89c 	bl	8002590 <I2C_MasterRequestWrite>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e08d      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002478:	e066      	b.n	8002548 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	6a39      	ldr	r1, [r7, #32]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fa22 	bl	80028c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00d      	beq.n	80024a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	2b04      	cmp	r3, #4
 8002490:	d107      	bne.n	80024a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e06b      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d11b      	bne.n	800251c <HAL_I2C_Master_Transmit+0x188>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d017      	beq.n	800251c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	781a      	ldrb	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	6a39      	ldr	r1, [r7, #32]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fa19 	bl	8002958 <I2C_WaitOnBTFFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00d      	beq.n	8002548 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	2b04      	cmp	r3, #4
 8002532:	d107      	bne.n	8002544 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002542:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e01a      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254c:	2b00      	cmp	r3, #0
 800254e:	d194      	bne.n	800247a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	00100002 	.word	0x00100002
 800258c:	ffff0000 	.word	0xffff0000

08002590 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	460b      	mov	r3, r1
 800259e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d006      	beq.n	80025ba <I2C_MasterRequestWrite+0x2a>
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d003      	beq.n	80025ba <I2C_MasterRequestWrite+0x2a>
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025b8:	d108      	bne.n	80025cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e00b      	b.n	80025e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	2b12      	cmp	r3, #18
 80025d2:	d107      	bne.n	80025e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 f84f 	bl	8002694 <I2C_WaitOnFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00d      	beq.n	8002618 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260a:	d103      	bne.n	8002614 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002612:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e035      	b.n	8002684 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002620:	d108      	bne.n	8002634 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002622:	897b      	ldrh	r3, [r7, #10]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002630:	611a      	str	r2, [r3, #16]
 8002632:	e01b      	b.n	800266c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002634:	897b      	ldrh	r3, [r7, #10]
 8002636:	11db      	asrs	r3, r3, #7
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f003 0306 	and.w	r3, r3, #6
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f063 030f 	orn	r3, r3, #15
 8002644:	b2da      	uxtb	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	490e      	ldr	r1, [pc, #56]	; (800268c <I2C_MasterRequestWrite+0xfc>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f898 	bl	8002788 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e010      	b.n	8002684 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002662:	897b      	ldrh	r3, [r7, #10]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4907      	ldr	r1, [pc, #28]	; (8002690 <I2C_MasterRequestWrite+0x100>)
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f888 	bl	8002788 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	00010008 	.word	0x00010008
 8002690:	00010002 	.word	0x00010002

08002694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	4613      	mov	r3, r2
 80026a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026a4:	e048      	b.n	8002738 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d044      	beq.n	8002738 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ae:	f7ff fa0d 	bl	8001acc <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d302      	bcc.n	80026c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d139      	bne.n	8002738 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	0c1b      	lsrs	r3, r3, #16
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d10d      	bne.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	43da      	mvns	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	4013      	ands	r3, r2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	e00c      	b.n	8002704 <I2C_WaitOnFlagUntilTimeout+0x70>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	43da      	mvns	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	4013      	ands	r3, r2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	429a      	cmp	r2, r3
 8002708:	d116      	bne.n	8002738 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	f043 0220 	orr.w	r2, r3, #32
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e023      	b.n	8002780 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	0c1b      	lsrs	r3, r3, #16
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d10d      	bne.n	800275e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	43da      	mvns	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4013      	ands	r3, r2
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	e00c      	b.n	8002778 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	43da      	mvns	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4013      	ands	r3, r2
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	429a      	cmp	r2, r3
 800277c:	d093      	beq.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002796:	e071      	b.n	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a6:	d123      	bne.n	80027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f043 0204 	orr.w	r2, r3, #4
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e067      	b.n	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f6:	d041      	beq.n	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f8:	f7ff f968 	bl	8001acc <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	d302      	bcc.n	800280e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d136      	bne.n	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10c      	bne.n	8002832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4013      	ands	r3, r2
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	bf14      	ite	ne
 800282a:	2301      	movne	r3, #1
 800282c:	2300      	moveq	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	e00b      	b.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	43da      	mvns	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4013      	ands	r3, r2
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf14      	ite	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2300      	moveq	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f043 0220 	orr.w	r2, r3, #32
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e021      	b.n	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	0c1b      	lsrs	r3, r3, #16
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d10c      	bne.n	80028a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	43da      	mvns	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	4013      	ands	r3, r2
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf14      	ite	ne
 8002898:	2301      	movne	r3, #1
 800289a:	2300      	moveq	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e00b      	b.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	43da      	mvns	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4013      	ands	r3, r2
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f47f af6d 	bne.w	8002798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028d4:	e034      	b.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f886 	bl	80029e8 <I2C_IsAcknowledgeFailed>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e034      	b.n	8002950 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d028      	beq.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ee:	f7ff f8ed 	bl	8001acc <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d302      	bcc.n	8002904 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d11d      	bne.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290e:	2b80      	cmp	r3, #128	; 0x80
 8002910:	d016      	beq.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e007      	b.n	8002950 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294a:	2b80      	cmp	r3, #128	; 0x80
 800294c:	d1c3      	bne.n	80028d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002964:	e034      	b.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f83e 	bl	80029e8 <I2C_IsAcknowledgeFailed>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e034      	b.n	80029e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d028      	beq.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297e:	f7ff f8a5 	bl	8001acc <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	d302      	bcc.n	8002994 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d11d      	bne.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d016      	beq.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e007      	b.n	80029e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d1c3      	bne.n	8002966 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fe:	d11b      	bne.n	8002a38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f043 0204 	orr.w	r2, r3, #4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e272      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8087 	beq.w	8002b72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a64:	4b92      	ldr	r3, [pc, #584]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d00c      	beq.n	8002a8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a70:	4b8f      	ldr	r3, [pc, #572]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d112      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x5e>
 8002a7c:	4b8c      	ldr	r3, [pc, #560]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a88:	d10b      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8a:	4b89      	ldr	r3, [pc, #548]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d06c      	beq.n	8002b70 <HAL_RCC_OscConfig+0x12c>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d168      	bne.n	8002b70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e24c      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_OscConfig+0x76>
 8002aac:	4b80      	ldr	r3, [pc, #512]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a7f      	ldr	r2, [pc, #508]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	e02e      	b.n	8002b18 <HAL_RCC_OscConfig+0xd4>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0x98>
 8002ac2:	4b7b      	ldr	r3, [pc, #492]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a7a      	ldr	r2, [pc, #488]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	4b78      	ldr	r3, [pc, #480]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a77      	ldr	r2, [pc, #476]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e01d      	b.n	8002b18 <HAL_RCC_OscConfig+0xd4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0xbc>
 8002ae6:	4b72      	ldr	r3, [pc, #456]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a71      	ldr	r2, [pc, #452]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b6f      	ldr	r3, [pc, #444]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a6e      	ldr	r2, [pc, #440]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e00b      	b.n	8002b18 <HAL_RCC_OscConfig+0xd4>
 8002b00:	4b6b      	ldr	r3, [pc, #428]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a6a      	ldr	r2, [pc, #424]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b68      	ldr	r3, [pc, #416]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a67      	ldr	r2, [pc, #412]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d013      	beq.n	8002b48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe ffd4 	bl	8001acc <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b28:	f7fe ffd0 	bl	8001acc <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	; 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e200      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0xe4>
 8002b46:	e014      	b.n	8002b72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fe ffc0 	bl	8001acc <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe ffbc 	bl	8001acc <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e1ec      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b62:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x10c>
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d063      	beq.n	8002c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b7e:	4b4c      	ldr	r3, [pc, #304]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b8a:	4b49      	ldr	r3, [pc, #292]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d11c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x18c>
 8002b96:	4b46      	ldr	r3, [pc, #280]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d116      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba2:	4b43      	ldr	r3, [pc, #268]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <HAL_RCC_OscConfig+0x176>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e1c0      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	4b3d      	ldr	r3, [pc, #244]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4939      	ldr	r1, [pc, #228]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	e03a      	b.n	8002c46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd8:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <HAL_RCC_OscConfig+0x270>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe ff75 	bl	8001acc <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be6:	f7fe ff71 	bl	8001acc <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e1a1      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4927      	ldr	r1, [pc, #156]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]
 8002c18:	e015      	b.n	8002c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1a:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe ff54 	bl	8001acc <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7fe ff50 	bl	8001acc <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e180      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d03a      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d019      	beq.n	8002c8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7fe ff34 	bl	8001acc <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fe ff30 	bl	8001acc <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e160      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c86:	2001      	movs	r0, #1
 8002c88:	f000 faba 	bl	8003200 <RCC_Delay>
 8002c8c:	e01c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c94:	f7fe ff1a 	bl	8001acc <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9a:	e00f      	b.n	8002cbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9c:	f7fe ff16 	bl	8001acc <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d908      	bls.n	8002cbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e146      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	42420000 	.word	0x42420000
 8002cb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbc:	4b92      	ldr	r3, [pc, #584]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e9      	bne.n	8002c9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80a6 	beq.w	8002e22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cda:	4b8b      	ldr	r3, [pc, #556]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10d      	bne.n	8002d02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	4b88      	ldr	r3, [pc, #544]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	4a87      	ldr	r2, [pc, #540]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	61d3      	str	r3, [r2, #28]
 8002cf2:	4b85      	ldr	r3, [pc, #532]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d02:	4b82      	ldr	r3, [pc, #520]	; (8002f0c <HAL_RCC_OscConfig+0x4c8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d118      	bne.n	8002d40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0e:	4b7f      	ldr	r3, [pc, #508]	; (8002f0c <HAL_RCC_OscConfig+0x4c8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7e      	ldr	r2, [pc, #504]	; (8002f0c <HAL_RCC_OscConfig+0x4c8>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1a:	f7fe fed7 	bl	8001acc <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d22:	f7fe fed3 	bl	8001acc <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b64      	cmp	r3, #100	; 0x64
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e103      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	4b75      	ldr	r3, [pc, #468]	; (8002f0c <HAL_RCC_OscConfig+0x4c8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x312>
 8002d48:	4b6f      	ldr	r3, [pc, #444]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4a6e      	ldr	r2, [pc, #440]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6213      	str	r3, [r2, #32]
 8002d54:	e02d      	b.n	8002db2 <HAL_RCC_OscConfig+0x36e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x334>
 8002d5e:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a69      	ldr	r2, [pc, #420]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6213      	str	r3, [r2, #32]
 8002d6a:	4b67      	ldr	r3, [pc, #412]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a66      	ldr	r2, [pc, #408]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6213      	str	r3, [r2, #32]
 8002d76:	e01c      	b.n	8002db2 <HAL_RCC_OscConfig+0x36e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d10c      	bne.n	8002d9a <HAL_RCC_OscConfig+0x356>
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4a60      	ldr	r2, [pc, #384]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	f043 0304 	orr.w	r3, r3, #4
 8002d8a:	6213      	str	r3, [r2, #32]
 8002d8c:	4b5e      	ldr	r3, [pc, #376]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4a5d      	ldr	r2, [pc, #372]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6213      	str	r3, [r2, #32]
 8002d98:	e00b      	b.n	8002db2 <HAL_RCC_OscConfig+0x36e>
 8002d9a:	4b5b      	ldr	r3, [pc, #364]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4a5a      	ldr	r2, [pc, #360]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	6213      	str	r3, [r2, #32]
 8002da6:	4b58      	ldr	r3, [pc, #352]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4a57      	ldr	r2, [pc, #348]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	f023 0304 	bic.w	r3, r3, #4
 8002db0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d015      	beq.n	8002de6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dba:	f7fe fe87 	bl	8001acc <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fe fe83 	bl	8001acc <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e0b1      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	4b4b      	ldr	r3, [pc, #300]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ee      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x37e>
 8002de4:	e014      	b.n	8002e10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7fe fe71 	bl	8001acc <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7fe fe6d 	bl	8001acc <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e09b      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e04:	4b40      	ldr	r3, [pc, #256]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ee      	bne.n	8002dee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4b3c      	ldr	r3, [pc, #240]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4a3b      	ldr	r2, [pc, #236]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8087 	beq.w	8002f3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e2c:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d061      	beq.n	8002efc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d146      	bne.n	8002ece <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e40:	4b33      	ldr	r3, [pc, #204]	; (8002f10 <HAL_RCC_OscConfig+0x4cc>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fe fe41 	bl	8001acc <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7fe fe3d 	bl	8001acc <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e06d      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e60:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e74:	d108      	bne.n	8002e88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e76:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	4921      	ldr	r1, [pc, #132]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e88:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a19      	ldr	r1, [r3, #32]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	491b      	ldr	r1, [pc, #108]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fe11 	bl	8001acc <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eae:	f7fe fe0d 	bl	8001acc <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e03d      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x46a>
 8002ecc:	e035      	b.n	8002f3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ece:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <HAL_RCC_OscConfig+0x4cc>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fdfa 	bl	8001acc <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe fdf6 	bl	8001acc <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e026      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x498>
 8002efa:	e01e      	b.n	8002f3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e019      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_OscConfig+0x500>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000

08002f48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0d0      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b6a      	ldr	r3, [pc, #424]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d910      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b67      	ldr	r3, [pc, #412]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 0207 	bic.w	r2, r3, #7
 8002f72:	4965      	ldr	r1, [pc, #404]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b63      	ldr	r3, [pc, #396]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0b8      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa4:	4b59      	ldr	r3, [pc, #356]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a58      	ldr	r2, [pc, #352]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fbc:	4b53      	ldr	r3, [pc, #332]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc8:	4b50      	ldr	r3, [pc, #320]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	494d      	ldr	r1, [pc, #308]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d040      	beq.n	8003068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b47      	ldr	r3, [pc, #284]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d115      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e07f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003006:	4b41      	ldr	r3, [pc, #260]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e073      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003016:	4b3d      	ldr	r3, [pc, #244]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e06b      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003026:	4b39      	ldr	r3, [pc, #228]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f023 0203 	bic.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4936      	ldr	r1, [pc, #216]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003038:	f7fe fd48 	bl	8001acc <HAL_GetTick>
 800303c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	e00a      	b.n	8003056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003040:	f7fe fd44 	bl	8001acc <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	; 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e053      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	4b2d      	ldr	r3, [pc, #180]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 020c 	and.w	r2, r3, #12
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	429a      	cmp	r2, r3
 8003066:	d1eb      	bne.n	8003040 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003068:	4b27      	ldr	r3, [pc, #156]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d210      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 0207 	bic.w	r2, r3, #7
 800307e:	4922      	ldr	r1, [pc, #136]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e032      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a4:	4b19      	ldr	r3, [pc, #100]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4916      	ldr	r1, [pc, #88]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030c2:	4b12      	ldr	r3, [pc, #72]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	490e      	ldr	r1, [pc, #56]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030d6:	f000 f821 	bl	800311c <HAL_RCC_GetSysClockFreq>
 80030da:	4602      	mov	r2, r0
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	490a      	ldr	r1, [pc, #40]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 80030e8:	5ccb      	ldrb	r3, [r1, r3]
 80030ea:	fa22 f303 	lsr.w	r3, r2, r3
 80030ee:	4a09      	ldr	r2, [pc, #36]	; (8003114 <HAL_RCC_ClockConfig+0x1cc>)
 80030f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_ClockConfig+0x1d0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fca6 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40022000 	.word	0x40022000
 800310c:	40021000 	.word	0x40021000
 8003110:	080034c8 	.word	0x080034c8
 8003114:	2000002c 	.word	0x2000002c
 8003118:	20000030 	.word	0x20000030

0800311c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	2300      	movs	r3, #0
 8003130:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003136:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b04      	cmp	r3, #4
 8003144:	d002      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x30>
 8003146:	2b08      	cmp	r3, #8
 8003148:	d003      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x36>
 800314a:	e027      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800314c:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800314e:	613b      	str	r3, [r7, #16]
      break;
 8003150:	e027      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	0c9b      	lsrs	r3, r3, #18
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800315c:	5cd3      	ldrb	r3, [r2, r3]
 800315e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d010      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	0c5b      	lsrs	r3, r3, #17
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	4a11      	ldr	r2, [pc, #68]	; (80031bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003176:	5cd3      	ldrb	r3, [r2, r3]
 8003178:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a0d      	ldr	r2, [pc, #52]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800317e:	fb03 f202 	mul.w	r2, r3, r2
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e004      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	613b      	str	r3, [r7, #16]
      break;
 800319a:	e002      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800319e:	613b      	str	r3, [r7, #16]
      break;
 80031a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a2:	693b      	ldr	r3, [r7, #16]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	007a1200 	.word	0x007a1200
 80031b8:	080034e0 	.word	0x080034e0
 80031bc:	080034f0 	.word	0x080034f0
 80031c0:	003d0900 	.word	0x003d0900

080031c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c8:	4b02      	ldr	r3, [pc, #8]	; (80031d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	2000002c 	.word	0x2000002c

080031d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031dc:	f7ff fff2 	bl	80031c4 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4903      	ldr	r1, [pc, #12]	; (80031fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000
 80031fc:	080034d8 	.word	0x080034d8

08003200 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <RCC_Delay+0x34>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <RCC_Delay+0x38>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	0a5b      	lsrs	r3, r3, #9
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800321c:	bf00      	nop
  }
  while (Delay --);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1e5a      	subs	r2, r3, #1
 8003222:	60fa      	str	r2, [r7, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f9      	bne.n	800321c <RCC_Delay+0x1c>
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	2000002c 	.word	0x2000002c
 8003238:	10624dd3 	.word	0x10624dd3

0800323c <__libc_init_array>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	2600      	movs	r6, #0
 8003240:	4d0c      	ldr	r5, [pc, #48]	; (8003274 <__libc_init_array+0x38>)
 8003242:	4c0d      	ldr	r4, [pc, #52]	; (8003278 <__libc_init_array+0x3c>)
 8003244:	1b64      	subs	r4, r4, r5
 8003246:	10a4      	asrs	r4, r4, #2
 8003248:	42a6      	cmp	r6, r4
 800324a:	d109      	bne.n	8003260 <__libc_init_array+0x24>
 800324c:	f000 f838 	bl	80032c0 <_init>
 8003250:	2600      	movs	r6, #0
 8003252:	4d0a      	ldr	r5, [pc, #40]	; (800327c <__libc_init_array+0x40>)
 8003254:	4c0a      	ldr	r4, [pc, #40]	; (8003280 <__libc_init_array+0x44>)
 8003256:	1b64      	subs	r4, r4, r5
 8003258:	10a4      	asrs	r4, r4, #2
 800325a:	42a6      	cmp	r6, r4
 800325c:	d105      	bne.n	800326a <__libc_init_array+0x2e>
 800325e:	bd70      	pop	{r4, r5, r6, pc}
 8003260:	f855 3b04 	ldr.w	r3, [r5], #4
 8003264:	4798      	blx	r3
 8003266:	3601      	adds	r6, #1
 8003268:	e7ee      	b.n	8003248 <__libc_init_array+0xc>
 800326a:	f855 3b04 	ldr.w	r3, [r5], #4
 800326e:	4798      	blx	r3
 8003270:	3601      	adds	r6, #1
 8003272:	e7f2      	b.n	800325a <__libc_init_array+0x1e>
 8003274:	080034f4 	.word	0x080034f4
 8003278:	080034f4 	.word	0x080034f4
 800327c:	080034f4 	.word	0x080034f4
 8003280:	080034f8 	.word	0x080034f8

08003284 <memset>:
 8003284:	4603      	mov	r3, r0
 8003286:	4402      	add	r2, r0
 8003288:	4293      	cmp	r3, r2
 800328a:	d100      	bne.n	800328e <memset+0xa>
 800328c:	4770      	bx	lr
 800328e:	f803 1b01 	strb.w	r1, [r3], #1
 8003292:	e7f9      	b.n	8003288 <memset+0x4>

08003294 <strstr>:
 8003294:	780a      	ldrb	r2, [r1, #0]
 8003296:	b570      	push	{r4, r5, r6, lr}
 8003298:	b96a      	cbnz	r2, 80032b6 <strstr+0x22>
 800329a:	bd70      	pop	{r4, r5, r6, pc}
 800329c:	429a      	cmp	r2, r3
 800329e:	d109      	bne.n	80032b4 <strstr+0x20>
 80032a0:	460c      	mov	r4, r1
 80032a2:	4605      	mov	r5, r0
 80032a4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f6      	beq.n	800329a <strstr+0x6>
 80032ac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80032b0:	429e      	cmp	r6, r3
 80032b2:	d0f7      	beq.n	80032a4 <strstr+0x10>
 80032b4:	3001      	adds	r0, #1
 80032b6:	7803      	ldrb	r3, [r0, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ef      	bne.n	800329c <strstr+0x8>
 80032bc:	4618      	mov	r0, r3
 80032be:	e7ec      	b.n	800329a <strstr+0x6>

080032c0 <_init>:
 80032c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c2:	bf00      	nop
 80032c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c6:	bc08      	pop	{r3}
 80032c8:	469e      	mov	lr, r3
 80032ca:	4770      	bx	lr

080032cc <_fini>:
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	bf00      	nop
 80032d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d2:	bc08      	pop	{r3}
 80032d4:	469e      	mov	lr, r3
 80032d6:	4770      	bx	lr
